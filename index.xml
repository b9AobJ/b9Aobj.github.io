<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>X•O专业去码</title><link>https://b9aobj.github.io/</link><description>Recent content on X•O专业去码</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Fri, 22 Oct 2021 16:04:30 +0800</lastBuildDate><atom:link href="https://b9aobj.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>JsWebrtc文档</title><link>https://b9aobj.github.io/post/zh-cn/2021/jswebrtc%E6%96%87%E6%A1%A3/</link><pubDate>Fri, 22 Oct 2021 16:04:30 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/jswebrtc%E6%96%87%E6%A1%A3/</guid><description>
&lt;p>&lt;strong>JSWebrtc – 支持SRS的 Webrtc 播放器&lt;/strong>&lt;/p>
&lt;p>JSWebrtc 对浏览器的 Webrtc 做了简单的封装，支持 &lt;a href="https://github.com/ossrs/srs">SRS&lt;/a> 的 RTC 流的播放.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCPeerConnectionEventMap&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;connectionstatechange&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;datachannel&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCDataChannelEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;icecandidate&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnectionIceEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;icecandidateerror&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;iceconnectionstatechange&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;icegatheringstatechange&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;negotiationneeded&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;signalingstatechange&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Event&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="s2">&amp;#34;track&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCTrackEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cm">/** A WebRTC connection between the local computer and a remote peer. It provides methods to connect to a remote peer, maintain and monitor the connection, and close the connection once it&amp;#39;s no longer needed. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">EventTarget&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">canTrickleIceCandidates&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">connectionState&lt;/span>: &lt;span class="kt">RTCPeerConnectionState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">currentLocalDescription&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">currentRemoteDescription&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">iceConnectionState&lt;/span>: &lt;span class="kt">RTCIceConnectionState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">iceGatheringState&lt;/span>: &lt;span class="kt">RTCIceGatheringState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">localDescription&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">onconnectionstatechange&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="nx">ondatachannel&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">RTCDataChannelEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> &lt;span class="nx">onicecandidate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">RTCPeerConnectionIceEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="nx">onicecandidateerror&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="nx">oniceconnectionstatechange&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> &lt;span class="nx">onicegatheringstatechange&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl"> &lt;span class="nx">onnegotiationneeded&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl"> &lt;span class="nx">onsignalingstatechange&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">Event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> &lt;span class="nx">ontrack&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">RTCTrackEvent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">pendingLocalDescription&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">pendingRemoteDescription&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">remoteDescription&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">signalingState&lt;/span>: &lt;span class="kt">RTCSignalingState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> &lt;span class="nx">addIceCandidate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidate?&lt;/span>: &lt;span class="kt">RTCIceCandidateInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> &lt;span class="cm">/** @deprecated */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> &lt;span class="nx">addIceCandidate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">candidate&lt;/span>: &lt;span class="kt">RTCIceCandidateInit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">successCallback&lt;/span>: &lt;span class="kt">VoidFunction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">failureCallback&lt;/span>: &lt;span class="kt">RTCPeerConnectionErrorCallback&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> &lt;span class="nx">addTrack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">track&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="nx">streams&lt;/span>: &lt;span class="kt">MediaStream&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpSender&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> &lt;span class="nx">addTransceiver&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">trackOrKind&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">init?&lt;/span>: &lt;span class="kt">RTCRtpTransceiverInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpTransceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> &lt;span class="nx">close&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> &lt;span class="nx">createAnswer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options?&lt;/span>: &lt;span class="kt">RTCAnswerOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">RTCSessionDescriptionInit&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> &lt;span class="cm">/** @deprecated */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> &lt;span class="nx">createAnswer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">successCallback&lt;/span>: &lt;span class="kt">RTCSessionDescriptionCallback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">failureCallback&lt;/span>: &lt;span class="kt">RTCPeerConnectionErrorCallback&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">32&lt;/span>&lt;span class="cl"> &lt;span class="nx">createDataChannel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">label&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dataChannelDict?&lt;/span>: &lt;span class="kt">RTCDataChannelInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCDataChannel&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">33&lt;/span>&lt;span class="cl"> &lt;span class="nx">createOffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">options?&lt;/span>: &lt;span class="kt">RTCOfferOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">RTCSessionDescriptionInit&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">34&lt;/span>&lt;span class="cl"> &lt;span class="cm">/** @deprecated */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">35&lt;/span>&lt;span class="cl"> &lt;span class="nx">createOffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">successCallback&lt;/span>: &lt;span class="kt">RTCSessionDescriptionCallback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">failureCallback&lt;/span>: &lt;span class="kt">RTCPeerConnectionErrorCallback&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options?&lt;/span>: &lt;span class="kt">RTCOfferOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">36&lt;/span>&lt;span class="cl"> &lt;span class="nx">getConfiguration&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCConfiguration&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">37&lt;/span>&lt;span class="cl"> &lt;span class="nx">getReceivers&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpReceiver&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">38&lt;/span>&lt;span class="cl"> &lt;span class="nx">getSenders&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpSender&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">39&lt;/span>&lt;span class="cl"> &lt;span class="nx">getStats&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selector?&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">RTCStatsReport&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">40&lt;/span>&lt;span class="cl"> &lt;span class="nx">getTransceivers&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpTransceiver&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">41&lt;/span>&lt;span class="cl"> &lt;span class="nx">removeTrack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sender&lt;/span>: &lt;span class="kt">RTCRtpSender&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">42&lt;/span>&lt;span class="cl"> &lt;span class="nx">restartIce&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">43&lt;/span>&lt;span class="cl"> &lt;span class="nx">setConfiguration&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">configuration?&lt;/span>: &lt;span class="kt">RTCConfiguration&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">44&lt;/span>&lt;span class="cl"> &lt;span class="nx">setLocalDescription&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">description?&lt;/span>: &lt;span class="kt">RTCLocalSessionDescriptionInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">45&lt;/span>&lt;span class="cl"> &lt;span class="cm">/** @deprecated */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">46&lt;/span>&lt;span class="cl"> &lt;span class="nx">setLocalDescription&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">description&lt;/span>: &lt;span class="kt">RTCLocalSessionDescriptionInit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">successCallback&lt;/span>: &lt;span class="kt">VoidFunction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">failureCallback&lt;/span>: &lt;span class="kt">RTCPeerConnectionErrorCallback&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">47&lt;/span>&lt;span class="cl"> &lt;span class="nx">setRemoteDescription&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">description&lt;/span>: &lt;span class="kt">RTCSessionDescriptionInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">48&lt;/span>&lt;span class="cl"> &lt;span class="cm">/** @deprecated */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">49&lt;/span>&lt;span class="cl"> &lt;span class="nx">setRemoteDescription&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">description&lt;/span>: &lt;span class="kt">RTCSessionDescriptionInit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">successCallback&lt;/span>: &lt;span class="kt">VoidFunction&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">failureCallback&lt;/span>: &lt;span class="kt">RTCPeerConnectionErrorCallback&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">50&lt;/span>&lt;span class="cl"> &lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">K&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">keyof&lt;/span> &lt;span class="na">RTCPeerConnectionEventMap&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">K&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">RTCPeerConnectionEventMap&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">K&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options?&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">AddEventListenerOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">51&lt;/span>&lt;span class="cl"> &lt;span class="nx">addEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>: &lt;span class="kt">EventListenerOrEventListenerObject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options?&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">AddEventListenerOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">52&lt;/span>&lt;span class="cl"> &lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">K&lt;/span> &lt;span class="na">extends&lt;/span> &lt;span class="na">keyof&lt;/span> &lt;span class="na">RTCPeerConnectionEventMap&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">K&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ev&lt;/span>: &lt;span class="kt">RTCPeerConnectionEventMap&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">K&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options?&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">EventListenerOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">53&lt;/span>&lt;span class="cl"> &lt;span class="nx">removeEventListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">listener&lt;/span>: &lt;span class="kt">EventListenerOrEventListenerObject&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">options?&lt;/span>: &lt;span class="kt">boolean&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="nx">EventListenerOptions&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">54&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCPeerConnection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">configuration?&lt;/span>: &lt;span class="kt">RTCConfiguration&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="nx">generateCertificate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">keygenAlgorithm&lt;/span>: &lt;span class="kt">AlgorithmIdentifier&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">RTCCertificate&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCPeerConnectionIceErrorEvent&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Event&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">address&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">errorCode&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">errorText&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">port&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">url&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCPeerConnectionIceErrorEvent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCPeerConnectionIceErrorEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventInitDict&lt;/span>: &lt;span class="kt">RTCPeerConnectionIceErrorEventInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnectionIceErrorEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="cm">/** Events that occurs in relation to ICE candidates with the target, usually an RTCPeerConnection. Only one event is of this type: icecandidate. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCPeerConnectionIceEvent&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Event&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">candidate&lt;/span>: &lt;span class="kt">RTCIceCandidate&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCPeerConnectionIceEvent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCPeerConnectionIceEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventInitDict?&lt;/span>: &lt;span class="kt">RTCPeerConnectionIceEventInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnectionIceEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="cm">/** This WebRTC API interface manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpReceiver&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">track&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">transport&lt;/span>: &lt;span class="kt">RTCDtlsTransport&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="nx">getContributingSources&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpContributingSource&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="nx">getParameters&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpReceiveParameters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="nx">getStats&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">RTCStatsReport&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl"> &lt;span class="nx">getSynchronizationSources&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpSynchronizationSource&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCRtpReceiver&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCRtpReceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpReceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="nx">getCapabilities&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kind&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpCapabilities&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cm">/** Provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpSender&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">dtmf&lt;/span>: &lt;span class="kt">RTCDTMFSender&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">track&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">transport&lt;/span>: &lt;span class="kt">RTCDtlsTransport&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> &lt;span class="nx">getParameters&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpSendParameters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="nx">getStats&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">RTCStatsReport&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="nx">replaceTrack&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">withTrack&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="nx">setParameters&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">parameters&lt;/span>: &lt;span class="kt">RTCRtpSendParameters&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">Promise&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">void&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="nx">setStreams&lt;/span>&lt;span class="p">(...&lt;/span>&lt;span class="nx">streams&lt;/span>: &lt;span class="kt">MediaStream&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCRtpSender&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCRtpSender&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpSender&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="nx">getCapabilities&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">kind&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpCapabilities&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpTransceiver&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">currentDirection&lt;/span>: &lt;span class="kt">RTCRtpTransceiverDirection&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="nx">direction&lt;/span>: &lt;span class="kt">RTCRtpTransceiverDirection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">mid&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">receiver&lt;/span>: &lt;span class="kt">RTCRtpReceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">sender&lt;/span>: &lt;span class="kt">RTCRtpSender&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">7&lt;/span>&lt;span class="cl"> &lt;span class="nx">setCodecPreferences&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">codecs&lt;/span>: &lt;span class="kt">RTCRtpCodecCapability&lt;/span>&lt;span class="p">[])&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">8&lt;/span>&lt;span class="cl"> &lt;span class="nx">stop&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">9&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCRtpTransceiver&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCRtpTransceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCRtpTransceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="cm">/** One end of a connection—or potential connection—and how it&amp;#39;s configured. Each RTCSessionDescription consists of a description type indicating which part of the offer/answer negotiation process it describes and of the SDP descriptor of the session. */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCSessionDescription&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">sdp&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCSdpType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="nx">toJSON&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">any&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCSessionDescription&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCSessionDescription&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">descriptionInitDict&lt;/span>: &lt;span class="kt">RTCSessionDescriptionInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCSessionDescription&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCStatsReport&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">forEach&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">callbackfn&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">value&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">key&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">parent&lt;/span>: &lt;span class="kt">RTCStatsReport&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">=&amp;gt;&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">thisArg?&lt;/span>: &lt;span class="kt">any&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCStatsReport&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCStatsReport&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCStatsReport&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCTrackEvent&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Event&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">receiver&lt;/span>: &lt;span class="kt">RTCRtpReceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">streams&lt;/span>: &lt;span class="kt">ReadonlyArray&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">MediaStream&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">track&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> &lt;span class="kr">readonly&lt;/span> &lt;span class="nx">transceiver&lt;/span>: &lt;span class="kt">RTCRtpTransceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="kr">declare&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">RTCTrackEvent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> &lt;span class="nx">prototype&lt;/span>: &lt;span class="kt">RTCTrackEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> &lt;span class="k">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">eventInitDict&lt;/span>: &lt;span class="kt">RTCTrackEventInit&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCTrackEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-typescript" data-lang="typescript">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCAnswerOptions&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCOfferAnswerOptions&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCCertificateExpiration&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="nx">expires?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCConfiguration&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> &lt;span class="nx">bundlePolicy?&lt;/span>: &lt;span class="kt">RTCBundlePolicy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 10&lt;/span>&lt;span class="cl"> &lt;span class="nx">certificates?&lt;/span>: &lt;span class="kt">RTCCertificate&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 11&lt;/span>&lt;span class="cl"> &lt;span class="nx">iceCandidatePoolSize?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 12&lt;/span>&lt;span class="cl"> &lt;span class="nx">iceServers?&lt;/span>: &lt;span class="kt">RTCIceServer&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 13&lt;/span>&lt;span class="cl"> &lt;span class="nx">iceTransportPolicy?&lt;/span>: &lt;span class="kt">RTCIceTransportPolicy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 14&lt;/span>&lt;span class="cl"> &lt;span class="nx">rtcpMuxPolicy?&lt;/span>: &lt;span class="kt">RTCRtcpMuxPolicy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 15&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 16&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 17&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCDTMFToneChangeEventInit&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">EventInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 18&lt;/span>&lt;span class="cl"> &lt;span class="nx">tone?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 19&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 20&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 21&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCDataChannelEventInit&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">EventInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 22&lt;/span>&lt;span class="cl"> &lt;span class="nx">channel&lt;/span>: &lt;span class="kt">RTCDataChannel&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 23&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 24&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 25&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCDataChannelInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 26&lt;/span>&lt;span class="cl"> &lt;span class="nx">id?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 27&lt;/span>&lt;span class="cl"> &lt;span class="nx">maxPacketLifeTime?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 28&lt;/span>&lt;span class="cl"> &lt;span class="nx">maxRetransmits?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 29&lt;/span>&lt;span class="cl"> &lt;span class="nx">negotiated?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 30&lt;/span>&lt;span class="cl"> &lt;span class="nx">ordered?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 31&lt;/span>&lt;span class="cl"> &lt;span class="nx">protocol?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 32&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 33&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 34&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCDtlsFingerprint&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 35&lt;/span>&lt;span class="cl"> &lt;span class="nx">algorithm?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 36&lt;/span>&lt;span class="cl"> &lt;span class="nx">value?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 37&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 38&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 39&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCIceCandidateInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 40&lt;/span>&lt;span class="cl"> &lt;span class="nx">candidate?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 41&lt;/span>&lt;span class="cl"> &lt;span class="nx">sdpMLineIndex?&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 42&lt;/span>&lt;span class="cl"> &lt;span class="nx">sdpMid?&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 43&lt;/span>&lt;span class="cl"> &lt;span class="nx">usernameFragment?&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 44&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 45&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 46&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCIceCandidatePairStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 47&lt;/span>&lt;span class="cl"> &lt;span class="nx">availableIncomingBitrate?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 48&lt;/span>&lt;span class="cl"> &lt;span class="nx">availableOutgoingBitrate?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 49&lt;/span>&lt;span class="cl"> &lt;span class="nx">bytesReceived?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 50&lt;/span>&lt;span class="cl"> &lt;span class="nx">bytesSent?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 51&lt;/span>&lt;span class="cl"> &lt;span class="nx">currentRoundTripTime?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 52&lt;/span>&lt;span class="cl"> &lt;span class="nx">localCandidateId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 53&lt;/span>&lt;span class="cl"> &lt;span class="nx">nominated?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 54&lt;/span>&lt;span class="cl"> &lt;span class="nx">remoteCandidateId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 55&lt;/span>&lt;span class="cl"> &lt;span class="nx">requestsReceived?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 56&lt;/span>&lt;span class="cl"> &lt;span class="nx">requestsSent?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 57&lt;/span>&lt;span class="cl"> &lt;span class="nx">responsesReceived?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 58&lt;/span>&lt;span class="cl"> &lt;span class="nx">responsesSent?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 59&lt;/span>&lt;span class="cl"> &lt;span class="nx">state&lt;/span>: &lt;span class="kt">RTCStatsIceCandidatePairState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 60&lt;/span>&lt;span class="cl"> &lt;span class="nx">totalRoundTripTime?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 61&lt;/span>&lt;span class="cl"> &lt;span class="nx">transportId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 62&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 63&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 64&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCIceServer&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 65&lt;/span>&lt;span class="cl"> &lt;span class="nx">credential?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 66&lt;/span>&lt;span class="cl"> &lt;span class="nx">credentialType?&lt;/span>: &lt;span class="kt">RTCIceCredentialType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 67&lt;/span>&lt;span class="cl"> &lt;span class="nx">urls&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 68&lt;/span>&lt;span class="cl"> &lt;span class="nx">username?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 69&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 70&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 71&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCInboundRtpStreamStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCReceivedRtpStreamStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 72&lt;/span>&lt;span class="cl"> &lt;span class="nx">firCount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 73&lt;/span>&lt;span class="cl"> &lt;span class="nx">framesDecoded?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 74&lt;/span>&lt;span class="cl"> &lt;span class="nx">nackCount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 75&lt;/span>&lt;span class="cl"> &lt;span class="nx">pliCount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 76&lt;/span>&lt;span class="cl"> &lt;span class="nx">qpSum?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 77&lt;/span>&lt;span class="cl"> &lt;span class="nx">remoteId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 78&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 79&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 80&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCLocalSessionDescriptionInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 81&lt;/span>&lt;span class="cl"> &lt;span class="nx">sdp?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 82&lt;/span>&lt;span class="cl"> &lt;span class="kr">type&lt;/span>&lt;span class="o">?:&lt;/span> &lt;span class="nx">RTCSdpType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 83&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 84&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 85&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCOfferAnswerOptions&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 86&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 87&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 88&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCOfferOptions&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCOfferAnswerOptions&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 89&lt;/span>&lt;span class="cl"> &lt;span class="nx">iceRestart?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 90&lt;/span>&lt;span class="cl"> &lt;span class="nx">offerToReceiveAudio?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 91&lt;/span>&lt;span class="cl"> &lt;span class="nx">offerToReceiveVideo?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 92&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 93&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 94&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCOutboundRtpStreamStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCSentRtpStreamStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 95&lt;/span>&lt;span class="cl"> &lt;span class="nx">firCount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 96&lt;/span>&lt;span class="cl"> &lt;span class="nx">framesEncoded?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 97&lt;/span>&lt;span class="cl"> &lt;span class="nx">nackCount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 98&lt;/span>&lt;span class="cl"> &lt;span class="nx">pliCount?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 99&lt;/span>&lt;span class="cl"> &lt;span class="nx">qpSum?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">100&lt;/span>&lt;span class="cl"> &lt;span class="nx">remoteId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">101&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">102&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">103&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCPeerConnectionIceErrorEventInit&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">EventInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">104&lt;/span>&lt;span class="cl"> &lt;span class="nx">address?&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">105&lt;/span>&lt;span class="cl"> &lt;span class="nx">errorCode&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">106&lt;/span>&lt;span class="cl"> &lt;span class="nx">errorText?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">107&lt;/span>&lt;span class="cl"> &lt;span class="nx">port?&lt;/span>: &lt;span class="kt">number&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">108&lt;/span>&lt;span class="cl"> &lt;span class="nx">url?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">109&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">110&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">111&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCPeerConnectionIceEventInit&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">EventInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">112&lt;/span>&lt;span class="cl"> &lt;span class="nx">candidate?&lt;/span>: &lt;span class="kt">RTCIceCandidate&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">113&lt;/span>&lt;span class="cl"> &lt;span class="nx">url?&lt;/span>: &lt;span class="kt">string&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">114&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">115&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">116&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCReceivedRtpStreamStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCRtpStreamStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">117&lt;/span>&lt;span class="cl"> &lt;span class="nx">jitter?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">118&lt;/span>&lt;span class="cl"> &lt;span class="nx">packetsDiscarded?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">119&lt;/span>&lt;span class="cl"> &lt;span class="nx">packetsLost?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">120&lt;/span>&lt;span class="cl"> &lt;span class="nx">packetsReceived?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">121&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">122&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">123&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtcpParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">124&lt;/span>&lt;span class="cl"> &lt;span class="nx">cname?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">125&lt;/span>&lt;span class="cl"> &lt;span class="nx">reducedSize?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">126&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">127&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">128&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpCapabilities&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">129&lt;/span>&lt;span class="cl"> &lt;span class="nx">codecs&lt;/span>: &lt;span class="kt">RTCRtpCodecCapability&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">130&lt;/span>&lt;span class="cl"> &lt;span class="nx">headerExtensions&lt;/span>: &lt;span class="kt">RTCRtpHeaderExtensionCapability&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">131&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">132&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">133&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpCodecCapability&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">134&lt;/span>&lt;span class="cl"> &lt;span class="nx">channels?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">135&lt;/span>&lt;span class="cl"> &lt;span class="nx">clockRate&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">136&lt;/span>&lt;span class="cl"> &lt;span class="nx">mimeType&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">137&lt;/span>&lt;span class="cl"> &lt;span class="nx">sdpFmtpLine?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">138&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">139&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">140&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpCodecParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">141&lt;/span>&lt;span class="cl"> &lt;span class="nx">channels?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">142&lt;/span>&lt;span class="cl"> &lt;span class="nx">clockRate&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">143&lt;/span>&lt;span class="cl"> &lt;span class="nx">mimeType&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">144&lt;/span>&lt;span class="cl"> &lt;span class="nx">payloadType&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">145&lt;/span>&lt;span class="cl"> &lt;span class="nx">sdpFmtpLine?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">146&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">147&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">148&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpCodingParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">149&lt;/span>&lt;span class="cl"> &lt;span class="nx">rid?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">150&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">151&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">152&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpContributingSource&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">153&lt;/span>&lt;span class="cl"> &lt;span class="nx">audioLevel?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">154&lt;/span>&lt;span class="cl"> &lt;span class="nx">rtpTimestamp&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">155&lt;/span>&lt;span class="cl"> &lt;span class="nx">source&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">156&lt;/span>&lt;span class="cl"> &lt;span class="nx">timestamp&lt;/span>: &lt;span class="kt">DOMHighResTimeStamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">157&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">158&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">159&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpEncodingParameters&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCRtpCodingParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">160&lt;/span>&lt;span class="cl"> &lt;span class="nx">active?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">161&lt;/span>&lt;span class="cl"> &lt;span class="nx">maxBitrate?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">162&lt;/span>&lt;span class="cl"> &lt;span class="nx">priority?&lt;/span>: &lt;span class="kt">RTCPriorityType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">163&lt;/span>&lt;span class="cl"> &lt;span class="nx">scaleResolutionDownBy?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">164&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">165&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">166&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpHeaderExtensionCapability&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">167&lt;/span>&lt;span class="cl"> &lt;span class="nx">uri?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">168&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">169&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">170&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpHeaderExtensionParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">171&lt;/span>&lt;span class="cl"> &lt;span class="nx">encrypted?&lt;/span>: &lt;span class="kt">boolean&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">172&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">173&lt;/span>&lt;span class="cl"> &lt;span class="nx">uri&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">174&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">175&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">176&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">177&lt;/span>&lt;span class="cl"> &lt;span class="nx">codecs&lt;/span>: &lt;span class="kt">RTCRtpCodecParameters&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">178&lt;/span>&lt;span class="cl"> &lt;span class="nx">headerExtensions&lt;/span>: &lt;span class="kt">RTCRtpHeaderExtensionParameters&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">179&lt;/span>&lt;span class="cl"> &lt;span class="nx">rtcp&lt;/span>: &lt;span class="kt">RTCRtcpParameters&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">180&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">181&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">182&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpReceiveParameters&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCRtpParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">183&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">184&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">185&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpSendParameters&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCRtpParameters&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">186&lt;/span>&lt;span class="cl"> &lt;span class="nx">degradationPreference?&lt;/span>: &lt;span class="kt">RTCDegradationPreference&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">187&lt;/span>&lt;span class="cl"> &lt;span class="nx">encodings&lt;/span>: &lt;span class="kt">RTCRtpEncodingParameters&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">188&lt;/span>&lt;span class="cl"> &lt;span class="nx">transactionId&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">189&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">190&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">191&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpStreamStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">192&lt;/span>&lt;span class="cl"> &lt;span class="nx">codecId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">193&lt;/span>&lt;span class="cl"> &lt;span class="nx">kind&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">194&lt;/span>&lt;span class="cl"> &lt;span class="nx">ssrc&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">195&lt;/span>&lt;span class="cl"> &lt;span class="nx">transportId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">196&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">197&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">198&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpSynchronizationSource&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCRtpContributingSource&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">199&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">200&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">201&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCRtpTransceiverInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">202&lt;/span>&lt;span class="cl"> &lt;span class="nx">direction?&lt;/span>: &lt;span class="kt">RTCRtpTransceiverDirection&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">203&lt;/span>&lt;span class="cl"> &lt;span class="nx">sendEncodings?&lt;/span>: &lt;span class="kt">RTCRtpEncodingParameters&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">204&lt;/span>&lt;span class="cl"> &lt;span class="nx">streams?&lt;/span>: &lt;span class="kt">MediaStream&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">205&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">206&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">207&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCSentRtpStreamStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCRtpStreamStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">208&lt;/span>&lt;span class="cl"> &lt;span class="nx">bytesSent?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">209&lt;/span>&lt;span class="cl"> &lt;span class="nx">packetsSent?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">210&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">211&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">212&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCSessionDescriptionInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">213&lt;/span>&lt;span class="cl"> &lt;span class="nx">sdp?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">214&lt;/span>&lt;span class="cl"> &lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCSdpType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">215&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">216&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">217&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">218&lt;/span>&lt;span class="cl"> &lt;span class="nx">id&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">219&lt;/span>&lt;span class="cl"> &lt;span class="nx">timestamp&lt;/span>: &lt;span class="kt">DOMHighResTimeStamp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">220&lt;/span>&lt;span class="cl"> &lt;span class="kr">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCStatsType&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">221&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">222&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">223&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCTrackEventInit&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">EventInit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">224&lt;/span>&lt;span class="cl"> &lt;span class="nx">receiver&lt;/span>: &lt;span class="kt">RTCRtpReceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">225&lt;/span>&lt;span class="cl"> &lt;span class="nx">streams?&lt;/span>: &lt;span class="kt">MediaStream&lt;/span>&lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">226&lt;/span>&lt;span class="cl"> &lt;span class="nx">track&lt;/span>: &lt;span class="kt">MediaStreamTrack&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">227&lt;/span>&lt;span class="cl"> &lt;span class="nx">transceiver&lt;/span>: &lt;span class="kt">RTCRtpTransceiver&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">228&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">229&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">230&lt;/span>&lt;span class="cl">&lt;span class="kr">interface&lt;/span> &lt;span class="nx">RTCTransportStats&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">RTCStats&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">231&lt;/span>&lt;span class="cl"> &lt;span class="nx">bytesReceived?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">232&lt;/span>&lt;span class="cl"> &lt;span class="nx">bytesSent?&lt;/span>: &lt;span class="kt">number&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">233&lt;/span>&lt;span class="cl"> &lt;span class="nx">dtlsCipher?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">234&lt;/span>&lt;span class="cl"> &lt;span class="nx">dtlsState&lt;/span>: &lt;span class="kt">RTCDtlsTransportState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">235&lt;/span>&lt;span class="cl"> &lt;span class="nx">localCertificateId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">236&lt;/span>&lt;span class="cl"> &lt;span class="nx">remoteCertificateId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">237&lt;/span>&lt;span class="cl"> &lt;span class="nx">rtcpTransportStatsId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">238&lt;/span>&lt;span class="cl"> &lt;span class="nx">selectedCandidatePairId?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">239&lt;/span>&lt;span class="cl"> &lt;span class="nx">srtpCipher?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">240&lt;/span>&lt;span class="cl"> &lt;span class="nx">tlsVersion?&lt;/span>: &lt;span class="kt">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">241&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">242&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">243&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">244&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCBundlePolicy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;balanced&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;max-bundle&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;max-compat&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">245&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCDataChannelState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;closing&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connecting&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;open&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">246&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCDegradationPreference&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;balanced&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;maintain-framerate&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;maintain-resolution&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">247&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCDtlsTransportState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connecting&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">248&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceCandidateType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;host&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;prflx&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;relay&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;srflx&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">249&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceComponent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;rtcp&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;rtp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">250&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceConnectionState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;checking&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;completed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;disconnected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">251&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceCredentialType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">252&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceGathererState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;complete&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;gathering&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">253&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceGatheringState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;complete&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;gathering&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">254&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceProtocol&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;tcp&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;udp&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">255&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceTcpCandidateType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;active&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;passive&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;so&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">256&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceTransportPolicy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;all&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;relay&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">257&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCIceTransportState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;checking&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;completed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;disconnected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">258&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCPeerConnectionState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;connecting&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;disconnected&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;new&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">259&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCPriorityType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;high&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;low&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;medium&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;very-low&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">260&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCRtcpMuxPolicy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;require&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">261&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCRtpTransceiverDirection&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;inactive&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;recvonly&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;sendonly&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;sendrecv&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;stopped&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">262&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCSdpType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;answer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;offer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;pranswer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;rollback&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">263&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCSignalingState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;closed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;have-local-offer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;have-local-pranswer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;have-remote-offer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;have-remote-pranswer&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;stable&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">264&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCStatsIceCandidatePairState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;failed&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;frozen&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;in-progress&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;inprogress&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;succeeded&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;waiting&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">265&lt;/span>&lt;span class="cl">&lt;span class="kr">type&lt;/span> &lt;span class="nx">RTCStatsType&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;candidate-pair&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;certificate&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;codec&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;csrc&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;data-channel&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;inbound-rtp&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;local-candidate&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;media-source&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;outbound-rtp&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;peer-connection&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;remote-candidate&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;remote-inbound-rtp&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;remote-outbound-rtp&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;track&amp;#34;&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="s2">&amp;#34;transport&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">266&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">267&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">268&lt;/span>&lt;span class="cl"> &lt;span class="nx">createEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">eventInterface&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;RTCDTMFToneChangeEvent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCDTMFToneChangeEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">269&lt;/span>&lt;span class="cl"> &lt;span class="nx">createEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">eventInterface&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;RTCDataChannelEvent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCDataChannelEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">270&lt;/span>&lt;span class="cl"> &lt;span class="nx">createEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">eventInterface&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;RTCPeerConnectionIceErrorEvent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnectionIceErrorEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">271&lt;/span>&lt;span class="cl"> &lt;span class="nx">createEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">eventInterface&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;RTCPeerConnectionIceEvent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCPeerConnectionIceEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">272&lt;/span>&lt;span class="cl"> &lt;span class="nx">createEvent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">eventInterface&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;RTCTrackEvent&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">RTCTrackEvent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>我想在gitlab用CI/CD部署</title><link>https://b9aobj.github.io/post/zh-cn/2021/%E6%88%91%E6%83%B3%E5%9C%A8gitlabe%E7%94%A8cicd%E9%83%A8%E7%BD%B2/</link><pubDate>Thu, 13 May 2021 17:23:19 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/%E6%88%91%E6%83%B3%E5%9C%A8gitlabe%E7%94%A8cicd%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h3 id="持续集成">持续集成&lt;/h3>
&lt;p>持续整合（英语：Continuous integration，缩写CI），又译为持续集成，是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。该名称最早由[1]葛来迪·布区（Grady Booch）在他的布区方法[2]中提出，在测试驱动开发（TDD）的作法中，通常还会搭配自动单元测试。持续集成的提出主要是为解决软件进行系统集成时面临的各项问题，极限编程称这些问题为集成地狱（integration hell）。&lt;/p>
&lt;h3 id="持续交付">持续交付&lt;/h3>
&lt;p>持续交付（英语：Continuous delivery，缩写为 CD），是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以释出的状况。它的目标在于让软件的建置、测试与释出变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。&lt;/p>
&lt;h3 id="持续部署">持续部署&lt;/h3>
&lt;p>持续部署（英语：Continuous deployment，缩写为CD），是一种软件工程方法，意指在软件开发流程中，以自动化方式，频繁而且持续性的，将软件部署到生产环境（production environment）中，使软件产品能够快速的发展[1][2][3]。&lt;/p>
&lt;p>持续部署可以整合到持续整合与持续交付（Continuous delivery）的流程之中。&lt;/p>
&lt;h3 id="cicd">CI/CD&lt;/h3>
&lt;p>在软件工程中，CI/CD或CICD通常指的是持续集成和持续交付或持续部署的组合实践。CI/CD通过在应用程序的构建、测试和部署中实施自动化，在开发和运营团队之间架起了桥梁。&lt;/p>
&lt;p>现代DevOps实践涉及软件应用程序在整个开发生命周期内的持续开发、持续测试、持续集成、持续部署和持续监控。CI/CD实践或CI/CD管道（CI/CD pipeline）构成了现代DevOps业务的主干。&lt;/p>
&lt;h3 id="缘由">缘由&lt;/h3>
&lt;p>公司运维系统每次发布系统都需要经过一轮打包——编译——发至跳板机（期间需要输入动态码）——然后登陆跳板机（需要输入动态码））——从跳板机将压缩包发至web主机——再登陆web主机再解压缩新包并重启。
一轮下来，费时费力不说，命令行忘记，手打输入错误等情况，还是会经常出现的。可能大家会觉得这么简单的事还说难，但是，事情有时候不是说只做这一件，事情也不是天天都做，还有就是，同事的加入或离开，都需要重新弄这一套流程。跳板机需要配置申请，各方面需要重新指导，其实很费时间。&lt;/p>
&lt;p>本次的接入，也是由控制台那块流程已经接入至cicd，所以也就是有前车了，不怕，有问题问大佬，这么说都写了一套了。&lt;/p>
&lt;h3 id="过程">过程&lt;/h3>
&lt;p>目前只做一个管道（pipeline）操作，里面主要实现的工作就是上面我们手动要做的那些事。我们把整个空间就是个docker空间
所以第一件事就是，先安装依赖再进行编译。没啥问题！&lt;/p>
&lt;p>.gitlab-ci.yml&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">image: node:13.11.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">stages:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> - build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"># 构建
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> stage: build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> - echo &amp;#39;---------- build ------------&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> - npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> - npm run build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> tags:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> - 此处填入自己的tags
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译完之后就是打包发至服务器了，此处直接去跳板机处生成自己的ssh private key并保存只仓库中的CI/CD的变量&lt;code>SSH_PRIVATE_KEY_133&lt;/code>当中，
并将web主机加入known_hosts里面。
&lt;img src="https://b9aobj.github.io/images/2021/WechatIMG4.png" alt="01">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">before_script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"> #- apt-get -y install openssh-client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"> - &amp;#39;which ssh-agent || ( apt-get update -y &amp;amp;&amp;amp; apt-get install openssh-client -y )&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> - eval $(ssh-agent -s)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> - echo &amp;#34;$SSH_PRIVATE_KEY_133&amp;#34; | tr -d &amp;#39;\r&amp;#39; | ssh-add - &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl"> - mkdir -p ~/.ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> - chmod 700 ~/.ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> - echo &amp;#34;$SSH_KNOWN_HOSTS&amp;#34; &amp;gt; ~/.ssh/known_hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> - &amp;#39;[[ -f /.dockerenv ]] &amp;amp;&amp;amp; echo -e &amp;#34;Host *\n\tStrictHostKeyChecking no\n\n&amp;#34; &amp;gt; ~/.ssh/config&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> - chmod 644 ~/.ssh/known_hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将key加入至此后，尝试发至web主机。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> - TZ=&amp;#39;Asia/Shanghai&amp;#39;; export TZ; export VERSION=`date +%Y%m%d%H%M%S`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl"> - export Y_VERSION=`date +%Y`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl"> - echo $VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl"> - tar zcvf dist-$VERSION.tar.gz dist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">6&lt;/span>&lt;span class="cl"> - scp dist-$VERSION.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH-pre/tars/$Y_VERSION
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如图可见，是发送成功了
&lt;img src="https://b9aobj.github.io/images/2021/WX20210521-152830@2x.png" alt="02">&lt;/p>
&lt;p>那现在就简单了，ssh登陆。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">- ssh $DEPLOY_USER@$DEPLOY_HOST &amp;#34;cd &amp;#39;$DEPLOY_PATH&amp;#39;-pre &amp;amp;&amp;amp; tar -zxvf tars/&amp;#39;$Y_VERSION&amp;#39;/dist-&amp;#39;$VERSION&amp;#39;.tar.gz &amp;amp;&amp;amp; pm2 restart 14&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="后续">后续&lt;/h3>
&lt;p>目前这个已经可运行并且开始使用。效果大概是5分钟左右可以发布完所有流程，本来是希望通过引入cache机制去跳过npm install的步骤，但目前公司提供的机器无法提供cache缓存。而且加入cache配置后，管道运行时间竟然超过12分钟。。。
&lt;img src="https://b9aobj.github.io/images/2021/1.png" alt="03">
&lt;img src="https://b9aobj.github.io/images/2021/2.png" alt="04">&lt;/p>
&lt;h3 id="下个版本">下个版本&lt;/h3>
&lt;p>这个只是一个管道，没有全部分离出来。以后可以进行分解加强。
1）加eslint校验
2）css校验
3）编译独立
4）发布流程独立并且正式环境需手动发布&lt;/p>
&lt;p>目前主要源码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl"># This file is a template, and might need editing before it works on your project.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl"># Official framework image. Look for the different tagged releases at:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl"># https://hub.docker.com/r/library/node/tags/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">image: node:13.11.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">before_script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> #- apt-get -y install openssh-client
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> - &amp;#39;which ssh-agent || ( apt-get update -y &amp;amp;&amp;amp; apt-get install openssh-client -y )&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl"> - eval $(ssh-agent -s)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> - echo &amp;#34;$SSH_PRIVATE_KEY_133&amp;#34; | tr -d &amp;#39;\r&amp;#39; | ssh-add - &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> - mkdir -p ~/.ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl"> - chmod 700 ~/.ssh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> - echo &amp;#34;$SSH_KNOWN_HOSTS&amp;#34; &amp;gt; ~/.ssh/known_hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> - &amp;#39;[[ -f /.dockerenv ]] &amp;amp;&amp;amp; echo -e &amp;#34;Host *\n\tStrictHostKeyChecking no\n\n&amp;#34; &amp;gt; ~/.ssh/config&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl"> - chmod 644 ~/.ssh/known_hosts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">stages:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl"> - build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl"># 构建
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">pre-auto-deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl"> stage: build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl"> only:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">24&lt;/span>&lt;span class="cl"> refs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">25&lt;/span>&lt;span class="cl"> - pre-release
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">26&lt;/span>&lt;span class="cl"> - feature/test_CI
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">27&lt;/span>&lt;span class="cl"> script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">28&lt;/span>&lt;span class="cl"> - cd $CI_PROJECT_DIR &amp;amp;&amp;amp; pwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">29&lt;/span>&lt;span class="cl"> - &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">30&lt;/span>&lt;span class="cl"> if [ ! -d &amp;#34;./node_modules&amp;#34; ] || [ ! &amp;#34;$(ls -A &amp;#39;./node_modules&amp;#39;)&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">31&lt;/span>&lt;span class="cl"> echo &amp;#39;---------- install ------------&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">32&lt;/span>&lt;span class="cl"> npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">33&lt;/span>&lt;span class="cl"> if [ $? -ne 0 ]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">34&lt;/span>&lt;span class="cl"> echo &amp;#34;npm_install error&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">35&lt;/span>&lt;span class="cl"> exit 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">36&lt;/span>&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">37&lt;/span>&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">38&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">39&lt;/span>&lt;span class="cl"> - echo &amp;#39;---------- build ------------&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">40&lt;/span>&lt;span class="cl"> - npm run build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">41&lt;/span>&lt;span class="cl"> - TZ=&amp;#39;Asia/Shanghai&amp;#39;; export TZ; export VERSION=`date +%Y%m%d%H%M%S`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">42&lt;/span>&lt;span class="cl"> - export Y_VERSION=`date +%Y`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">43&lt;/span>&lt;span class="cl"> - echo $VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">44&lt;/span>&lt;span class="cl"> - tar zcvf dist-$VERSION.tar.gz dist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">45&lt;/span>&lt;span class="cl"> - scp dist-$VERSION.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH-pre/tars/$Y_VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">46&lt;/span>&lt;span class="cl"> - ssh $DEPLOY_USER@$DEPLOY_HOST &amp;#34;cd &amp;#39;$DEPLOY_PATH&amp;#39;-pre &amp;amp;&amp;amp; tar -zxvf tars/&amp;#39;$Y_VERSION&amp;#39;/dist-&amp;#39;$VERSION&amp;#39;.tar.gz &amp;amp;&amp;amp; pm2 restart 14&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">47&lt;/span>&lt;span class="cl"> #cache:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">48&lt;/span>&lt;span class="cl"> # key: ${CI_COMMIT_REF_SLUG}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">49&lt;/span>&lt;span class="cl"> # paths:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">50&lt;/span>&lt;span class="cl"> # - node_modules/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">51&lt;/span>&lt;span class="cl"> tags:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">52&lt;/span>&lt;span class="cl"> - 一个tags
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">53&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">54&lt;/span>&lt;span class="cl">prod-auto-deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">55&lt;/span>&lt;span class="cl"> stage: build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">56&lt;/span>&lt;span class="cl"> only:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">57&lt;/span>&lt;span class="cl"> refs:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">58&lt;/span>&lt;span class="cl"> - develop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">59&lt;/span>&lt;span class="cl"> - feature/test_CI_D
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">60&lt;/span>&lt;span class="cl"> script:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">61&lt;/span>&lt;span class="cl"> - cd $CI_PROJECT_DIR &amp;amp;&amp;amp; pwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">62&lt;/span>&lt;span class="cl"> - &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">63&lt;/span>&lt;span class="cl"> if [ ! -d &amp;#34;./node_modules&amp;#34; ] || [ ! &amp;#34;$(ls -A &amp;#39;./node_modules&amp;#39;)&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">64&lt;/span>&lt;span class="cl"> echo &amp;#39;---------- install ------------&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">65&lt;/span>&lt;span class="cl"> npm install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">66&lt;/span>&lt;span class="cl"> if [ $? -ne 0 ]; then
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">67&lt;/span>&lt;span class="cl"> echo &amp;#34;npm_install error&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">68&lt;/span>&lt;span class="cl"> exit 1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">69&lt;/span>&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">70&lt;/span>&lt;span class="cl"> fi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">71&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">72&lt;/span>&lt;span class="cl"> - echo &amp;#39;---------- build ------------&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">73&lt;/span>&lt;span class="cl"> - npm run build
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">74&lt;/span>&lt;span class="cl"> - TZ=&amp;#39;Asia/Shanghai&amp;#39;; export TZ; export VERSION=`date +%Y%m%d%H%M%S`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">75&lt;/span>&lt;span class="cl"> - export Y_VERSION=`date +%Y`
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">76&lt;/span>&lt;span class="cl"> - echo $VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">77&lt;/span>&lt;span class="cl"> - tar zcvf dist-$VERSION.tar.gz dist
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">78&lt;/span>&lt;span class="cl"> - scp dist-$VERSION.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/tars/$Y_VERSION
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">79&lt;/span>&lt;span class="cl"> - ssh $DEPLOY_USER@$DEPLOY_HOST &amp;#34;cd &amp;#39;$DEPLOY_PATH&amp;#39; &amp;amp;&amp;amp; tar -zxvf tars/&amp;#39;$Y_VERSION&amp;#39;/dist-&amp;#39;$VERSION&amp;#39;.tar.gz &amp;amp;&amp;amp; pm2 restart 8&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">80&lt;/span>&lt;span class="cl"> #cache:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">81&lt;/span>&lt;span class="cl"> # key:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">82&lt;/span>&lt;span class="cl"> # files:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">83&lt;/span>&lt;span class="cl"> # - package-lock.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">84&lt;/span>&lt;span class="cl"> # - package.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">85&lt;/span>&lt;span class="cl"> # prefix: $CI_PROJECT_NAME-$CI_JOB_NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">86&lt;/span>&lt;span class="cl"> # paths:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">87&lt;/span>&lt;span class="cl"> # - node_modules/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">88&lt;/span>&lt;span class="cl"> tags:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">89&lt;/span>&lt;span class="cl"> - 一个tags
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CI的编写可以再gitlab页面上进行CI lint检查
&lt;img src="https://b9aobj.github.io/images/2021/3.png" alt="04">&lt;/p>
&lt;h2 id="ref">REF&lt;/h2>
&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/">https://docs.gitlab.com/ee/ci/&lt;/a>&lt;br>
&lt;a href="https://twblog.hongjianching.com/2020/05/09/GitLab-CI-CD-use-cache-and-artifacts/">https://twblog.hongjianching.com/2020/05/09/GitLab-CI-CD-use-cache-and-artifacts/&lt;/a>&lt;br>
&lt;a href="https://www.jianshu.com/p/b835a4d5bb4e">https://www.jianshu.com/p/b835a4d5bb4e&lt;/a>&lt;br>
&lt;a href="https://docs.gitlab.com/ee/ci/caching/">https://docs.gitlab.com/ee/ci/caching/&lt;/a>&lt;br>
&lt;a href="https://docs.gitlab.com/ee/ci/variables/README.html">https://docs.gitlab.com/ee/ci/variables/README.html&lt;/a>&lt;/p></description></item><item><title>FFmpeg文档</title><link>https://b9aobj.github.io/post/zh-cn/2020/ffmpeg%E6%96%87%E6%A1%A3/</link><pubDate>Wed, 12 May 2021 20:37:14 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2020/ffmpeg%E6%96%87%E6%A1%A3/</guid><description>
&lt;p>&lt;strong>目录&lt;/strong>&lt;/p>
&lt;p>&lt;a href="#_Toc32313">第一章 多媒体概念介绍 6&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17137">1.1视频格式 6&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc12689">1.1.1常见格式 6&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc2251">1.2音频格式 9&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc19841">1.2.1常见格式 9&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17696">1.2.2比较 15&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24108">1.3字幕格式 15&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24511">1.3.1外挂字幕与内嵌字幕的阐述 15&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20370">1.3.2外挂字幕视频与内嵌字幕视频的画面比较 15&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc21096">1.3.3外挂字幕的三种格式 15&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc811">1.4采集录制和播放渲染 16&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc29826">1.4.1视频采集 16&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc18251">1.4.2视频录制 17&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc1398">1.4.3视频渲染 17&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26258">1.5编解码器 18&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc29396">1.6容器和协议 19&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc30715">1.6.1容器格式和编码格式 19&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc175">1.6.2协议 26&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc7240">1.6.2.1 视频协议 26&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28117">1.6.2.2 音频协议. 26&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc31701">1.6.2.3 上层通讯协议 27&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15054">1.7常用概念介绍 27&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc12325">1.7.1硬解 27&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc12743">1.7.2 IBP帧 28&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24222">1.7.3 DTS和PTS 31&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc32463">1.7.4 分辨率 31&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc13900">1.7.5 码率 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc25366">1.7.6 帧率 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20649">1.7.7 RGB和YUV 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8973">1.7.8 实时和非实时 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc13755">1.7.9 复合视频和s-video 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc3733">1.7.10 硬件加速 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc1541">1.7.11 FFmpeg Device 32&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15271">第二章 FFmpeg框架 34&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8480">2.1 FFmpeg概述 34&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc3851">2.1.1简介 34&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc5621">2.1.2功能 34&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc19495">2.1.3模块组成 35&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20974">2.1.4命令集 35&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc27630">2.2 媒体播放器三大底层框架 37&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28320">第三章 编译及简单应用 41&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15462">3.1 FFmpeg库编译和入门介绍 41 41&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc14769">3.2 流媒体数据流程讲解 49&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc5486">3.3 简单应用 51&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc12554">3.4 SDL（ Simple Direct Layer） 55&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc5290">3.4.1 SDL显示视频 55&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15775">3.4.2 SDL显示音频 55&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8630">3.5 ffmpeg程序的使用（ffmpeg.exe，ffplay.exe，ffprobe.exe） 56&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc2371">3.5.1 ffmpeg.exe 56&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17682">3.5.2 ffplay.exe 56&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28783">3.5.3 ffprobe.exe 56&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28526">第四章 数据结构 57&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22239">4.1 AVCodec结构体 59&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc31796">4.2 AVCodecContext结构体 59&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc7790">4.3 AVInputFormat结构体 60&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20868">4.4 AVFormatContext结构体 61&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc14757">4.5 MovContext结构体 62&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20740">4.6 URLProtocol结构体 62&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24527">4.7 URLContext结构体 63&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10284">4.8 AVIOContext结构体(老版本为：ByteIOContext) 63&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22156">4.9 AVStream结构体 64&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17400">4.10 MOVStreamContext 结构体 65&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc9538">4.11 AVPacket 结构体 66&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc2853">4.12 AVPacketList 结构体 67&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26851">4.13 AVFrame结构体 67&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc23401">第五章 重要模块 76&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc29385">5.1 libavutil公共模块 76&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26942">1 文件列表 76&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc29647">2 common.h 文件 76&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24381">3 bswap.h 文件 78&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15559">4 rational.h 文件 79&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc16666">5 mathematics.h 文件 80&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10234">6 avutil.h 文件 80&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc30659">5.2 libavcodec编解码模块 82&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc7002">1 文件列表 82&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22320">2 avcodec.h 文件 82&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20874">3 allcodec.c 文件 87&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc13278">4 dsputil.h 文件 87&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc18411">5 dsputil.c 文件 88&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc3349">6 utils_codec.c 文件 88&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc25168">7 imgconvert_template.h 文件 99&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc14950">8 imgconvert.c 文件 121&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc6404">9 msrle.c 文件 164&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15870">10 turespeech_data.h 文件 171&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc27714">11 turespeech.c 文件 174&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10955">5.3 libavformat容器模块 184&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28769">1 文件列表 184&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17537">2 avformat.h 文件 184&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8236">3 allformat.c 文件 190&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28923">4 cutils.c 文件 190&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc20297">5 file.c 文件 192&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc3483">6 avio.h 文件 194&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc9378">7 avio.c 文件 196&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc4230">8 aviobuf.c 文件 200&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc1311">9 utils_format.c 文件 209&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc23799">10 avidec.c 文件 220&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22841">5.4 libswscale视频色彩空间转换 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc11008">5.5 libswresample音频重采样 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc11316">5.6 libavfilter音视频滤器 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc9837">5.7 libavdevice设备输入和输出容器 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc23031">5.8 libpostproc视频后期处理 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17832">第六章 播放器 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26847">6.1 视频播放器 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8394">6.1.1 ffmpeg库的配置 243&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22279">6.1.2 一个简单的视频播放器 244&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc4678">6.2 音频播放器 247&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc7888">6.3 一个完整的播放器--ffplay 253&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc30159">6.3.1 ffplay流程图 253&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc5297">6.3.2 ffplay源码剖析 254&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc16218">第七章 应用开发 275&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc4257">7.1 ffmpeg库的使用：编码 275&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc13180">第八章 关键函数介绍 280&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10122">8.1 avformat_open_input 280&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc4978">8.2 avcodec_register_all() 281&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc7598">8.3 av_read_frame() 283&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc25230">8.4 avcodec_decode_video2() 283&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc16616">8.5 transcode_init() 283&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22492">8.6 transcode() 294&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc4647">第九章 ffmpeg相关工程 301&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26182">9.1 ffdshow 301&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8089">ffdshow 源代码分析1 ： 整体结构 302&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22141">ffdshow 源代码分析 2： 位图覆盖滤镜（对话框部分Dialog） 304&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15715">ffdshow 源代码分析 3： 位图覆盖滤镜（设置部分Settings） 312&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc2412">ffdshow 源代码分析 4： 位图覆盖滤镜（滤镜部分Filter） 317&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc30933">ffdshow 源代码分析 5： 位图覆盖滤镜（总结） 322&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28417">ffdshow 源代码分析 6： 对解码器的dll的封装（libavcodec） 322&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc17015">ffdshow 源代码分析 8： 视频解码器类（TvideoCodecDec） 344&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc23700">ffdshow 源代码分析 9： 编解码器有关类的总结 352&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28016">9.2 LAV filters 357&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc1845">LAV Filter 源代码分析 1： 总体结构 357&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22280">LAV Filter 源代码分析 2： LAV Splitter 358&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc18848">LAV Filter 源代码分析 3： LAV Video （1） 382&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24404">LAV Filter 源代码分析 4： LAV Video （2） 400&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc23216">9.3 MPlayer 427&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc25693">9.3.1 Mplayer支持的格式 427&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc134">9.3.2 Mplayer 中头文件的功能分析 427&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc15151">9.3.3 MPlayer.main 主流程简要说明 428&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc28089">9.3.4 Mplayer源码分析 429&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc16056">第十章 开发实例 436&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc8531">第十一章 mp4文件封装协议分析 436&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc2665">11.1 概述 436&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10085">11.2 mp4的物理结构 436&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26343">11.3 数据的组织结构 437&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc18288">11.4 mp4的时间结构 437&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc24921">11.5 文件结构分析 438&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22272">11.5.1 File Type Box（ftyp） 438&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc2582">11.5.2 Movie Box（moov） 438&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc23076">第十二章 flv 文件格式分析 457&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc32184">12.1 概述 457&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10414">12.2 文件总体结构 457&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc13287">12.3 文件结构分析 458&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc18011">12.3.1 flv文件头的结构 458&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc10582">12.3.2 body主体结构 459&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc19794">附录A：常见问题 465&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc26309">1 ffmpeg 从内存中读取数据 465&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc1446">2 MFC中使用SDL播放音频没有声音的解决方法 465&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc13579">附录B：经典代码示例 466&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc22959">附录c：ffmpeg参数中文详细解释 477&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc3701">附录D：ffplay的快捷键以及选项 479&lt;/a>&lt;/p>
&lt;p>&lt;a href="#_Toc5762">附录E： ffmpeg处理rtmp流媒体 481&lt;/a>&lt;/p>
&lt;h1 id="第一章-多媒体概念介绍">&lt;strong>第一章 多媒体概念介绍&lt;/strong>&lt;/h1>
&lt;h2 id="11视频格式">&lt;strong>1.1视频格式&lt;/strong>&lt;/h2>
&lt;p>视频格式可以分为适合本地播放的本地影像视频和适合在网络中播放的网络流媒体影像视频两大类。尽管后者在播放的稳定性和播放画面质量上可能没有前者优秀，但网络流媒体影像视频的广泛传播性使之正被广泛应用于视频点播、网络演示、远程教育、网络视频广告等等互联网信息服务领域。&lt;/p>
&lt;p>注：原始的视频数据可以理解为通过摄像头等驱动获取的没有经过编码的数据，市面上usb摄像头输出格式常见的有：RGB24、YUV2、YV2（这些都是没有编码的原始数据），MJPEG（经过编码的数据）。摄像头捕捉的数据也是可以设置的，比如windows下用cap来设置。&lt;/p>
&lt;h3 id="111常见格式">&lt;strong>1.1.1常见格式&lt;/strong>&lt;/h3>
&lt;p>&lt;a href="http://baike.baidu.com/view/7689.htm">**MPEG&lt;/a>&lt;strong>/&lt;a href="http://baike.baidu.com/view/7711.htm">MPG&lt;/a>/&lt;a href="http://baike.baidu.com/view/387002.htm">DAT**&lt;/a>&lt;/strong>&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7689.htm">MPEG&lt;/a>（运动图像专家组）是Motion Picture Experts Group 的缩写。这类格式包括了&lt;a href="http://baike.baidu.com/view/7739.htm">MPEG-1&lt;/a>,&lt;a href="http://baike.baidu.com/view/7747.htm">MPEG-2&lt;/a>和&lt;a href="http://baike.baidu.com/view/7754.htm">MPEG-4&lt;/a>在内的多种视频格式。MPEG-1相信是大家接触得最多的了，因为其正在被广泛地应用在VCD 的制作和一些视频片段下载的网络应用上面，大部分的&lt;a href="http://baike.baidu.com/view/7313.htm">VCD&lt;/a>都是用MPEG1 格式压缩的( 刻录软件自动将MPEG1转换为DAT格式 ) ，使用MPEG-1 的压缩算法，可以把一部120 分钟长的电影压缩到1.2 GB 左右大小。MPEG-2 则是应用在DVD 的制作，同时在一些&lt;a href="http://baike.baidu.com/view/8295.htm">HDTV&lt;/a>（高清晰电视广播）和一些高要求&lt;a href="http://baike.baidu.com/view/2795688.htm">视频编辑&lt;/a>、处理上面也有相当多的应用。使用MPEG-2 的压缩算法压缩一部120 分钟长的电影可以压缩到5-8 GB 的大小（MPEG2的图像质量是MPEG-1 无法比拟的）。MPEG系列标准已成为国际上影响最大的&lt;a href="http://baike.baidu.com/view/3323.htm">多媒体&lt;/a>&lt;a href="http://baike.baidu.com/view/9164.htm">技术标准&lt;/a>，其中MPEG-1和MPEG-2是采用相同原理为基础的&lt;a href="http://baike.baidu.com/view/1051749.htm">预测编码&lt;/a>、变换编码、&lt;a href="http://baike.baidu.com/view/182718.htm">熵编码&lt;/a>及运动补偿等第一代数据压缩编码技术；MPEG-4（ISO/IEC 14496）则是基于第二代压缩编码技术制定的国际标准，它以视听媒体对象为&lt;a href="http://baike.baidu.com/view/693012.htm">基本单元&lt;/a>，采用基于内容的压缩编码，以实现数字视音频、图形合成应用及交互式多媒体的集成。MPEG系列标准对VCD、DVD等视听消费电子及数字电视和&lt;a href="http://baike.baidu.com/view/70858.htm">高清晰度电视&lt;/a>（DTV&amp;amp;&amp;amp;HDTV）、&lt;a href="http://baike.baidu.com/view/3323.htm">多媒体&lt;/a>通信等信息产业的发展产生了巨大而深远的影响。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.001.jpeg" alt="视频格式" title="cc11728b4710b912cd01005cc3fdfc039345224b">&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7697.htm">&lt;strong>AVI&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7697.htm">AVI&lt;/a>，音频视频交错(Audio Video Interleaved)的英文缩写。AVI这个由&lt;a href="http://baike.baidu.com/view/39784.htm">微软公司&lt;/a>发表的视频格式，在视频领域可以说是最悠久的格式之一。AVI格式调用方便、图像质量好，压缩标准可任意选择，是应用最广泛、也是应用时间最长的格式之一。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7723.htm">MOV&lt;/a>&lt;/p>
&lt;p>使用过&lt;a href="http://baike.baidu.com/view/32702.htm">Mac&lt;/a>机的朋友应该多少接触过&lt;a href="http://baike.baidu.com/view/196819.htm">QuickTime&lt;/a>。QuickTime原本是&lt;a href="http://baike.baidu.com/view/14874.htm">Apple&lt;/a>公司用于Mac&lt;a href="http://baike.baidu.com/view/3314.htm">计算机&lt;/a>上的一种图像&lt;a href="http://baike.baidu.com/view/2792642.htm">视频处理&lt;/a>软件。Quick-Time提供了两种标准图像和&lt;a href="http://baike.baidu.com/view/257435.htm">数字视频&lt;/a>格式, 即可以支持静态的*.PIC和*.JPG图像格式，动态的基于Indeo压缩法的*.MOV和基于MPEG压缩法的*.MPG视频格式。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7704.htm">&lt;strong>ASF&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7704.htm">ASF&lt;/a>(Advanced Streaming format高级流格式)。ASF 是MICROSOFT 为了和的Real player 竞争而发展出来的一种可以直接在网上观看视频节目的文件&lt;a href="http://baike.baidu.com/view/2954654.htm">压缩格式&lt;/a>。ASF使用了MPEG4 的压缩算法，压缩率和图像的质量都很不错。因为ASF 是以一个可以在网上即时观赏的视频“流”格式存在的，所以它的图像质量比VCD 差一点点并不出奇，但比同是视频“流”格式的RAM 格式要好。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/66019.htm">&lt;strong>WMV&lt;/strong>&lt;/a>&lt;/p>
&lt;p>一种独立于编码方式的在Internet上实时传播&lt;a href="http://baike.baidu.com/view/3323.htm">多媒体&lt;/a>的&lt;a href="http://baike.baidu.com/view/9164.htm">技术标准&lt;/a>，&lt;a href="http://baike.baidu.com/view/2422.htm">Microsoft&lt;/a>公司希望用其取代&lt;a href="http://baike.baidu.com/view/196819.htm">QuickTime&lt;/a>之类的技术标准以及WAV、AVI之类的文件扩展名。&lt;a href="http://baike.baidu.com/view/66019.htm">WMV&lt;/a>的主要优点在于：可扩充的媒体类型、本地或网络回放、可伸缩的媒体类型、流的优先级化、多语言支持、扩展性等。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/45888.htm">&lt;strong>NAVI&lt;/strong>&lt;/a>&lt;/p>
&lt;p>如果发现原来的播放软件突然打不开此类格式的AVI文件，那你就要考虑是不是碰到了n AVI。n AVI是New AVI 的缩写，是一个名为Shadow Realm 的地下组织发展起来的一种新视频格式。它是由Microsoft ASF 压缩算法的修改而来的（并不是想象中的AVI），视频格式追求的无非是压缩率和图像质量，所以 NAVI 为了追求这个目标，改善了原始的ASF 格式的一些不足，让NAVI 可以拥有更高的帧率。可以这样说，NAVI 是一种去掉视频流特性的改良型ASF 格式。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7077.htm">&lt;strong>3GP&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/7077.htm">3GP&lt;/a>是一种3G流媒体的&lt;a href="http://baike.baidu.com/view/746807.htm">视频编码&lt;/a>格式，主要是为了配合3G网络的高传输速度而开发的，也是目前手机中最为常见的一种视频格式。&lt;/p>
&lt;p>简单的说，该格式是“第三代合作伙伴项目”(3GPP)制定的一种&lt;a href="http://baike.baidu.com/view/3323.htm">多媒体&lt;/a>标准，使用户能使用手机享受高质量的视频、音频等多媒体内容。其核心由包括高级&lt;a href="http://baike.baidu.com/view/1531030.htm">音频编码&lt;/a>(AAC)、自适应多速率 (AMR) 和MPEG-4 和H.263&lt;a href="http://baike.baidu.com/view/746807.htm">视频编码&lt;/a>&lt;a href="http://baike.baidu.com/view/1079.htm">解码器&lt;/a>等组成，目前大部分支持视频拍摄的手机都支持3GPP格式的视频播放。其特点是网速占用较少，但画质较差。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/18083.htm">&lt;strong>REAL VIDEO&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/18083.htm">REAL VIDEO&lt;/a>（&lt;a href="http://baike.baidu.com/view/288774.htm">RA&lt;/a>、&lt;a href="http://baike.baidu.com/view/3558.htm">RAM&lt;/a>）格式由一开始就是定位在&lt;a href="http://baike.baidu.com/view/2722588.htm">视频流&lt;/a>应用方面的，也可以说是视频流技术的始创者。它可以在用56K MODEM 拨号上网的条件实现不间断的视频播放，当然，其图像质量和&lt;a href="http://baike.baidu.com/view/89020.htm">MPEG2&lt;/a>、&lt;a href="http://baike.baidu.com/view/7716.htm">DIVX&lt;/a>等比是不敢恭维的啦。毕竟要实现在网上传输不间断的视频是需要很大的&lt;a href="http://baike.baidu.com/view/632842.htm">频宽&lt;/a>的，这方面是&lt;a href="http://baike.baidu.com/view/7704.htm">ASF&lt;/a>的有力竞争者。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/91917.htm">&lt;strong>MKV&lt;/strong>&lt;/a>&lt;/p>
&lt;p>一种后缀为&lt;a href="http://baike.baidu.com/view/91917.htm">MKV&lt;/a>的视频文件频频出现在网络上，它可在一个文件中集成多条不同类型的音轨和字幕轨，而且其&lt;a href="http://baike.baidu.com/view/746807.htm">视频编码&lt;/a>的自由度也非常大，可以是常见的&lt;a href="http://baike.baidu.com/view/7716.htm">DivX&lt;/a>、&lt;a href="http://baike.baidu.com/view/30246.htm">XviD&lt;/a>、3IVX，甚至可以是RealVideo、QuickTime、WMV 这类流式视频。实际上，它是一种全称为Matroska的新型&lt;a href="http://baike.baidu.com/view/3323.htm">多媒体&lt;/a>&lt;a href="http://baike.baidu.com/view/1942911.htm">封装格式&lt;/a>，这种先进的、开放的封装格式已经给我们展示出非常好的应用前景。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/364757.htm">&lt;strong>FLV&lt;/strong>&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/364757.htm">FLV&lt;/a>是FLASH VIDEO的简称，FLV&lt;a href="http://baike.baidu.com/view/794.htm">流媒体&lt;/a>格式是一种新的视频格式。由于它形成的文件极小、加载速度极快，使得网络观看视频文件成为可能，它的出现有效地解决了视频文件导入&lt;a href="http://baike.baidu.com/view/7641.htm">Flash&lt;/a>后，使导出的SWF文件体积庞大，不能在网络上很好的使用等缺点。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/2302577.htm">&lt;strong>F4V&lt;/strong>&lt;/a>&lt;/p>
&lt;p>作为一种更小更清晰，更利于在网络传播的格式，&lt;a href="http://baike.baidu.com/view/2302577.htm">F4V&lt;/a>已经逐渐取代了传统&lt;a href="http://baike.baidu.com/view/364757.htm">FLV&lt;/a>，也已经被大多数主流播放器兼容播放，而不需要通过转换等复杂的方式。F4V是&lt;a href="http://baike.baidu.com/view/7578.htm">Adobe&lt;/a>公司为了迎接&lt;a href="http://baike.baidu.com/view/752328.htm">高清&lt;/a>时代而推出继FLV格式后的支持H.264的F4V&lt;a href="http://baike.baidu.com/view/794.htm">流媒体&lt;/a>格式。它和FLV主要的区别在于，FLV格式采用的是H263编码，而F4V则支持H.264编码的高清晰视频，码率最高可达50Mbps。也就是说F4V和FLV在同等体积的前提下，能够实现更高的分辨率，并支持更高比特率，就是我们所说的更清晰更流畅。另外，很多主流媒体网站上下载的F4V文件后缀却为FLV，这是F4V格式的另一个特点，属正常现象，观看时可明显感觉到这种实为F4V的FLV有明显更高的清晰度和流畅度。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/8680.htm">&lt;strong>RMVB&lt;/strong>&lt;/a>&lt;/p>
&lt;p>RMVB的前身为RM格式，它们是&lt;a href="http://baike.baidu.com/view/1617391.htm">Real Networks&lt;/a>公司所制定的音频视频压缩规范，根据不同的&lt;a href="http://baike.baidu.com/view/2381438.htm">网络传输速率&lt;/a>，而制定出不同的压缩比率，从而实现在低速率的网络上进行影像数据实时传送和播放，具有体积小，画质也还不错的优点。&lt;/p>
&lt;p>早期的RM格式为了能够实现在有限带宽的情况下，进行视频在线播放而被研发出来，并一度红遍整个互联网。而为了实现更优化的体积与画面质量，Real Networks公司不久又在RM的基础上，推出了&lt;a href="http://baike.baidu.com/view/656405.htm">可变比特率&lt;/a>编码的RMVB格式。RMVB的诞生，打破了原先RM格式那种平均压缩采样的方式，在保证平均压缩比的基础上，采用浮动比特率编码的方式，将较高的比特率用于复杂的动态画面（如歌舞、飞车、战争等），而在静态画面中则灵活地转为较低的采样率，从而合理地利用了比特率资源，使RMVB最大限度地压缩了影片的大小，最终拥有了近乎完美的接近于DVD品质的视听效果。我们可以做个简单对比，一般而言一部120分钟的dvd体积为4GB，而rmvb格式来压缩，仅400MB左右，而且清晰度流畅度并不比原DVD差太远。&lt;/p>
&lt;p>人们为了缩短视频文件在网络进行传播的下载时间，为了节约用户&lt;a href="http://baike.baidu.com/view/2074271.htm">电脑硬盘&lt;/a>宝贵的空间容量，已越来越多的视频被压制成了RMVB格式，并广为流传。到如今，可能每一位电脑使用者（或许就包括正在阅读这篇文章的您）电脑中的视频文件，超过80%都会是RMVB格式。&lt;/p>
&lt;p>RMVB由于本身的优势，成为目前PC中最广泛存在的视频格式，但在&lt;a href="http://baike.baidu.com/view/42387.htm">MP4播放器&lt;/a>中，RMVB格式却长期得不到重视。MP4发展的整整七个年头里，虽然早就可以做到完美支持&lt;a href="http://baike.baidu.com/view/725802.htm">AVI格式&lt;/a>，但却久久未有能够完全兼容RMVB格式的机型诞生。对于MP4，尤其是容量小价格便宜的&lt;a href="http://baike.baidu.com/view/1371.htm">闪存&lt;/a>MP4而言，怎样的视频格式才将会是其未来的主流呢？我们不妨来探讨一番。&lt;/p>
&lt;p>&lt;a href="http://baike.baidu.com/view/3655243.htm">&lt;strong>WebM&lt;/strong>&lt;/a>&lt;/p>
&lt;p>由Google提出，是一个开放、免费的媒体&lt;a href="http://baike.baidu.com/view/1066926.htm">文件格式&lt;/a>。WebM 影片格式其实是以 Matroska（即 MKV）容器格式为基础开发的新容器格式，里面包括了 VP8 影片轨和 Ogg Vorbis 音轨，其中Google将其拥有的VP8&lt;a href="http://baike.baidu.com/view/746807.htm">视频编码&lt;/a>技术以类似BSD授权开源，Ogg Vorbis 本来就是开放格式。 WebM标准的&lt;a href="http://baike.baidu.com/view/94301.htm">网络视频&lt;/a>更加偏向于开源并且是基于HTML5标准的，WebM 项目旨在为对每个人都开放的网络开发高质量、开放的视频格式，其重点是解决视频服务这一核心的网络用户体验。Google 说 WebM 的格式相当有效率，应该可以在 netbook、tablet、手持式装置等上面顺畅地使用。&lt;/p>
&lt;p>Ogg Vorbis 本来就是开放格式，大家应该都知道，至于 VP8 则是 Google 当年买下一间叫 On2 的公司的时候，取得的 Video Codec， Google 也把这个 Codec 以类似 BSD 授权放出来，因此 WebM 应该是不会有 H.264 的那些潜在的专利问题。&lt;/p>
&lt;p>Youtube 也会支持 WebM 的播放。来自产业界的有 Adobe -- Flash Player 将会支持 WebM 格式的播放 -- AMD、ARM、Broadcom、Freescale、NVIDIA、Qualcomm、TI 等。谁不在上头？Intel。在 Browser 方面，Chrome 不要说，Firefox、Opera 都已经表态将会支持这个新格式。微软IE9 的支持就没这么直接，出厂时仅会支持 H.264 影片的播放，但如果你另外下载并安装了 VP8，那当然你也可以播放 HTML / VP8 的影片。 　要推动一个新格式进入主流，甚至成为龙头老大，是非常不容易的。但 WebM 和 VP8 的推动者是 Google，而且是在 H.264 正因为其非开放性而备受质疑的时候，或许 WebM 真有机会迅速地站稳脚跟，一举成为新一代的影片通用格式呢！&lt;/p>
&lt;h2 id="12音频格式">&lt;strong>1.2音频格式&lt;/strong>&lt;/h2>
&lt;p>音频格式是指要在计算机内播放或是处理音频文件，也就是要对声音文件进行数、模转换，这个过程同样由采样和量化构成，人耳所能听到的声音，最低的频率是从20Hz起一直到最高频率20KHZ，20KHz以上人耳是听不到的，因此音频文件格式的最大带宽是20KHZ，故而采样速率需要介于40~50KHZ之间，而且对每个样本需要更多的量化比特数。音频数字化的标准是每个样本16位-96dB的信噪比，采用线性脉冲编码调制PCM，每一量化步长都具有相等的长度。在音频文件的制作中，正是采用这一标准。&lt;/p>
&lt;h3 id="121常见格式">&lt;strong>1.2.1常见格式&lt;/strong>&lt;/h3>
&lt;p>常见的音频格式有：CD格式、WAVE（*.WAV）、AIFF、AU、MP3、MIDI、WMA、RealAudio、VQF、OggVorbis、AAC、APE。&lt;/p>
&lt;p>&lt;strong>CD&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.002.png" alt="">&lt;/p>
&lt;p>CD格式的音质是比较高的音频格式。因此要讲音频格式，CD自然是打头阵的先锋。在大多数播放软件的“打开文件类型”中，都可以看到*.cda格式，这就是CD音轨了。标准CD格式也就是44.1K的采样频率，速率88K/秒，16位量化位数，因为CD音轨可以说是近似无损的，因此它的声音基本上是忠于原声的，因此如果你是一个音响发烧友的话，CD是你的首选。它会让你感受到天籁之音。CD光盘可以在CD唱机中播放，也能用电脑里的各种播放软件来重放。一个CD音频文件是一个*.cda文件，这只是一个索引信息，并不是真正的包含声音信息，所以不论CD音乐的长短，在电脑上看到的“*.cda文件”都是44字节长。注意：不能直接的复制CD格式的*.cda文件到硬盘上播放，需要使用象EAC这样的抓音轨软件把CD格式的文件转换成WAV，这个转换过程如果光盘驱动器质量过关而且EAC的参数设置得当的话，可以说是基本上无损抓音频。推荐大家使用这种方法。&lt;/p>
&lt;p>&lt;strong>WAVE&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.003.png" alt="">&lt;/p>
&lt;p>WAVE（*.WAV）是微软公司开发的一种声音文件格式，它符合PIFFResource Interchange File Format 文件规范，用于保存WINDOWS平台的音频信息资源，被WINDOWS平台及其应用程序所支持。“*.WAV”格式支持MSADPCM、CCITT A LAW等多种压缩算法，支持多种音频位数、采样频率和声道，标准格式的WAV文件和CD格式一样，也是44.1K的采样频率，速率88K/秒，16位量化位数，看到了吧，WAV格式的声音文件质量和CD相差无几，也是目前PC机上广为流行的声音文件格式，几乎所有的音频编辑软件都“认识”WAV格式。&lt;/p>
&lt;p>&lt;strong>AIFF&lt;/strong>&lt;/p>
&lt;p>AIFF（Audio Interchange File Format）格式和AU格式，它们都和WAV非常相像，在大多数的音频编辑软件中也都支持它们这几种常见的音乐格式。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.004.png" alt="">&lt;/p>
&lt;p>AIFF是音频交换文件格式的英文缩写。是APPLE公司开发的一种音频文件格式，被MACINTOSH平台及其应用程序所支持，NETSCAPE浏览器中LIVEAUDIO也支持AIFF格式。所以大家都不常见。AIFF是Apple苹果电脑上面的标准音频格式，属于QuickTime技术的一部分。这一格式的特点就是格式本身与数据的意义无关，因此受到了Microsoft的青睐，并据此搞出来WAV格式。AIFF虽然是一种很优秀的文件格式，但由于它是苹果电脑上的格式，因此在PC平台上并没有得到很大的流行。不过由于Apple电脑多用于多媒体制作出版行业，因此几乎所有的音频编辑软件和播放软件都或多或少地支持AIFF格式。只要苹果电脑还在，AIFF就始终还占有一席之地。由于AIFF的包容特性，所以它支持许多压缩技术。&lt;/p>
&lt;p>&lt;strong>AU&lt;/strong>&lt;/p>
&lt;p>AUDIO文件是SUN公司推出的一种数字音频格式。AU文件原先是UNIX操作系统下的数字声音文件。由于早期INTERNET上的WEB服务器主要是基于UNIX的，所以，AU格式的文件在如今的INTERNET中也是常用的声音文件格式。&lt;/p>
&lt;p>MPEG&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.005.png" alt="">&lt;/p>
&lt;p>MPEG是动态图象专家组的英文缩写。这个专家组始建于1988年，专门负责为CD建立视频和音频压缩标准。MPEG音频文件指的是MPEG标准中的声音部分即MPEG音频层。目前INTERNET上的音乐格式以MP3最为常见。虽然它是一种有损压缩，但是它的最大优势是以极小的声音失真换来了较高的压缩比。MPEG含有格式包括：MPEG-1、MPEG-2、MPEG-Layer3、MPEG-4&lt;/p>
&lt;p>&lt;strong>MP3&lt;/strong>&lt;/p>
&lt;p>MP3格式诞生于八十年代的德国，所谓的MP3也就是指的是MPEG标准中的音频部分，也就是MPEG音频层。根据压缩质量和编码处理的不同分为3层，分别对应“*.mp1&amp;quot;/“*.mp2”/“*.mp3”这3种声音文件。需要提醒大家注意的地方是：MPEG音频文件的压缩是一种有损压缩，MPEG3音频编码具有10：1~12：1的高压缩率，同时基本保持低音频部分不失真，但是牺牲了声音文件中12KHz到16KHz高音频这部分的质量来换取文件的尺寸，相同长度的音乐文件，用*.mp3格式来储存，一般只有*.wav文件的1/10，而音质要次于CD格式或WAV格式的声音文件。由于其文件尺寸小，音质好；所以在它问世之初还没有什么别的音频格式可以与之匹敌，因而为*.mp3格式的发展提供了良好的条件。直到现在，这种格式还是风靡一时，作为主流音频格式的地位难以被撼动。但是树大招风，MP3音乐的版权问题也一直是找不到办法解决，因为MP3没有版权保护技术，说白了也就是谁都可以用。&lt;/p>
&lt;p>MP3格式压缩音乐的采样频率有很多种，可以用64Kbps或更低的采样频率节省空间，也可以用320Kbps的标准达到极高的音质。用装有Fraunhofer IIS Mpeg Lyaer3的 MP3编码器（现在效果最好的编码器）MusicMatch Jukebox 6.0在128Kbps的频率下编码一首3分钟的歌曲，得到2.82MB的MP3文件。采用缺省的CBR（固定采样频率）技术可以以固定的频率采样一首歌曲，而VBR（可变采样频率）则可以在音乐“忙”的时候加大采样的频率获取更高的音质，不过产生的MP3文件可能在某些播放器上无法播放。把VBR的级别设定成为与前面的CBR文件的音质基本一样，生成的VBR MP3文件为2.9MB。&lt;/p>
&lt;p>MP3是到2008年止使用用户最多的有损压缩数字音频格式了。它的全称是MPEG(MPEG：MovingPictureExpertsGroup)AudioLayer-3，刚出现时它的编码技术并不完善，它更像一个编码标准框架，留待人们去完善。早期的MP3编码采用的的是固定编码率的方式（CBR），看到的128KBPS，就是代表它是以128KBPS固定数据速率编码——你可以提高这个编码率，最高可以到320KBPS，音质会更好，自然，文件的体积会相应增大。&lt;/p>
&lt;p>因为MP3的编码方式是开放的，可以在这个标准框架的基础上自己选择不同的声学原理进行压缩处理，所以，很快由Xing公司推出可变编码率的压缩方式（VBR）。它的原理就是利用将一首歌的复杂部分用高bitrate编码，简单部分用低bitrate编码，通过这种方式，进一步取得质量和体积的统一。当然，早期的Xing编码器的VBR算法很差，音质与CBR（固定码率）相去甚远。但是，这种算法指明了一种方向，其他开发者纷纷推出自己的VBR算法，使得效果一直在改进。目前公认比较好的首推LAME，它完美地实现了VBR算法，而且它是是完全免费的软件，并且由爱好者组成的开发团队一直在不断的发展完善。&lt;/p>
&lt;p>而在VBR的基础上，LAME更加发展出ABR算法。ABR（AverageBitrate）平均比特率，是VBR的一种插值参数。LAME针对CBR不佳的文件体积比和VBR生成文件大小不定的特点独创了这种编码模式。ABR在指定的文件大小内，以每50帧（30帧约1秒）为一段，低频和不敏感频率使用相对低的流量，高频和大动态表现时使用高流量，可以做为VBR和CBR的一种折衷选择。&lt;/p>
&lt;p>MP3问世不久，就凭这较高的压缩比12:1和较好的音质创造了一个全新的音乐领域，然而MP3的开放性却最终不可避免的导致了版权之争，在这样的背景之下，文件更小，音质更佳，同时还能有效保护版权的MP4就应运而生了。MP3和MP4之间其实并没有必然的联系，首先MP3是一种音频压缩的国际技术标准，而MP4却是一个商标的名称。&lt;/p>
&lt;p>&lt;strong>MPEG-4&lt;/strong>&lt;/p>
&lt;p>MPEG-4标准是由国际运动图像专家组于2000年10月公布的一种面向多媒体应用的视频压缩标准。它采用了基于对象的压缩编码技术，在编码前首先对视频序列进行分析，从原始图像中分割出各个视频对象，然后再分别对每个视频对象的形状信息、运动信息、纹理信息单独编码，并通过比MPEG-2更优的运动预测和运动补偿来去除连续帧之间的时间冗余。其核心是基于内容的尺度可变性(Content-basedscalability)，可以对图像中各个对象分配优先级，对比较重要的对象用高的空间和时间分辨率表示，对不甚重要的对象(如监控系统的背景)以较低的分辨率表示，甚至不显示。因此它具有自适应调配资源能力，可以实现高质量低速率的图像通信和视频传输。 MPEG-4以其高质量、低传输速率等优点已经被广泛应用到网络多媒体、视频会议和多媒体监控等图像传输系统中。中国内外大部分成熟的MPEG-4应用均为基于PC层面的客户端和服务器模式，应用在嵌入式系统上的并不多，且多数嵌入式MPEG-4解码系统大多使用商业的嵌入式操作系统，如WindowsCE、VxWorks等，成本高、灵活性差。如以嵌入式Linux作为操作系统不仅开发方便，且可以节约成本，并可以根据实际情况进行裁减，占用资源少、灵活性强，网络性能好，适用范围更广。&lt;/p>
&lt;p>&lt;strong>MIDI&lt;/strong>&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.006.png" alt="">&lt;/p>
&lt;p>MIDI（Musical Instrument Digital Interface）格式被经常玩音乐的人使用，MIDI允许数字合成器和其他设备交换数据。MID文件格式由MIDI继承而来。MID文件并不是一段录制好的声音，而是记录声音的信息，然后在告诉声卡如何再现音乐的一组指令。这样一个MIDI文件每存1分钟的音乐只用大约5～10KB。MID文件主要用于原始乐器作品，流行歌曲的业余表演，游戏音轨以及电子贺卡等。*.mid文件重放的效果完全依赖声卡的档次。*.mid格式的最大用处是在电脑作曲领域。*.mid文件可以用作曲软件写出，也可以通过声卡的MIDI口把外接音序器演奏的乐曲输入电脑里，制成*.mid文件。&lt;/p>
&lt;p>&lt;strong>WMA&lt;/strong>&lt;/p>
&lt;p>WMA (Windows Media Audio) 格式是来自于微软的重量级选手，后台强硬，音质要强于MP3格式，更远胜于RA格式，它和日本YAMAHA公司开发的VQF格式一样，是以减少数据流量但保持音质的方法来达到比MP3压缩率更高的目的，WMA的压缩率一般都可以达到1：18左右，WMA的另一个优点是内容提供商可以通过DRM（Digital Rights Management）方案如Windows Media Rights Manager 7加入防拷贝保护。这种内置了版权保护技术可以限制播放时间和播放次数甚至于播放的机器等等，这对被盗版搅得焦头乱额的音乐公司来说可是一个福音，另外WMA还支持音频流(Stream)技术，适合在网络上在线播放，作为微软抢占网络音乐的开路先锋可以说是技术领先、风头强劲，更方便的是不用象MP3那样需要安装额外的播放器，而Windows操作系统和Windows Media Player的无缝捆绑让你只要安装了windows操作系统就可以直接播放WMA音乐，新版本的Windows Media Player7.0更是增加了直接把CD光盘转换为WMA声音格式的功能，在新出品的操作系统Windows XP中，WMA是默认的编码格式，大家知道Netscape的遭遇，现在“狼”又来了。WMA这种格式在录制时可以对音质进行调节。同一格式，音质好的可与CD媲美，压缩率较高的可用于网络广播。虽然现在网络上还不是很流行，但是在微软的大规模推广下已经是得到了越来越多站点的承认和大力支持，在网络音乐领域中直逼*.mp3，在网络广播方面，也正在瓜分Real打下的天下。因此，几乎所有的音频格式都感受到了WMA格式的压力。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.007.png" alt="">&lt;/p>
&lt;p>微软官方宣布的资料中称WMA格式的可保护性极强，甚至可以限定播放机器、播放时间及播放次数，具有相当的版权保护能力。应该说，WMA的推出，就是针对MP3没有版权限制的缺点而来——普通用户可能很欢迎这种格式，但作为版权拥有者的唱片公司来说，它们更喜欢难以复制拷贝的音乐压缩技术，而微软的WMA则照顾到了这些唱片公司的需求。&lt;/p>
&lt;p>除了版权保护外，WMA还在压缩比上进行了深化，它的目标是在相同音质条件下文件体积可以变的更小（当然，只在MP3低于192KBPS码率的情况下有效，实际上当采用LAME算法压缩MP3格式时，高于192KBPS时普遍的反映是MP3的音质要好于WMA）。&lt;/p>
&lt;p>&lt;strong>RealAudio&lt;/strong>&lt;/p>
&lt;p>RealAudio主要适用于在网络上的在线音乐欣赏，现在大多数的用户仍然在使用56Kbps或更低速率的Modem，所以典型的回放并非最好的音质。有的下载站点会提示你根据你的Modem速率选择最佳的Real文件。real的的文件格式主要有这么几种：有RA（RealAudio）、RM（RealMedia，RealAudio G2）、RMX（RealAudio Secured），还有更多。这些格式的特点是可以随网络带宽的不同而改变声音的质量，在保证大多数人听到流畅声音的前提下，令带宽较富裕的听众获得较好的音质。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.008.png" alt="">&lt;/p>
&lt;p>近来随着网络带宽的普遍改善，Real公司正推出用于网络广播的、达到CD音质的格式。如果你的RealPlayer软件不能处理这种格式，它就会提醒你下载一个免费的升级包。许多音乐网站 提供了歌曲的Real格式的试听版本。现在最新的版本是RealPlayer 9.0，第39期《电脑报》也对RealPlayer 9.0作了详细的介绍，这里不再赘述。&lt;/p>
&lt;p>&lt;strong>VQF&lt;/strong>&lt;/p>
&lt;p>雅马哈公司另一种格式是*.vqf，它的核心是减少数据流量但保持音质的方法来达到更高的压缩比，VQF的音频压缩率比标准的MPEG音频压缩率高出近一倍，可以达到18:1左右甚至更高。也就是说把一首4分钟的歌曲（WAV文件）压成MP3，大约需要4MB左右的硬盘空间，而同一首歌曲，如果使用VQF音频压缩技术的话，那只需要2MB左右的硬盘空间。因此，在音频压缩率方面，MP3和RA都不是VQF的对手。相同情况下压缩后VQF的文件体积比MP3小30%～50%，更便利于网上传播，同时音质极佳，接近CD音质(16位44.1kHz立体声)。可以说技术上也是很先进的，但是由于宣传不力，这种格式难有用武之地。*.vqf可以用雅马哈的播放器播放。同时雅马哈也提供从*.wav文件转换到*.vqf文件的软件。 此文件缺少特点外加缺乏宣传。&lt;/p>
&lt;p>当VQF以44KHz、80kbit/s的音频采样率压缩音乐时，它的音质优于44KHz、128kbit/s的MP3，当VQF以44KHz、96kbit/s的频率压缩时，它的音质几乎等于44KHz、256kbit/s的MP3。经SoundVQ压缩后的音频文件在进行回放效果试听时，几乎没有人能听出它与原音频文件的差异。&lt;/p>
&lt;p>VQF音频文件个格式&lt;/p>
&lt;p>播放VQF对计算机的配置要求仅为奔腾75或更高，当然如果您用奔腾100或以上的机器，VQF能够运行得更加出色。实际上，播放VQF对CPU的要求仅比Mp3高5～10%左右。&lt;/p>
&lt;p>VQF即TwinVQ技术虽然是由NTT和YAMAHA开发的，但它们的应用软件都是免费的。只是NTT和YAMAHA并没有公布VQF的源代码。&lt;/p>
&lt;p>&lt;strong>OggVorbis&lt;/strong>&lt;/p>
&lt;p>OggVorbis是一种新的音频压缩格式，类似于MP3等现有的音乐格式。但有一点不同的是，它是完全免费、开放和没有专利限制的。Vorbis是这种音频压缩机制的名字，而Ogg则是一个计划的名字，该计划意图设计一个完全开放性的多媒体系统。目前该计划只实现了OggVorbis这一部分。&lt;/p>
&lt;p>OggVorbis文件的扩展名是*.OGG。这种文件的设计格式是非常先进的。这种文件格式可以不断地进行大小和音质的改良，而不影响旧有的编码器或播放器。&lt;/p>
&lt;p>VORBIS采用有损压缩，但通过使用更加先进的声学模型去减少损失，因此，同样位速率(BitRate)编码的OGG与MP3相比听起来更好一些。另外，还有一个原因，MP3格式是受专利保护的。如果你想使用MP3格式发布自己的作品，则需要付给Fraunhofer（发明MP3的公司）专利使用费。而VORBIS就完全没有这个问题。&lt;/p>
&lt;p>对于乐迷来说，使用OGG文件的显著好处是可以用更小的文件获得优越的声音质量。而且，由于OGG是完全开放和免费的，制作OGG文件将不受任何专利限制，可望可以获得大量的编码器和播放器。这也是为何现在MP3编码器如此少而且大多是商业软件的原因，因为Fraunhofer要收取专利使用费。Vorbis使用了与MP3相比完全不同的数学原理，因此在压缩音乐时受到的挑战也不同。同样位速率编码的Vorbis和MP3文件具有同等的声音质量。Vorbis具有一个设计良好、灵活的注释，避免了象MP3文件的ID3标记那样烦琐的操作；Vorbis还具有位速率缩放：可以不用重新编码便可调节文件的位速率。Vorbis文件可以被分成小块并以样本粒度进行编辑；Vorbis支持多通道；Vorbis文件可以以逻辑方式相连接等。&lt;/p>
&lt;p>&lt;strong>AMR&lt;/strong>&lt;/p>
&lt;p>AMR全称Adaptive Multi-Rate，自适应多速率编码，主要用于移动设备的音频，压缩比比较大，但相对其他的压缩格式质量比较差，由于多用于人声，通话，效果还是很不错的。&lt;/p>
&lt;p>分类&lt;/p>
&lt;ol>
&lt;li>
&lt;p>AMR: 又称为AMR-NB，相对于下面的WB而言，语音带宽范围：300－3400Hz，8KHz抽样&lt;/p>
&lt;/li>
&lt;li>
&lt;p>AMR-WB:AMR WideBand，&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>语音带宽范围： 50－7000Hz 16KHz抽样&lt;/p>
&lt;p>“AMR-WB”全称为“Adaptive Multi-rate - Wideband”，即“自适应多速率宽带编码”，采样频率为16kHz，是一种同时被国际标准化组织ITU-T和3GPP采用的宽带语音编码标准，也称为G722.2标准。AMR-WB提供语音带宽范围达到50～7000Hz，用户可主观感受到话音比以前更加自然、舒适和易于分辨。&lt;/p>
&lt;p>与之作比较，现在GSM用的EFR(Enhenced Full Rate，增强型全速率编码)采样频率为8kHz，语音带宽为200～3400Hz。&lt;/p>
&lt;p>AMR-WB应用于窄带GSM(全速信道16k，GMSK)的优势在于其可采用从6.6kb/s, 8.85kb/s和12.65kb/s三种编码，当网络繁忙时C/I恶化，编码器可以自动调整编码模式，从而增强QoS。在这种应用中，AMR-WB抗扰度优于AMR-NB。&lt;/p>
&lt;p>AMR-WB应用于EDGE、3G可充分体现其优势。足够的传输带宽保证AMR-WB可采用从 6.6kb/s到23.85kb/s共九种编码，语音质量超越PSTN固定电话。&lt;/p>
&lt;h3 id="122比较">&lt;strong>1.2.2比较&lt;/strong>&lt;/h3>
&lt;p>作为数字音乐文件格式的标准，WAV格式容量过大，因而使用起来很不方便。因此，一般情况下我们把它压缩为MP3或WMA格式。压缩方法有无损压缩，有损压缩，以及混成压缩。MPEG,JPEG就属于混成压缩，如果把压缩的数据还原回去，数据其实是不一样的。当然，人耳是无法分辨的。因此，如果把MP3，OGG格式从压缩的状态还原回去的话，就会产生损失。然而，APE格式即使还原，也能毫无损失地保留原有音质。所以，APE可以无损失高音质地压缩和还原。在完全保持音质的前提下，APE的压缩容量有了适当的减小。拿一个最为常见的38MBWAV文件为例，压缩为APE格式后为25MB左右，比开始足足少了13MB。而且MP3容量越来越大的今天，25M的歌曲已经算不上什么庞然大物了。以1GB的mp3来说可以放入4张CD，那就是40多首歌曲，已经足够了！&lt;/p>
&lt;p>MP3支持格式有MP3和WMA。MP3由于是有损压缩，因此讲求采样率，一般是44.1KHZ。另外，还有比特率，即数据流，一般为8---320KBPS。在MP3编码时，还看看它是否支持可变比特率（VBR），现在出的MP3机大部分都支持，这样可以减小有效文件的体积。WMA则是微软力推的一种音频格式，相对来说要比MP3体积更小。&lt;/p>
&lt;h2 id="13字幕格式">&lt;strong>1.3字幕格式&lt;/strong>&lt;/h2>
&lt;h3 id="131外挂字幕与内嵌字幕的阐述">&lt;strong>1.3.1外挂字幕与内嵌字幕的阐述&lt;/strong>&lt;/h3>
&lt;p>外挂字幕：是视频文件和字幕文件分离，在播放的时候要导入字幕文件。比如DVD就会自动导入字幕。外挂字幕的好处是：可以导入自己国家的语言。&lt;/p>
&lt;p>内嵌字幕：视频文件和字幕文件已经集成到了一起，没有办法改变和去掉了。&lt;/p>
&lt;h3 id="132外挂字幕视频与内嵌字幕视频的画面比较">&lt;strong>1.3.2外挂字幕视频与内嵌字幕视频的画面比较&lt;/strong>&lt;/h3>
&lt;p>外挂字幕相对于内嵌字幕来说对视频的质量损害就会小很多，外挂的意思就是在视频之外单独运行的一种字幕文件，对视频本身的分辨率损害很小甚至为零。而内嵌的字面意思就是将视频连带外挂字幕用专有的录制软件重新将视频录制一遍，成为一个新的视频；这种方法虽然解决了视频体积过大和播放器不兼容等问题，但是在重新录制视频过程当中会无意识的损害原视频本身的码率，使重新录制出来的视频分辨率大大不如原视频，所以在选择外挂与内嵌字幕时需结合自身情况考虑视频需要进行选择。&lt;/p>
&lt;h3 id="133外挂字幕的三种格式">&lt;strong>1.3.3外挂字幕的三种格式&lt;/strong>&lt;/h3>
&lt;p>1、srt格式：这是最好的，体积小，用&lt;a href="http://baike.baidu.com/view/152865.htm">记事本&lt;/a>可以打开编辑。&lt;/p>
&lt;p>2、sub+idx：这种是图形字幕，只能用字幕转换&lt;a href="http://baike.baidu.com/view/37.htm">软件&lt;/a>；体积较大。&lt;/p>
&lt;p>3、ass字幕：网上比较少，比srt多一些特效。&lt;/p>
&lt;p>外挂字幕的一些基本注意事项：&lt;/p>
&lt;p>使用外挂字幕的时候，要保证字幕文件和视频文件放置在同一个文件夹下，并且保证两者的文件名相同，但是不要修改后缀和标识（常见的标识有chs、GB，cht，Big5，eng五种；其中chs和GB表示简体中文，cht和Big5表示繁体中文，eng表示英文）：&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>视频的文件名为：越狱（13）.avi&lt;/p>
&lt;p>外挂字幕的文件名就应为：越狱（13）.chs.srt&lt;/p>
&lt;p>当然，能在视频中显示字幕的前提是你的电脑里安装有字幕插件。否则建议安装能够&lt;a href="http://baike.baidu.com/view/1395585.htm">完美解码&lt;/a>的万能播放器。&lt;/p>
&lt;h2 id="14采集录制和播放渲染">&lt;strong>1.4采集录制和播放渲染&lt;/strong>&lt;/h2>
&lt;h3 id="141视频采集">&lt;strong>1.4.1视频采集&lt;/strong>&lt;/h3>
&lt;p>视频采集（Video Capture）把模拟视频转换成数字视频，并按数字视频文件的格式保存下来。所谓视频采集就是将模拟摄像机、录像机、LD视盘机、电视机输出的视频信号，通过专用的模拟、数字转换设备，转换为二进制数字信息的过程。在视频采集工作中，视频采集卡是主要设备，它分为专业和家用两个级别。专业级视频采集卡不仅可以进行视频采集，并且还可以实现硬件级的视频压缩和视频编辑。家用级的视频采集卡只能做到视频采集和初步的硬件级压缩，而更为“低端”的电视卡，虽可进行视频的采集，但它通常都省却了硬件级的视频压缩功能。&lt;/p>
&lt;p>&lt;strong>视频保存格式&lt;/strong>&lt;/p>
&lt;p>影片拍好了，可以直接放在DV带上保存，以后就用DV机回放，也可以采集到计算机里，编辑后回录到DV带上，还可以采集到计算机里，直接把DVAVI文件刻到CDR上去保存，也可以压缩成MPG，刻成VCD或者SVCD，DVD和CD保存。MPG是有损压缩，不管是压缩成什么格式，对画质都有损失，但是刻MPG盘保存还是最常用的方式。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.009.jpeg" alt="视频采集设备" title="728da9773912b31ba22d0fb38618367adbb4e1e3">&lt;/p>
&lt;p>DV影片的回放在电视机上的表现远强于在CRT上的表现，尽管CRT的分辨率要高得多，主要是因为电视的设计就是为了显示动态画面，所以在亮度、色彩鲜艳上都比显示静态为主的CRT要好，而普通电视的显示分辨率只有320线，那么DV的高达720×576的分辨率根本用不着，不管是VCD的352×288还是SVCD的480×576都够了，所以尽管压缩成MPG画质有损失，但是在电视上基本是看不出来的。在电脑上看，SVCD的分辨率也足够清晰了。&lt;/p>
&lt;p>&lt;strong>保存格式的优劣性&lt;/strong>&lt;/p>
&lt;p>DV带的保存是个问题，毕竟是磁带，DV带还用得时间不长，但是以前的录音机磁带时间长了粘连和发霉大家估计都见过的。而CDR光盘蓝盘、绿盘在一般情况下不磨损光盘一般是保存30~50年，金盘号称能保存100年，虽然光盘也有发霉的可能，但是毕竟好得多。&lt;/p>
&lt;p>播放的方便性上，也是光盘强，DV带就得把DV机搬出来，还只能在电视上看，对磁头也是个磨损，倒带也很麻烦，而VCD，SVCD光盘方便。&lt;/p>
&lt;h3 id="142视频录制">&lt;strong>1.4.2视频录制&lt;/strong>&lt;/h3>
&lt;h3 id="143视频渲染">&lt;strong>1.4.3视频渲染&lt;/strong>&lt;/h3>
&lt;p>渲染，英文为Render,也有的把它称为着色，但我更习惯把Shade称为着色，把Render称为渲染。因为Render和Shade这两个词在三维软件中是截然不同的两个概念，虽然它们的功能很相似，但却有不同。Shade是一种显示方案，一般出现在三维软件的主要窗口中，和三维模型的线框图一样起到辅助观察模型的作用。很明显，着色模式比线框模式更容易让我们理解模型的结构，但它只是简单的显示而已，数字图像中把它称为明暗着色法。在像Maya这样的高级三维软件中，还可以用Shade显示出简单的灯光效果、阴影效果和表面纹理效果，当然，高质量的着色效果是需要专业三维图形显示卡来支持的，它可以加速和优化三维图形的显示。但无论怎样优化，它都无法把显示出来的三维图形变成高质量的图像，这是因为Shade采用的是一种实时显示技术，硬件的速度限制它无法实时地反馈出场景中的反射、折射等光线追踪效果。而现实工作中我们往往要把模型或者场景输出成图像文件、视频信号或者电影胶片，这就必须经过Render程序。&lt;/p>
&lt;p>Shade窗口，提供了非常直观、实时的表面基本着色效果，根据硬件的能力，还能显示出纹理贴图、光源影响甚至阴影效果，但这一切都是粗糙的，特别是在没有硬件支持的情况下，它的显示甚至会是无理无序的。Render效果就不同了，它是基于一套完整的程序计算出来的，硬件对它的影响只是一个速度问题，而不会改变渲染的结果，影响结果的是看它是基于什么程序渲染的，比如是光影追踪还是光能传递。&lt;/p>
&lt;p>&lt;strong>渲染过程&lt;/strong>&lt;/p>
&lt;p>首先，必须定位三维场景中的摄像机，这和真实的摄影是一样的。一般来说，三维软件已经提供了四个默认的摄像机，那就是软件中四个主要的窗口，分为顶视图、正视图、侧视图和&lt;a href="http://baike.baidu.com/view/1142999.htm">透视图&lt;/a>。我们大多数时候渲染的是透视图而不是其它视图，透视图的摄像机基本遵循真实摄像机的原理，所以我们看到的结果才会和真实的三维世界一样，具备立体感。接下来，为了体现空间感，渲染程序要做一些“特殊”的工作，就是决定哪些物体在前面、哪些物体在后面和哪些物体被遮挡等。空间感仅通过物体的遮挡关系是不能完美再现的，很多初学三维的人只注意立体感的塑造而忽略了空间感。要知道空间感和光源的衰减、环境雾、景深效果都是有着密切联系的。&lt;/p>
&lt;p>渲染程序通过摄像机获取了需要渲染的范围之后，就要计算光源对物体的影响，这和真实世界的情况又是一样的。许多三维软件都有默认的光源，否则，我们是看不到透视图中的着色效果的，更不要说渲染了。因此，渲染程序就是要计算我们在场景中添加的每一个光源对物体的影响。和真实世界中光源不同的是，渲染程序往往要计算大量的辅助光源。在场景中，有的光源会照射所有的物体，而有的光源只照射某个物体，这样使得原本简单的事情又变得复杂起来。在这之后，还要是使用深度贴图阴影还是使用光线追踪阴影？这往往取决于在场景中是否使用了透明材质的物体计算光源投射出来的阴影。另外，使用了面积光源之后，渲染程序还要计算一种特殊的阴影－－软阴影（只能使用光线追踪），场景中的光源如果使用了光源特效，渲染程序还将花费更多的&lt;a href="http://baike.baidu.com/view/53557.htm">系统资源&lt;/a>来计算特效的结果，特别是体积光，也称为灯光雾，它会占用大量的系统资源，使用的时候一定要注意。&lt;/p>
&lt;p>在这之后，渲染程序还要根据物体的材质来计算物体表面的颜色，材质的类型不同，属性不同，纹理不同都会产生各种不同的效果。而且，这个结果不是独立存在的，它必须和前面所说的光源结合起来。如果场景中有&lt;a href="http://baike.baidu.com/view/85873.htm">粒子系统&lt;/a>，比如火焰、烟雾等，渲染程序都要加以“考虑”。&lt;/p>
&lt;p>&lt;strong>数字影片的后期处理&lt;/strong>&lt;/p>
&lt;p>对录制完成的数字影片进行了剪接、加效果、加字幕、音乐等后期制作，当生成影片时需要将后加入的素材融合到影片中并压缩成为影片最终格式。这个一般都是这样，只是因环境的不同而不同。&lt;/p>
&lt;p>&lt;strong>渲染滤镜&lt;/strong>&lt;/p>
&lt;p>“&lt;strong>渲染&lt;/strong>”滤镜在图像中创建云彩图案、折射图案和模拟的光反射。也可在 3D 空间中操纵对象，并从灰度文件创建纹理填充以产生类似 3D 的光照效果。&lt;/p>
&lt;p>1、分层云彩&lt;/p>
&lt;p>使用随机生成的介于前景色与背景色之间的值，生成云彩图案。此滤镜将云彩数据和现有的像素混合，其方式与“差值”模式混合颜色的方式相同。第一次选取此滤镜时，图像的某些部分被反相为云彩图案。应用此滤镜几次之后，会创建出与大理石的纹理相似的凸缘与叶脉图案。&lt;/p>
&lt;p>2、光照效果&lt;/p>
&lt;p>使您可以通过改变 17 种光照样式、3 种光照类型和 4 套光照属性，在 RGB 图像上产生无数种光照效果。还可以使用灰度文件的纹理（称为凹凸图）产生类似 3D 的效果，并存储您自己的样式以在其它图像中使用。&lt;/p>
&lt;p>3、镜头光晕&lt;/p>
&lt;p>模拟亮光照射到像机镜头所产生的折射。通过点按图像缩览图的任一位置或拖移其十字线，指定光晕中心的位置。&lt;/p>
&lt;p>4、纹理填充&lt;/p>
&lt;p>用灰度文件或其中的一部分填充选区。若要将纹理添加到文档或选区，请打开要用作纹理填充的灰度文档。并将它装入要进行纹理填充的图像的某一通道中（新建），执行完效果后，可以看到灰度图浮凸在该图像中的效果。&lt;/p>
&lt;p>5、云彩&lt;/p>
&lt;p>使用介于前景色与背景色之间的随机值，生成柔和的云彩图案。若要生成色彩较为分明的云彩图案，请按住 Alt 键并选取“滤镜/渲染/云彩”命令。&lt;/p>
&lt;p>【Proe中的渲染】&lt;/p>
&lt;p>Pro / E 提供了制作高质量图像的渲染工具，能使零件或装配的显现近乎于照片。使用Pro/E的渲染功能，给予各零件色彩及相应的透明度，可是所设计的产品立体分明，更具视觉效果。而不必通过产生样机或&lt;a href="http://baike.baidu.com/view/2226052.htm">实物模型&lt;/a>来比较外观。特别是值入了 CDRS2001 里的高级渲染功能 Photolux，增加渲染的特殊效果而设的指令，可以做出雾效和透镜闪光等效果。可以将产品模型置于特定的环境，比如室内，你可以在此设置地板、四壁和天花板的背景，可对背景进行预览、尺寸和位置的调整；可以在特征或某个表面上设置材质，定义表面颜色、透明度、粗糙度和纹理等；另外，运用贴图功能在产品和包装上生成和附加常规的标记和图案，指定每个图案的大小、位置和透明度；指定光线类型颜色和强度，方便地选择和控制阴影的形式。&lt;/p>
&lt;h2 id="15编解码器">&lt;strong>1.5编解码器&lt;/strong>&lt;/h2>
&lt;p>编解码器（codec）指的是一个能够对一个信号或者一个数据流进行变换的设备或者程序。这里指的变换既包括将信号或者数据流进行编码（通常是为了传输、存储或者加密）或者提取得到一个编码流的操作，也包括为了观察或者处理从这个编码流中恢复适合观察或操作的形式的操作。编解码器经常用在视频会议和流媒体等应用中，通常主要还是用在广电行业，作前端应用。&lt;/p>
&lt;p>经过编码的音频或者视频原始码流经常被叫做“Essence”（有译作“本体”，“精”），以区别于之后加入码流的元信息和其它用以帮助访问码流和增强码流鲁棒性的数据。&lt;/p>
&lt;p>大多数编解码器是有损的，目的是为了得到更大的压缩比和更小的文件大小。当然也有无损的编解码器，但是通常没有必要为了一些几乎注意不到的的质量损失而大大增加编码后文件的大小。除非该编码的结果还将在以后进行下一步的处理，此时连续的有损编码通常会带来较大的质量损失。&lt;/p>
&lt;p>很多多媒体数据流需要同时包含音频数据和视频数据，这时通常会加入一些用于音频和视频数据同步的元数据。这三种数据流可能会被不同的程序，进程或者硬件处理，但是当它们传输或者存储的时候，这三种数据通常是被封装在一起的。通常这种封装是通过视频文件格式来实现的，例如常见的*.mpg, *.avi, *.mov, *.mp4, *.rm, *.ogg or *.tta. 这些格式中有些只能使用某些编解码器，而更多可以以容器的方式使用各种编解码器。&lt;/p>
&lt;p>编解码器对应的英文“codec”（coder和decoder简化而成的合成词语）和decode通常指软件，当特指硬件的时候，通常使用“endec”这个单词。&lt;/p>
&lt;p>硬件编解码器有标清编解码器和高清编解码器。所谓标清，英文为“Standard Definition”，是物理分辨率在720p以下的一种视频格式。720p是指视频的垂直分辨率为720线逐行扫描。具体的说，是指分辨率在400线左右的VCD、DVD、电视节目等“标清”视频格式，即标准清晰度。而物理分辨率达到720p以上则称作为高清,（英文表述High Definition）简称HD。关于高清的标准，国际上公认的有两条：视频垂直分辨率超过720p或1080i；视频宽纵比为16：9。&lt;/p>
&lt;h2 id="16容器和协议">&lt;strong>1.6容器和协议&lt;/strong>&lt;/h2>
&lt;h3 id="161容器格式和编码格式">&lt;strong>1.6.1容器格式和编码格式&lt;/strong>&lt;/h3>
&lt;h4 id="1611-简介">&lt;strong>1.6.1.1 简介&lt;/strong>&lt;/h4>
&lt;p>音频视频编码及文件格式（容器）是一个很庞大的知识领域，完整的说清楚，那就需要些写成一本教材了。这里先就几个简单的概念问题作以介绍：&lt;/p>
&lt;p>&lt;code> &lt;/code>首先要分清楚媒体文件和编码的区别：&lt;/p>
&lt;p>l 文件是既包括视频又包括音频、甚至还带有脚本的一个集合，也可以叫容器；&lt;/p>
&lt;p>l 文件当中的视频和音频的压缩算法才是具体的编码。&lt;/p>
&lt;p>&lt;code> &lt;/code>也就是说一个.avi文件，当中的视频可能是编码a，也可能是编码b，音频可能是编码5，也可能是编码6，具体的用那种编码的解码器，则由播放器按照avi文件格式读取信息去调用了。&lt;/p>
&lt;p>音频视频编码方案有很多，用百家争鸣形容不算过分，目前常见的音频视频编码有以下几类：&lt;/p>
&lt;ul>
&lt;li>MPEG系列：（由ISO[国际标准组织机构]下属的MPEG[运动图象专家组]开发 ）&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>视频编码方面主要是Mpeg1（vcd用的就是它）、Mpeg2（DVD使用）、Mpeg4（现在的DVDRIP使用的都是它的变种，如：divx，xvid等）、Mpeg4 AVC（现在正热门）；&lt;/p>
&lt;p>&lt;code> &lt;/code>音频编码方面主要是MPEG Audio Layer 1/2、MPEG Audio Layer 3（大名鼎鼎的mp3）、MPEG-2 AAC 、MPEG-4 AAC等等。 注意：DVD音频没有采用Mpeg的&lt;/p>
&lt;ul>
&lt;li>H.26X系列：（由ITU[国际电传视讯联盟]主导，侧重网络传输，注意：只是视频编码）&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>包括H261、H262、H263、H263+、H263++、H264（就是MPEG4 AVC-合作的结晶）&lt;/p>
&lt;ul>
&lt;li>微软windows media系列：（公司牛，能自己定标准啊...）&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>视频编码有Mpeg-4 v1/v2/v3（基于MPEG4，DIVX3的来源，呵呵）、Windows Media Video 7/8/9/10&lt;/p>
&lt;p>&lt;code> &lt;/code>音频编码有Windows Media audeo v1/v2/7/8/9&lt;/p>
&lt;ul>
&lt;li>Real Media系列：（注意，这里说的Real的编码，可不是rm、rmvb文件，呵呵）&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>视频编码有RealVideo G2（早期）、RealVideo 8/9/10&lt;/p>
&lt;p>&lt;code> &lt;/code>音频编码有RealAudio cook/sipro（早期）、RealAudio AAC/AACPlus等&lt;/p>
&lt;ul>
&lt;li>QuickTime系列：（是一个平台，有很多编码器）&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>视频编码有Sorenson Video 3（用于QT5，成标准了）、Apple MPEG-4、Apple H.264&lt;/p>
&lt;p>&lt;code> &lt;/code>音频编码有QDesign Music 2、Apple MPEG-4 AAC （这个不错）&lt;/p>
&lt;p>其它，如：Ogg、On2-vpx、flash vidio：不详述啦。&lt;/p>
&lt;p>特殊说明的，是DVD这种媒介的音频编码，采用了相对独立的几种，就列2个常见的吧：AC3（杜比公司开发）、DTS文件格式（容器）：&lt;/p>
&lt;ul>
&lt;li>AVI&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>音视频交互存储，最常见的音频视频容器。支持的视频音频编码也是最多的。&lt;/p>
&lt;ul>
&lt;li>MPG&lt;/li>
&lt;li>MPEG编码采用的音频视频容器，具有流的特性。里面又分为 PS，TS 等，PS 主要用于 DVD 存储，TS 主要用于 HDTV。&lt;/li>
&lt;li>VOB&lt;/li>
&lt;/ul>
&lt;p>DVD采用的音频视频容器格式（即视频MPEG-2，音频用AC3或者DTS），支持多视频多音轨多字幕章节等。&lt;/p>
&lt;ul>
&lt;li>MP4&lt;/li>
&lt;/ul>
&lt;p>MPEG-4编码采用的音频视频容器，基于QuickTime MOV开发，具有许多先进特性。&lt;/p>
&lt;ul>
&lt;li>3GP&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>3GPP视频采用的格式，主要用于流媒体传送。&lt;/p>
&lt;ul>
&lt;li>ASF&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>Windows Media 采用的音频视频容器，能够用于流传送，还能包容脚本等。&lt;/p>
&lt;ul>
&lt;li>RM&lt;/li>
&lt;/ul>
&lt;p>&lt;code> &lt;/code>RealMedia 采用的音频视频容器，用于流传送。&lt;/p>
&lt;p>&lt;code> &lt;/code>注意：RMVB，是视频编码部分采用可变码率压缩的文件格式（容器）&lt;/p>
&lt;ul>
&lt;li>MOV&lt;/li>
&lt;/ul>
&lt;p>QuickTime 的音频视频容器，恐怕也是现今最强大的容器，甚至支持虚拟现实技术，Java 等，它的变种 MP4,3GP都没有这么厉害。&lt;/p>
&lt;ul>
&lt;li>MKV&lt;/li>
&lt;/ul>
&lt;p>MKV 它能把 Windows Media Video，RealVideo，MPEG-4 等视频音频融为一个文件，而且支持多音轨，支持章节字幕等。&lt;/p>
&lt;ul>
&lt;li>WAV&lt;/li>
&lt;/ul>
&lt;p>一种音频容器（注意：只是音频），大家常说的 WAV 就是没有压缩的 PCM 编码，其实 WAV 里面还可以包括 MP3 等其他 ACM 压缩编码。&lt;/p>
&lt;ul>
&lt;li>MP3&lt;/li>
&lt;/ul>
&lt;p>如前所述，不用多说了吧？就是MPEG Audio Layer 3（Mpeg 1 的音频编码的一种）&lt;/p>
&lt;p>文件转换（实际上也是编码转换）&lt;/p>
&lt;h4 id="1612-多媒体容器文件格式">&lt;strong>1.6.1.2 多媒体容器文件格式&lt;/strong>&lt;/h4>
&lt;p>多媒体容器文件格式一般都包括文件头部分、索引部分和多媒体数据部分（如图1所示）。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.010.png" alt="">&lt;/p>
&lt;p>&lt;code> &lt;/code>文件头部分&lt;/p>
&lt;p>&lt;code> &lt;/code>索引部分&lt;/p>
&lt;p>多媒体数据部分文件头部分说明了多媒体数据符合的压缩标准及规范信息，多媒体数据符合的规范信息可以包括视频的分辨率、帧率，音频的采样率等。&lt;/p>
&lt;p>索引部分:由于多媒体数据通常会被分成若干块，各块数据之间也可能是不连续存储的，因此需要再索引部分建立多媒体数据的存储位置索引（如图2所示），其详细显示了视频数据存储位置索引，用来记录相应数据块的存储位置的偏移量，由于各数据块的大小可能不同，因此也可能需要在索引部分建立各种多媒体数据块的尺寸大小索引，用来记录相应数据块的尺寸大小。此外在索引部分还建立了其他索引，比如音视频同步索引等等。PC上播放这些多媒体容器文件时，一般是将索引一次性的全部放到内存中，然后在播放中根据操作（快进、快退等）来通过数据索引得到所需的数据。这个貌似和项目里面的视频信息文件的作用类似~~~&lt;/p>
&lt;p>多媒体数据部分就是经过压缩的多媒体数据，包括视频数据、音频数据、文本数据及其他多媒体数据。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.011.png" alt="">&lt;/p>
&lt;h4 id="1613-音频编解码格式">&lt;strong>1.6.1.3 音频编解码格式&lt;/strong>&lt;/h4>
&lt;ol>
&lt;li>音频编解码格式&lt;/li>
&lt;/ol>
&lt;p>&lt;code> &lt;/code>*MPEG Audio Layer 1/2&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG Audio Layer 3(MP3)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG2 AAC&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG4 AAC&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*Windows Media audeo v1/v2/7/8/9&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*RealAudio cook/sipro(real media array)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*RealAudio AAC/AACPlus(real media series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*QDesign Music 2(apple series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>是QDesign 公司开发的用于高保真高压缩率的编码方式，类似于MP3，不过比MP3要先进。支持流式播放.&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*Apple MPEG-4 AAC(apple series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*ogg(ogg vorbis音频)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*AC3(DVD 专用音频编码)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*DTS(DVD 专用音频编码)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*APE(monkey’s 音频)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*AU(sun 格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*FLAC(fress lossless 音频)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*M4A(mpeg-4音频)（苹果改用的名字，可以改成.mp4）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MP2(mpeg audio layer2音频)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*WMA&lt;/p>
&lt;ol>
&lt;li>视频编解码格式&lt;/li>
&lt;/ol>
&lt;p>&lt;code>　　&lt;/code>*MPEG1(VCD)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG2(DVD)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG4(divx,xvid)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG4 AVC/h.264&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*h.261&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*h.262&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*h.263&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*h.263+&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*h.263++&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG-4 v1/v2/v3(微软windows media系列)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*Windows Media Video 7/8/9/10&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*Sorenson Video 3（用于QT5，成标准了）(apple series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*RealVideo G2(real media series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*RealVideo 8/9/10(real media series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*Apple MPEG-4(apple series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*Apple H.264(apple series)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*flash video&lt;/p>
&lt;ol>
&lt;li>音视频文件格式&lt;/li>
&lt;/ol>
&lt;p>&lt;code>　　 &lt;/code>首先要分清楚媒体文件和编码的区别：文件是既包括视频又包括音频、甚至还带有脚本的一个集合，也可以叫容器；文件当中的视频和音频的压缩算法才是具体的编码。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*AVI&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音视频交互存储，最常见的音频视频容器。支持的视频音频编码也是最多的&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPG&lt;/p>
&lt;p>&lt;code>　　&lt;/code>MPEG编码采用的音频视频容器，具有流的特性。里面又分为 PS，TS 等，PS 主要用于 DVD 存储，TS 主要用于 HDTV。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*VOB&lt;/p>
&lt;p>&lt;code>　　&lt;/code>DVD采用的音频视频容器格式（即视频MPEG-2，音频用AC3或者DTS），支持多视频多音轨多字幕章节等。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MP4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>MPEG-4编码采用的音频视频容器，基于 QuickTime MOV 开发，具有许多先进特性。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*3GP&lt;/p>
&lt;p>&lt;code>　　&lt;/code>3GPP视频采用的格式，主要用于流媒体传送。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*ASF&lt;/p>
&lt;p>&lt;code>　　&lt;/code>Windows Media 采用的音频视频容器，能够用于流传送，还能包容脚本等。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*RM&lt;/p>
&lt;p>&lt;code>　　&lt;/code>RealMedia 采用的音频视频容器，用于流传送。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MOV&lt;/p>
&lt;p>&lt;code>　　&lt;/code>QuickTime 的音频视频容器，恐怕也是现今最强大的容器，甚至支持虚拟现实技术，Java 等，它的变种 MP4,3GP都没有这么厉害。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MKV&lt;/p>
&lt;p>&lt;code>　　&lt;/code>MKV 它能把 Windows Media Video，RealVideo，MPEG-4 等视频音频融为一个文件，而且支持多音轨，支持章节字幕等。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*WAV&lt;/p>
&lt;p>&lt;code>　　&lt;/code>一种音频容器（注意：只是音频），大家常说的 WAV 就是没有压缩的 PCM 编码，其实 WAV 里面还可以包括 MP3 等其他 ACM 压缩编码。&lt;/p>
&lt;ol>
&lt;li>音视频技术&lt;/li>
&lt;/ol>
&lt;p>&lt;code>　　&lt;/code>VCD&lt;/p>
&lt;p>&lt;code>　　&lt;/code>DVD&lt;/p>
&lt;p>&lt;code>　　&lt;/code>DVD目录是如何工作的&lt;/p>
&lt;p>&lt;code>　　&lt;/code>Audio CD&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*标准CD格式也就是44.1K的采样频率，速率88K/秒，16位量化位数&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*＊.cda格式，这就是CD音轨了，一个CD音频文件是一个＊.cda文件，这只是一个索引信息，并不是真正的包含声音信息，所以不论CD音乐的长短，在电脑上看到的“＊.cda文件”都是44字节长&lt;/p>
&lt;p>&lt;code>　　&lt;/code>MP3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MPEG音频文件的压缩是一种有损压缩，MPEG3音频编码具有10：1~12：1的高压缩率，同时基本保持低音频部分不失真，但是牺牲了声音文件中12KHz到16KHz高音频这部分的质量来换取文件的尺寸，相同长度的音乐文件，用＊.mp3格式来储存，一般只有＊.wav文件的1/10，而音质要次于CD格式或WAV格式的声音文件&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*MP3格式压缩音乐的采样频率有很多种，可以用64Kbps或更低的采样频率节省空间，也可以用320Kbps的标准达到极高的音质&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*每分钟音乐的MP3格式只有1MB左右大小&lt;/p>
&lt;p>&lt;code>　　&lt;/code>MIDI：&lt;/p>
&lt;p>&lt;code>　　&lt;/code>经常玩音乐的人应该常听到MIDI（Musical Instrument Digital Interface）这个词，MIDI允许数字合成器和其他设备交换数据。MID文件格式由MIDI继承而来。MID文件并不是一段录制好的声音，而是记录声音的信息，然后在告诉声卡如何再现音乐的一组指令。这样一个MIDI文件每存1分钟的音乐只用大约5～10KB。今天，MID文件主要用于原始乐器作品，流行歌曲的业余表演，游戏音轨以及电子贺卡等。＊.mid文件重放的效果完全依赖声卡的档次。＊.mid格式的最大用处是在电脑作曲领域。＊.mid文件可以用作曲软件写出，也可以通过声卡的MIDI口把外接音序器演奏的乐曲输入电脑里，制成＊.mid文件。&lt;/p>
&lt;p>&lt;code>　　&lt;/code>WMA:&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*WMA的压缩率一般都可以达到1：18左右，WMA的另一个优点是内容提供商可以通过DRM（Digital Rights Management）方案如Windows Media Rights Manager 7加入防拷贝保护。这种内置了版权保护技术可以限制播放时间和播放次数甚至于播放的机器等等，这对被盗版搅得焦头乱额的音乐公司来说可是一个福音，另外WMA还支持音频流(Stream)技术，适合在网络上在线播放&lt;/p>
&lt;p>&lt;code>　　&lt;/code>* WMA这种格式在录制时可以对音质进行调节。同一格式，音质好的可与CD媲美，压缩率较高的可用于网络广播&lt;/p>
&lt;ol>
&lt;li>以文件名标识识别音频编码格式&lt;/li>
&lt;/ol>
&lt;p>&lt;code>　　&lt;/code>*.aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.ac3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：ac3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.ape&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.au&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：pcm_s16be&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.m4a&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.mp2&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.mp3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.ogg&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：vorbis&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.wav&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：pcm_s16le&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.flav&lt;/p>
&lt;p>&lt;code>　　&lt;/code>*.wma&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：wma7x&lt;/p>
&lt;p>&lt;code>　　&lt;/code>以文件名标识识别音视频编码格式&lt;/p>
&lt;p>&lt;code>　　&lt;/code>1．*.MP4 (MP4 MPEG-4视频)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>２．*.3gp (3GPP 第三代合作项目)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：amr_nb((mono, 8000 Hz, Sample Depth 16 morsel, bitrate 12 kbps)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>３．*.3g2 (3GPP 第三代合作项目2)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>4．*.asf (ASF 高级流格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：msmpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>5．*.avi （AVI 音视频交错格式）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：pcm_s161e&lt;/p>
&lt;p>&lt;code>　　&lt;/code>6．*.avi （divx 影片）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>7．*.avi（xvid 视频）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：Xvid&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>8．*.vob （DVD）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg2 video&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：ac3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>9．*.flv (flash 视频格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>10．*.mp4 (iPod 320*240 MPEG-4 视频格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>11．*.mp4(iPod video2 640*480 MPEG-4 视频格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>12．*.mov (MOV 苹果quicktime 格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg4_qt&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac_qt&lt;/p>
&lt;p>&lt;code>　　&lt;/code>13．*.mpg （mpeg1影片）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg1 video&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp2&lt;/p>
&lt;p>&lt;code>　　&lt;/code>14．*.mpg （mpeg2 影片）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg2 video&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp2&lt;/p>
&lt;p>&lt;code>　　&lt;/code>15．*.mp4 （mpeg4 avc 视频格式）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：h.264&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>16．*.mp4 （PSP mpeg4 影片）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：Xvid&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>17．*.mp4 （PSP AVC 视频格式）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：h.264&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mpeg4 aac&lt;/p>
&lt;p>&lt;code>　　&lt;/code>18．*.rm （RM realvideo）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：rv10&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：ac3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>19．*.mpg (超级VCD)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg2 video&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp2&lt;/p>
&lt;p>&lt;code>　　&lt;/code>20．*.swf (SWF 格式)&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>21．*.mpg （video CD 格式）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg1 video&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：mp2&lt;/p>
&lt;p>&lt;code>　　&lt;/code>22．*.vob （mpeg2 ps格式）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：mpeg2 video&lt;/p>
&lt;p>&lt;code>　　&lt;/code>音频编码：ac3&lt;/p>
&lt;p>&lt;code>　　&lt;/code>23．*.wmv（windows 视频格式）&lt;/p>
&lt;p>&lt;code>　　&lt;/code>视频编码：wmv3x&lt;/p>
&lt;p>音频编码：wma7x&lt;/p>
&lt;h3 id="162协议">&lt;strong>1.6.2协议&lt;/strong>&lt;/h3>
&lt;p>两大标准制定组织&lt;/p>
&lt;p>这里的标准，主要指的是音视频压缩标准。两大组织分别是国际标准化组织（iso）和国际电信联盟（itu），相信it行业的从业者没听说过这两个行业的人很少。&lt;/p>
&lt;p>在音视频压缩标准方面，mpeg系列的协议是iso制定的标准，而h系列的协议则是itu制定的标准。&lt;/p>
&lt;h3 id="1621-视频协议">&lt;strong>1.6.2.1 视频协议&lt;/strong>&lt;/h3>
&lt;p>目前主要的视频压缩协议有：h.261、h.263、h.264和mpeg-1、mpeg-2和mpeg-4。第一个视频压缩标准是h.261，它的算法 现 在来看，非常简单，但是，它的很多视频压缩的思想，一直影响到现在最新的压缩标准h.264。h.264单看名字，感觉是itu组织制定的，其实它还有一 个名字叫mpeg-4 part 10，翻译过来叫mpeg-4 第十部分，这是因为h.264是iso和itu组织共同制定的，版权共享。其实，一直以来，h系列的标准制定者和mpeg系列的标准制定者基本上就是同一 群人，而且，这两个系列的算法思想基本上都差不多，唯一有一点不同的协议是mpeg-4，它在它的高级profile中提出了小波变换等算法来实现视频压 缩，从实际发展看，个人感觉不是很成功，采用小波变换的商用codec很少，这可能和这些算法的达不到实时性有关系。&lt;/p>
&lt;p>从应用的角度看，mpeg 系列在消费类应用更广些，大家也更熟悉些，我们熟悉的vcd格式视频主要是mpeg-1，dvd的视频则是mpeg-2，早期大家看的电影在电脑上存盘文 件格式都是*.mpg，基本上也都是mpeg做的压缩了。在行业上，国内的监控行业，也是从mpeg-1到mpeg-2，到前两三年的mpeg-4，再到 最近的h.264。而h系列的标准，用得最多的是视频会议，从h.261到h.263，再到h.263+、h.263++等，再到现在的h.264。&lt;/p>
&lt;p>从技术角度说，h系列的协议对网络的支持更好些，这点mpeg系列要差一些，但是，mpeg它每一代都比h系列同一代的协议要出得晚些，算法也相对更先进 些，因此，它用来做存储协议是很合适的，这也就是为什么普通消费类产品用户很少了解到h系列协议的原因。&lt;/p>
&lt;p>h.264是两大组织最新的算法成果，它在算法层面应该说是非常先进了，有人评价，h.264是视频压缩技术的一个里程碑，在可预见的5到10年内，出现新的视频压缩协议可能性很小，除非压缩理论有重大突破。&lt;/p>
&lt;p>中国也有自己的视频压缩协议，叫做avs，搞了好多年了，不过搞得不是很好。从市场分析，消费类电子、视频会议和流媒体行业，现在要再想进去可能很困难 了。不过最近听说avs又有点火起来了，有消息称，iptv指定要支持avs，这可能是它的最后机会了吧。&lt;/p>
&lt;p>除了上面说的协议，还有很多公司也有自己的压缩算法，不过基本上都是不公开的了，他们这些算法也都非常好，不过和开发人员关系倒不是很大了，典型的是微软 的wmv、realplay公司的rm和rmvb等，他们的使用者也很多，而且他们都偏向流媒体应用。&lt;/p>
&lt;h3 id="1622-音频协议">&lt;strong>1.6.2.2 音频协议.&lt;/strong>&lt;/h3>
&lt;p>音频协议也分两大类，itu组织的主要是用于视频会议的g系列协议，包括g.711、g.722、g.723、g.726、g.728、g.729等。这些 协议主要有两大特点，第一是比较关注语音压缩，毕竟开会主要是要听人讲话；对音乐的压缩效果可能就不是太好了；第二是压缩率都比较大，码率都比较低，典型 的g.723支持5.9k/s这样的码率，而且语音音质还很不错。iso的音频可能更为人熟知一些，最流行的就是mp3，它的全称是mpeg-1 audio layer 3，意思是mpeg-1的音频第三层；另外，最新的音频算法被称为aac（也称为mp4），它定义在mpeg-2或mpeg-4的音频部分。他们的特点是 音质好，支持多声道，高采样精度和采样频率，尤其对音乐的压缩效果比g系列要好太多。当然，这也是因为它们的应用领域侧重点不同造成的。&lt;/p>
&lt;p>同样的，很多大公司也有自己的语音压缩标准，效果也非常好。不过都是他们自己的知识产权和算法，通用市场用的还是少。&lt;/p>
&lt;h3 id="1623-上层通讯协议">&lt;strong>1.6.2.3 上层通讯协议&lt;/strong>&lt;/h3>
&lt;p>在视频会议系统中，目前最流行的有h.323和sip协议，在流媒体应用中，isma rtsp应用得比较多，它属于开源项目，而很多流媒体产商有自己的流媒体传输协议，比如微软的mms等。&lt;/p>
&lt;p>h.323 主要用于视频会议，被称为协议簇，我们前面提到的h系列视频压缩协议和g系列音频压缩协议都属于它的子协议。除了音视频编解码器外；它还定义了各种数据应 用，包括t.120、t.84、t.434等；另外还包括h.245控制信道、h.225.0呼叫信令信道以及ras信道。详细的h.323的知识，这里 就不深入介绍了。&lt;/p>
&lt;p>sip是由ietf提出来的一个应用控制（信令）协议。正如名字所隐含的--用于发起会话。它可用来创建、修改以及终结多个参与者参加的多媒体会话进程。参与会话的成员可以通过组播方式、单播连网或者两者结合的形式进行通信。&lt;/p>
&lt;p>h.323 和sip分别是通信领域与因特网两大阵营推出的建议。h.323企图把ip电话当作是众所周知的传统电话，只是传输方式发生了改变，由电路交换变成了分组交换。而sip协议侧重于将ip电话作为因特网上的一 个应用，较其实应用（如ftp，e-mail等）增加了信令和qos的要求，它们支持的业务基本相同，也都利用rtp作为媒体传输的协议。但h.323是 一个相对复杂的协议。&lt;/p>
&lt;p>rtsp主要用于流媒体传输，它的英文全称是real time streaming protocol。典型的应用就是网络电视的应用，由客户向服务器进行点播，如果在监控行业应用的话，建议当用户进行远程回放录像时，可采用rtsp协议。&lt;/p>
&lt;h2 id="17常用概念介绍">&lt;strong>1.7常用概念介绍&lt;/strong>&lt;/h2>
&lt;h3 id="171硬解">&lt;strong>1.7.1硬解&lt;/strong>&lt;/h3>
&lt;p>硬件解码：&lt;/p>
&lt;p>视频解码分为软解和硬解。&lt;/p>
&lt;p>所谓“软解”就是通过软件让CPU进行视频解码处理；而“硬解”是指不依赖于CPU，通过专用的设备（子卡）单独完成视频解码，比如曾经的VCD/DVD解压卡、视频压缩卡都被冠以“硬解”的称号。现在实现高清硬解不需要额外的子卡，也不需要额外的投入，因为硬解码模块被整合在了GPU内部，而目前主流的显卡（包括整合显卡）都能支持硬解码。&lt;/p>
&lt;p>“硬解”其实更需要软件的支持，只是基本不需要CPU参与运算，从而为系统节约了很多资源开销。通过降低CPU占用率，可以给用户带来很多实惠：&lt;/p>
&lt;p>● GPU硬解码高清视频的优势：&lt;/p>
&lt;p>\1. 不需要太好的CPU，单核足矣，CPU方面节约不少资金；&lt;/p>
&lt;p>\2. 硬解码基本相当于免费附送，不到500元的整合主板都能完美支持；&lt;/p>
&lt;p>\3. 硬解码让CPU占用率超低，系统有能力在看HDTV的同时进行多任务操作；&lt;/p>
&lt;p>\4. CPU需要倾尽全力才能解码HDTV，而GPU只需动用0.1亿晶体管的解码模块就能完成任务，功耗控制更好；&lt;/p>
&lt;p>● GPU硬解码高清视频的劣势：&lt;/p>
&lt;p>\1. 起步较晚，软件支持度无法与软解相提并论；&lt;/p>
&lt;p>\2. 面对杂乱无章的视频编码、封装格式，硬解码无法做到全面兼容；&lt;/p>
&lt;p>\3. 软解拥有大量画面输出补偿及画质增强技术，而硬解这方面做得还远远不够；&lt;/p>
&lt;p>\4. 硬解码软件设置较为复杂，很多朋友根本不知道该如何正确使用GPU硬件解码。&lt;/p>
&lt;p>虽然硬解码拥有种种缺点，但依然倍受广大用户追捧，因为低成本和节能环保这两大致命诱惑让人难以抗拒。随着时间的推移，现在硬解码的缺点基本被改进，只是很多人还不懂得如何用好硬解码，本文就通过大量应用案例来释放出硬解码真正的威力！&lt;/p>
&lt;p>&lt;strong>解码芯片&lt;/strong>(又叫&lt;a href="http://baike.baidu.com/view/845020.htm">解压缩&lt;/a>芯片). 手机播放视频要依赖于解码芯片把画面和声音还原成可以播放的信号， 交由显示屏和喇叭(耳机)输出。 解码芯片的性能是有局限的, 类似于汽车的发动机功率是有极限的. 它能够流畅解码的数据，主要受限于以下几个参数和条件。&lt;/p>
&lt;h3 id="172-ibp帧">&lt;strong>1.7.2 IBP帧&lt;/strong>&lt;/h3>
&lt;p>帧——就是影像动画中最小单位的单幅影像画面，相当于电影胶片上的每一格镜头。而在实际压缩时，会采取各种算法减少数据的容量，其中IPB就是最常见的。&lt;/p>
&lt;p>1、基本概念&lt;/p>
&lt;p>I frame ：帧内编码帧 又称intra picture，I 帧通常是每个 GOP（MPEG 所使用的一种视频压缩技术）的第一个帧，经过适度地压缩，做为随机访问的参考点，可以当成图象。I帧可以看成是一个图像经过压缩后的产物。P frame: 前向预测编码帧 又称predictive-frame，通过充分将低于图像序列中前面已编码帧的时间冗余信息来压缩传输数据量的编码图像，也叫预测帧；&lt;/p>
&lt;p>B frame: 双向预测内插编码帧 又称bi-directional interpolated prediction frame，既考虑与源图像序列前面已编码帧，也顾及源图像序列后面已编码帧之间的时间冗余信息来压缩传输数据量的编码图像，也叫双向预测帧；&lt;/p>
&lt;p>PTS：Presentation Time Stamp。PTS主要用于度量解码后的视频帧什么时候被显示出来&lt;/p>
&lt;p>DTS：Decode Time Stamp。DTS主要是标识读入内存中的ｂｉｔ流在什么时候开始送入解码器中进行解码。&lt;/p>
&lt;p>ps:在没有B帧存在的情况下DTS的顺序和PTS的顺序应该是一样的。&lt;/p>
&lt;p>2、I、B、P的特点&lt;/p>
&lt;p>I帧特点:&lt;/p>
&lt;p>1.它是一个全帧压缩编码帧。它将全帧图像信息进行JPEG压缩编码及传输;&lt;/p>
&lt;p>2.解码时仅用I帧的数据就可重构完整图像;&lt;/p>
&lt;p>3.I帧描述了图像背景和运动主体的详情;&lt;/p>
&lt;p>4.I帧不需要参考其他画面而生成;&lt;/p>
&lt;p>5.I帧是P帧和B帧的参考帧(其质量直接影响到同组中以后各帧的质量);&lt;/p>
&lt;p>6.I帧是帧组GOP的基础帧(第一帧),在一组中只有一个I帧;&lt;/p>
&lt;p>7.I帧不需要考虑运动矢量;&lt;/p>
&lt;p>8.I帧所占数据的信息量比较大。&lt;/p>
&lt;p>P帧:前向预测编码帧。&lt;/p>
&lt;p>P帧的预测与重构:P 帧是以I帧为参考帧,在I帧中找出P帧“某点”的预测值和运动矢量,&lt;/p>
&lt;p>取预测差值和运动矢量一起传送。在接收端根据运动矢量从I帧中找出P帧“某点”的预测&lt;/p>
&lt;p>值并与差值相加以得到P帧“某点”样值,从而可得到完整的P帧。&lt;/p>
&lt;p>P帧特点:&lt;/p>
&lt;p>1.P帧是I帧后面相隔1~2帧的编码帧;&lt;/p>
&lt;p>2.P帧采用运动补偿的方法传送它与前面的I或P帧的差值及运动矢量(预测误差);&lt;/p>
&lt;p>3.解码时必须将I帧中的预测值与预测误差求和后才能重构完整的P帧图像;&lt;/p>
&lt;p>4.P帧属于前向预测的帧间编码。它只参考前面最靠近它的I帧或P帧;&lt;/p>
&lt;p>5.P帧可以是其后面P帧的参考帧,也可以是其前后的B帧的参考帧;&lt;/p>
&lt;p>6.由于P帧是参考帧,它可能造成解码错误的扩散;&lt;/p>
&lt;p>7.由于是差值传送,P帧的压缩比较高。&lt;/p>
&lt;p>B帧:双向预测内插编码帧。&lt;/p>
&lt;p>B帧的预测与重构&lt;/p>
&lt;p>B帧以前面的I或P帧和后面的P帧为参考帧,“找出”B帧“某点”的预测值和两个运动矢&lt;/p>
&lt;p>量,并取预测差值和运动矢量传送。接收端根据运动矢量在两个参考帧中“找出(算出)”预测&lt;/p>
&lt;p>值并与差值求和,得到B帧“某点”样值,从而可得到完整的B帧。&lt;/p>
&lt;p>B帧特点&lt;/p>
&lt;p>1.B帧是由前面的I或P帧和后面的P帧来进行预测的;&lt;/p>
&lt;p>2.B帧传送的是它与前面的I或P帧和后面的P帧之间的预测误差及运动矢量;&lt;/p>
&lt;p>3.B帧是双向预测编码帧;&lt;/p>
&lt;p>4.B帧压缩比最高,因为它只反映丙参考帧间运动主体的变化情况,预测比较准确;&lt;/p>
&lt;p>5.B帧不是参考帧,不会造成解码错误的扩散。&lt;/p>
&lt;p>注:I、B、P各帧是根据压缩算法的需要,是人为定义的,它们都是实实在在的物理帧,至于图像&lt;/p>
&lt;p>中的哪一帧是I帧,是随机的,一但确定了I帧,以后的各帧就严格按规定顺序排列&lt;/p>
&lt;p>&lt;code> &lt;/code>从上面的解释看，我们知道I和P的解码算法比较简单，资源占用也比较少，I只要自己完成就行了，P呢，也只需要解码器把前一个画面缓存一下，遇到P时就使用之前缓存的画面就好了，如果视频流只有I和P，解码器可以不管后面的数据，边读边解码，线性前进，大家很舒服。&lt;/p>
&lt;p>&lt;code> &lt;/code>但网络上的电影很多都采用了B帧，因为B帧记录的是前后帧的差别，比P帧能节约更多的空间，但这样一来，文件小了，解码器就麻烦了，因为在解码时，不仅要用之前缓存的画面，还要知道下一个I或者P的画面（也就是说要预读预解码），而且，B帧不能简单地丢掉，因为B帧其实也包含了画面信息，如果简单丢掉，并用之前的画面简单重复，就会造成画面卡（其实就是丢帧了），并且由于网络上的电影为了节约空间，往往使用相当多的B帧，B帧用的多，对不支持B帧的播放器就造成更大的困扰，画面也就越卡。&lt;/p>
&lt;p>&lt;code> &lt;/code>一般平均来说，I的压缩率是7（跟JPG差不多），P是20，B可以达到50，可见使用B帧能节省大量空间，节省出来的空间可以用来保存多一些I帧，这样在相同码率下，可以提供更好的画质。&lt;/p>
&lt;p>3、GOP&lt;/p>
&lt;p>GOP：Group of Pictures 画面组&lt;/p>
&lt;p>&lt;code> &lt;/code>GOP（Group of Pictures）策略影响编码质量：所谓GOP，意思是画面组，一个GOP就是一组连续的画面。MPEG编码将画面（即帧）分为I、P、B三种，I是内部编码帧，P是前向预测帧，B是双向内插帧。简单地讲，I帧是一个完整的画面，而P帧和B帧记录的是相对于I帧的变化。没有I帧，P帧和B帧就无法解码，这就是MPEG格式难以精确剪辑的原因，也是我们之所以要微调头和尾的原因。 MPEG-2 帧结构&lt;/p>
&lt;p>&lt;code> &lt;/code>MPEG-2压缩的帧结构有两个参数，一个是GOP（Group Of Picture）图像组的长度，一般可按编码方式从1－15；另一个是I帧和P帧之间B帧的数量，一般是1－2个。前者在理论上记录为N，即多少帧里面出现一次I帧；后者描述为多少帧里出现一次P帧，记录为M。&lt;/p>
&lt;p>下面举例说明：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.012.jpeg" alt="">&lt;/p>
&lt;p>在如上图中，GOP (Group of Pictures)长度为13，S0~S7 表示 8个视点，T0~T12 为 GOP的 13个时刻。每个 GOP包含帧数为视点数 GOP 长度的乘积。在该图中一个 GOP 中，包含94 个 B帧。B 帧占一个 GOP 总帧数的 90.38%。GOP 越长，B 帧所占比例更高，编码的率失真性能越高。下图测试序列 Race1 在不同 GOP 下的率失真性能对比。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.013.jpeg" alt="">&lt;/p>
&lt;p>4、mpeg4视频中IBP的判定&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg4的每一帧开头是固定的：00 00 01 b6，那么我们如何判断当前帧属于什么帧呢？在接下来的2bit，将会告诉我们答案。注意：是2bit，不是byte，下面是各类型帧与2bit的对应关系：&lt;/p>
&lt;p>&lt;code>　　&lt;/code>00: I Frame&lt;/p>
&lt;p>&lt;code>　　&lt;/code>01: P Frame&lt;/p>
&lt;p>&lt;code>　　&lt;/code>10: B Frame　&lt;/p>
&lt;p>为了更好地说明，我们举几个例子，以下是16进制显示的视频编码：&lt;/p>
&lt;p>&lt;code>　　&lt;/code>00 00 01 b6 10 34 78 97 09 87 06 57 87 …… I帧&lt;/p>
&lt;p>&lt;code>　　&lt;/code>00 00 01 b6 50 78 34 20 cc 66 b3 89 …… P帧&lt;/p>
&lt;p>&lt;code>　　&lt;/code>00 00 01 b6 96 88 99 06 54 34 78 90 98 …… B帧&lt;/p>
&lt;p>下面我们来分析一下为什么他们分别是I、P、B帧&lt;/p>
&lt;p>&lt;code>　　&lt;/code>0x10 = 0001 0000&lt;/p>
&lt;p>&lt;code>　　&lt;/code>0x50 = 0101 0000&lt;/p>
&lt;p>&lt;code>　　&lt;/code>0x96 = 1001 0100　&lt;/p>
&lt;p>大家看红色的2bit，再对照开头说的帧与2bit的对应关系，是不是符合了呢？&lt;/p>
&lt;p>下面给出一段c++代码供大家参考：&lt;/p>
&lt;p>&lt;strong>[cpp]&lt;/strong> &lt;a href="http://blog.csdn.net/ameyume/article/details/6722450#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/ameyume/article/details/6722450#">copy&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buf&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">BYTE&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="mh">0xc0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mh">0x00&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="c1">//I Frame
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mh">0x40&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="c1">//P Frame
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mh">0x80&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl"> &lt;span class="c1">//B Frame
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="173-dts和pts">&lt;strong>1.7.3 DTS和PTS&lt;/strong>&lt;/h3>
&lt;h3 id="174-分辨率">&lt;strong>1.7.4 分辨率&lt;/strong>&lt;/h3>
&lt;p>这里有2个概念， 分别是：&lt;/p>
&lt;p>a. 物理分辨率, 即手机屏幕能显示的像素数， 用W x H个像素表示。常见的手机屏幕分辨率为320x240(QVGA), 随着大屏幕手机的普及， 更高的分辨率也开始出现. 例如: 480x320(iphone),640x360(nHD, 诺基亚触屏系列常见),640x480(VGA, 多普达系列常见), 甚至高达852x480(夏普高端手机常见).&lt;/p>
&lt;p>b. 视频文件的分辨率， 这个是指视频画面的实际分辨率, 如， 320x240, 480x272, 640x480等等。&lt;/p>
&lt;p>一般来说， 大部分手机的解码芯片不支持超过其屏幕物理分辨率的视频, 部分可以支持超过其屏幕物理分辨率的视频， 例如, 虽然iphone的屏幕物理分辨率为480x320, 但它支持640x480的视频， 此时播放的画面实际是把原视频缩小的.&lt;/p>
&lt;h3 id="175-码率">&lt;strong>1.7.5 码率&lt;/strong>&lt;/h3>
&lt;p>一般用多少kbps(千比特/秒)或者&lt;a href="http://baike.baidu.com/view/496716.htm">mbps&lt;/a>(&lt;a href="http://baike.baidu.com/view/1094167.htm">兆比特&lt;/a>/秒)来表示。 手机解码芯片所支持的码率一般都在1Mbps以下.&lt;/p>
&lt;h3 id="176-帧率">&lt;strong>1.7.6 帧率&lt;/strong>&lt;/h3>
&lt;p>(FPS, 帧/秒), 就是视频画面刷新的速度， 作为参考, 国内电视机一般是25FPS, 电影标准为24FPS. 手机芯片， 最高支持30FPS, 早期型号最大只能15fps。&lt;/p>
&lt;h3 id="177-rgb和yuv">&lt;strong>1.7.7 RGB和YUV&lt;/strong>&lt;/h3>
&lt;p>RGB指的是红绿蓝，应用还是很广泛的，比如显示器显示，bmp文件格式中的像素值等；而yuv主要指亮度和两个色差信号，被称为luminance和 chrominance他们的转化关系可以自己去查一下，我们视频里面基本上都是用yuv格式。&lt;/p>
&lt;p>YUV文件格式又分很多种，如果算上存储格式，就更多了，比如yuv444、yuv422、yuv411、yuv420等等，视频压缩用到的是420格式，这是 因为人眼对亮度更敏感些，对色度相对要差些。另外要注意几个英文单词的意思，比如：packet、planar、interlace、 progressive等。&lt;/p>
&lt;h3 id="178-实时和非实时">&lt;strong>1.7.8 实时和非实时&lt;/strong>&lt;/h3>
&lt;p>实时与非实时 主要用来形容编码器，它含有两个意思，一个是要保证帧率，也就是每秒25帧，另一个是“live”的意思，意味着直播，所谓的“实况转播”的“实”。&lt;/p>
&lt;h3 id="179-复合视频和s-video">&lt;strong>1.7.9 复合视频和s-video&lt;/strong>&lt;/h3>
&lt;p>ntsc 和pal彩色视频信号是这样构成的--首先有一个基本的黑白视频信号，然后在每个水平同步脉冲之后，加入一个颜色脉冲和一个亮度信号。因为彩色信号是由多 种数据“叠加”起来的，故称之为“复合视频”。s-video则是一种信号质量更高的视频接口，它取消了信号叠加的方法，可有效避免一些无谓的质量损失。 它的 功能是将rgb三原色和亮度进行分离处理。&lt;/p>
&lt;h3 id="1710-硬件加速">&lt;strong>1.7.10 硬件加速&lt;/strong>&lt;/h3>
&lt;p>VDA/vaspi/DX等等。&lt;/p>
&lt;h3 id="1711-ffmpeg-device">&lt;strong>1.7.11 FFmpeg Device&lt;/strong>&lt;/h3>
&lt;p>硬件方式：CDIO / DC1394 （输入设备）&lt;/p>
&lt;p>非扩展硬件：DSHOW（输入设备）、SDL（输出设备）、X11（输入）、VFWCAP（输入）、DV1394（输入）等等。&lt;/p>
&lt;p>第二章 FFmpeg框架&lt;/p>
&lt;h2 id="21-ffmpeg概述">&lt;strong>2.1 FFmpeg概述&lt;/strong>&lt;/h2>
&lt;h3 id="211简介">&lt;strong>2.1.1简介&lt;/strong>&lt;/h3>
&lt;p>Open-source multimedia library， 遵从GPL/LGPL协议，ffmpeg只是一个商标，它的所有权属于ffmpeg org。&lt;/p>
&lt;p>由Fabrice Bellard（法国著名程序员Born in 1972）于2000年发起创建的开源项目，同时也是TinyCC(1996)、发现最快速计算圆周率算法(1997)、 TinyGL(1998)、QEMU(2003)、 Jslinux(2011)等等的发起人或作者。&lt;/p>
&lt;p>FFmpeg在Linux平台下开发，但它同样也可以在其它操作系统环境中编译运行，包括Windows、Mac OS X等。&lt;/p>
&lt;p>这个项目最早由Fabrice Bellard发起，现在由Michael Niedermayer维护。许多FFmpeg的开发人员都来自MPlayer项目，而且当前FFmpeg也是放在MPlayer项目组的服务器上。项目的名称来自MPEG视频编码标准，前面的&amp;quot;FF&amp;quot;代表&amp;quot;Fast Forward&amp;quot;。&lt;/p>
&lt;p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了目前领先的音/视频编码库libavcodec。 FFmpeg是在Linux下开发出来的，但它可以在包括Windows在内的大多数操作系统中编译。这个项目是由Fabrice Bellard发起的，现在由Michael Niedermayer主持。可以轻易地实现多种视频格式之间的相互转换，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式。&lt;/p>
&lt;h3 id="212功能">&lt;strong>2.1.2功能&lt;/strong>&lt;/h3>
&lt;p>多媒体视频处理工具FFmpeg有非常强大的功能[2]包括视频采集功能、视频格式转换、视频抓图、给视频加水印等。&lt;/p>
&lt;p>视频采集功能&lt;/p>
&lt;p>FFmpeg是在Linux下开发出来的，但它可以在包括Windows在内的大多数操作系统中编译。这个项目是由Fabrice Bellard发起的，现在由Michael Niedermayer主持。&lt;/p>
&lt;p>ffmpeg视频采集功能非常强大，不仅可以采集视频采集卡或USB摄像头的图像，还可以进行屏幕录制，同时还支持以RTP方式将视频流传送给支持RTSP的流媒体服务器，支持直播应用。&lt;/p>
&lt;p>ffmpeg在Linux下的视频采集&lt;/p>
&lt;p>在Linux平台上，ffmpeg对V4L2的视频设备提高了很好的支持，如：&lt;/p>
&lt;p>./ffmpeg -t 10 -f video4linux2 -s 176*144 -r 8 -i /dev/video0 -vcodec h263 -f rtp rtp://192.168.1.105:5060 &amp;gt; /tmp/ffmpeg.sdp&lt;/p>
&lt;p>以上命令表示：采集10秒钟视频，对video4linux2视频设备进行采集，采集QCIF(176*144)的视频，每秒8帧，视频设备为/dev/video0，视频编码为h263，输出格式为RTP，后面定义了IP地址及端口，将该码流所对应的SDP文件重定向到/tmp/ffmpeg.sdp中，将此SDP文件上传到流媒体服务器就可以实现直播了。&lt;/p>
&lt;p>ffmpeg在windows下的视频采集&lt;/p>
&lt;p>在windows下关于ffmpeg视频采集的资料非常少，但是ffmpeg还是支持windows下视频采集的。ffmpeg支持windows下video for windows(VFW)设备的视频采集，不过VFW设备已经过时，正在被WDM的视频设备所取代，但是ffmpeg还没有支持WDM的计划，不过好像有将WDM转为VFW的工具，因此ffmpeg还是可以在windows下进行视频采集的。&lt;/p>
&lt;p>视频格式转换功能&lt;/p>
&lt;p>ffmpeg视频转换功能。视频格式转换，比如可以将多种视频格式转换为flv格式，可不是视频信号转换 。&lt;/p>
&lt;p>ffmpeg可以轻易地实现多种视频格式之间的相互转换(wma,rm,avi,mod等)，例如可以将摄录下的视频avi等转成现在视频网站所采用的flv格式。&lt;/p>
&lt;p>视频截图功能&lt;/p>
&lt;p>对于选定的视频，截取指定时间的缩略图。视频抓图，获取静态图和动态图，不提倡抓gif文件;因为抓出的gif文件大而播放不流畅&lt;/p>
&lt;p>给视频加水印功能&lt;/p>
&lt;p>使用ffmpeg 视频添加水印(logo)。&lt;/p>
&lt;h3 id="213模块组成">&lt;strong>2.1.3模块组成&lt;/strong>&lt;/h3>
&lt;p>FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。它包括了领先的音/视频编码库libavcodec等。&lt;/p>
&lt;p>libavformat：用于各种音视频封装格式的生成和解析，包括获取解码所需信息以生成解码上下文结构和读取音视频帧等功能；音视频的格式解析协议，为libavcodec分析码流提供独立的音频或视频码流源。&lt;/p>
&lt;p>libavcodec：用于各种类型声音/图像编解码；该库是音视频编解码核心，实现了市面上可见的绝大部分解码器的功能，libavcodec库被其他各大解码器ffdshow，Mplayer等所包含或应用。&lt;/p>
&lt;p>libavdevice：硬件采集、加速、显示。操作计算机中常用的音视频捕获或输出设备：ALSA,AUDIO_BEOS,JACK,OSS,1394，VFW。&lt;/p>
&lt;p>libavfilter:filter（FileIO、FPS、DrawText）音视频滤波器的开发，如宽高比 裁剪 格式化 非格式化 伸缩。&lt;/p>
&lt;p>libavutil：包含一些公共的工具函数的使用库，包括算数运算 字符操作；&lt;/p>
&lt;p>libavresample：音视频封转编解码格式预设等。&lt;/p>
&lt;p>libswscale：（原始视频格式转换）用于视频场景比例缩放、色彩映射转换；图像颜色空间或格式转换，如rgb565 rgb888等与yuv420等之间转换。&lt;/p>
&lt;p>libswresample：原始音频格式转码&lt;/p>
&lt;p>libpostproc：（同步、时间计算的简单算法）用于后期效果处理；音视频应用的后处理，如图像的去块效应。&lt;/p>
&lt;p>ffmpeg：该项目提供的一个工具，可用于格式转换、解码或电视卡即时编码等；&lt;/p>
&lt;p>ffsever：一个 HTTP 多媒体即时广播串流服务器；&lt;/p>
&lt;p>ffplay：是一个简单的播放器，使用ffmpeg 库解析和解码，通过SDL显示；&lt;/p>
&lt;h3 id="214命令集">&lt;strong>2.1.4命令集&lt;/strong>&lt;/h3>
&lt;p>ffmpeg 命令集举例&lt;/p>
&lt;p>1.获取视频的信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video.avi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2.将图片序列合成视频&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -f image2 -i image%d.jpg video.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的命令会把当前目录下的图片（名字如：image1.jpg. image2.jpg. 等...）合并成video.mpg&lt;/p>
&lt;p>3.将视频分解成图片序列&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video.mpg image%d.jpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的命令会生成image1.jpg. image2.jpg. ...&lt;/p>
&lt;p>支持的图片格式有：PGM. PPM. PAM. PGMYUV. JPEG. GIF. PNG. TIFF. SGI&lt;/p>
&lt;p>4.为视频重新编码以适合在iPod/iPhone上播放&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i source\_video.avi input -acodec aac -ab 128kb -vcodec mpeg4 -b 1200kb -mbd 2 -flags +4mv+trell -aic 2 -cmp 2 -subcmp 2 -s 320x180 -title X final\_video.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明：&lt;/p>
&lt;p>* 源视频：source_video.avi&lt;/p>
&lt;p>* 音频编码：aac&lt;/p>
&lt;p>* 音频位率：128kb/s&lt;/p>
&lt;p>* 视频编码：mpeg4&lt;/p>
&lt;p>* 视频位率：1200kb/s&lt;/p>
&lt;p>* 视频尺寸：320 X 180&lt;/p>
&lt;p>* 生成的视频：final_video.mp4&lt;/p>
&lt;p>5.为视频重新编码以适合在PSP上播放&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i source\_video.avi -b 300 -s 320x240 -vcodec xvid -ab 32 -ar 24000 -acodec aac final\_video.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明：&lt;/p>
&lt;p>* 源视频：source_video.avi&lt;/p>
&lt;p>* 音频编码：aac&lt;/p>
&lt;p>* 音频位率：32kb/s&lt;/p>
&lt;p>* 视频编码：xvid&lt;/p>
&lt;p>* 视频位率：1200kb/s&lt;/p>
&lt;p>* 视频尺寸：320 X 180&lt;/p>
&lt;p>* 生成的视频：final_video.mp4&lt;/p>
&lt;p>6.从视频抽出声音.并存为Mp3&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i source\_video.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 sound.mp3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明：&lt;/p>
&lt;p>* 源视频：source_video.avi&lt;/p>
&lt;p>* 音频位率：192kb/s&lt;/p>
&lt;p>* 输出格式：mp3&lt;/p>
&lt;p>* 生成的声音：sound.mp3&lt;/p>
&lt;p>7.将wav文件转成Mp3&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i son\_origine.avi -vn -ar 44100 -ac 2 -ab 192 -f mp3 son\_final.mp3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>8.将.avi视频转成.mpg&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi video\_finale.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>9.将.mpg转成.avi&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.mpg video\_finale.avi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>10.将.avi转成gif动画（未压缩）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi gif\_anime.gif
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>11.合成视频和音频&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i son.wav -i video\_origine.avi video\_finale.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>12.将.avi转成.flv&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -ab 56 -ar 44100 -b 200 -r 15 -s 320x240 -f flv video\_finale.flv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>13.将.avi转成dv&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -s pal -r pal -aspect 4:3 -ar 48000 -ac 2 video\_finale.dv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或者：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -target pal-dv video\_finale.dv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>14.将.avi压缩成divx&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -s 320x240 -vcodec msmpeg4v2 video\_finale.avi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>15.将Ogg Theora压缩成Mpeg dvd&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i film\_sortie\_cinelerra.ogm -s 720x576 -vcodec mpeg2video -acodec mp3 film\_terminate.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>16.将.avi压缩成SVCD mpeg2&lt;/p>
&lt;p>NTSC格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -target ntsc-svcd video\_finale.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PAL格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -target pal-svcd video\_finale.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>17.将.avi压缩成VCD mpeg2&lt;/p>
&lt;p>NTSC格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -target ntsc-vcd video\_finale.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>PAL格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i video\_origine.avi -target pal-vcd video\_finale.mpg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>18.多通道编码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i fichierentree -pass 2 -passlogfile ffmpeg2pass fichiersortie-2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>19.从flv提取mp3&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">ffmpeg -i source.flv -ab 128k dest.mp3
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="22-媒体播放器三大底层框架">&lt;strong>2.2 媒体播放器三大底层框架&lt;/strong>&lt;/h2>
&lt;p>媒体播放工具，这里主要指视频播放，因为要面临庞大的兼容性和纷繁复杂的算法，从架构上看，能脱颖而出的体系屈指可数。大体来说业界主要有3大架构：MPC、MPlayer和VLC。这3大架构及其衍生品占领了90%的市场，凡是用户能看到的免费媒体播放软件，无一不是源自这3大架构。&lt;/p>
&lt;p>&lt;strong>MPC/HC架构&lt;/strong>&lt;/p>
&lt;p>&lt;code> &lt;/code>MPC（Media Player Classic）和它的后续者MPC-HC应该并列而说。MPC基于DirectShow架构，是Windows系统下元祖级别的播放器。包括KMP之流最早也就是抄来MPC的代码再换个界面。MPCHC则在MPC的原作者Gabest渐渐退出开发后的继承者，MPCHC有很多创新特性，包括开始融入ffmpeg和支持更多DirectX特性和DXVA等等。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.014.png" alt="">&lt;/p>
&lt;p>优点：更直接的支持DXVA，对一些稀奇古怪的Windows平台上的格式可以通过调用第三方的Filter组件等，拥有更好的兼容性&lt;/p>
&lt;p>缺点：有人说DirectShow是Windows中最难掌握的SDK，开发复杂；DirectShow允许第三方封装的特点也让兼容性和稳定性问题复杂化；第三方Filter出现异常时非常难以分析处理，更难以复用；&lt;/p>
&lt;p>射手播放器的架构主要来自MPC-HC，但更多的融合了FFmpeg的优势，对DirectShow Filter进行了多处改写，大大加强了对ffmpeg的利用，提高了解码稳定性，同时扩展了解码能力和兼容性。&lt;/p>
&lt;p>&lt;strong>mplayer架构&lt;/strong>&lt;/p>
&lt;p>如果说MPC是Windows上的元祖，那么mplayer就是linux上媒体播放的元祖了。mplayer使用ffmpeg作为解码核心，也是与ffmpeg结合最紧密的项目，ffmpeg的代码就是由mplayer来host，开发者群也有非常大的交集。借助linux开发/使用者的强大实力，mplayer建立了要比DirectShow稳定的多的工作流程。超越ffmpeg本身的功能外，后来又通过反向工程使之可以调用Windows上的DirectShow Filter DLL，让mplayer架构越来越吸引人，成为兼具稳定性和性能的优秀作品。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.015.png" alt="">&lt;/p>
&lt;p>优点：稳定，兼容性也可以说相当不错&lt;/p>
&lt;p>缺点：代码结构不清晰；纯C语言开发，难于阅读；显卡硬件加速还需要越过更多障碍&lt;/p>
&lt;p>&lt;strong>VLC架构&lt;/strong>&lt;/p>
&lt;p>VLC是个后起之秀，开发速度的进展可以说是一只奇葩。虽然同样基于ffmpeg，但可能是相对于“左三年右三年缝缝补补又三年”的mplayer架构来说，VLC的架构在设计之初就很好的考虑到模块化开发，所以使它更吸引年轻的开发人员。成为近年发展非常快的架构。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.016.png" alt="">&lt;/p>
&lt;p>优点：稳定，兼容性也可以说相当不错&lt;/p>
&lt;p>缺点：纯C语言开发，难于阅读；硬件加速略有障碍&lt;/p>
&lt;p>很多人都会发现，3大架构中都可以看到ffmpeg的名字。说起ffmpeg，那真是”One Ring to rule them all，One Ring to find them, One Ring to bring them all“。在#ffmpeg有人和我说过，想不用ffmpeg去写媒体播放器，就像是造汽车而不用车轮。但是ffmpeg本身仅作为命令行工具或类库（常见的如libavcodec）出现。终端用户很少能直接接触到ffmpeg，所以知名度也较小。&lt;/p>
&lt;h1 id="第三章-编译及简单应用">&lt;strong>第三章 编译及简单应用&lt;/strong>&lt;/h1>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.017.png" alt="">&lt;/p>
&lt;h2 id="31-ffmpeg库编译和入门介绍-41">&lt;strong>3.1 FFmpeg库编译和入门介绍 41&lt;/strong>&lt;/h2>
&lt;p>FFmpeg的编译主要有linux和windows下面两种，linux下面简单，此处着重讲解windows下面的交叉编译：&lt;/p>
&lt;ol start="0">
&lt;li>官网直接获取exe&lt;/li>
&lt;/ol>
&lt;p>ffmpeg的官方网站是：http://ffmpeg.org/&lt;/p>
&lt;p>编译好的windows可用版本的下载地址（官网中可以连接到这个网站，和官方网站保持同步）： &lt;a href="http://ffmpeg.zeranoe.com/builds/">http://ffmpeg.zeranoe.com/builds/&lt;/a>&lt;/p>
&lt;p>该网站中的FFMPEG分为3个版本：Static，Shared，Dev。&lt;/p>
&lt;p>前两个版本可以直接在命令行中使用，他们的区别在于：Static里面只有3个应用程序：ffmpeg.exe，ffplay.exe，ffprobe.exe，每个exe的体积都很大，相关的Dll已经被编译到exe里面去了。Shared里面除了3个应用程序：ffmpeg.exe，ffplay.exe，ffprobe.exe之外，还有一些Dll，比如说avcodec-54.dll之类的。Shared里面的exe体积很小，他们在运行的时候，到相应的Dll中调用功能。&lt;/p>
&lt;p>Dev版本是用于开发的，里面包含了库文件xxx.lib以及头文件xxx.h，这个版本不包含exe文件。&lt;/p>
&lt;p>打开系统命令行接面，切换到ffmpeg所在的目录，就可以使用这3个应用程序了。&lt;/p>
&lt;p>ps ：建议大家跳过第0步，学会自己从源码开始编译调试&lt;/p>
&lt;p>1、获取ffmpeg源码&lt;/p>
&lt;p>下载网址：svn://svn.mplayerhq.hu/ffmpeg/trunk&lt;/p>
&lt;p>首先需要安装svn客户端，我用的是TortoiseSVN，应该是可以很方便地从网上下载，下载之后安装。&lt;/p>
&lt;p>安装之后，在你要保存ffmpeg源代码的位置上点右键，然后选择check out，输入以上的网址，包括前面的“svn:”，然后点OK按钮，它会把整个源代码下到本地，根据网速，可能几秒钟到几十分钟不等。&lt;/p>
&lt;p>#tar -xvf ffmpeg-0.10.x.tar.bz2&lt;/p>
&lt;p>#cd&lt;/p>
&lt;p>#./configure&lt;/p>
&lt;p>#make&lt;/p>
&lt;p>#make install&lt;/p>
&lt;p>2、搭建windows下的编译环境&lt;/p>
&lt;p>2.1 mingw和msys&lt;/p>
&lt;p>下载地址http://sourceforge.net/projects/mingw/&lt;/p>
&lt;p>执行下载文件：mingw-get-setup.exe，选择下一步----安装路径：C:\MinGW（我直接采用默认路径，未做修改）&lt;/p>
&lt;p>&lt;code> &lt;/code>（提示：msys此处就不用下载了，mingw-get-setup.exe中已经包含了msys1.0,后面安装的时候就可以看到该选项。 ）&lt;/p>
&lt;p>&lt;code> &lt;/code>安装后会启用MinGW Installer，在Installation Package Settings中选择：&lt;/p>
&lt;p>&lt;code> &lt;/code>√ Basic Setup&lt;/p>
&lt;p>&lt;code> &lt;/code>√ All Packages&lt;/p>
&lt;p>&lt;code> &lt;/code>√ MinGW&lt;/p>
&lt;p>&lt;code> &lt;/code>MinGW Base System&lt;/p>
&lt;p>&lt;code> &lt;/code>MinGW Libraries&lt;/p>
&lt;p>&lt;code> &lt;/code>MinGW Contributed&lt;/p>
&lt;p>&lt;code> &lt;/code>MinGW Autotools&lt;/p>
&lt;p>&lt;code> &lt;/code>√ MSYS&lt;/p>
&lt;p>&lt;code> &lt;/code>MSYS Base System&lt;/p>
&lt;p>&lt;code> &lt;/code>MinGW Developer ToolKit&lt;/p>
&lt;p>&lt;code> &lt;/code>MSYS System Builder&lt;/p>
&lt;p>等待安装完成（去倒杯水，或者听两首歌吧）！我的选择是把看上去有点熟悉的、会用到的package都装上！&lt;/p>
&lt;p>也可以通过Installation Package Settings随时添加/删除需要的库文件，所以无需太过担心。&lt;/p>
&lt;p>安装完成后，在C:\MinGW目录下可以看到 msys 文件夹，msys也已经安装。&lt;/p>
&lt;p>ps：windows下MinGW-w64安装，这个我没有试过，有兴趣的朋友可以去试下 链接地址：http://blog.csdn.net/ayw_hehe/article/details/11761755&lt;/p>
&lt;p>2.2 下载 yasm(汇编编译器)，也可以直接下载源码包进行编译安装&lt;/p>
&lt;p>ffmpeg编译的时候里面的汇编代码需要yasm.exe&lt;/p>
&lt;p>去官网：http://yasm.tortall.net/Download.html 下载&lt;/p>
&lt;p>在Latest Release栏，直接下载：Win32 .exe (for general use on 32-bit Windows)&lt;/p>
&lt;p>文件名类似为：yasm-1.2.0-win32.exe&lt;/p>
&lt;p>2.3准备一个线程库（不准备编译x264的可以跳过）&lt;/p>
&lt;p>下载 pthreadGC2.dll&lt;/p>
&lt;p>pthreadgc2.dll是功能强大的处理数字化影视作品编辑软件premiere6运行所需的一个DLL文件。这是一个无威胁文件。属于Open Source Software community project的文件。&lt;/p>
&lt;p>&lt;code> &lt;/code>直接去baidu或google搜索下载就可以了。&lt;/p>
&lt;p>3、配置 msys.bat 批处理文件&lt;/p>
&lt;p>此处为了方便VS2010调用ffmpeg的动态库，可以通过配置让ffmpeg编译时产生windows下调用dll对应的lib，当然，如果你没有这个需要，那么就可以省略以下处理，直接进入步骤4。&lt;/p>
&lt;p>&lt;code> &lt;/code>进入：C:\MinGW\msys\1.0\文件夹，使用UltraEdit打开msys.bat文件，在文件的最最前面加入如下一行：&lt;/p>
&lt;p>&lt;code> &lt;/code>call &amp;quot;D:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>添加后效果如下：&lt;/p>
&lt;p>&lt;code> &lt;/code>call &amp;quot;D:\Program Files\Microsoft Visual Studio 10.0\VC\bin\vcvars32.bat&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>@echo off&lt;/p>
&lt;p>&lt;code> &lt;/code>rem Copyright (C): 2001, 2002, 2003, 2004, 2005 Earnie Boyd&lt;/p>
&lt;p>&lt;code> &lt;/code>rem mailto:earnie@users.sf.net&lt;/p>
&lt;p>&lt;code> &lt;/code>rem This file is part of Minimal SYStem&lt;/p>
&lt;p>&lt;code> &lt;/code>rem &lt;a href="http://www.mingw.org/msys.shtml">http://www.mingw.org/msys.shtml&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>rem&lt;/p>
&lt;p>&lt;code> &lt;/code>rem File: msys.bat&lt;/p>
&lt;p>&lt;code> &lt;/code>rem Revision: 2.4&lt;/p>
&lt;p>&lt;code> &lt;/code>rem Revision Date: December 8th, 2005&lt;/p>
&lt;p>&lt;code> &lt;/code>rem ember to set the &amp;quot;Start in:&amp;quot; field of the shortcut.&lt;/p>
&lt;p>&lt;code> &lt;/code>rem A value similar to C:\msys\1.0\bin is what the &amp;quot;Start in:&amp;quot; field needs&lt;/p>
&lt;p>&lt;code> &lt;/code>rem to represent.&lt;/p>
&lt;p>&lt;code> &lt;/code>其中“D:\Program Files\Microsoft Visual Studio 10.0”为你机器上安装VS200X或VS2010的目录，我的电脑安装的是VS2010，并且安装在了D盘。文件修改后保存即可。）&lt;/p>
&lt;p>&lt;code> &lt;/code>ps:不要告诉我 / 和 \ 的区别你不知道？！&lt;/p>
&lt;p>4、系统整合&lt;/p>
&lt;p>将fstab.sample改为fstab，用文本编辑器（需要使用一个支持Unix换行风格的编辑器，比如Notepad++，强烈推荐UltraEdit），把下面这行：&lt;/p>
&lt;p>c:/MinGW/msys/1.0/mingw/mingw&lt;/p>
&lt;p>改为：&lt;/p>
&lt;p>c:/MinGW /mingw&lt;/p>
&lt;p>完成以上步骤，MSys+MinGW系统就配置完成了。&lt;/p>
&lt;p>**************************************************************************************&lt;/p>
&lt;p>此处可以通过gcc -v进行判断，如果修改成功gcc将从版本3.4.4变为4.8.1，如果使用gcc3（低版本），编译安装的时候会报错的！！&lt;/p>
&lt;p>ps:如果gcc版本过低，编译SDL的时候报错很头疼，虽然我通过在网上查找修改源代码通过了，但是坑太大！！&lt;/p>
&lt;p>5、基本库&lt;/p>
&lt;p>视情况而定，初次测试编译安装的时候，安装一个SDL就差不多了（有多少人不想要ffplay的？O(∩_∩)O~），其他的库可以后期再弄！&lt;/p>
&lt;p>编译 mp3lame(可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>为了让编译出来的ffmpeg支持对mp3格式的编解码，您需要先下载lame。&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://sourceforge.net/projects/lame/files/ 下载&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：lame-3.99.2.tar.gz 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf lame-3.99.2.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd lame-3.99.2&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-shared (首选)&lt;/p>
&lt;p>或: $./configure --disable-static --enable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译 x264(可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>为了让编译出来的ffmpeg支持对x264格式的编解码，您需要先下载x264。&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://www.videolan.org/developers/x264.html下载&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：last_x264.tar.bz2 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -xvf last_x264.tar.bz2&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd x264-20111124-2245&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --enable-shared --disable-asm&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译 Xvid(可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>为了让编译出来的ffmpeg支持对Xvid格式的编解码，您需要先下载Xvid。&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://www.xvid.org/ 下载&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：xvidcore-1.3.2.tar.gz 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf xvidcore-1.3.2.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd xvidcore/build/generic&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --prefix=C:/MinGW/msys/1.0/local&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下。&lt;/p>
&lt;p>&lt;code> &lt;/code>需要注意的就是：此处编译加上了路径&lt;/p>
&lt;p>&lt;code> &lt;/code>如果make时出现：cc1.exe: error: unrecognized command line option '-mno-cygwin' 错误，请在./configure后make之前修改xvidcore\build\generic里的 platform.inc文件，直接删除里面的“-mno-cygwin”。&lt;/p>
&lt;p>&lt;code> &lt;/code>具体可以参考：http://ffmpeg.zeranoe.com/forum/viewtopic.php?f=5&amp;amp;t=111里2楼的回答，如果按他说的：I recommend re running ./bootstrap.sh after you do this.，我发现不太行，一运行bootstrap.sh后，platform.inc文件会被还原，并且./configure时也会还原该文件，所以我选择在./configure后make前修改，可以编译通过，目前没检验Xvid是否可用。&lt;/p>
&lt;p>编译 faad2(可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://www.audiocoding.com/downloads.html 下载：Version 2.7 bootstrapped TAR.GZ Package&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：faad2-2.7.tar.gz 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf faad2-2.7.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd faad2-2.7&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./bootstrap&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-static --enable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译faac(可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://www.audiocoding.com/downloads.html 下载：Version 1.28 bootstrapped TAR.GZ Package&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：faac-1.28.tar.gz 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf faac-1.28.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd faac-1.28&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./bootstrap&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-static --enable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译vo-aacenc (可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://sourceforge.net/projects/opencore-amr/files/ 下载：vo-aacenc&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：vo-aacenc-0.1.1.tar.gz 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf vo-aacenc-0.1.1.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd vo-aacenc-0.1.1&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译amr-nb和amr-wb (早期ffmpeg版本，可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>在编译amrnb和amrwb之前还需要做点其它的准备工作：&lt;/p>
&lt;p>&lt;code> &lt;/code>A 先到网上搜索下载wget工具，解压后放到C:\MinGW\bin目录下，此工具是个网络下载工具，用来在编译时自动下载3gpp源码。&lt;/p>
&lt;p>&lt;code> &lt;/code>B 再先到http://downloads.sourceforge.net/gnuwin32/unzip-5.51-1-bin.zip 下载unzip-5.51-1-bin.zip后进行解压，并把unzip-5.51-1-bin\bin中的unzip.exe拷贝到C:\MinGW\bin目录下，此工具用来在编译时自动解压3gpp源码。&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://www.penguin.cz/%7Eutx/amr 下载：amrnb-7.0.0.2.tar.bz2与amrwb-7.0.0.4.tar.bz2&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -xvf amrnb-7.0.0.2.tar.bz2&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd amrnb-7.0.0.2&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-static --enable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -xvf amrwb-7.0.0.4.tar.bz2&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd amrwb-7.0.0.4&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-static --enable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译opencore-amr 和vo-amrwbenc (可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>到：http://sourceforge.net/projects/opencore-amr/files/ 下载：opencore-amr 与 vo-amrwbenc&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：opencore-amr-0.1.2.tar.gz 与vo-amrwbenc-0.1.1.tar.gz 的包。&lt;/p>
&lt;p>&lt;code> &lt;/code>如果是opencore-amr-0.1.1.tar.gz请注释掉以下Makefile中的几行&lt;/p>
&lt;p>&lt;code> &lt;/code>文件: ./opencore-amr/amrnb/Makefile&lt;/p>
&lt;p>&lt;code> &lt;/code>install: libopencore-amrnb.a $(SHLIB)&lt;/p>
&lt;p>&lt;code> &lt;/code>install -d $(DESTDIR)$(PREFIX)/lib&lt;/p>
&lt;p>&lt;code> &lt;/code>install -m 644 libopencore-amrnb.a $(DESTDIR)$(PREFIX)/lib&lt;/p>
&lt;p>&lt;code> &lt;/code># install $(SHLIB) $(DESTDIR)$(PREFIX)/lib&lt;/p>
&lt;p>&lt;code> &lt;/code>ifneq ($(shell uname), Darwin)&lt;/p>
&lt;p>&lt;code> &lt;/code># ln -sf $(SHLIB) $(DESTDIR)$(PREFIX)/lib/$(SONAME)&lt;/p>
&lt;p>&lt;code> &lt;/code># ln -sf $(SONAME) $(DESTDIR)$(PREFIX)/lib/libopencore-amrnb.so&lt;/p>
&lt;p>&lt;code> &lt;/code>endif&lt;/p>
&lt;p>&lt;code> &lt;/code>文件: ./opencore-amr/amrwb/Makefile&lt;/p>
&lt;p>&lt;code> &lt;/code>install: libopencore-amrwb.a $(SHLIB)&lt;/p>
&lt;p>&lt;code> &lt;/code>install -d $(DESTDIR)$(PREFIX)/lib&lt;/p>
&lt;p>&lt;code> &lt;/code>install -m 644 libopencore-amrwb.a $(DESTDIR)$(PREFIX)/lib&lt;/p>
&lt;p>&lt;code> &lt;/code># install $(SHLIB) $(DESTDIR)$(PREFIX)/lib&lt;/p>
&lt;p>&lt;code> &lt;/code>ifneq ($(shell uname), Darwin)&lt;/p>
&lt;p>&lt;code> &lt;/code># ln -sf $(SHLIB) $(DESTDIR)$(PREFIX)/lib/$(SONAME)&lt;/p>
&lt;p>&lt;code> &lt;/code># ln -sf $(SONAME) $(DESTDIR)$(PREFIX)/lib/libopencore-amrwb.so&lt;/p>
&lt;p>&lt;code> &lt;/code>endif&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf opencore-amr-0.1.2.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd opencore-amr-0.1.2&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make CC=gcc&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf vo-amrwbenc-0.1.1.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd vo-amrwbenc-0.1.1&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>$./configure --disable-shared&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make CC=gcc&lt;/p>
&lt;p>&lt;code> &lt;/code>$ make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>编译SDL(可选项)&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL下载可以到：http://www.libsdl.org/download-1.2.php&lt;/p>
&lt;p>&lt;code> &lt;/code>在Source Code栏选择类似：SDL-1.2.14.tar.gz - GPG signed 进行下载，&lt;/p>
&lt;p>&lt;code> &lt;/code>文件名类似为：SDL-1.2.14.tar.tar，此文件需要编译才能生成lib库。&lt;/p>
&lt;p>&lt;code> &lt;/code>也可以直接下载 SDL-devel-1.2.14-mingw32.tar.gz (Mingw32)，文件名类似为：SDL-devel-1.2.14-mingw32.tar.tar，此文件带有编译好的lib，在编译ffmpeg时可以直接使用。&lt;/p>
&lt;p>&lt;code> &lt;/code>$ tar -zxvf SDL-1.2.14.tar.gz&lt;/p>
&lt;p>&lt;code> &lt;/code>$ cd SDL-1.2.14&lt;/p>
&lt;p>&lt;code> &lt;/code>再执行以下命令：&lt;/p>
&lt;p>&lt;code> &lt;/code>./configure&lt;/p>
&lt;p>&lt;code> &lt;/code>make&lt;/p>
&lt;p>&lt;code> &lt;/code>make install&lt;/p>
&lt;p>&lt;code> &lt;/code>编译结果在：C:\MinGW\msys\1.0\local 目录下&lt;/p>
&lt;p>&lt;code> &lt;/code>注意：如果是使用编译好的SDL-devel-1.2.14-mingw32.tar.tar，那么就可以省掉上面的编译工作，直接解压SDL-devel-1.2.14-mingw32.tar.tar文件即可。自己编译或直接使用编译好的都需要做下面的修改和拷贝工作。&lt;/p>
&lt;p>&lt;code> &lt;/code>使用UltraEdit打开C:\MinGW\msys\1.0\local\bin下的 sdl-config文件&lt;/p>
&lt;p>&lt;code> &lt;/code>把 prefix=/usr 该成： prefix=c:/mingw&lt;/p>
&lt;p>&lt;code> &lt;/code>其中：c:/mingw 为 mingw的安装路径，请根据你的安装进行修改。为了编译时msys能识别sdl并开启 SDL support yes 进行编译，请把C:\MinGW\msys\1.0\local编译结果bin、include和lib中有关sdl的拷贝一份到C:\MinGW\的对应目录中。&lt;/p>
&lt;p>6、编译安装ffmpeg&lt;/p>
&lt;p>lib 动态链接库位置&lt;/p>
&lt;p>include 编程要用到头文件&lt;/p>
&lt;p>bin 执行文件所在的目录&lt;/p>
&lt;p>(为了以后方便编程，我们把lib中的三个链接库libavcodec.so libavformat.so libavutil.so复制到/usr/lib下。把include目录下的ffmpeg目录复制到/usr/include下)&lt;/p>
&lt;p>***************************************************************************&lt;/p>
&lt;p>&lt;code> &lt;/code>但是我编译完没有ffserver.exe,网上说是因为MinGW里面少了关于ffserver用的网络的相关的包。&lt;/p>
&lt;p>参考http://bbs.chinavideo.org/viewthread.php?tid=95。&lt;/p>
&lt;p>单独使用ffplay，需要将c:/msys/1.0/mingw/bin/SDL.dll和ffplay.exe放到相同的目录下。&lt;/p>
&lt;p>6.1 编译静态库&lt;/p>
&lt;p>&lt;code> &lt;/code>配置&lt;/p>
&lt;p>在shell提示符下输入：&lt;/p>
&lt;p>./configure --enable-static --enable-memalign-hack --prefix=c:/msys/1.0 --extra-cflags=&amp;quot;-fno-common&amp;quot;&lt;/p>
&lt;p>这个过程要花费较长的时间，开始会有较长的时间没有反应。其中的prefix是msys的安装路径&lt;/p>
&lt;p>&lt;code> &lt;/code>编译&lt;/p>
&lt;p>make&lt;/p>
&lt;p>安装&lt;/p>
&lt;p>make install&lt;/p>
&lt;p>安装只是把要开发使用的库文件拷贝到c:/msys/1.0/lib/目录中，头文件拷贝到c:/msys/1.0/include/目录中。&lt;/p>
&lt;p>产生的库文件为.a文件&lt;/p>
&lt;p>6.2 编译动态库&lt;/p>
&lt;p>动态库和静态库只在配置上的差别，配置如下：&lt;/p>
&lt;p>./configure --enable-shared --disable-static --enable-memalign-hack --prefix=c:/msys/1.0 --extra-cflags=&amp;quot;-fno-common&amp;quot;&lt;/p>
&lt;p>后面的步骤一样：&lt;/p>
&lt;p>make&lt;/p>
&lt;p>make install&lt;/p>
&lt;p>在开始编译之前，可以把原来编译的目标 文件清除掉：&lt;/p>
&lt;p>make clean&lt;/p>
&lt;p>动态编译应该是会产生lib文件，但是我编译之后一直没有产生&lt;/p>
&lt;p>编译之后的dll文件被放到了ffmpeg目录下，可以搜索查看它们&lt;/p>
&lt;p>7、开发&lt;/p>
&lt;p>如果写了一个test.c文件，要包含ffmpeg的头文件，可以这样写：&lt;/p>
&lt;p>#include&lt;/p>
&lt;p>编译：gcc -o test test.c -lavformat -lavcodec -lavtuil (前提是有第6步的操作)&lt;/p>
&lt;p>如果没有第6步的操作，则编译的时候如下：&lt;/p>
&lt;p>gcc -o test test.c -I/usr/local/ffmpeg/include -L/usr/local/ffmpeg/lib -lavformat -lavcodec -lavtuil&lt;/p>
&lt;p>编译成功之后，执行的时候还是需要动态库的支持，还是要把那三个动态库文件复制到/usr/lib或者/lib中，不然执行的时候会说找不到动态库链接。&lt;/p>
&lt;p>还有一个方法可以解决这个问题，就是把/usr/local/ffmpeg/lib这个目录加入到/etc/ld.so.config中，然后执行ldconfig，或者重启电脑，这样执行&lt;/p>
&lt;p>的时候系统就可以从/usr/local/ffmpeg/lib这个目录下去找这三个动态库文件了。&lt;/p>
&lt;p>以上的方式是采用动态库编译ffmpeg的，如果在configure的时候不加上--enable-shared的，则采用静态链接的方式，不会生成那三个动态库。同时&lt;/p>
&lt;p>生成的ffplay、ffmpeg的执行文件也比较的大，因为他们不需要动态库的支持，就可以执行。但是不利于再次开发，所以我采用动态链接的方式。&lt;/p>
&lt;p>configure中还有很多的选项，可以通过./configure --help查看，也可以直接查看configure文件。这在配置的时候很重要。&lt;/p>
&lt;h2 id="32-流媒体数据流程讲解">&lt;strong>3.2 流媒体数据流程讲解&lt;/strong>&lt;/h2>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.018.png" alt="">&lt;/p>
&lt;p>FFMpeg 的 output_example.c 例子分析&lt;/p>
&lt;p>该例子讲了如何输出一个 libavformat 库所支持格式的媒体文件。&lt;/p>
&lt;p>（1）av_regis ter_all()，初始化 libavcodec 库，并注册所有的编解码器和格式。&lt;/p>
&lt;p>（2）guess_form at()，根据文件名来获取输出文件格式，默认为 mpeg。&lt;/p>
&lt;p>（3）av_alloc_form at_context()分配输出媒体内容。&lt;/p>
&lt;p>ov-&amp;gt;oform at = fm t;&lt;/p>
&lt;p>s nprintf( oc-&amp;gt;filename, sizeof(oc-&amp;gt;filename), “%s ”, filenam e );&lt;/p>
&lt;p>（4）add_video_s tream ()使用默认格式的编解码器来增加一个视频流，并初始化编解码器。&lt;/p>
&lt;p>（4.1）av_new_s tream ()增加一个新的流到一个媒体文件。&lt;/p>
&lt;p>（4.2）初始化编解码器：&lt;/p>
&lt;p>c = s t-&amp;gt;codec;&lt;/p>
&lt;p>c-&amp;gt;codec_id = codec_id;&lt;/p>
&lt;p>c-&amp;gt;codec_type = CODEC_TYPE_ VIDEO;&lt;/p>
&lt;p>c-&amp;gt;bit_rate = 400000;&lt;/p>
&lt;p>c-&amp;gt;width = 352;&lt;/p>
&lt;p>c-&amp;gt;height = 288;&lt;/p>
&lt;p>c-&amp;gt;tim e_base.den = STREAM_FR AME_RATE ; //每秒 25 副图像&lt;/p>
&lt;p>c-&amp;gt;tim e_base.num = 1;&lt;/p>
&lt;p>c-&amp;gt;gop_size = 12;&lt;/p>
&lt;p>c-&amp;gt;pix_fm t = STREAM_PIX_FMT; //默认格式为 P IX_FMT_ YUV420P&lt;/p>
&lt;p>…… ……&lt;/p>
&lt;p>（5）av_s et_parameters ()设置输出参数，即使没有参数，该函数也必须被调用。&lt;/p>
&lt;p>（6）dum p_form at()输出格式信息，用于调试。&lt;/p>
&lt;p>（7）open_video()打开视频编解码器并分配必要的编码缓存。&lt;/p>
&lt;p>（7.1）avcodec_find_encoder()寻找 c-&amp;gt;codec_id 指定的视频编码器。&lt;/p>
&lt;p>（7.2）avcodec_open()打开编码器。&lt;/p>
&lt;p>（7.3）分配视频输出缓存：&lt;/p>
&lt;p>video_outbuf_s ize = 200000;&lt;/p>
&lt;p>video_outbuf = av_m alloc( video_outbuf_s ize );&lt;/p>
&lt;p>（7.4）picture = alloc_picture()分配原始图像。&lt;/p>
&lt;p>（7.4.1）avcodec_alloc_frame()分配一个 AVFram e 并设置默认值。&lt;/p>
&lt;p>（7.4.2）s ize = avpicture_get_s ize()计算对于给定的图片格式以及宽和高，所需占用多少 内存。&lt;/p>
&lt;p>（7.4.3）picture_buf = av_malloc( s ize )分配所需内存。&lt;/p>
&lt;p>（7.4.4）avpicture_fill()填充 AVPicture 的域。&lt;/p>
&lt;p>（7.5）可选。如果输出格式不是 YUV420P，那么临时的 YU V420P 格式的图像也是需要的，由 此再转换为我们所需的格式，因此需要为临时的 YU V420P 图像分配缓存：&lt;/p>
&lt;p>tm p_picture = alloc_picture()&lt;/p>
&lt;p>说明：tm p_picture，picture，video_outbuf。如果输出格式为 YUV420P，则直接通过 avcodec_&lt;/p>
&lt;p>encode_video()函数将 picture 缓存中的原始图像编码保存到 video_outbuf 缓存中；如果输出格式不 是 YU V420P，则需要先通过 sws _s cale()函数，将 YUV420P 格式转换为目标格式，此时 tm p_picture 缓 存存放的是 YU V420P 格式的图像，而 picture 缓存为转换为目标格式后保存的图像，进而再将 picture 缓&lt;/p>
&lt;p>存中的图像编码保存到 video_outbuf 缓存中。&lt;/p>
&lt;p>（8）url_fopen()打开输出文件，如果需要的话。&lt;/p>
&lt;p>（9）av_write_header()写流动头部。&lt;/p>
&lt;p>（10）LOOP 循环{&lt;/p>
&lt;p>计算当前视频时间 video_pts 是否超时退出循环？ write_video_fram e()视频编码&lt;/p>
&lt;p>}&lt;/p>
&lt;p>（10.1）write_video_frame()&lt;/p>
&lt;p>如果图片不是 YU V420P，则需要用 sws _s cale()函数先进行格式转换。 若需要原始图像：&lt;/p>
&lt;p>av_init_packet()初始化一个包的选项域。&lt;/p>
&lt;p>av_write_fram e()向输出媒体文件写一个包，该包会包含一个视频帧。 若需要编码图像：&lt;/p>
&lt;p>avcodec_encode_video()编码一视频帧。&lt;/p>
&lt;p>av_init_packet()&lt;/p>
&lt;p>av_write_fram e()&lt;/p>
&lt;p>（11）close_video()关闭每个编解码器。&lt;/p>
&lt;p>（12）av_write_trailer()写流的尾部。&lt;/p>
&lt;p>（13）释放资源&lt;/p>
&lt;p>av_freep()释放 AVForm atContext 下的 AVS tream -&amp;gt;AVCodecContext 和 AVStream ：&lt;/p>
&lt;p>for( i = 0; i &amp;lt; oc-&amp;gt;nb_s treams ; i++ ){&lt;/p>
&lt;p>av_freep( &amp;amp;oc-&amp;gt;s treams [i]-&amp;gt;codec );&lt;/p>
&lt;p>av_freep( &amp;amp;oc-&amp;gt;s treams [i] );&lt;/p>
&lt;p>}&lt;/p>
&lt;p>url_fclose()关闭输出文件。&lt;/p>
&lt;p>av_free()释放 AVForm atContext。&lt;/p>
&lt;h2 id="33-简单应用">&lt;strong>3.3 简单应用&lt;/strong>&lt;/h2>
&lt;p>PS:此处举tutorial的例子是为了更好的引出一个循序渐进的例程。条件适当的话添加output_example.c实例并进行说明。&lt;/p>
&lt;p>FFmpeg tutorial对初级的掌握以及使用ffmpeg有重要指导作用，但是里面的一些函数没有实时更新了，tutorial01~08是一个播放器开发的由浅入深的过程，下面介绍tutorial01（tutorial 02~08详见附录）使用源码：&lt;/p>
&lt;p>/************************************************************************/&lt;/p>
&lt;p>&lt;code> &lt;/code>/* tutorial1 制作屏幕录像&lt;/p>
&lt;p>&lt;code> &lt;/code>执行后，将视频文件按照一定的格式保存为.ppm文件 */&lt;/p>
&lt;p>/************************************************************************/&lt;/p>
&lt;p>#include &amp;quot;libavcodec/avcodec.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libavformat/avformat.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libswscale/swscale.h&amp;quot;&lt;/p>
&lt;p>#include &amp;lt;windows.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;stdio.h&amp;gt;&lt;/p>
&lt;p>void SaveFrame(AVFrame *pFrame, int width, int height, int iFrame) {&lt;/p>
&lt;p>&lt;code> &lt;/code>FILE *pFile;&lt;/p>
&lt;p>&lt;code> &lt;/code>char szFilename[32];&lt;/p>
&lt;p>&lt;code> &lt;/code>int y;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Open file&lt;/p>
&lt;p>&lt;code> &lt;/code>sprintf(szFilename, &amp;quot;frame%d.ppm&amp;quot;, iFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>pFile=fopen(szFilename, &amp;quot;wb&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pFile==NULL)&lt;/p>
&lt;p>&lt;code> &lt;/code>return;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Write header&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(pFile, &amp;quot;P6\n%d %d\n255\n&amp;quot;, width, height);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Write pixel data&lt;/p>
&lt;p>&lt;code> &lt;/code>for(y=0; y&amp;lt;height; y++)&lt;/p>
&lt;p>&lt;code> &lt;/code>fwrite(pFrame-&amp;gt;data[0]+y*pFrame-&amp;gt;linesize[0], 1, width*3, pFile);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Close file&lt;/p>
&lt;p>&lt;code> &lt;/code>fclose(pFile);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>int main(int argc, char *argv[])&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *pFormatCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>int i,videoStream;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *pCodecCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *pCodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *pFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *pFrameRGB;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket packet;&lt;/p>
&lt;p>&lt;code> &lt;/code>int frameFinished;&lt;/p>
&lt;p>&lt;code> &lt;/code>int numBytes;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *buffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (argc &amp;lt; 2)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;please provide a movie file\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//register all formats and codes&lt;/p>
&lt;p>&lt;code> &lt;/code>av_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>//support network stream input&lt;/p>
&lt;p>&lt;code> &lt;/code>avformat_network_init();&lt;/p>
&lt;p>&lt;code> &lt;/code>pFormatCtx = avformat_alloc_context();&lt;/p>
&lt;p>&lt;code> &lt;/code>//Open the media file and read the header&lt;/p>
&lt;p>&lt;code> &lt;/code>if(avformat_open_input(&amp;amp;pFormatCtx,argv[1],NULL,NULL) != 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;couldn't open file \n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//retrieve stream information&lt;/p>
&lt;p>&lt;code> &lt;/code>if (av_find_stream_info(pFormatCtx) &amp;lt; 0 )&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>//dump information about file into standard error&lt;/p>
&lt;p>&lt;code> &lt;/code>av_dump_format(pFormatCtx,-1,argv[1],0);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Find the first video stream&lt;/p>
&lt;p>&lt;code> &lt;/code>videoStream = -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0 ;i &amp;lt; pFormatCtx-&amp;gt;nb_streams; i++ )&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pFormatCtx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type == AVMEDIA_TYPE_VIDEO)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>videoStream = i ;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (videoStream == -1)&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>//get a pointer to the codec context for the video stream&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodecCtx = pFormatCtx -&amp;gt;streams[videoStream]-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodec = avcodec_find_decoder(pCodecCtx-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pCodec == NULL)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr,&amp;quot;unsupported codec \n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//open codec&lt;/p>
&lt;p>&lt;code> &lt;/code>if(avcodec_open2(pCodecCtx,pCodec,NULL) &amp;lt; 0 )&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>//allocate video frame&lt;/p>
&lt;p>&lt;code> &lt;/code>pFrame = avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>if(NULL == pFrame )&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>//allocate an avframe structure&lt;/p>
&lt;p>&lt;code> &lt;/code>pFrameRGB = avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pFrameRGB == NULL)&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>//determine required buffer size and allocate buffer&lt;/p>
&lt;p>&lt;code> &lt;/code>numBytes = avpicture_get_size(PIX_FMT_RGB24,pCodecCtx-&amp;gt;width,pCodecCtx-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>//buffer = (uint8_t *)av_malloc_attrib(numBytes * sizeof(uint8_t));&lt;/p>
&lt;p>&lt;code> &lt;/code>buffer = (uint8_t *)av_malloc(numBytes * sizeof(uint8_t));&lt;/p>
&lt;p>&lt;code> &lt;/code>avpicture_fill((AVPicture *)pFrameRGB,buffer,PIX_FMT_RGB24,pCodecCtx-&amp;gt;width,pCodecCtx-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>i = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>while (av_read_frame(pFormatCtx,&amp;amp;packet)&amp;gt;=0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (packet.stream_index == videoStream)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_decode_video2(pCodecCtx,pFrame,&amp;amp;frameFinished,&amp;amp;packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>if( frameFinished )&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>struct SwsContext *img_convert_ctx = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>img_convert_ctx =sws_getCachedContext(img_convert_ctx, pCodecCtx-&amp;gt;width,pCodecCtx-&amp;gt;height, \&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodecCtx-&amp;gt;pix_fmt,pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,PIX_FMT_RGB24, SWS_BICUBIC,NULL, NULL, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>if( !img_convert_ctx )&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Cannot initialize sws conversion context\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>int sws_scale(struct SwsContext *c, const uint8_t *const srcSlice[],&lt;/p>
&lt;p>&lt;code> &lt;/code>const int srcStride[], int srcSliceY, int srcSliceH,&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *const dst[], const int dstStride[]);&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>sws_scale(img_convert_ctx, pFrame-&amp;gt;data,\&lt;/p>
&lt;p>&lt;code> &lt;/code>pFrame-&amp;gt;linesize, 0, pCodecCtx-&amp;gt;height, pFrameRGB-&amp;gt;data,pFrameRGB-&amp;gt;linesize);&lt;/p>
&lt;p>&lt;code> &lt;/code>if( i++ &amp;lt; 50 )&lt;/p>
&lt;p>&lt;code> &lt;/code>SaveFrame(pFrameRGB, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height, i);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free_packet(&amp;amp;packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//free the RGB image&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(buffer);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(pFrameRGB);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(pCodecCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_close_input_file(pFormatCtx);&lt;/p>
&lt;p>}&lt;/p>
&lt;h2 id="34-sdl-simple-direct-layer">&lt;strong>3.4 SDL（ Simple Direct Layer）&lt;/strong>&lt;/h2>
&lt;p>它是一个出色的多媒体库，适用于 PC 平台，并且已经应用在许多工 程中，它是如此的优秀，甚至已移植到某些手机平台上。它的官方网站是 &lt;a href="http://www.libsdl.org/">http://www.libsdl.org/，在这个网&lt;/a>站上可以下载 SDL 库的源代码自己编译库，也可以直接下载预编译库。&lt;/p>
&lt;h3 id="341-sdl显示视频">&lt;strong>3.4.1 SDL显示视频&lt;/strong>&lt;/h3>
&lt;p>SDL 显示视频图像函数调用序列如下，忽略掉错误处理：&lt;/p>
&lt;p>1):初始化 SDL 库，&lt;/p>
&lt;p>SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)&lt;/p>
&lt;p>2):创建显示表面，&lt;/p>
&lt;p>SDL_Surface *screen = SDL_SetVideoMode(width, height, 0, 0)&lt;/p>
&lt;p>3):创建Overlay表面，&lt;/p>
&lt;p>SDL_Overlay *bmp = SDL_CreateYUVOverlay(width, height, SDL_YV12_OVERLAY, screen)&lt;/p>
&lt;p>4):取得独占权和 Overlay 表面首地址， SDL_LockYUVOverlay(bmp);&lt;/p>
&lt;p>5):填充视频数据，纹理数据&lt;/p>
&lt;p>6):释放独占权， SDL_UnlockYUVOverlay(bmp);&lt;/p>
&lt;p>7):刷新视频， SDL_DisplayYUVOverlay(bmp, &amp;amp;rect);&lt;/p>
&lt;h3 id="342-sdl显示音频">&lt;strong>3.4.2 SDL显示音频&lt;/strong>&lt;/h3>
&lt;p>SDL 播放音频采用回调函数的方式来保证音频的连续性，在设置音频输出参数，向系统注册回调函数后，每 次写入的音频数据播放完，系统自动调用注册的回调函数，通常在此回调函数中继续往系统写入音频数据。&lt;/p>
&lt;p>SDL 播放音频函数调用序列，忽略掉错误处理：&lt;/p>
&lt;p>1):初始化 SDL_AudioSpec 结构，此结构包括音频参数和回调函数，比如 SDL_AudioSpec wanted_spec；&lt;/p>
&lt;p>wanted_spec.userdata = is; wanted_spec.channels = 2; wanted_spec.callback = sdl_audio_callback;&lt;/p>
&lt;ol start="2">
&lt;li>......&lt;/li>
&lt;li>:打开音频设备 SDL_OpenAudio(&amp;amp;wanted_spec, &amp;amp;spec)；&lt;/li>
&lt;/ol>
&lt;p>3)激活 音频设备开始工作 SDL_PauseAudio(0);&lt;/p>
&lt;p>4)在音频回调函数中写入音频数据，示意代码如下&lt;/p>
&lt;p>void sdl_audio_callback(void *opaque, Uint8 *stream, int len)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>memcpy(stream, (uint8_t*)audio_buf, len);&lt;/p>
&lt;p>}&lt;/p>
&lt;ol start="5">
&lt;li>: 播放完后关闭音频 SDL_CloseAudio();&lt;/li>
&lt;/ol>
&lt;h2 id="35-ffmpeg程序的使用ffmpegexeffplayexeffprobeexe">&lt;strong>3.5 ffmpeg程序的使用（ffmpeg.exe，ffplay.exe，ffprobe.exe）&lt;/strong>&lt;/h2>
&lt;h3 id="351-ffmpegexe">&lt;strong>3.5.1 ffmpeg.exe&lt;/strong>&lt;/h3>
&lt;p>ffmpeg是用于转码的应用程序。&lt;/p>
&lt;p>一个简单的转码命令可以这样写：&lt;/p>
&lt;p>将input.avi转码成output.ts，并设置视频的码率为640kbps&lt;/p>
&lt;p>#ffmpeg -i input.avi -b:v 640k output.ts&lt;/p>
&lt;p>具体的使用方法可以参考： ffmpeg参数中文详细解释&lt;/p>
&lt;p>详细的使用说明（英文）：&lt;a href="http://ffmpeg.org/ffmpeg.html">http://ffmpeg.org/ffmpeg.html&lt;/a>&lt;/p>
&lt;h3 id="352-ffplayexe">&lt;strong>3.5.2 ffplay.exe&lt;/strong>&lt;/h3>
&lt;p>ffplay是用于播放的应用程序。&lt;/p>
&lt;p>一个简单的播放命令可以这样写：&lt;/p>
&lt;p>播放test.avi&lt;/p>
&lt;p>#ffplay test.avi&lt;/p>
&lt;p>具体的使用方法可以参考：ffplay的快捷键以及选项&lt;/p>
&lt;p>详细的使用说明（英文）：&lt;a href="http://ffmpeg.org/ffplay.html">http://ffmpeg.org/ffplay.html&lt;/a>&lt;/p>
&lt;h3 id="353-ffprobeexe">&lt;strong>3.5.3 ffprobe.exe&lt;/strong>&lt;/h3>
&lt;p>ffprobe是用于查看文件格式的应用程序。&lt;/p>
&lt;p>这个就不多介绍了。&lt;/p>
&lt;p>详细的使用说明（英文）：&lt;a href="http://ffmpeg.org/ffprobe.html">http://ffmpeg.org/ffprobe.html&lt;/a>&lt;/p>
&lt;h1 id="第四章-数据结构">&lt;strong>第四章 数据结构&lt;/strong>&lt;/h1>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.019.png" alt="">&lt;/p>
&lt;p>注：ByteIOContext→AVIOContext&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">ffmpeg定义的数据结构很有特色:&lt;/p>
&lt;p>有一些是动态与静态的关系，比如， URLProtocol 和 URLContex t ，AVInputFormat 和 AVFormatContext ， AVCodec 和 AVCodecContext。从前面播放器的一般原理我们可知，播放器内部要实现的几大功能是，读文件， 识别格式，音视频解码，音视频渲染。其中音视频渲染由 SDL 实现，我们不讨论。ffplay 把其他的每个大功能抽 象成一个相当于 C++ 中 COM 接口的数据结构，着重于功能函数，同时这些功能函数指针在编译的时候就能静态 确定。每一个大功能都要支持多种类型的广义数据，ffplay 把这多种类型的广义数据的共同的部分抽象成对应的 Context 结构，这些对应的 context 结构着重于动态性，其核心成员只能在程序运行时动态确定其值。并且 COM 接口类的数据结构在程序运行时有很多很多实例，而相应的 Context 类只有一个实例，这里同时体现了数据结构 的划分原则，如果有一对多的关系就要分开定义。&lt;/p>
&lt;p>有一些是指针表述的排他性包含关系(因为程序运行时同一类型的多种数据只支持一种，所以就有排他性 )。 比如，AVCodecContex t 用 priv_dat a 包含 MsrleContex t 或 TSContext，AVFormatContext 用 priv_dat a 包含 AVIContext 或其他类 Context，AVStream 用 priv_dat a 包含 AVIStream 或其他类 Stream。由前面数据结构的动态与静态关系 可知，ffplay 把多种类型的广义数据的共同部分抽象成 context 结构，那么广义数据的各个特征不同部分就抽象成 各种具体类型的 context，然后用 priv_dat a 字段表述的指针排他性的关联起来。由于瘦身后的 ffplay 只支持有限 类型，所以 AVFormatContext 只能关联包含 AVIContext，AVStream 只能关联包含 AVIStream。&lt;/p>
&lt;p>有一些是扩展包含关系，比如，ByteIOCon text 包含 URLContext ，就是在应用层把没有缓存的 URLContext&lt;/p>
&lt;p>扩展有缓冲区的广义文件 ByteIOCon text ，改善程序 IO 性能。&lt;/p>
&lt;p>有一些是直接包含关系，比如，AVFrame 包含 AVPicture，这两个结构共有的字段，其定义类型、大小、顺 序都一模一样，除了更准确的描述各自的意义便于阅读理解维护代码外，还可以方便的把 AVFrame 大结构强制 转换 AVPicture 小结构。&lt;/p>
&lt;p>我们先来重点分析 AVCodec/AVCodecContext/MsrleContex t 这几个数据结构，这几个数据结构定义了编解码 器的核心架构，相当于 Directshow 中的各种音视频解码器 decoder。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.021.jpeg" alt="">&lt;/p>
&lt;p>解协议（http,rtsp,rtmp,mms）→解封装（flv,avi,rmvb,mp4）→解码h264,mpeg2,aac,mp3）→存数据&lt;/p>
&lt;h2 id="41--avcodec结构体">&lt;strong>4.1 AVCodec结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVCodec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>// 标示Codec 的名字, 比如，&amp;quot;h264&amp;quot; &amp;quot;h263&amp;quot; 等。&lt;/p>
&lt;p>const char *name;&lt;/p>
&lt;p>// 标示Codec 的类型，有video ，audio等类型。&lt;/p>
&lt;p>enum CodecType type;&lt;/p>
&lt;p>// 标示Codec 的ID，有CODEC_ID_H264等。&lt;/p>
&lt;p>enum CodecID id;&lt;/p>
&lt;p>// 标示具体的Codec 对应的Context 的size,如：H264Context。&lt;/p>
&lt;p>int priv_data_size;&lt;/p>
&lt;p>// 以下标示Codec 对外提供的操作,每一种解码器都会实现这些操作。&lt;/p>
&lt;p>int(*init)(AVCodecContext*);&lt;/p>
&lt;p>int(*encode)(AVCodecContext *, uint8_t *buf, int buf_size, void *data);&lt;/p>
&lt;p>int(*close)(AVCodecContext*);&lt;/p>
&lt;p>int(*decode)(AVCodecContext *, void *outdata, int *outdata_size, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>struct AVCodec *next;&lt;/p>
&lt;p>}AVCodec;&lt;/p>
&lt;p>H264的主要结构的初始化如下：&lt;/p>
&lt;p>AVCodec ff_h264_decoder = {&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;h264&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>AVMEDIA_TYPE_VIDEO,&lt;/p>
&lt;p>&lt;code> &lt;/code>CODEC_ID_H264,&lt;/p>
&lt;p>&lt;code> &lt;/code>sizeof(H264Context),&lt;/p>
&lt;p>&lt;code> &lt;/code>ff_h264_decode_init,&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL,&lt;/p>
&lt;p>&lt;code> &lt;/code>ff_h264_decode_end,&lt;/p>
&lt;p>&lt;code> &lt;/code>decode_frame&lt;/p>
&lt;p>}&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>AVCodec 是类似 COM 接口的数据结构，表示音视频编解码器，着重于功能函数，一种媒体类型对应一个 AVCodec 结构，在程序运行时有多个实例。next 变量用于把所有支持的编解码器连接成链表，便于遍历查找；id 确定了 唯 一编 解 码器 ； priv_data_size 表示具 体 的 Codec 对应的 Context 结构大 小 ，比 如 MsrleContext 或 TSContext，这些具体的结够定义散落于各个.c 文件中，为避免太多的 if else 类语句判断类型再计算大小，这里 就直接指明大小，因为这是一个编译时静态确定的字段，所以放在 AVCodec 而不是 AVCodecContex t 中。&lt;/p>
&lt;h2 id="42--avcodeccontext结构体">&lt;strong>4.2 AVCodecContext结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVCodecContext&lt;/p>
&lt;p>{&lt;/p>
&lt;p>int bit_rate;&lt;/p>
&lt;p>int frame_number;&lt;/p>
&lt;p>//扩展数据，如mov格式中audio trak中aac格式中esds的附加解码信息。&lt;/p>
&lt;p>unsigned char *extradata;&lt;/p>
&lt;p>//扩展数据的size&lt;/p>
&lt;p>int extradata_size;&lt;/p>
&lt;p>//视频的原始的宽度与高度&lt;/p>
&lt;p>int width, height; // 此逻辑段仅针对视频&lt;/p>
&lt;p>//视频一帧图像的格式，如YUV420&lt;/p>
&lt;p>enum PixelFormat pix_fmt;&lt;/p>
&lt;p>//音频的采样率&lt;/p>
&lt;p>int sample_rate;&lt;/p>
&lt;p>//音频的声道的数目&lt;/p>
&lt;p>int channels;&lt;/p>
&lt;p>int bits_per_sample;&lt;/p>
&lt;p>int block_align;&lt;/p>
&lt;p>// 指向相应的解码器，如：ff_h264_decoder&lt;/p>
&lt;p>struct AVCodec *codec;&lt;/p>
&lt;p>//指向具体相应的解码器的context，如H264Context&lt;/p>
&lt;p>void *priv_data;&lt;/p>
&lt;p>//公共操作函数&lt;/p>
&lt;p>int(*get_buffer)(struct AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>void(*release_buffer)(struct AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>int(*reget_buffer)(struct AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>}AVCodecContext;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>AVCodecContext 结构表示程序运行的当前Codec 使用的上下文，着重于所有Codec 共有的属性(并且是在程序运行时才能确定其值)和关联其他结构的字段。extradata 和extradata_size 两个字段表述了相应Codec 使用的私有数据；codec 字段关联相应的编解码器；priv_data 字段关联各个具体编解码器独有的属性context，和AVCodec 结构中的priv_data_size 配对使用。&lt;/p>
&lt;h2 id="43--avinputformat结构体">&lt;strong>4.3 AVInputFormat结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVInputFormat&lt;/p>
&lt;p>{&lt;/p>
&lt;p>// 标示format的名字, 比如，“mov” “mp4” 等。&lt;/p>
&lt;p>const char *name;&lt;/p>
&lt;p>// 标示具体的format对应的Context 的size,如：MovContext。&lt;/p>
&lt;p>int priv_data_size;&lt;/p>
&lt;p>//具体的操作函数&lt;/p>
&lt;p>int(*read_probe)(AVProbeData*);&lt;/p>
&lt;p>int(*read_header)(struct AVFormatContext *,AVFormatParameters *ap);&lt;/p>
&lt;p>int(*read_packet)(struct AVFormatContext *, AVPacket *pkt);&lt;/p>
&lt;p>int(*read_close)(struct AVFormatContext*);&lt;/p>
&lt;p>struct AVInputFormat *next;&lt;/p>
&lt;p>} AVInputFormat;&lt;/p>
&lt;p>Mov或mp4的主要结构的初始化如下：&lt;/p>
&lt;p>AVInputFormat ff_mov_demuxer = {&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;mov,mp4,m4a,3gp,3g2,mj2&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL_IF_CONFIG_SMALL(&amp;quot;QuickTime/MPEG-4/Motion JPEG 2000 format&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>sizeof(MOVContext),&lt;/p>
&lt;p>&lt;code> &lt;/code>mov_probe,&lt;/p>
&lt;p>&lt;code> &lt;/code>mov_read_header,&lt;/p>
&lt;p>&lt;code> &lt;/code>mov_read_packet,&lt;/p>
&lt;p>&lt;code> &lt;/code>mov_read_close,&lt;/p>
&lt;p>&lt;code> &lt;/code>mov_read_seek,&lt;/p>
&lt;p>}&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>AVInputFormat 是类似COM 接口的数据结构，表示输入文件容器 格式，着重于功能函数，一种文件容器格式对应一个AVInputFormat 结构，在程序运行时有多个实例。next变量用于把所有支持的输入文件容器格式连接成链表，便于遍历查找。priv_data_size 标示具体的文件容器格式对应的Context的大小，在本例中是MovContext，这些具体的结够定义散落于各个.c 文件中。&lt;/p>
&lt;h2 id="44--avformatcontext结构体">&lt;strong>4.4 AVFormatContext结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVFormatContext&lt;/p>
&lt;p>{&lt;/p>
&lt;p>//指向AVInputFormat，如对于mp4或mov为ff_mov_demuxer&lt;/p>
&lt;p>struct AVInputFormat *iformat;&lt;/p>
&lt;p>// 指向具体的格式对应的Context，如：MovContext。&lt;/p>
&lt;p>void *priv_data;&lt;/p>
&lt;p>//指向数据读取统一接口context&lt;/p>
&lt;p>ByteIOContext pb;&lt;/p>
&lt;p>//流的数目&lt;/p>
&lt;p>int nb_streams;&lt;/p>
&lt;p>//至少2个指针元素分别指向video stream和audio stream&lt;/p>
&lt;p>AVStream *streams[MAX_STREAMS];&lt;/p>
&lt;p>} AVFormatContext;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>AVFormatContext 结构表示程序运行的当前文件容器格式使用的上下文，着重于所有文件容器共有的属性(并且是在程序运行时才能确定其值)和关联其他结构的字段。iformat字段关联相应的文件容器格式；pb 关联广义的输入文件；streams 关联音视频流；priv_data 字段关联各个具体文件容器独有的属性上下文，和priv_data_size 配对使用。&lt;/p>
&lt;h2 id="45--movcontext结构体">&lt;strong>4.5 MovContext结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct MovContext&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//临时持有AVFormatContext 的指针&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *fc;&lt;/p>
&lt;p>&lt;code> &lt;/code>//时间缩放因子&lt;/p>
&lt;p>int time_scale;&lt;/p>
&lt;p>//视频的时长&lt;/p>
&lt;p>int64_t duration;&lt;/p>
&lt;p>//拆包时是否发现”moov“头&lt;/p>
&lt;p>int found_moov;&lt;/p>
&lt;p>//拆包时是否发现&amp;quot;mdat&amp;quot;头&lt;/p>
&lt;p>int found_mdat;&lt;/p>
&lt;p>int isom;&lt;/p>
&lt;p>MOVFragment fragment;&lt;/p>
&lt;p>MOVTrackExt *trex_data;&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned trex_count;&lt;/p>
&lt;p>&lt;code> &lt;/code>int itunes_metadata; ///&amp;lt; metadata are itunes style&lt;/p>
&lt;p>int chapter_track;&lt;/p>
&lt;p>} MOVContext;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>MOVContext定义了mp4 中流的一些属性。&lt;/p>
&lt;h2 id="46--urlprotocol结构体">&lt;strong>4.6 URLProtocol结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct URLProtocol&lt;/p>
&lt;p>{&lt;/p>
&lt;p>const char *name;&lt;/p>
&lt;p>//用的统一的模板函数&lt;/p>
&lt;p>int(*url_open)(URLContext *h, const char *filename, int flags);&lt;/p>
&lt;p>int(*url_read)(URLContext *h, unsigned char *buf, int size);&lt;/p>
&lt;p>int(*url_write)(URLContext *h, unsigned char *buf, int size);&lt;/p>
&lt;p>offset_t(*url_seek)(URLContext *h, offset_t pos, int whence);&lt;/p>
&lt;p>int(*url_close)(URLContext *h);&lt;/p>
&lt;p>struct URLProtocol *next;&lt;/p>
&lt;p>} URLProtocol;ffurl_connect&lt;/p>
&lt;p>file的主要结构的初始化如下：&lt;/p>
&lt;p>URLProtocol ff_file_protocol = {&lt;/p>
&lt;p>&lt;code> &lt;/code>.name = &amp;quot;file&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_open = file_open,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_read = file_read,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_write = file_write,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_seek = file_seek,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_close = file_close,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_get_file_handle = file_get_handle,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_check = file_check,&lt;/p>
&lt;p>}&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>URLProtocol 是类似COM 接口的数据结构，表示广义的输入文件，着重于功能函数，一种广义的输入文件对应一个URLProtocol 结构，比如file，pipe，tcp 等等，定义了对file tcp等方式的通用模板函数。next 变量用于把所有支持的广义的输入文件连接成链表，便于遍历查找。&lt;/p>
&lt;h2 id="47--urlcontext结构体">&lt;strong>4.7 URLContext结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct URLContext&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//指向相应的协议(协议为从初始化链表中注册的),如ff_file_protocol&lt;/p>
&lt;p>struct URLProtocol *prot;&lt;/p>
&lt;p>int flags;&lt;/p>
&lt;p>int max_packet_size;&lt;/p>
&lt;p>//相应通信方式的句柄，对于文件为fd句柄，对于网络为socket句柄等&lt;/p>
&lt;p>void *priv_data;&lt;/p>
&lt;p>//文件的名字，不区分本地和网络&lt;/p>
&lt;p>char *filename;&lt;/p>
&lt;p>} URLContext&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>URLContext 结构表示程序运行的当前广义输入文件使用的context，着重于所有广义输入文件共有的属性(并且是在程序运行时才能确定其值)和关联其他结构的字段。prot 字段关联相应的广义输入文件；priv_data 字段关联各个具体广义输入文件的句柄。&lt;/p>
&lt;h2 id="48--aviocontext结构体老版本为byteiocontext">&lt;strong>4.8 AVIOContext结构体(老版本为：ByteIOContext)&lt;/strong>&lt;/h2>
&lt;p>typedef struct ByteIOContext&lt;/p>
&lt;p>{&lt;/p>
&lt;p>//数据缓冲区&lt;/p>
&lt;p>unsigned char *buffer;&lt;/p>
&lt;p>//数据缓冲size&lt;/p>
&lt;p>int buffer_size;&lt;/p>
&lt;p>//数据读取标记指针&lt;/p>
&lt;p>unsigned char *buf_ptr, *buf_end;&lt;/p>
&lt;p>//该指针指向相应的URLContext，关联URLContext&lt;/p>
&lt;p>void *opaque;&lt;/p>
&lt;p>int (*read_packet)(void *opaque, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>int (*write_packet)(void *opaque, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>offset_t(*seek)(void *opaque, offset_t offset, int whence);&lt;/p>
&lt;p>//当前buffer在文件中的位置&lt;/p>
&lt;p>offset_t pos;&lt;/p>
&lt;p>//表示要进行seek，冲刷数据&lt;/p>
&lt;p>int must_flush;&lt;/p>
&lt;p>//是否到达了文件末尾&lt;/p>
&lt;p>int eof_reached; // true if eof reached&lt;/p>
&lt;p>int write_flag;&lt;/p>
&lt;p>int max_packet_size;&lt;/p>
&lt;p>int error; // contains the error code or 0 if no error happened&lt;/p>
&lt;p>} ByteIOContext;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>ByteIOContext 结构扩展URLProtocol 结构成内部有缓冲机制的广泛意义上的文件，改善广义输入文件的IO性能。由其数据结构定义的字段可知，主要是缓冲区相关字段，标记字段，和一个关联字段opaque 来完成广义文件读写操作。opaque 关联字段用于关联URLContext 结构，间接关联并扩展URLProtocol 结构。&lt;/p>
&lt;h2 id="49--avstream结构体">&lt;strong>4.9 AVStream结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVStream&lt;/p>
&lt;p>{&lt;/p>
&lt;p>//指向解码器context，用于关联解码器&lt;/p>
&lt;p>AVCodecContext *actx;&lt;/p>
&lt;p>//codec解析器，每一种编码器在进行压缩时都会对实际负载数据进行封装，加//入头信息，如h264，需要解析nal单元，关联通过avav_find_stream_info()&lt;/p>
&lt;p>&lt;code> &lt;/code>struct AVCodecParserContext *parser;&lt;/p>
&lt;p>//指向解复用的流的context，比如mp4的MovStreamcontext&lt;/p>
&lt;p>void *priv_data;&lt;/p>
&lt;p>AVRational time_base;&lt;/p>
&lt;p>//用于seek时使用，用于快速索引关键帧，如flv的keyframes索引表和mp4的I&lt;/p>
&lt;p>//帧的索引表都存于此，很重要&lt;/p>
&lt;p>AVIndexEntry *index_entries;&lt;/p>
&lt;p>//index_entries的元素的个数&lt;/p>
&lt;p>int nb_index_entries;&lt;/p>
&lt;p>int index_entries_allocated_size;&lt;/p>
&lt;p>double frame_last_delay;&lt;/p>
&lt;p>} AVStream;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>AVStream 结构表示当前媒体流的上下文，着重于所有媒体流共有的属性(并且是在程序运行时才能确定其值)和关联其他结构的字段。actx 字段关联当前音视频媒体使用的编解码器的context；priv_data 字段关联解析各个具体媒体流解复用拆包用的context；还有关键帧的索引表也存于此。&lt;/p>
&lt;h2 id="410--movstreamcontext-结构体">&lt;strong>4.10 MOVStreamContext 结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct MOVStreamContext {&lt;/p>
&lt;p>&lt;code> &lt;/code>//流的索引,0或者1&lt;/p>
&lt;p>int ffindex;&lt;/p>
&lt;p>//临时变量，保存下一个chunk块的编号&lt;/p>
&lt;p>int next_chunk;&lt;/p>
&lt;p>//chunk的个数(在mp4的文件格式中,从stco中取值肯定为chunk的总数)&lt;/p>
&lt;p>unsigned int chunk_count;&lt;/p>
&lt;p>//chunk在文件中的偏移量数组(每个chunk中的sample在文件中的物理存储 //是连续 的),用于保存scto表&lt;/p>
&lt;p>int64_t *chunk_offsets;&lt;/p>
&lt;p>//stts的元素的个数&lt;/p>
&lt;p>unsigned int stts_count;&lt;/p>
&lt;p>//stts时间数据表&lt;/p>
&lt;p>MOVStts *stts_data;&lt;/p>
&lt;p>//ctts(用于在有B帧混合时进行纠正时间戳)的元素的个数&lt;/p>
&lt;p>unsigned int ctts_count;&lt;/p>
&lt;p>&lt;code> &lt;/code>//ctts数据表&lt;/p>
&lt;p>MOVStts *ctts_data;&lt;/p>
&lt;p>//stsc(空间分布表)的元素的个数&lt;/p>
&lt;p>unsigned int stsc_count;&lt;/p>
&lt;p>//stsc数据表&lt;/p>
&lt;p>MOVStsc *stsc_data;&lt;/p>
&lt;p>&lt;code> &lt;/code>//临时变量，记录当前使用的ctts表的索引&lt;/p>
&lt;p>int ctts_index;&lt;/p>
&lt;p>//记录当前的ctts元素作用的sample的索引&lt;/p>
&lt;p>&lt;code> &lt;/code>int ctts_sample;&lt;/p>
&lt;p>&lt;code> &lt;/code>//stsz表中可能smaple的size相同，如果相同使用该值&lt;/p>
&lt;p>unsigned int sample_size;&lt;/p>
&lt;p>//stsz中元素的个数&lt;/p>
&lt;p>unsigned int sample_count;//sample的个数&lt;/p>
&lt;p>//stsz数据表，记录每个sample的size，如果sample_size=0，该表才不会 //空&lt;/p>
&lt;p>int *sample_sizes;&lt;/p>
&lt;p>//stss(关键帧索引表)中元素的个数&lt;/p>
&lt;p>unsigned int keyframe_count;&lt;/p>
&lt;p>//关键帧数据表&lt;/p>
&lt;p>int *keyframes;&lt;/p>
&lt;p>//dref的元素的个数，一般为1&lt;/p>
&lt;p>unsigned drefs_count;&lt;/p>
&lt;p>//dref数据表&lt;/p>
&lt;p>MOVDref *drefs;&lt;/p>
&lt;p>&lt;code> &lt;/code>//tkhd宽度&lt;/p>
&lt;p>int width;&lt;/p>
&lt;p>//tkhd高度&lt;/p>
&lt;p>int height;&lt;/p>
&lt;p>} MOVStreamContext;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>MOVStreamContext结构用于保存从mov或mp4中进行拆包解复用从头部得到的信息。&lt;/p>
&lt;h2 id="411--avpacket-结构体">&lt;strong>4.11 AVPacket 结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVPacket&lt;/p>
&lt;p>{&lt;/p>
&lt;p>//显示时间戳&lt;/p>
&lt;p>int64_t pts;&lt;/p>
&lt;p>//解码时间戳&lt;/p>
&lt;p>int64_t dts;&lt;/p>
&lt;p>//记录在文件或网络中的流中的字节的位置&lt;/p>
&lt;p>int64_t pos;&lt;/p>
&lt;p>//实际数据指针&lt;/p>
&lt;p>uint8_t *data;&lt;/p>
&lt;p>//实际的数据的大小&lt;/p>
&lt;p>int size;&lt;/p>
&lt;p>//该packet所属的流的索引，一般为0或者1&lt;/p>
&lt;p>int stream_index;&lt;/p>
&lt;p>int flags;&lt;/p>
&lt;p>//析构函数&lt;/p>
&lt;p>void(*destruct)(struct AVPacket*);&lt;/p>
&lt;p>} AVPacket;&lt;/p>
&lt;p>说明：&lt;/p>
&lt;p>AVPacket 代表音视频数据帧，固有的属性是一些标记，时钟信息，和压缩数据首地址，大小等信息。&lt;/p>
&lt;h2 id="412--avpacketlist-结构体">&lt;strong>4.12 AVPacketList 结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVPacketList&lt;/p>
&lt;p>{&lt;/p>
&lt;p>AVPacket pkt;&lt;/p>
&lt;p>struct AVPacketList *next;&lt;/p>
&lt;p>} AVPacketList;&lt;/p>
&lt;p>说明：AVPacketList 把音视频AVPacket 组成一个小链表。&lt;/p>
&lt;h2 id="413-avframe结构体">&lt;strong>4.13 AVFrame结构体&lt;/strong>&lt;/h2>
&lt;p>typedef struct AVFrame {&lt;/p>
&lt;p>#define AV_NUM_DATA_POINTERS 8&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *data[AV_NUM_DATA_POINTERS];&lt;/p>
&lt;p>&lt;code> &lt;/code>int linesize[AV_NUM_DATA_POINTERS];&lt;/p>
&lt;p>uint8_t **extended_data;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**宽高 */&lt;/p>
&lt;p>&lt;code> &lt;/code>int width, height;&lt;/p>
&lt;p>&lt;code> &lt;/code>int nb_samples;&lt;/p>
&lt;p>int format;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**是否是关键帧*/&lt;/p>
&lt;p>&lt;code> &lt;/code>int key_frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**帧类型（I,B,P）*/&lt;/p>
&lt;p>&lt;code> &lt;/code>enum AVPictureType pict_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *base[AV_NUM_DATA_POINTERS];&lt;/p>
&lt;p>&lt;code> &lt;/code>AVRational sample_aspect_ratio;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t pkt_pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t pkt_dts;&lt;/p>
&lt;p>&lt;code> &lt;/code>int coded_picture_number;&lt;/p>
&lt;p>&lt;code> &lt;/code>int display_picture_number;&lt;/p>
&lt;p>&lt;code> &lt;/code>int quality;&lt;/p>
&lt;p>&lt;code> &lt;/code>int reference;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**QP表*/&lt;/p>
&lt;p>&lt;code> &lt;/code>int8_t *qscale_table;&lt;/p>
&lt;p>&lt;code> &lt;/code>int qstride;&lt;/p>
&lt;p>&lt;code> &lt;/code>int qscale_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**跳过宏块表 */&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *mbskip_table;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**运动矢量表*/&lt;/p>
&lt;p>&lt;code> &lt;/code>int16_t (*motion_val[2])[2];&lt;/p>
&lt;p>&lt;code> &lt;/code>/**宏块类型表 */&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t *mb_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**DCT系数 */&lt;/p>
&lt;p>&lt;code> &lt;/code>short *dct_coeff;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**参考帧列表 */&lt;/p>
&lt;p>&lt;code> &lt;/code>int8_t *ref_index[2];&lt;/p>
&lt;p>&lt;code> &lt;/code>void *opaque;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint64_t error[AV_NUM_DATA_POINTERS];&lt;/p>
&lt;p>&lt;code> &lt;/code>int type;&lt;/p>
&lt;p>&lt;code> &lt;/code>int repeat_pict;&lt;/p>
&lt;p>&lt;code> &lt;/code>int interlaced_frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>int top_field_first;&lt;/p>
&lt;p>&lt;code> &lt;/code>int palette_has_changed;&lt;/p>
&lt;p>&lt;code> &lt;/code>int buffer_hints;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPanScan *pan_scan;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t reordered_opaque;&lt;/p>
&lt;p>&lt;code> &lt;/code>void *hwaccel_picture_private;&lt;/p>
&lt;p>&lt;code> &lt;/code>struct AVCodecContext *owner;&lt;/p>
&lt;p>&lt;code> &lt;/code>void *thread_opaque;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* log2 of the size of the block which a single vector in motion_val represents:&lt;/p>
&lt;p>&lt;code> &lt;/code>* (4-&amp;gt;16x16, 3-&amp;gt;8x8, 2-&amp;gt; 4x4, 1-&amp;gt; 2x2)&lt;/p>
&lt;p>&lt;code> &lt;/code>* - encoding: unused&lt;/p>
&lt;p>&lt;code> &lt;/code>* - decoding: Set by libavcodec.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t motion_subsample_log2;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**（音频）采样率 */&lt;/p>
&lt;p>&lt;code> &lt;/code>int sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint64_t channel_layout;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t best_effort_timestamp;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t pkt_pos;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t pkt_duration;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVDictionary *metadata;&lt;/p>
&lt;p>&lt;code> &lt;/code>int decode_error_flags;&lt;/p>
&lt;p>#define FF_DECODE_ERROR_INVALID_BITSTREAM 1&lt;/p>
&lt;p>#define FF_DECODE_ERROR_MISSING_REFERENCE 2&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t channels;&lt;/p>
&lt;p>} AVFrame;&lt;/p>
&lt;p>AVFrame结构体一般用于存储原始数据（即非压缩数据，例如对视频来说是YUV，RGB，对音频来说是PCM），此外还包含了一些相关的信息。比如说，解码的时候存储了宏块类型表，QP表，运动矢量表等数据。编码的时候也存储了相关的数据。因此在使用FFMPEG进行码流分析的时候，AVFrame是一个很重要的结构体。&lt;/p>
&lt;p>下面看几个主要变量的作用（在这里考虑解码的情况）：&lt;/p>
&lt;p>uint8_t *data[AV_NUM_DATA_POINTERS]：解码后原始数据（对视频来说是YUV，RGB，对音频来说是PCM）&lt;/p>
&lt;p>int linesize[AV_NUM_DATA_POINTERS]：data的大小&lt;/p>
&lt;p>int width, height：视频帧宽和高（1920x1080,1280x720...）&lt;/p>
&lt;p>int nb_samples：音频的一个AVFrame中可能包含多个音频帧，在此标记包含了几个&lt;/p>
&lt;p>int format：解码后原始数据类型（YUV420，YUV422，RGB24...）&lt;/p>
&lt;p>int key_frame：是否是关键帧&lt;/p>
&lt;p>enum AVPictureType pict_type：帧类型（I,B,P...）&lt;/p>
&lt;p>AVRational sample_aspect_ratio：宽高比（16:9，4:3...）&lt;/p>
&lt;p>int64_t pts：显示时间戳&lt;/p>
&lt;p>int coded_picture_number：编码帧序号&lt;/p>
&lt;p>int display_picture_number：显示帧序号&lt;/p>
&lt;p>int8_t *qscale_table：QP表&lt;/p>
&lt;p>uint8_t *mbskip_table：跳过宏块表&lt;/p>
&lt;p>int16_t (*motion_val[2])[2]：运动矢量表&lt;/p>
&lt;p>uint32_t *mb_type：宏块类型表&lt;/p>
&lt;p>short *dct_coeff：DCT系数，这个没有提取过&lt;/p>
&lt;p>int8_t *ref_index[2]：运动估计参考帧列表（貌似H.264这种比较新的标准才会涉及到多参考帧）&lt;/p>
&lt;p>int interlaced_frame：是否是隔行扫描&lt;/p>
&lt;p>uint8_t motion_subsample_log2：一个宏块中的运动矢量采样个数，取log的&lt;/p>
&lt;p>其他的变量不再一一列举，源代码中都有详细的说明。在这里重点分析一下几个需要一定的理解的变量：&lt;/p>
&lt;p>1.data[]&lt;/p>
&lt;p>对于packed格式的数据（例如RGB24），会存到data[0]里面。&lt;/p>
&lt;p>对于planar格式的数据（例如YUV420P），则会分开成data[0]，data[1]，data[2]...（YUV420P中data[0]存Y，data[1]存U，data[2]存V）&lt;/p>
&lt;p>具体参见：FFMPEG 实现 YUV，RGB各种图像原始数据之间的转换（swscale）&lt;/p>
&lt;p>2.pict_type&lt;/p>
&lt;p>包含以下类型：&lt;/p>
&lt;p>py&lt;/p>
&lt;p>enum AVPictureType {&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_NONE = 0, ///&amp;lt; Undefined&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_I, ///&amp;lt; Intra&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_P, ///&amp;lt; Predicted&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_B, ///&amp;lt; Bi-dir predicted&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_S, ///&amp;lt; S(GMC)-VOP MPEG4&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_SI, ///&amp;lt; Switching Intra&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_SP, ///&amp;lt; Switching Predicted&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_PICTURE_TYPE_BI, ///&amp;lt; BI type&lt;/p>
&lt;p>};&lt;/p>
&lt;p>3.sample_aspect_ratio&lt;/p>
&lt;p>宽高比是一个分数，FFMPEG中用AVRational表达分数：&lt;/p>
&lt;p>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* rational number numerator/denominator&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>typedef struct AVRational{&lt;/p>
&lt;p>&lt;code> &lt;/code>int num; ///&amp;lt; numerator&lt;/p>
&lt;p>&lt;code> &lt;/code>int den; ///&amp;lt; denominator&lt;/p>
&lt;p>} AVRational;&lt;/p>
&lt;p>4.qscale_table&lt;/p>
&lt;p>QP表指向一块内存，里面存储的是每个宏块的QP值。宏块的标号是从左往右，一行一行的来的。每个宏块对应1个QP。&lt;/p>
&lt;p>qscale_table[0]就是第1行第1列宏块的QP值；qscale_table[1]就是第1行第2列宏块的QP值；qscale_table[2]就是第1行第3列宏块的QP值。以此类推...&lt;/p>
&lt;p>宏块的个数用下式计算：&lt;/p>
&lt;p>注：宏块大小是16x16的。&lt;/p>
&lt;p>每行宏块数：&lt;/p>
&lt;p>int mb_stride = pCodecCtx-&amp;gt;width/16+1&lt;/p>
&lt;p>宏块的总数：&lt;/p>
&lt;p>int mb_sum = ((pCodecCtx-&amp;gt;height+15)&amp;gt;&amp;gt;4)*(pCodecCtx-&amp;gt;width/16+1)&lt;/p>
&lt;p>5.motion_subsample_log2&lt;/p>
&lt;p>1个运动矢量所能代表的画面大小（用宽或者高表示，单位是像素），注意，这里取了log2。&lt;/p>
&lt;p>代码注释中给出以下数据：&lt;/p>
&lt;p>4-&amp;gt;16x16, 3-&amp;gt;8x8, 2-&amp;gt; 4x4, 1-&amp;gt; 2x2&lt;/p>
&lt;p>即1个运动矢量代表16x16的画面的时候，该值取4；1个运动矢量代表8x8的画面的时候，该值取3...以此类推&lt;/p>
&lt;p>6.motion_val&lt;/p>
&lt;p>运动矢量表存储了一帧视频中的所有运动矢量。&lt;/p>
&lt;p>该值的存储方式比较特别：&lt;/p>
&lt;p>int16_t (*motion_val[2])[2];&lt;/p>
&lt;p>为了弄清楚该值究竟是怎么存的，花了我好一阵子功夫...&lt;/p>
&lt;p>注释中给了一段代码：&lt;/p>
&lt;p>int mv_sample_log2= 4 - motion_subsample_log2;&lt;/p>
&lt;p>int mb_width= (width+15)&amp;gt;&amp;gt;4;&lt;/p>
&lt;p>int mv_stride= (mb_width &amp;lt;&amp;lt; mv_sample_log2) + 1;&lt;/p>
&lt;p>motion_val[direction][x + y*mv_stride][0-&amp;gt;mv_x, 1-&amp;gt;mv_y];&lt;/p>
&lt;p>大概知道了该数据的结构：&lt;/p>
&lt;p>1.首先分为两个列表L0和L1&lt;/p>
&lt;p>2.每个列表（L0或L1）存储了一系列的MV（每个MV对应一个画面，大小由motion_subsample_log2决定）&lt;/p>
&lt;p>3.每个MV分为横坐标和纵坐标（x,y）&lt;/p>
&lt;p>注意，在FFMPEG中MV和MB在存储的结构上是没有什么关联的，第1个MV是屏幕上左上角画面的MV（画面的大小取决于motion_subsample_log2），第2个MV是屏幕上第1行第2列的画面的MV，以此类推。因此在一个宏块（16x16）的运动矢量很有可能如下图所示（line代表一行运动矢量的个数）：&lt;/p>
&lt;p>//例如8x8划分的运动矢量与宏块的关系：&lt;/p>
&lt;p>&lt;code> &lt;/code>//-------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>//| | |&lt;/p>
&lt;p>&lt;code> &lt;/code>//|mv[x] |mv[x+1] |&lt;/p>
&lt;p>&lt;code> &lt;/code>//-------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>//| | |&lt;/p>
&lt;p>&lt;code> &lt;/code>//|mv[x+line]|mv[x+line+1]|&lt;/p>
&lt;p>&lt;code> &lt;/code>//-------------------------&lt;/p>
&lt;p>7.mb_type&lt;/p>
&lt;p>宏块类型表存储了一帧视频中的所有宏块的类型。其存储方式和QP表差不多。只不过其是uint32类型的，而QP表是uint8类型的。每个宏块对应一个宏块类型变量。&lt;/p>
&lt;p>宏块类型如下定义所示：&lt;/p>
&lt;p>//The following defines may change, don't expect compatibility if you use them.&lt;/p>
&lt;p>#define MB_TYPE_INTRA4x4 0x0001&lt;/p>
&lt;p>#define MB_TYPE_INTRA16x16 0x0002 //FIXME H.264-specific&lt;/p>
&lt;p>#define MB_TYPE_INTRA_PCM 0x0004 //FIXME H.264-specific&lt;/p>
&lt;p>#define MB_TYPE_16x16 0x0008&lt;/p>
&lt;p>#define MB_TYPE_16x8 0x0010&lt;/p>
&lt;p>#define MB_TYPE_8x16 0x0020&lt;/p>
&lt;p>#define MB_TYPE_8x8 0x0040&lt;/p>
&lt;p>#define MB_TYPE_INTERLACED 0x0080&lt;/p>
&lt;p>#define MB_TYPE_DIRECT2 0x0100 //FIXME&lt;/p>
&lt;p>#define MB_TYPE_ACPRED 0x0200&lt;/p>
&lt;p>#define MB_TYPE_GMC 0x0400&lt;/p>
&lt;p>#define MB_TYPE_SKIP 0x0800&lt;/p>
&lt;p>#define MB_TYPE_P0L0 0x1000&lt;/p>
&lt;p>#define MB_TYPE_P1L0 0x2000&lt;/p>
&lt;p>#define MB_TYPE_P0L1 0x4000&lt;/p>
&lt;p>#define MB_TYPE_P1L1 0x8000&lt;/p>
&lt;p>#define MB_TYPE_L0 (MB_TYPE_P0L0 | MB_TYPE_P1L0)&lt;/p>
&lt;p>#define MB_TYPE_L1 (MB_TYPE_P0L1 | MB_TYPE_P1L1)&lt;/p>
&lt;p>#define MB_TYPE_L0L1 (MB_TYPE_L0 | MB_TYPE_L1)&lt;/p>
&lt;p>#define MB_TYPE_QUANT 0x00010000&lt;/p>
&lt;p>#define MB_TYPE_CBP 0x00020000&lt;/p>
&lt;p>//Note bits 24-31 are reserved for codec specific use (h264 ref0, mpeg1 0mv, ...)&lt;/p>
&lt;p>一个宏块如果包含上述定义中的一种或两种类型，则其对应的宏块变量的对应位会被置1。&lt;/p>
&lt;p>注：一个宏块可以包含好几种类型，但是有些类型是不能重复包含的，比如说一个宏块不可能既是16x16又是8x8。&lt;/p>
&lt;p>8.ref_index&lt;/p>
&lt;p>运动估计参考帧列表存储了一帧视频中所有宏块的参考帧索引。这个列表其实在比较早的压缩编码标准中是没有什么用的。只有像H.264这样的编码标准才有多参考帧的概念。但是这个字段目前我还没有研究透。只是知道每个宏块包含有4个该值，该值反映的是参考帧的索引。以后有机会再进行细研究吧。&lt;/p>
&lt;p>在这里展示一下自己做的码流分析软件的运行结果。将上文介绍的几个列表图像化显示了出来（在这里是使用MFC的绘图函数画出来的）&lt;/p>
&lt;p>视频帧：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.022.jpeg" alt="">&lt;/p>
&lt;p>QP参数提取的结果：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.023.jpeg" alt="">&lt;/p>
&lt;p>美化过的（加上了颜色）：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.024.jpeg" alt="">&lt;/p>
&lt;p>宏块类型参数提取的结果：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.025.jpeg" alt="">&lt;/p>
&lt;p>美化过的（加上了颜色，更清晰一些，s代表skip宏块）：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.026.jpeg" alt="">&lt;/p>
&lt;p>运动矢量参数提取的结果（在这里是List0）：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.027.jpeg" alt="">&lt;/p>
&lt;p>运动估计参考帧参数提取的结果：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.028.jpeg" alt="">&lt;/p>
&lt;h1 id="第五章-重要模块">&lt;strong>第五章 重要模块&lt;/strong>&lt;/h1>
&lt;p>介绍几个常用模块及其函数实现，有贴代码的嫌疑。（下面分析的代码是较老版本的，新版本部分已经不适用了，但是具有一定参考价值，初期熟悉api的时候可以不理会具体的代码实现）&lt;/p>
&lt;p>ps ：下列文件列表中的大小均为裁剪后的大小，非源码中实际代码带大小。&lt;/p>
&lt;h2 id="51-libavutil公共模块">&lt;strong>5.1 libavutil公共模块&lt;/strong>&lt;/h2>
&lt;h3 id="1-文件列表">&lt;strong>1 文件列表&lt;/strong>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件类型&lt;/th>
&lt;th>文件名&lt;/th>
&lt;th>大小(bytes)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>common.h&lt;/td>
&lt;td>1515&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>bswap.h&lt;/td>
&lt;td>489&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>rational.h&lt;/td>
&lt;td>257&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>mathematics.h&lt;/td>
&lt;td>153&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>avutil.h&lt;/td>
&lt;td>1978&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="2-commonh-文件">&lt;strong>2 common.h 文件&lt;/strong>&lt;/h3>
&lt;p>2.1 功能描述&lt;/p>
&lt;p>ffplay 使用的工具类数据类型定义，宏定义和两个简单的内联函数,基本上是自注释的。&lt;/p>
&lt;p>2.2 文件注释&lt;/p>
&lt;p>1&lt;/p>
&lt;p>2 #ifndef COMMON_H&lt;/p>
&lt;p>3 #define COMMON_H&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 #include &amp;lt;stdlib.h&amp;gt;&lt;/p>
&lt;p>6 #include &amp;lt;stdio.h&amp;gt;&lt;/p>
&lt;p>7 #include &amp;lt;string.h&amp;gt;&lt;/p>
&lt;p>8 #include &amp;lt;ctype.h&amp;gt;&lt;/p>
&lt;p>9&lt;/p>
&lt;p>10 #if defined(WIN32) &amp;amp;&amp;amp; !defined( MINGW32 ) &amp;amp;&amp;amp; !defined( CYGWIN )&lt;/p>
&lt;p>11 #define CONFIG_WIN32&lt;/p>
&lt;p>12 #endif&lt;/p>
&lt;p>13&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.030.png" alt="">&lt;/p>
&lt;p>内联函数的关键字在 linux gcc 和 w indow s vc 中的定义是不同的，gcc 是 in line，vc 是 in line。因为代&lt;/p>
&lt;p>码是从 linu x 下移植过来的，在这里做一个宏定义修改相对简单。&lt;/p>
&lt;p>14 #ifdef CONFIG_WIN32&lt;/p>
&lt;p>15 #define inline inline&lt;/p>
&lt;p>16 #endif&lt;/p>
&lt;p>17&lt;/p>
&lt;p>简单的数据类型定义， linux gcc 和 w indow s vc 编译器有稍许不同，用宏开关 CONFIG_WIN32 来屏蔽 64&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.031.png" alt="">位整数类型的差别。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>18 typedef signed char int8_t;&lt;/p>
&lt;p>19 typedef signed short int16_t;&lt;/p>
&lt;p>20 typedef signed int int32_t;&lt;/p>
&lt;p>21 typedef unsigned char uint8_t;&lt;/p>
&lt;p>22 typedef unsigned short uint16_t;&lt;/p>
&lt;p>23 typedef unsigned int uint32_t;&lt;/p>
&lt;p>24&lt;/p>
&lt;p>25 #ifdef CONFIG_WIN32&lt;/p>
&lt;p>26 typedef signed int64 int64_t;&lt;/p>
&lt;p>27 typedef unsigned int64 uint64_t;&lt;/p>
&lt;p>28 #else&lt;/p>
&lt;p>29 typedef signed long long int64_t;&lt;/p>
&lt;p>30 typedef unsigned long long uint64_t;&lt;/p>
&lt;p>31 #endif&lt;/p>
&lt;p>32&lt;/p>
&lt;p>64 位整数的定义语法，linux gcc 和 w indow s vc 编译器有稍许不同，用宏开关 CONFIG_WIN32 来屏蔽 64&lt;/p>
&lt;p>位整数定义的差别。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.032.png" alt="">Linu x 用 LL/ ULL 来表示 64 位整数，VC 用 i64 来表示 64 位整数。&lt;/p>
&lt;p>## 是连接符，把##前后的两个字符串连接成一个字符串。&lt;/p>
&lt;p>33 #ifdef CONFIG_WIN32&lt;/p>
&lt;p>34 #define int64_t_C(c) (c ## i64)&lt;/p>
&lt;p>35 #define uint64_t_C(c) (c ## i64)&lt;/p>
&lt;p>36 #else&lt;/p>
&lt;p>37 #define int64_t_C(c) (c ## LL)&lt;/p>
&lt;p>38 #define uint64_t_C(c) (c ## ULL)&lt;/p>
&lt;p>39 #endif&lt;/p>
&lt;p>40&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.033.png" alt="">&lt;/p>
&lt;p>定义最大的 64 位整数。&lt;/p>
&lt;p>41 #ifndef INT64_MAX&lt;/p>
&lt;p>42 #define INT64_MAX int64_t_C(9223372036854775807)&lt;/p>
&lt;p>43 #endif&lt;/p>
&lt;p>44&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.033.png" alt="">&lt;/p>
&lt;p>大小写敏感的字符串比较函数。在 ffplay 中只关心是否相等，不关心谁大谁小。&lt;/p>
&lt;p>45 static int strcasecmp(char *s1, const char *s2)&lt;/p>
&lt;p>46 {&lt;/p>
&lt;p>47 while (toupper((unsigned char) *s1) == toupper((unsigned char) *s2++))&lt;/p>
&lt;p>48 if (*s1++ == '\0')&lt;/p>
&lt;p>49 return 0;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>50&lt;/p>
&lt;p>51 return (toupper((unsigned char) *s1) - toupper((unsigned char) *--s2));&lt;/p>
&lt;p>52 }&lt;/p>
&lt;p>53&lt;/p>
&lt;p>限幅函数，这个函数使用简单的比较逻辑来实现，比较语句多，容易中断 CPU 的指令流水线，导致性&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.034.png" alt="">能低下。如果变量 a 的取值范围比较小，可以用常规的空间换时间的查表方法来优化。&lt;/p>
&lt;p>54 static inline int clip(int a, int amin, int amax)&lt;/p>
&lt;p>55 {&lt;/p>
&lt;p>56 if (a &amp;lt; amin)&lt;/p>
&lt;p>57 return amin;&lt;/p>
&lt;p>58 else if (a &amp;gt; amax)&lt;/p>
&lt;p>59 return amax;&lt;/p>
&lt;p>60 else&lt;/p>
&lt;p>61 return a;&lt;/p>
&lt;p>62 }&lt;/p>
&lt;p>63&lt;/p>
&lt;p>64 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="3-bswaph-文件">&lt;strong>3 bswap.h 文件&lt;/strong>&lt;/h3>
&lt;p>3.1 功能描述&lt;/p>
&lt;p>short 和 int 整数类型字节顺序交换，通常和 CPU 大端或小端有关。&lt;/p>
&lt;p>对 int 型整数，小端 CPU 低地址内存存低位字节，高地址内存存高位字节。 对 int 型整数，大端 CPU 低地址内存存高位字节，高地址内存存低位字节。&lt;/p>
&lt;p>常见的 CPU 中，Intel X86 序列及其兼容序列只能是小端，Motorola 68 序列只能是大端，ARM 大端小端都 支持，但默认小端。&lt;/p>
&lt;p>3.2 文件注释&lt;/p>
&lt;p>1 #ifndef BSWAP_H&lt;/p>
&lt;p>2 #define BSWAP_H&lt;/p>
&lt;p>3&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.035.png" alt="">&lt;/p>
&lt;p>Int 16 位短整数字节交换，简单的移位再或运算。&lt;/p>
&lt;p>4 static inline uint16_t bswap_16(uint16_t x)&lt;/p>
&lt;p>5 {&lt;/p>
&lt;p>6 return (x &amp;gt;&amp;gt; 8) | (x &amp;lt;&amp;lt; 8);&lt;/p>
&lt;p>7 }&lt;/p>
&lt;p>8&lt;/p>
&lt;p>Int 32 位长整数字节交换，看遍所有的开源代码，这个代码是最简洁的 C 代码，并且和上面 16 位短&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.036.png" alt="">整数字节交换一脉相承。&lt;/p>
&lt;p>9 static inline uint32_t bswap_32(uint32_t x)&lt;/p>
&lt;p>10 {&lt;/p>
&lt;p>11 x = ((x &amp;lt;&amp;lt; 8) &amp;amp;0xFF00FF00) | ((x &amp;gt;&amp;gt; 8) &amp;amp;0x00FF00FF);&lt;/p>
&lt;p>12 return (x &amp;gt;&amp;gt; 16) | (x &amp;lt;&amp;lt; 16);&lt;/p>
&lt;p>13 }&lt;/p>
&lt;p>14&lt;/p>
&lt;p>15 // be2me ... BigEndian to MachineEndian&lt;/p>
&lt;p>16 // le2me ... LittleEndian to MachineEndian&lt;/p>
&lt;p>17&lt;/p>
&lt;p>18 #define be2me_16(x) bswap_16(x)&lt;/p>
&lt;p>19 #define be2me_32(x) bswap_32(x)&lt;/p>
&lt;p>20 #define le2me_16(x) (x)&lt;/p>
&lt;p>21 #define le2me_32(x) (x)&lt;/p>
&lt;p>22&lt;/p>
&lt;p>23 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="4-rationalh-文件">&lt;strong>4 rational.h 文件&lt;/strong>&lt;/h3>
&lt;p>4.1 功能描述&lt;/p>
&lt;p>用两整数精确表示分数。常规的可以用一个 float 或 double 型数来表示分数，但不是精确表示，在需要相 对比较精确计算的时候，为避免非精确表示带来的计算误差，采用两整数来精确表示。&lt;/p>
&lt;p>4.2 文件注释&lt;/p>
&lt;p>1 #ifndef RATIONAL_H&lt;/p>
&lt;p>2 #define RATIONAL_H&lt;/p>
&lt;p>3&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.037.png" alt="">&lt;/p>
&lt;p>用分数最原始的分子和分母的定义来表示，用分子和分母的组合来表示分数。&lt;/p>
&lt;p>4 typedef struct AVRational&lt;/p>
&lt;p>5 {&lt;/p>
&lt;p>6 int num; // numerator // 分子&lt;/p>
&lt;p>7 int den; // denominator // 分母&lt;/p>
&lt;p>8 } AVRational;&lt;/p>
&lt;p>9&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.037.png" alt="">&lt;/p>
&lt;p>用 float 或 double 表示分数值，强制类型转换后，简单的除法运算。&lt;/p>
&lt;p>10 static inline double av_q2d(AVRational a)&lt;/p>
&lt;p>11 {&lt;/p>
&lt;p>12 return a.num / (double)a.den;&lt;/p>
&lt;p>13 }&lt;/p>
&lt;p>1415 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="5-mathematicsh-文件">&lt;strong>5 mathematics.h 文件&lt;/strong>&lt;/h3>
&lt;p>5.1 功能描述&lt;/p>
&lt;p>数学上的缩放运算。为避免计算误差，缩放因子用两整数表示做精确的整数运算。为防止计算溢出，强制转 换为 int 64 位整数后计算。&lt;/p>
&lt;p>此处做了一些简化，运算精度会降低，但普通的人很难感知到计算误差。&lt;/p>
&lt;p>5.2 文件注释&lt;/p>
&lt;p>1 #ifndef MATHEMATICS_H&lt;/p>
&lt;p>2 #define MATHEMATICS_H&lt;/p>
&lt;p>3&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.038.png" alt="">&lt;/p>
&lt;p>数学上的缩放运算，此处简化了很多，虽然计算结果有稍许误差，但不影响播放效果。&lt;/p>
&lt;p>4 static inline int64_t av_rescale(int64_t a, int64_t b, int64_t c)&lt;/p>
&lt;p>5 {&lt;/p>
&lt;p>6 return a * b / c;&lt;/p>
&lt;p>7 }&lt;/p>
&lt;p>9 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="6-avutilh-文件">&lt;strong>6 avutil.h 文件&lt;/strong>&lt;/h3>
&lt;p>6.1 功能描述&lt;/p>
&lt;p>ffplay 基础工具库使用的一些常数和宏的定义。&lt;/p>
&lt;p>6.2 文件注释&lt;/p>
&lt;p>1 #ifndef AVUTIL_H&lt;/p>
&lt;p>2 #define AVUTIL_H&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #ifdef cplusplus&lt;/p>
&lt;p>5 extern &amp;quot;C&amp;quot; {&lt;/p>
&lt;p>6 #endif&lt;/p>
&lt;p>7&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.039.png" alt="">&lt;/p>
&lt;p>代码 8 到 15 行是一些版本信息标示的宏定义，便于各位网友和原始版本比对，更深入地学习 ffmpeg。&lt;/p>
&lt;p>8 #define AV_STRINGIFY(s) AV_TOSTRING(s)&lt;/p>
&lt;p>9 #define AV_TOSTRING(s) #s&lt;/p>
&lt;p>10&lt;/p>
&lt;p>11 #define LIBAVUTIL_VERSION_INT ((49&amp;lt;&amp;lt;16)+(0&amp;lt;&amp;lt;8)+0)&lt;/p>
&lt;p>12 #define LIBAVUTIL_VERSION 49.0.0&lt;/p>
&lt;p>13 #define LIBAVUTIL_BUILD LIBAVUTIL_VERSION_INT&lt;/p>
&lt;p>14&lt;/p>
&lt;p>15 #define LIBAVUTIL_IDENT &amp;quot;Lavu&amp;quot; AV_STRINGIFY(LIBAVUTIL_VERSION)&lt;/p>
&lt;p>16&lt;/p>
&lt;p>17 #include &amp;quot;common.h&amp;quot;&lt;/p>
&lt;p>18 #include &amp;quot;mathematics.h&amp;quot;&lt;/p>
&lt;p>19 #include &amp;quot;rational.h&amp;quot;&lt;/p>
&lt;p>20&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.039.png" alt="">&lt;/p>
&lt;p>像素格式的宏定义，便于代码编写和维护。把一些常数定义成有意义的宏是一个值得鼓励的好习惯。&lt;/p>
&lt;p>21 enum PixelFormat&lt;/p>
&lt;p>22 {&lt;/p>
&lt;p>23 PIX_FMT_NONE= -1,&lt;/p>
&lt;p>24 PIX_FMT_YUV420P, // Planar YUV 4:2:0 (1 Cr &amp;amp; Cb sample per 2x2 Y samples)&lt;/p>
&lt;p>25 PIX_FMT_YUV422, // Packed pixel, Y0 Cb Y1 Cr&lt;/p>
&lt;p>26 PIX_FMT_RGB24, // Packed pixel, 3 bytes per pixel, RGBRGB...&lt;/p>
&lt;p>27 PIX_FMT_BGR24, // Packed pixel, 3 bytes per pixel, BGRBGR...&lt;/p>
&lt;p>28 PIX_FMT_YUV422P, // Planar YUV 4:2:2 (1 Cr &amp;amp; Cb sample per 2x1 Y samples)&lt;/p>
&lt;p>29 PIX_FMT_YUV444P, // Planar YUV 4:4:4 (1 Cr &amp;amp; Cb sample per 1x1 Y samples)&lt;/p>
&lt;p>30 PIX_FMT_RGBA32, // Packed pixel, 4 bytes per pixel, BGRABGRA..., stored in cpu endianness&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>31 PIX_FMT_YUV410P, // Planar YUV 4:1:0 (1 Cr &amp;amp; Cb sample per 4x4 Y samples)&lt;/p>
&lt;p>32 PIX_FMT_YUV411P, // Planar YUV 4:1:1 (1 Cr &amp;amp; Cb sample per 4x1 Y samples)&lt;/p>
&lt;p>33 PIX_FMT_RGB565, // always stored in cpu endianness&lt;/p>
&lt;p>34 PIX_FMT_RGB555, // always stored in cpu endianness, most significant bit to 1&lt;/p>
&lt;p>35 PIX_FMT_GRAY8,&lt;/p>
&lt;p>36 PIX_FMT_MONOWHITE, // 0 is white&lt;/p>
&lt;p>37 PIX_FMT_MONOBLACK, // 0 is black&lt;/p>
&lt;p>38 PIX_FMT_PAL8, // 8 bit with RGBA palette&lt;/p>
&lt;p>39 PIX_FMT_YUVJ420P, // Planar YUV 4:2:0 full scale (jpeg)&lt;/p>
&lt;p>40 PIX_FMT_YUVJ422P, // Planar YUV 4:2:2 full scale (jpeg)&lt;/p>
&lt;p>41 PIX_FMT_YUVJ444P, // Planar YUV 4:4:4 full scale (jpeg)&lt;/p>
&lt;p>42 PIX_FMT_XVMC_MPEG2_MC,// XVideo Motion Acceleration via common packet passing(xvmc_render.h)&lt;/p>
&lt;p>43 PIX_FMT_XVMC_MPEG2_IDCT,&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>44&lt;/th>
&lt;th>PIX_FMT_UYVY422,&lt;/th>
&lt;th>// Packed pixel, Cb Y0 Cr Y1&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>45&lt;/td>
&lt;td>PIX_FMT_UYVY411,&lt;/td>
&lt;td>// Packed pixel, Cb Y0 Y1 Cr Y2 Y3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>46&lt;/td>
&lt;td>PIX_FMT_NB,&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>47&lt;/td>
&lt;td>};&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>48&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>49&lt;/td>
&lt;td>#ifdef cplusplus&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>50&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>51&lt;/td>
&lt;td>#endif&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>52&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>53&lt;/td>
&lt;td>#endif&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="52-libavcodec编解码模块">&lt;strong>5.2 libavcodec编解码模块&lt;/strong>&lt;/h2>
&lt;h3 id="1-文件列表-1">&lt;strong>1 文件列表&lt;/strong>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件类型&lt;/th>
&lt;th>文件名&lt;/th>
&lt;th>大小(bytes)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/th>
&lt;th>文件名&lt;/th>
&lt;th>大小(bytes)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>avcodec.h&lt;/td>
&lt;td>4943&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>allcodecs.c&lt;/td>
&lt;td>310&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>dsputil.h&lt;/td>
&lt;td>163&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>dsputil.c&lt;/td>
&lt;td>350&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>imgconvert_template.h&lt;/td>
&lt;td>22311&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>imgconvert.c&lt;/td>
&lt;td>47834&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>msrle.c&lt;/td>
&lt;td>8387&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>turespeech_data.h&lt;/td>
&lt;td>4584&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>turespeech.c&lt;/td>
&lt;td>9622&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>utils_codec.c&lt;/td>
&lt;td>8973&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/th>
&lt;th>avcodec.h&lt;/th>
&lt;th>4943&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>allcodecs.c&lt;/td>
&lt;td>310&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>dsputil.h&lt;/td>
&lt;td>163&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>dsputil.c&lt;/td>
&lt;td>350&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>imgconvert_template.h&lt;/td>
&lt;td>22311&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>imgconvert.c&lt;/td>
&lt;td>47834&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>msrle.c&lt;/td>
&lt;td>8387&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>turespeech_data.h&lt;/td>
&lt;td>4584&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>turespeech.c&lt;/td>
&lt;td>9622&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>utils_codec.c&lt;/td>
&lt;td>8973&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="2-avcodech-文件">&lt;strong>2 avcodec.h 文件&lt;/strong>&lt;/h3>
&lt;p>2.1 功能描述&lt;/p>
&lt;p>定义编解码器库使用的宏、数据结构和函数，通常这些宏、数据结构和函数在此模块内相对全局有效。&lt;/p>
&lt;p>2.2 文件注释&lt;/p>
&lt;p>1 #ifndef AVCODEC_H&lt;/p>
&lt;p>2 #define AVCODEC_H&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #ifdef cplusplus&lt;/p>
&lt;p>5 extern &amp;quot;C&amp;quot;&lt;/p>
&lt;p>6 {&lt;/p>
&lt;p>7 #endif&lt;/p>
&lt;p>8&lt;/p>
&lt;p>9 #include &amp;quot;../libavutil/avutil.h&amp;quot;&lt;/p>
&lt;p>10 #include &amp;lt;sys/types.h&amp;gt; // size_t&lt;/p>
&lt;p>11&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.041.png" alt="">&lt;/p>
&lt;p>和版本信息有关的几个宏定义&lt;/p>
&lt;p>12 #define FFMPEG_VERSION_INT 0x000409&lt;/p>
&lt;p>13 #define FFMPEG_VERSION &amp;quot;CVS&amp;quot;&lt;/p>
&lt;p>14&lt;/p>
&lt;p>15 #define AV_STRINGIFY(s) AV_TOSTRING(s)&lt;/p>
&lt;p>16 #define AV_TOSTRING(s) #s&lt;/p>
&lt;p>17&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>18 #define LIBAVCODEC_VERSION_INT ((51&amp;lt;&amp;lt;16)+(8&amp;lt;&amp;lt;8)+0)&lt;/p>
&lt;p>19 #define LIBAVCODEC_VERSION 51.8.0&lt;/p>
&lt;p>20 #define LIBAVCODEC_BUILD LIBAVCODEC_VERSION_INT&lt;/p>
&lt;p>21&lt;/p>
&lt;p>22 #define LIBAVCODEC_IDENT &amp;quot;Lavc&amp;quot; AV_STRINGIFY(LIBAVCODEC_VERSION)&lt;/p>
&lt;p>23&lt;/p>
&lt;p>24 #define AV_NOPTS_VALUE int64_t_C(0x8000000000000000)&lt;/p>
&lt;p>25 #define AV_TIME_BASE 1000000&lt;/p>
&lt;p>26&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.041.png" alt="">&lt;/p>
&lt;p>Codec ID 宏定义，瘦身后的 ffplay 只支持这两种 codec，其他的都删掉了。&lt;/p>
&lt;p>27 enum CodecID&lt;/p>
&lt;p>28 {&lt;/p>
&lt;p>29 CODEC_ID_TRUESPEECH,&lt;/p>
&lt;p>30 CODEC_ID_MSRLE,&lt;/p>
&lt;p>31 CODEC_ID_NONE&lt;/p>
&lt;p>32 };&lt;/p>
&lt;p>33&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.041.png" alt="">&lt;/p>
&lt;p>Codec 类型定义，瘦身后的 ffplay 只支持视频和音频。&lt;/p>
&lt;p>34 enum CodecType&lt;/p>
&lt;p>35 {&lt;/p>
&lt;p>36 CODEC_TYPE_UNKNOWN = - 1,&lt;/p>
&lt;p>37 CODEC_TYPE_VIDEO,&lt;/p>
&lt;p>38 CODEC_TYPE_AUDIO,&lt;/p>
&lt;p>39 CODEC_TYPE_DATA&lt;/p>
&lt;p>40 };&lt;/p>
&lt;p>41&lt;/p>
&lt;p>42 #define AVCODEC_MAX_AUDIO_FRAME_SIZE 192000 // 1 second of 48khz 32bit audio&lt;/p>
&lt;p>43&lt;/p>
&lt;p>44 #define FF_INPUT_BUFFER_PADDING_SIZE 8&lt;/p>
&lt;p>45&lt;/p>
&lt;p>AVPicture 和 AVFrame 主要表示解码过程中的使用缓存，通常帧缓存是 YUV 格式，输出格式有 YUV&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.042.png" alt="">也有 RGB 格式，所以定义了 4 个 data 指针来表示分量。&lt;/p>
&lt;p>46 typedef struct AVPicture&lt;/p>
&lt;p>47 {&lt;/p>
&lt;p>48 uint8_t *data[4];&lt;/p>
&lt;p>49 int linesize[4];&lt;/p>
&lt;p>50 } AVPicture;&lt;/p>
&lt;p>51&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>52 typedef struct AVFrame&lt;/p>
&lt;p>53 {&lt;/p>
&lt;p>54 uint8_t *data[4]; // 有多重意义，其一用 NULL 来判断是否被占用&lt;/p>
&lt;p>55 int linesize[4];&lt;/p>
&lt;p>56 uint8_t *base[4]; // 有多重意义，其一用 NULL 来判断是否分配内存&lt;/p>
&lt;p>57 } AVFrame;&lt;/p>
&lt;p>58&lt;/p>
&lt;p>程序运行时当前 Codec 使用的上下文，着重于所有 Codec 共有的属性(并且是在程序运行时才能确定其&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.042.png" alt="">值)，codec 和 priv_data 关联其他结构的字段，便于在数据结构间跳转。&lt;/p>
&lt;p>59 typedef struct AVCodecContext&lt;/p>
&lt;p>60 {&lt;/p>
&lt;p>61 int bit_rate;&lt;/p>
&lt;p>62 int frame_number; // audio or video frame number&lt;/p>
&lt;p>63&lt;/p>
&lt;p>64 unsigned char *extradata; // codec 的私有数据,对 Audio 是 WAVEFORMATEX 扩展结构。&lt;/p>
&lt;p>65 int extradata_size; // 对 Video 是 BITMAPINFOHEADER 扩展结构&lt;/p>
&lt;p>66&lt;/p>
&lt;p>67 int width, height; // video only&lt;/p>
&lt;p>68&lt;/p>
&lt;p>69 enum PixelFormat pix_fmt; // 输出像素格式/视频图像格式&lt;/p>
&lt;p>70&lt;/p>
&lt;p>71 int sample_rate; // samples per sec // audio only&lt;/p>
&lt;p>72 int channels;&lt;/p>
&lt;p>73 int bits_per_sample;&lt;/p>
&lt;p>74 int block_align;&lt;/p>
&lt;p>75&lt;/p>
&lt;p>76 struct AVCodec *codec; // 指向 Codec 的指针，&lt;/p>
&lt;p>77 void *priv_data; // 具体解码器属性，在本例中指向 MsrleContext 或 TSContext&lt;/p>
&lt;p>78&lt;/p>
&lt;p>79 enum CodecType codec_type;// see CODEC_TYPE_xxx&lt;/p>
&lt;p>80 enum CodecID codec_id; // see CODEC_ID_xxx&lt;/p>
&lt;p>81&lt;/p>
&lt;p>82 int(*get_buffer)(struct AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>83 void(*release_buffer)(struct AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>84 int(*reget_buffer)(struct AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>85&lt;/p>
&lt;p>86 int internal_buffer_count;&lt;/p>
&lt;p>87 void *internal_buffer;&lt;/p>
&lt;p>88&lt;/p>
&lt;p>89 struct AVPaletteControl *palctrl;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>90 }AVCodecContext;&lt;/p>
&lt;p>91&lt;/p>
&lt;p>类似 COM 接口的数据结构，表示音视频编解码器，着重于功能函数，一种媒体类型对应一个 AVCodec&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.042.png" alt="">结构，在程序运行时有多个实例串联成链表便于查找。&lt;/p>
&lt;p>92 typedef struct AVCodec&lt;/p>
&lt;p>93 {&lt;/p>
&lt;p>94 const char *name; // 便于阅读的友好字符串，表征编解码器名称，比如&amp;quot;msrle&amp;quot;,&amp;quot;truespeech&amp;quot;&lt;/p>
&lt;p>95 enum CodecType type; // 编解码器类型，有效取值为 CODEC_TYPE_VIDEO 或 CODEC_TYPE_AUDIO&lt;/p>
&lt;p>96 enum CodecID id; // 编解码器 ID 值，&lt;/p>
&lt;p>97 int priv_data_size; // 具体编解码属性结构的大小，取代很多的 if-else 语句&lt;/p>
&lt;p>98 int(*init)(AVCodecContext*);&lt;/p>
&lt;p>99 int(*encode)(AVCodecContext *, uint8_t *buf, int buf_size, void *data);&lt;/p>
&lt;p>100 int(*close)(AVCodecContext*);&lt;/p>
&lt;p>101 int(*decode)(AVCodecContext *, void *outdata, int *outdata_size, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>102 int capabilities;&lt;/p>
&lt;p>103&lt;/p>
&lt;p>104 struct AVCodec *next; // 把所有的编解码器串联成链表便于查找&lt;/p>
&lt;p>105 }AVCodec;&lt;/p>
&lt;p>106&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.042.png" alt="">&lt;/p>
&lt;p>调色板大小和大小宏定义，每个调色板四字节(R,G,B,α)。有很多的视频图像颜色种类比较少，用索引 间接表示每个像素的颜色值，就可以用调色板和索引值实现简单的大约的 4:1 压缩比。&lt;/p>
&lt;p>107 #define AVPALETTE_SIZE 1024&lt;/p>
&lt;p>108 #define AVPALETTE_COUNT 256&lt;/p>
&lt;p>109&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.043.png" alt="">&lt;/p>
&lt;p>调色板数据结构定义，保存调色板数据。&lt;/p>
&lt;p>110 typedef struct AVPaletteControl&lt;/p>
&lt;p>111 {&lt;/p>
&lt;p>112 // demuxer sets this to 1 to indicate the palette has changed; decoder resets to 0&lt;/p>
&lt;p>113 int palette_changed;&lt;/p>
&lt;p>114&lt;/p>
&lt;p>115 /* 4-byte ARGB palette entries, stored in native byte order; note that&lt;/p>
&lt;p>116 * the individual palette components should be on a 8-bit scale; if&lt;/p>
&lt;p>117 * the palette data comes from a IBM VGA native format, the component&lt;/p>
&lt;p>118 * data is probably 6 bits in size and needs to be scaled */&lt;/p>
&lt;p>119 unsigned int palette[AVPALETTE_COUNT];&lt;/p>
&lt;p>120&lt;/p>
&lt;p>121 } AVPaletteControl;&lt;/p>
&lt;p>122&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.044.png" alt="">&lt;/p>
&lt;p>编解码库使用的函数声明。&lt;/p>
&lt;p>123 int avpicture_alloc(AVPicture *picture, int pix_fmt, int width, int height);&lt;/p>
&lt;p>124&lt;/p>
&lt;p>125 void avpicture_free(AVPicture *picture);&lt;/p>
&lt;p>126&lt;/p>
&lt;p>127 int avpicture_fill(AVPicture *picture, uint8_t *ptr, int pix_fmt, int width, int height);&lt;/p>
&lt;p>128 int avpicture_get_size(int pix_fmt, int width, int height);&lt;/p>
&lt;p>129 void avcodec_get_chroma_sub_sample(int pix_fmt, int *h_shift, int *v_shift);&lt;/p>
&lt;p>130&lt;/p>
&lt;p>131 int img_convert(AVPicture *dst, int dst_pix_fmt, const AVPicture *src, int pix_fmt,&lt;/p>
&lt;p>132 int width, int height);&lt;/p>
&lt;p>133&lt;/p>
&lt;p>134 void avcodec_init(void);&lt;/p>
&lt;p>135&lt;/p>
&lt;p>136 void register_avcodec(AVCodec *format);&lt;/p>
&lt;p>137 AVCodec *avcodec_find_decoder(enum CodecID id);&lt;/p>
&lt;p>138&lt;/p>
&lt;p>139 AVCodecContext *avcodec_alloc_context(void);&lt;/p>
&lt;p>140&lt;/p>
&lt;p>141 int avcodec_default_get_buffer(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>142 void avcodec_default_release_buffer(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>143 int avcodec_default_reget_buffer(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>144 void avcodec_align_dimensions(AVCodecContext *s, int *width, int *height);&lt;/p>
&lt;p>145 int avcodec_check_dimensions(void *av_log_ctx, unsigned int w, unsigned int h);&lt;/p>
&lt;p>146&lt;/p>
&lt;p>147 int avcodec_open(AVCodecContext *avctx, AVCodec *codec);&lt;/p>
&lt;p>148&lt;/p>
&lt;p>149 int avcodec_decode_audio(AVCodecContext *avctx, int16_t *samples, int *frame_size_ptr,&lt;/p>
&lt;p>150 uint8_t *buf, int buf_size);&lt;/p>
&lt;p>151 int avcodec_decode_video(AVCodecContext *avctx, AVFrame *picture, int *got_picture_ptr,&lt;/p>
&lt;p>152 uint8_t *buf, int buf_size);&lt;/p>
&lt;p>153&lt;/p>
&lt;p>154 int avcodec_close(AVCodecContext *avctx);&lt;/p>
&lt;p>155&lt;/p>
&lt;p>156 void avcodec_register_all(void);&lt;/p>
&lt;p>157&lt;/p>
&lt;p>158 void avcodec_default_free_buffers(AVCodecContext *s);&lt;/p>
&lt;p>159&lt;/p>
&lt;p>160 void *av_malloc(unsigned int size);&lt;/p>
&lt;p>161 void *av_mallocz(unsigned int size);&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">162 void *av_realloc(void *ptr, unsigned int size);&lt;/p>
&lt;p>163 void av_free(void *ptr);&lt;/p>
&lt;p>164 void av_freep(void *ptr);&lt;/p>
&lt;p>165 void *av_fast_realloc(void *ptr, unsigned int *size, unsigned int min_size);&lt;/p>
&lt;p>166&lt;/p>
&lt;p>167 void img_copy(AVPicture *dst, const AVPicture *src, int pix_fmt, int width, int height);&lt;/p>
&lt;p>168&lt;/p>
&lt;p>169 #ifdef cplusplus&lt;/p>
&lt;p>170 }&lt;/p>
&lt;p>171&lt;/p>
&lt;p>172 #endif&lt;/p>
&lt;p>173&lt;/p>
&lt;p>174 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="3-allcodecc-文件">&lt;strong>3 allcodec.c 文件&lt;/strong>&lt;/h3>
&lt;p>3.1 功能描述&lt;/p>
&lt;p>简单的注册/初始化函数，把编解码器用相应的链表串起来便于查找识别。&lt;/p>
&lt;p>3.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>3 extern AVCodec truespeech_decoder;&lt;/p>
&lt;p>4 extern AVCodec msrle_decoder;&lt;/p>
&lt;p>5&lt;/p>
&lt;p>6 void avcodec_register_all(void)&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.045.png" alt="">7 {&lt;/p>
&lt;p>8 到 13 行，in ited 变量声明成 static，做一下比较是为了避免此函数多次调用。&lt;/p>
&lt;p>编程基本原则之一，初始化函数只调用一次，不能随意多次调用。&lt;/p>
&lt;p>8 static int inited = 0;&lt;/p>
&lt;p>9&lt;/p>
&lt;p>10 if (inited != 0)&lt;/p>
&lt;p>11 return ;&lt;/p>
&lt;p>12&lt;/p>
&lt;p>13 inited = 1;&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">14&lt;/p>
&lt;p>把 msrle_decoder 解码器串接到解码器链表，链表头指针是 first_avcodec。&lt;/p>
&lt;p>15 register_avcodec(&amp;amp;msrle_decoder);&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">16&lt;/p>
&lt;p>把 truespeech_decoder 解码器串接到解码器链表，链表头指针是 first_avcodec。&lt;/p>
&lt;p>17 register_avcodec(&amp;amp;truespeech_decoder);&lt;/p>
&lt;p>18 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="4-dsputilh-文件">&lt;strong>4 dsputil.h 文件&lt;/strong>&lt;/h3>
&lt;p>4.1 功能描述&lt;/p>
&lt;p>定义 dsp 优化限幅运算使用的查找表及其初始化函数。&lt;/p>
&lt;p>4.2 文件注释&lt;/p>
&lt;p>1 #ifndef DSPUTIL_H&lt;/p>
&lt;p>2 #define DSPUTIL_H&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #define MAX_NEG_CROP 1024&lt;/p>
&lt;p>5&lt;/p>
&lt;p>6 extern uint8_t cropTbl[256+2 * MAX_NEG_CROP];&lt;/p>
&lt;p>7&lt;/p>
&lt;p>8 void dsputil_static_init(void);&lt;/p>
&lt;p>9&lt;/p>
&lt;p>10 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="5-dsputilc-文件">&lt;strong>5 dsputil.c 文件&lt;/strong>&lt;/h3>
&lt;p>5.1 功能描述&lt;/p>
&lt;p>定义 dsp 优化限幅运算使用的查找表，实现其初始化函数。&lt;/p>
&lt;p>5.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>2 #include &amp;quot;dsputil.h&amp;quot;&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 uint8_t cropTbl[256+2 * MAX_NEG_CROP] = {0, };&lt;/p>
&lt;p>5&lt;/p>
&lt;p>6 void dsputil_static_init(void)&lt;/p>
&lt;p>7 {&lt;/p>
&lt;p>8 int i;&lt;/p>
&lt;p>9&lt;/p>
&lt;p>初始化限幅运算查找表，最后的结果是：前 MAX_NEG_CROP 个数组项为 0，接着的 256 个数组项分别为&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.047.png" alt="">0 到 255，后面 MAX_NEG_CROP 个数组项为 255。用查表代替比较实现限幅运算。&lt;/p>
&lt;p>10 for (i = 0; i &amp;lt; 256; i++)&lt;/p>
&lt;p>11 cropTbl[i + MAX_NEG_CROP] = i;&lt;/p>
&lt;p>12&lt;/p>
&lt;p>13 for (i = 0; i &amp;lt; MAX_NEG_CROP; i++)&lt;/p>
&lt;p>14 {&lt;/p>
&lt;p>15 cropTbl[i] = 0;&lt;/p>
&lt;p>16 cropTbl[i + MAX_NEG_CROP + 256] = 255;&lt;/p>
&lt;p>17 }&lt;/p>
&lt;p>18 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="6-utils_codecc-文件">&lt;strong>6 utils_codec.c 文件&lt;/strong>&lt;/h3>
&lt;p>6.1 功能描述&lt;/p>
&lt;p>编解码库使用的帮助和工具函数，&lt;/p>
&lt;p>6.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>2 #include &amp;quot;dsputil.h&amp;quot;&lt;/p>
&lt;p>3&lt;/p>
&lt;p>1 #include &amp;lt;assert.h&amp;gt;&lt;/p>
&lt;p>2 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>3 #include &amp;quot;dsputil.h&amp;quot;&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 #define EDGE_WIDTH 16&lt;/p>
&lt;p>6 #define STRIDE_ALIGN 16&lt;/p>
&lt;p>7&lt;/p>
&lt;p>8 #define INT_MAX 2147483647&lt;/p>
&lt;p>9&lt;/p>
&lt;p>10 #define FFMAX(a,b) ((a) &amp;gt; (b) ? (a) : (b))&lt;/p>
&lt;p>11&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>内存动态分配函数，做一下简单参数校验后调用系统函数&lt;/p>
&lt;p>12 void *av_malloc(unsigned int size)&lt;/p>
&lt;p>13 {&lt;/p>
&lt;p>14 void *ptr;&lt;/p>
&lt;p>15&lt;/p>
&lt;p>16 if (size &amp;gt; INT_MAX)&lt;/p>
&lt;p>17 return NULL;&lt;/p>
&lt;p>18 ptr = malloc(size);&lt;/p>
&lt;p>19&lt;/p>
&lt;p>20 return ptr;&lt;/p>
&lt;p>21 }&lt;/p>
&lt;p>22&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>内存动态重分配函数，做一下简单参数校验后调用系统函数&lt;/p>
&lt;p>23 void *av_realloc(void *ptr, unsigned int size)&lt;/p>
&lt;p>24 {&lt;/p>
&lt;p>25 if (size &amp;gt; INT_MAX)&lt;/p>
&lt;p>26 return NULL;&lt;/p>
&lt;p>27&lt;/p>
&lt;p>28 return realloc(ptr, size);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>29 }&lt;/p>
&lt;p>30&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>内存动态释放函数，做一下简单参数校验后调用系统函数&lt;/p>
&lt;p>31 void av_free(void *ptr)&lt;/p>
&lt;p>32 {&lt;/p>
&lt;p>33 if (ptr)&lt;/p>
&lt;p>34 free(ptr);&lt;/p>
&lt;p>35 }&lt;/p>
&lt;p>36&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.049.png" alt="">内存动态分配函数，复用 av_malloc()函数，再把分配的内存清 0.&lt;/p>
&lt;p>37 void *av_mallocz(unsigned int size)&lt;/p>
&lt;p>38 {&lt;/p>
&lt;p>39 void *ptr;&lt;/p>
&lt;p>40&lt;/p>
&lt;p>41 ptr = av_malloc(size);&lt;/p>
&lt;p>42 if (!ptr)&lt;/p>
&lt;p>43 return NULL;&lt;/p>
&lt;p>44&lt;/p>
&lt;p>45 memset(ptr, 0, size);&lt;/p>
&lt;p>46 return ptr;&lt;/p>
&lt;p>47 }&lt;/p>
&lt;p>48&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>快速内存动态分配函数，预分配一些内存来避免多次调用系统函数达到快速的目的。&lt;/p>
&lt;p>49 void *av_fast_realloc(void *ptr, unsigned int *size, unsigned int min_size)&lt;/p>
&lt;p>50 {&lt;/p>
&lt;p>51 if (min_size &amp;lt; *size)&lt;/p>
&lt;p>52 return ptr;&lt;/p>
&lt;p>53&lt;/p>
&lt;p>54 *size = FFMAX(17 *min_size / 16+32, min_size);&lt;/p>
&lt;p>55&lt;/p>
&lt;p>56 return av_realloc(ptr, *size);&lt;/p>
&lt;p>57 }&lt;/p>
&lt;p>58&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.050.png" alt="">&lt;/p>
&lt;p>动态内存释放函数，注意传入的变量的类型。&lt;/p>
&lt;p>59 void av_freep(void *arg)&lt;/p>
&lt;p>60 {&lt;/p>
&lt;p>61 void **ptr = (void **)arg;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>62 av_free(*ptr);&lt;/p>
&lt;p>63 *ptr = NULL;&lt;/p>
&lt;p>64 }&lt;/p>
&lt;p>65&lt;/p>
&lt;p>66 AVCodec *first_avcodec = NULL;&lt;/p>
&lt;p>67&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.050.png" alt="">&lt;/p>
&lt;p>把编解码器串联成一个链表，便于查找。&lt;/p>
&lt;p>68 void register_avcodec(AVCodec *format)&lt;/p>
&lt;p>69 {&lt;/p>
&lt;p>70 AVCodec **p;&lt;/p>
&lt;p>71 p = &amp;amp;first_avcodec;&lt;/p>
&lt;p>72 while (*p != NULL)&lt;/p>
&lt;p>73 p = &amp;amp;(*p)-&amp;gt;next;&lt;/p>
&lt;p>74 *p = format;&lt;/p>
&lt;p>75 format-&amp;gt;next = NULL;&lt;/p>
&lt;p>76 }&lt;/p>
&lt;p>77&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.051.png" alt="">编解码库内部使用的缓存区，因为视频图像有 RGB 或 YUV 分量格式，所以每个数组有四个分量。&lt;/p>
&lt;p>78 typedef struct InternalBuffer&lt;/p>
&lt;p>79 {&lt;/p>
&lt;p>80 uint8_t *base[4];&lt;/p>
&lt;p>81 uint8_t *data[4];&lt;/p>
&lt;p>82 int linesize[4];&lt;/p>
&lt;p>83 } InternalBuffer;&lt;/p>
&lt;p>84&lt;/p>
&lt;p>85 #define INTERNAL_BUFFER_SIZE 32&lt;/p>
&lt;p>86&lt;/p>
&lt;p>87 #define ALIGN(x, a) (((x)+(a)-1)&amp;amp;~((a)-1))&lt;/p>
&lt;p>88&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>计算各种图像格式要求的图像长宽的字节对齐数，是 1 个还是 2 个，4 个，8 个，16 个字节对齐。&lt;/p>
&lt;p>89 void avcodec_align_dimensions(AVCodecContext *s, int *width, int *height)&lt;/p>
&lt;p>90 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>默认长宽是 1 个字节对齐。&lt;/p>
&lt;p>91 int w_align = 1;&lt;/p>
&lt;p>92 int h_align = 1;&lt;/p>
&lt;p>93&lt;/p>
&lt;p>94 switch (s-&amp;gt;pix_fmt)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>95 {&lt;/p>
&lt;p>96 case PIX_FMT_YUV420P:&lt;/p>
&lt;p>97 case PIX_FMT_YUV422:&lt;/p>
&lt;p>98 case PIX_FMT_UYVY422:&lt;/p>
&lt;p>99 case PIX_FMT_YUV422P:&lt;/p>
&lt;p>100 case PIX_FMT_YUV444P:&lt;/p>
&lt;p>101 case PIX_FMT_GRAY8:&lt;/p>
&lt;p>102 case PIX_FMT_YUVJ420P:&lt;/p>
&lt;p>103 case PIX_FMT_YUVJ422P:&lt;/p>
&lt;p>104 case PIX_FMT_YUVJ444P: //FIXME check for non mpeg style codecs and use less alignment&lt;/p>
&lt;p>105 w_align = 16;&lt;/p>
&lt;p>106 h_align = 16;&lt;/p>
&lt;p>107 break;&lt;/p>
&lt;p>108 case PIX_FMT_YUV411P:&lt;/p>
&lt;p>109 case PIX_FMT_UYVY411:&lt;/p>
&lt;p>110 w_align = 32;&lt;/p>
&lt;p>111 h_align = 8;&lt;/p>
&lt;p>112 break;&lt;/p>
&lt;p>113 case PIX_FMT_YUV410P:&lt;/p>
&lt;p>114 case PIX_FMT_RGB555:&lt;/p>
&lt;p>115 case PIX_FMT_PAL8:&lt;/p>
&lt;p>116 break;&lt;/p>
&lt;p>117 case PIX_FMT_BGR24:&lt;/p>
&lt;p>118 break;&lt;/p>
&lt;p>119 default:&lt;/p>
&lt;p>120 w_align = 1;&lt;/p>
&lt;p>121 h_align = 1;&lt;/p>
&lt;p>122 break;&lt;/p>
&lt;p>123 }&lt;/p>
&lt;p>124&lt;/p>
&lt;p>125 *width = ALIGN(*width, w_align);&lt;/p>
&lt;p>126 *height = ALIGN(*height, h_align);&lt;/p>
&lt;p>127 }&lt;/p>
&lt;p>128&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>校验视频图像的长宽是否合法。&lt;/p>
&lt;p>129 int avcodec_check_dimensions(void *av_log_ctx, unsigned int w, unsigned int h)&lt;/p>
&lt;p>130 {&lt;/p>
&lt;p>131 if ((int)w &amp;gt; 0 &amp;amp;&amp;amp; (int)h &amp;gt; 0 &amp;amp;&amp;amp; (w + 128)*(uint64_t)(h + 128) &amp;lt; INT_MAX / 4)&lt;/p>
&lt;p>132 return 0;&lt;/p>
&lt;p>133&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>134 return - 1;&lt;/p>
&lt;p>135 }&lt;/p>
&lt;p>136&lt;/p>
&lt;p>每次取 internal_buffer_count 数据项，用 base[0]来判断是否已分配内存，用 data[0]来判断是否&lt;/p>
&lt;p>已被占用。base[]和 data[]有多重意义。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.052.png" alt="">在 avcodec_alloc_context 中已把 internal_buffer 各项清 0，所以可以用 base[0]来判断。&lt;/p>
&lt;p>137 int avcodec_default_get_buffer(AVCodecContext *s, AVFrame *pic)&lt;/p>
&lt;p>138 {&lt;/p>
&lt;p>139 int i;&lt;/p>
&lt;p>140 int w = s-&amp;gt;width;&lt;/p>
&lt;p>141 int h = s-&amp;gt;height;&lt;/p>
&lt;p>142 int align_off;&lt;/p>
&lt;p>143 InternalBuffer *buf;&lt;/p>
&lt;p>144&lt;/p>
&lt;p>145 assert(pic-&amp;gt;data[0] == NULL);&lt;/p>
&lt;p>146 assert(INTERNAL_BUFFER_SIZE &amp;gt; s-&amp;gt;internal_buffer_count);&lt;/p>
&lt;p>147&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>校验视频图像的长宽是否合法。&lt;/p>
&lt;p>148 if (avcodec_check_dimensions(s, w, h))&lt;/p>
&lt;p>149 return - 1;&lt;/p>
&lt;p>150&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>如果没有分配内存，就分配动态内存并清 0。&lt;/p>
&lt;p>151 if (s-&amp;gt;internal_buffer == NULL)&lt;/p>
&lt;p>152 s-&amp;gt;internal_buffer = av_mallocz(INTERNAL_BUFFER_SIZE *sizeof(InternalBuffer));&lt;/p>
&lt;p>153&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.050.png" alt="">&lt;/p>
&lt;p>取缓存中的第一个没有占用内存。&lt;/p>
&lt;p>154 buf = &amp;amp;((InternalBuffer*)s-&amp;gt;internal_buffer)[s-&amp;gt;internal_buffer_count];&lt;/p>
&lt;p>155&lt;/p>
&lt;p>156 if (buf-&amp;gt;base[0])&lt;/p>
&lt;p>157 { /* 如果内存已分配就跳过 */ }&lt;/p>
&lt;p>158 else&lt;/p>
&lt;p>159 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>如果没有分配内存就按照图像格式要求分配内存，并设置一些标记和计算一些参数值。&lt;/p>
&lt;p>160 int h_chroma_shift, v_chroma_shift;&lt;/p>
&lt;p>161 int pixel_size, size[3];&lt;/p>
&lt;p>162&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>163 AVPicture picture;&lt;/p>
&lt;p>164&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>计算 CbCr 色度分量长宽的与 Y 亮度分量长宽的比，最后用移位实现。&lt;/p>
&lt;p>165 avcodec_get_chroma_sub_sample(s-&amp;gt;pix_fmt, &amp;amp;h_chroma_shift, &amp;amp;v_chroma_shift);&lt;/p>
&lt;p>166&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.041.png" alt="">&lt;/p>
&lt;p>规整长宽满足特定图像像素格式的要求。&lt;/p>
&lt;p>167 avcodec_align_dimensions(s, &amp;amp;w, &amp;amp;h);&lt;/p>
&lt;p>168&lt;/p>
&lt;p>把长宽放大一些，比如在 mpeg4 视频中编码算法中的运动估计要把原始图像做扩展来满足不受限制运&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.053.png" alt="">动矢量的要求(运动矢量可以超出原始图像边界)。&lt;/p>
&lt;p>169 w+= EDGE_WIDTH*2;&lt;/p>
&lt;p>170 h+= EDGE_WIDTH*2;&lt;/p>
&lt;p>171&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>计算特定格式的图像参数，包括各分量的大小，单行长度(linesi ze/stride) 等等。&lt;/p>
&lt;p>172 avpicture_fill(&amp;amp;picture, NULL, s-&amp;gt;pix_fmt, w, h);&lt;/p>
&lt;p>173 pixel_size = picture.linesize[0] * 8 / w;&lt;/p>
&lt;p>174 assert(pixel_size &amp;gt;= 1);&lt;/p>
&lt;p>175&lt;/p>
&lt;p>176 if (pixel_size == 3 *8)&lt;/p>
&lt;p>177 w = ALIGN(w, STRIDE_ALIGN &amp;lt;&amp;lt; h_chroma_shift);&lt;/p>
&lt;p>178 else&lt;/p>
&lt;p>179 w = ALIGN(pixel_size *w, STRIDE_ALIGN &amp;lt;&amp;lt; (h_chroma_shift + 3)) / pixel_size;&lt;/p>
&lt;p>180&lt;/p>
&lt;p>181 size[1] = avpicture_fill(&amp;amp;picture, NULL, s-&amp;gt;pix_fmt, w, h);&lt;/p>
&lt;p>182 size[0] = picture.linesize[0] *h;&lt;/p>
&lt;p>183 size[1] -= size[0];&lt;/p>
&lt;p>184 if (picture.data[2])&lt;/p>
&lt;p>185 size[1] = size[2] = size[1] / 2;&lt;/p>
&lt;p>186 else&lt;/p>
&lt;p>187 size[2] = 0;&lt;/p>
&lt;p>188&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>注意 base[]和 data[]数组还有作为标记的用途，free()时的非 NULL 判断，这里要清 0。&lt;/p>
&lt;p>189 memset(buf-&amp;gt;base, 0, sizeof(buf-&amp;gt;base));&lt;/p>
&lt;p>190 memset(buf-&amp;gt;data, 0, sizeof(buf-&amp;gt;data));&lt;/p>
&lt;p>191&lt;/p>
&lt;p>192 for (i = 0; i &amp;lt; 3 &amp;amp;&amp;amp; size[i]; i++)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>193 {&lt;/p>
&lt;p>194 const int h_shift = i == 0 ? 0 : h_chroma_shift;&lt;/p>
&lt;p>195 const int v_shift = i == 0 ? 0 : v_chroma_shift;&lt;/p>
&lt;p>196&lt;/p>
&lt;p>197 buf-&amp;gt;linesize[i] = picture.linesize[i];&lt;/p>
&lt;p>198&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>实质性分配内存，并且在 202 行把内存清 0。&lt;/p>
&lt;p>199 buf-&amp;gt;base[i] = av_malloc(size[i] + 16); //FIXME 16&lt;/p>
&lt;p>200 if (buf-&amp;gt;base[i] == NULL)&lt;/p>
&lt;p>201 return - 1;&lt;/p>
&lt;p>202 memset(buf-&amp;gt;base[i], 128, size[i]);&lt;/p>
&lt;p>203&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>内存对齐计算。&lt;/p>
&lt;p>204 align_off=ALIGN((buf-&amp;gt;linesize[i]*EDGE_WIDTH&amp;gt;&amp;gt;v_shift)+(EDGE_WIDTH&amp;gt;&amp;gt;h_shift),STRIDE_ALIGN);&lt;/p>
&lt;p>205&lt;/p>
&lt;p>206 if ((s-&amp;gt;pix_fmt == PIX_FMT_PAL8) || !size[2])&lt;/p>
&lt;p>207 buf-&amp;gt;data[i] = buf-&amp;gt;base[i];&lt;/p>
&lt;p>208 else&lt;/p>
&lt;p>209 buf-&amp;gt;data[i] = buf-&amp;gt;base[i] + align_off;&lt;/p>
&lt;p>210 }&lt;/p>
&lt;p>211 }&lt;/p>
&lt;p>212&lt;/p>
&lt;p>213 for (i = 0; i &amp;lt; 4; i++)&lt;/p>
&lt;p>214 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.050.png" alt="">&lt;/p>
&lt;p>把分配的内存参数赋值到 pic 指向的结构中，传递出去。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>215&lt;/th>
&lt;th>&lt;/th>
&lt;th>pic-&amp;gt;base[i] = buf-&amp;gt;base[i];&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>216&lt;/td>
&lt;td>&lt;/td>
&lt;td>pic-&amp;gt;data[i] = buf-&amp;gt;data[i];&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>217&lt;/td>
&lt;td>&lt;/td>
&lt;td>pic-&amp;gt;linesize[i] = buf-&amp;gt;linesize[i];&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>218&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">内存数组计数+1，注意释放时的操作，保证计数对应的内存数组是空闲的。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>219 s-&amp;gt;internal_buffer_count++;&lt;/p>
&lt;p>220&lt;/p>
&lt;p>221 return 0;&lt;/p>
&lt;p>222 }&lt;/p>
&lt;p>223&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>释放占用的内存数组项。保证从 0 到 internal_buffer_count-1 数据项为有效数据，其他是空闲数据项&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>224 void avcodec_default_release_buffer(AVCodecContext *s, AVFrame *pic)&lt;/p>
&lt;p>225 {&lt;/p>
&lt;p>226 int i;&lt;/p>
&lt;p>227 InternalBuffer *buf, *last, temp;&lt;/p>
&lt;p>228&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>简单的参数校验，内存必须是已经分配过。&lt;/p>
&lt;p>229 assert(s-&amp;gt;internal_buffer_count);&lt;/p>
&lt;p>230&lt;/p>
&lt;p>231 buf = NULL;&lt;/p>
&lt;p>232 for (i = 0; i &amp;lt; s-&amp;gt;internal_buffer_count; i++)&lt;/p>
&lt;p>233 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>遍历内存数组，查找对应 pic 的内存数组项，以 data[0]内存地址为比较判别标记。&lt;/p>
&lt;p>234 buf = &amp;amp;((InternalBuffer*)s-&amp;gt;internal_buffer)[i]; //just 3-5 checks so is not worth to optimize&lt;/p>
&lt;p>235 if (buf-&amp;gt;data[0] == pic-&amp;gt;data[0])&lt;/p>
&lt;p>236 break;&lt;/p>
&lt;p>237 }&lt;/p>
&lt;p>238 assert(i &amp;lt; s-&amp;gt;internal_buffer_count);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.050.png" alt="">&lt;/p>
&lt;p>内存数组计数-1, 删除最后一项.&lt;/p>
&lt;p>239 s-&amp;gt;internal_buffer_count--;&lt;/p>
&lt;p>240 last = &amp;amp;((InternalBuffer*)s-&amp;gt;internal_buffer)[s-&amp;gt;internal_buffer_count];&lt;/p>
&lt;p>241&lt;/p>
&lt;p>把将要空闲的数组项和数组最后一项交换，保证 internal_buffer_count 计算正确无误。注意这里并&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.047.png" alt="">没有内存释放的动作，便于下次复用已分配的内存。&lt;/p>
&lt;p>242 temp = *buf;&lt;/p>
&lt;p>243 *buf = *last;&lt;/p>
&lt;p>244 *last = temp;&lt;/p>
&lt;p>245&lt;/p>
&lt;p>246 for (i = 0; i &amp;lt; 3; i++)&lt;/p>
&lt;p>247 {&lt;/p>
&lt;p>把 data[i]置空，指示本块内存没有被占用，实际分配的首地址保持在 base[]中。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.054.png" alt="">整个程序最多分配 INTERNAL_ BUFFER_SIZE 次 avframe，其他次循环使用。&lt;/p>
&lt;p>248 pic-&amp;gt;data[i] = NULL;&lt;/p>
&lt;p>249 }&lt;/p>
&lt;p>250 }&lt;/p>
&lt;p>251&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.041.png" alt="">&lt;/p>
&lt;p>重新获得缓存。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">252 int avcodec_default_reget_buffer(AVCodecContext *s, AVFrame *pic)&lt;/p>
&lt;p>253 {&lt;/p>
&lt;p>254 if (pic-&amp;gt;data[0] == NULL) // If no picture return a new buffer&lt;/p>
&lt;p>255 {&lt;/p>
&lt;p>256 return s-&amp;gt;get_buffer(s, pic);&lt;/p>
&lt;p>257 }&lt;/p>
&lt;p>258&lt;/p>
&lt;p>259 return 0;&lt;/p>
&lt;p>260 }&lt;/p>
&lt;p>261&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.041.png" alt="">&lt;/p>
&lt;p>释放内存数组项占用的内存。&lt;/p>
&lt;p>262 void avcodec_default_free_buffers(AVCodecContext *s)&lt;/p>
&lt;p>263 {&lt;/p>
&lt;p>264 int i, j;&lt;/p>
&lt;p>265&lt;/p>
&lt;p>266 if (s-&amp;gt;internal_buffer == NULL)&lt;/p>
&lt;p>267 return ;&lt;/p>
&lt;p>268&lt;/p>
&lt;p>269 for (i = 0; i &amp;lt; INTERNAL_BUFFER_SIZE; i++)&lt;/p>
&lt;p>270 {&lt;/p>
&lt;p>271 InternalBuffer *buf = &amp;amp;((InternalBuffer*)s-&amp;gt;internal_buffer)[i];&lt;/p>
&lt;p>272 for (j = 0; j &amp;lt; 4; j++)&lt;/p>
&lt;p>273 {&lt;/p>
&lt;p>av_freep()函数调用的 av_free()函数做了非 NULL 判断，并且分配时已置 NULL，所以内循环可以到 4，&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.055.png" alt="">外循环可以到 INTERNAL_BUFFER_SIZE。&lt;/p>
&lt;p>274 av_freep(&amp;amp;buf-&amp;gt;base[j]);&lt;/p>
&lt;p>275 buf-&amp;gt;data[j] = NULL;&lt;/p>
&lt;p>276 }&lt;/p>
&lt;p>277 }&lt;/p>
&lt;p>278 av_freep(&amp;amp;s-&amp;gt;internal_buffer);&lt;/p>
&lt;p>279&lt;/p>
&lt;p>280 s-&amp;gt;internal_buffer_count = 0;&lt;/p>
&lt;p>281 }&lt;/p>
&lt;p>282&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>分配编解码器上下文占用的内存，清 0 后部分参数赋初值。&lt;/p>
&lt;p>283 AVCodecContext *avcodec_alloc_context(void)&lt;/p>
&lt;p>284 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>285 AVCodecContext *s = av_malloc(sizeof(AVCodecContext));&lt;/p>
&lt;p>286&lt;/p>
&lt;p>287 if (s == NULL)&lt;/p>
&lt;p>288 return NULL;&lt;/p>
&lt;p>289&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>注意这里的清 0。&lt;/p>
&lt;p>290 memset(s, 0, sizeof(AVCodecContext));&lt;/p>
&lt;p>291&lt;/p>
&lt;p>292 s-&amp;gt;get_buffer = avcodec_default_get_buffer;&lt;/p>
&lt;p>293 s-&amp;gt;release_buffer = avcodec_default_release_buffer;&lt;/p>
&lt;p>294&lt;/p>
&lt;p>295 s-&amp;gt;pix_fmt = PIX_FMT_NONE;&lt;/p>
&lt;p>296&lt;/p>
&lt;p>297 s-&amp;gt;palctrl = NULL;&lt;/p>
&lt;p>298 s-&amp;gt;reget_buffer = avcodec_default_reget_buffer;&lt;/p>
&lt;p>299&lt;/p>
&lt;p>300 return s;&lt;/p>
&lt;p>301 }&lt;/p>
&lt;p>302&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>打开编解码器，分配具体编解码器使用的上下文，简单变量赋初值，调用初始化函数初始化编解码器&lt;/p>
&lt;p>303 int avcodec_open(AVCodecContext *avctx, AVCodec *codec)&lt;/p>
&lt;p>304 {&lt;/p>
&lt;p>305 int ret = - 1;&lt;/p>
&lt;p>306&lt;/p>
&lt;p>307 if (avctx-&amp;gt;codec)&lt;/p>
&lt;p>308 goto end;&lt;/p>
&lt;p>309&lt;/p>
&lt;p>310 if (codec-&amp;gt;priv_data_size &amp;gt; 0)&lt;/p>
&lt;p>311 {&lt;/p>
&lt;p>这里体现了 priv_data_size 参数的重大作用，如果没有这个参数，就要用 codec 结构的名字比较确&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.056.png" alt="">定具体编解码器使用的上下文结构大小，超级长的 if-else 语句。&lt;/p>
&lt;p>312 avctx-&amp;gt;priv_data = av_mallocz(codec-&amp;gt;priv_data_size);&lt;/p>
&lt;p>313 if (!avctx-&amp;gt;priv_data)&lt;/p>
&lt;p>314 goto end;&lt;/p>
&lt;p>315 }&lt;/p>
&lt;p>316 else&lt;/p>
&lt;p>317 {&lt;/p>
&lt;p>318 avctx-&amp;gt;priv_data = NULL;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>319 }&lt;/p>
&lt;p>320&lt;/p>
&lt;p>321 avctx-&amp;gt;codec = codec;&lt;/p>
&lt;p>322 avctx-&amp;gt;codec_id = codec-&amp;gt;id;&lt;/p>
&lt;p>323 avctx-&amp;gt;frame_number = 0;&lt;/p>
&lt;p>324 ret = avctx-&amp;gt;codec-&amp;gt;init(avctx);&lt;/p>
&lt;p>325 if (ret &amp;lt; 0)&lt;/p>
&lt;p>326 {&lt;/p>
&lt;p>327 av_freep(&amp;amp;avctx-&amp;gt;priv_data);&lt;/p>
&lt;p>328 avctx-&amp;gt;codec = NULL;&lt;/p>
&lt;p>329 goto end;&lt;/p>
&lt;p>330 }&lt;/p>
&lt;p>331 ret = 0;&lt;/p>
&lt;p>332 end:&lt;/p>
&lt;p>333 return ret;&lt;/p>
&lt;p>334 }&lt;/p>
&lt;p>335&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>视频解码，简单的跳转&lt;/p>
&lt;p>336 int avcodec_decode_video(AVCodecContext *avctx, AVFrame *picture, int *got_picture_ptr,&lt;/p>
&lt;p>337 uint8_t *buf, int buf_size)&lt;/p>
&lt;p>338 {&lt;/p>
&lt;p>339 int ret;&lt;/p>
&lt;p>340&lt;/p>
&lt;p>341 *got_picture_ptr = 0;&lt;/p>
&lt;p>342&lt;/p>
&lt;p>343 if (buf_size)&lt;/p>
&lt;p>344 {&lt;/p>
&lt;p>345 ret = avctx-&amp;gt;codec-&amp;gt;decode(avctx, picture, got_picture_ptr, buf, buf_size);&lt;/p>
&lt;p>346&lt;/p>
&lt;p>347 if (*got_picture_ptr)&lt;/p>
&lt;p>348 avctx-&amp;gt;frame_number++;&lt;/p>
&lt;p>349 }&lt;/p>
&lt;p>350 else&lt;/p>
&lt;p>351 ret = 0;&lt;/p>
&lt;p>352&lt;/p>
&lt;p>353 return ret;&lt;/p>
&lt;p>354 }&lt;/p>
&lt;p>355&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>音频解码，简单的跳转&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>356 int avcodec_decode_audio(AVCodecContext *avctx, int16_t *samples, int *frame_size_ptr,&lt;/p>
&lt;p>357 uint8_t *buf, int buf_size)&lt;/p>
&lt;p>358 {&lt;/p>
&lt;p>359 int ret;&lt;/p>
&lt;p>360&lt;/p>
&lt;p>361 *frame_size_ptr = 0;&lt;/p>
&lt;p>362 if (buf_size)&lt;/p>
&lt;p>363 {&lt;/p>
&lt;p>364 ret = avctx-&amp;gt;codec-&amp;gt;decode(avctx, samples, frame_size_ptr, buf, buf_size);&lt;/p>
&lt;p>365 avctx-&amp;gt;frame_number++;&lt;/p>
&lt;p>366 }&lt;/p>
&lt;p>367 else&lt;/p>
&lt;p>368 ret = 0;&lt;/p>
&lt;p>369 return ret;&lt;/p>
&lt;p>370 }&lt;/p>
&lt;p>371&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.048.png" alt="">&lt;/p>
&lt;p>关闭解码器，释放动态分配的内存&lt;/p>
&lt;p>372 int avcodec_close(AVCodecContext *avctx)&lt;/p>
&lt;p>373 {&lt;/p>
&lt;p>374 if (avctx-&amp;gt;codec-&amp;gt;close)&lt;/p>
&lt;p>375 avctx-&amp;gt;codec-&amp;gt;close(avctx);&lt;/p>
&lt;p>376 avcodec_default_free_buffers(avctx);&lt;/p>
&lt;p>377 av_freep(&amp;amp;avctx-&amp;gt;priv_data);&lt;/p>
&lt;p>378 avctx-&amp;gt;codec = NULL;&lt;/p>
&lt;p>379 return 0;&lt;/p>
&lt;p>380 }&lt;/p>
&lt;p>381&lt;/p>
&lt;p>查找编解码器，在本例中，读 avi 文件头得到 codec FOURCC ，再由 FOURCC 查找 codec_bmp_tags&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.057.png" alt="">或 codec_wav_tags 得到 CodecID 传给此函数。&lt;/p>
&lt;p>382 AVCodec *avcodec_find_decoder(enum CodecID id)&lt;/p>
&lt;p>383 {&lt;/p>
&lt;p>384 AVCodec *p;&lt;/p>
&lt;p>385 p = first_avcodec;&lt;/p>
&lt;p>386 while (p)&lt;/p>
&lt;p>387 {&lt;/p>
&lt;p>388 if (p-&amp;gt;decode != NULL &amp;amp;&amp;amp; p-&amp;gt;id == id)&lt;/p>
&lt;p>389 return p;&lt;/p>
&lt;p>390 p = p-&amp;gt;next;&lt;/p>
&lt;p>391 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>392 return NULL;&lt;/p>
&lt;p>393 }&lt;/p>
&lt;p>394&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>初始化编解码库，在本例中仅初始化限幅数组/查找表。&lt;/p>
&lt;p>395 void avcodec_init(void)&lt;/p>
&lt;p>396 {&lt;/p>
&lt;p>397 static int inited = 0;&lt;/p>
&lt;p>398&lt;/p>
&lt;p>399 if (inited != 0)&lt;/p>
&lt;p>400 return ;&lt;/p>
&lt;p>401 inited = 1;&lt;/p>
&lt;p>402&lt;/p>
&lt;p>403 dsputil_static_init();&lt;/p>
&lt;p>404 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="7-imgconvert_templateh-文件">&lt;strong>7 imgconvert_template.h 文件&lt;/strong>&lt;/h3>
&lt;p>7.1 功能描述&lt;/p>
&lt;p>定义并实现图像颜色空间转换使用的函数和宏，此文件请各位自己仔细分析。&lt;/p>
&lt;p>7.2 文件注释&lt;/p>
&lt;p>1 #ifndef RGB_OUT&lt;/p>
&lt;p>2 #define RGB_OUT(d, r, g, b) RGBA_OUT(d, r, g, b, 0xff)&lt;/p>
&lt;p>3 #endif&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 #pragma warning (disable:4305 4244)&lt;/p>
&lt;p>6&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>此文件请各位读者自行分析，都是些颜色空间转换函数。&lt;/p>
&lt;p>7 static void glue(yuv420p_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>8 {&lt;/p>
&lt;p>9 const uint8_t *y1_ptr, *y2_ptr, *cb_ptr, *cr_ptr;&lt;/p>
&lt;p>10 uint8_t *d, *d1, *d2;&lt;/p>
&lt;p>11 int w, y, cb, cr, r_add, g_add, b_add, width2;&lt;/p>
&lt;p>12 uint8_t *cm = cropTbl + MAX_NEG_CROP;&lt;/p>
&lt;p>13 unsigned int r, g, b;&lt;/p>
&lt;p>14&lt;/p>
&lt;p>15 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>16 y1_ptr = src-&amp;gt;data[0];&lt;/p>
&lt;p>17 cb_ptr = src-&amp;gt;data[1];&lt;/p>
&lt;p>18 cr_ptr = src-&amp;gt;data[2];&lt;/p>
&lt;p>19 width2 = (width + 1) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>20&lt;/p>
&lt;p>21 for (; height &amp;gt;= 2; height -= 2)&lt;/p>
&lt;p>22 {&lt;/p>
&lt;p>23 d1 = d;&lt;/p>
&lt;p>24 d2 = d + dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>25 y2_ptr = y1_ptr + src-&amp;gt;linesize[0];&lt;/p>
&lt;p>26 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>27 {&lt;/p>
&lt;p>28 YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>29&lt;/p>
&lt;p>30 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]); /* output 4 pixels */&lt;/p>
&lt;p>31 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>32&lt;/p>
&lt;p>33 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[1]);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>34 RGB_OUT(d1 + BPP, r, g, b);&lt;/p>
&lt;p>35&lt;/p>
&lt;p>36 YUV_TO_RGB2_CCIR(r, g, b, y2_ptr[0]);&lt;/p>
&lt;p>37 RGB_OUT(d2, r, g, b);&lt;/p>
&lt;p>38&lt;/p>
&lt;p>39 YUV_TO_RGB2_CCIR(r, g, b, y2_ptr[1]);&lt;/p>
&lt;p>40 RGB_OUT(d2 + BPP, r, g, b);&lt;/p>
&lt;p>41&lt;/p>
&lt;p>42 d1 += 2 * BPP;&lt;/p>
&lt;p>43 d2 += 2 * BPP;&lt;/p>
&lt;p>44&lt;/p>
&lt;p>45 y1_ptr += 2;&lt;/p>
&lt;p>46 y2_ptr += 2;&lt;/p>
&lt;p>47 cb_ptr++;&lt;/p>
&lt;p>48 cr_ptr++;&lt;/p>
&lt;p>49 }&lt;/p>
&lt;p>50&lt;/p>
&lt;p>51 if (w) /* handle odd width */&lt;/p>
&lt;p>52 {&lt;/p>
&lt;p>53 YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>54 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]);&lt;/p>
&lt;p>55 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>56&lt;/p>
&lt;p>57 YUV_TO_RGB2_CCIR(r, g, b, y2_ptr[0]);&lt;/p>
&lt;p>58 RGB_OUT(d2, r, g, b);&lt;/p>
&lt;p>59 d1 += BPP;&lt;/p>
&lt;p>60 d2 += BPP;&lt;/p>
&lt;p>61 y1_ptr++;&lt;/p>
&lt;p>62 y2_ptr++;&lt;/p>
&lt;p>63 cb_ptr++;&lt;/p>
&lt;p>64 cr_ptr++;&lt;/p>
&lt;p>65 }&lt;/p>
&lt;p>66 d += 2 * dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>67 y1_ptr += 2 * src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>68 cb_ptr += src-&amp;gt;linesize[1] - width2;&lt;/p>
&lt;p>69 cr_ptr += src-&amp;gt;linesize[2] - width2;&lt;/p>
&lt;p>70 }&lt;/p>
&lt;p>71&lt;/p>
&lt;p>72 if (height) /* handle odd height */&lt;/p>
&lt;p>73 {&lt;/p>
&lt;p>74 d1 = d;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>75 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>76 {&lt;/p>
&lt;p>77 YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>78&lt;/p>
&lt;p>79 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]); /* output 2 pixels */&lt;/p>
&lt;p>80 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>81&lt;/p>
&lt;p>82 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[1]);&lt;/p>
&lt;p>83 RGB_OUT(d1 + BPP, r, g, b);&lt;/p>
&lt;p>84&lt;/p>
&lt;p>85 d1 += 2 * BPP;&lt;/p>
&lt;p>86&lt;/p>
&lt;p>87 y1_ptr += 2;&lt;/p>
&lt;p>88 cb_ptr++;&lt;/p>
&lt;p>89 cr_ptr++;&lt;/p>
&lt;p>90 }&lt;/p>
&lt;p>91&lt;/p>
&lt;p>92 if (w) /* handle width */&lt;/p>
&lt;p>93 {&lt;/p>
&lt;p>94 YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>95&lt;/p>
&lt;p>96 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]); /* output 2 pixels */&lt;/p>
&lt;p>97 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>98 d1 += BPP;&lt;/p>
&lt;p>99&lt;/p>
&lt;p>100 y1_ptr++;&lt;/p>
&lt;p>101 cb_ptr++;&lt;/p>
&lt;p>102 cr_ptr++;&lt;/p>
&lt;p>103 }&lt;/p>
&lt;p>104 }&lt;/p>
&lt;p>105 }&lt;/p>
&lt;p>106&lt;/p>
&lt;p>107 static void glue(yuvj420p_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>108 {&lt;/p>
&lt;p>109 const uint8_t *y1_ptr, *y2_ptr, *cb_ptr, *cr_ptr;&lt;/p>
&lt;p>110 uint8_t *d, *d1, *d2;&lt;/p>
&lt;p>111 int w, y, cb, cr, r_add, g_add, b_add, width2;&lt;/p>
&lt;p>112 uint8_t *cm = cropTbl + MAX_NEG_CROP;&lt;/p>
&lt;p>113 unsigned int r, g, b;&lt;/p>
&lt;p>114&lt;/p>
&lt;p>115 d = dst-&amp;gt;data[0];&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>116 y1_ptr = src-&amp;gt;data[0];&lt;/p>
&lt;p>117 cb_ptr = src-&amp;gt;data[1];&lt;/p>
&lt;p>118 cr_ptr = src-&amp;gt;data[2];&lt;/p>
&lt;p>119 width2 = (width + 1) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>120&lt;/p>
&lt;p>121 for (; height &amp;gt;= 2; height -= 2)&lt;/p>
&lt;p>122 {&lt;/p>
&lt;p>123 d1 = d;&lt;/p>
&lt;p>124 d2 = d + dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>125 y2_ptr = y1_ptr + src-&amp;gt;linesize[0];&lt;/p>
&lt;p>126 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>127 {&lt;/p>
&lt;p>128 YUV_TO_RGB1(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>129&lt;/p>
&lt;p>130 YUV_TO_RGB2(r, g, b, y1_ptr[0]); /* output 4 pixels */&lt;/p>
&lt;p>131 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>132&lt;/p>
&lt;p>133 YUV_TO_RGB2(r, g, b, y1_ptr[1]);&lt;/p>
&lt;p>134 RGB_OUT(d1 + BPP, r, g, b);&lt;/p>
&lt;p>135&lt;/p>
&lt;p>136 YUV_TO_RGB2(r, g, b, y2_ptr[0]);&lt;/p>
&lt;p>137 RGB_OUT(d2, r, g, b);&lt;/p>
&lt;p>138&lt;/p>
&lt;p>139 YUV_TO_RGB2(r, g, b, y2_ptr[1]);&lt;/p>
&lt;p>140 RGB_OUT(d2 + BPP, r, g, b);&lt;/p>
&lt;p>141&lt;/p>
&lt;p>142 d1 += 2 * BPP;&lt;/p>
&lt;p>143 d2 += 2 * BPP;&lt;/p>
&lt;p>144&lt;/p>
&lt;p>145 y1_ptr += 2;&lt;/p>
&lt;p>146 y2_ptr += 2;&lt;/p>
&lt;p>147 cb_ptr++;&lt;/p>
&lt;p>148 cr_ptr++;&lt;/p>
&lt;p>149 }&lt;/p>
&lt;p>150&lt;/p>
&lt;p>151 if (w) /* handle odd width */&lt;/p>
&lt;p>152 {&lt;/p>
&lt;p>153 YUV_TO_RGB1(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>154 YUV_TO_RGB2(r, g, b, y1_ptr[0]);&lt;/p>
&lt;p>155 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>156&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>157 YUV_TO_RGB2(r, g, b, y2_ptr[0]);&lt;/p>
&lt;p>158 RGB_OUT(d2, r, g, b);&lt;/p>
&lt;p>159 d1 += BPP;&lt;/p>
&lt;p>160 d2 += BPP;&lt;/p>
&lt;p>161 y1_ptr++;&lt;/p>
&lt;p>162 y2_ptr++;&lt;/p>
&lt;p>163 cb_ptr++;&lt;/p>
&lt;p>164 cr_ptr++;&lt;/p>
&lt;p>165 }&lt;/p>
&lt;p>166 d += 2 * dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>167 y1_ptr += 2 * src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>168 cb_ptr += src-&amp;gt;linesize[1] - width2;&lt;/p>
&lt;p>169 cr_ptr += src-&amp;gt;linesize[2] - width2;&lt;/p>
&lt;p>170 }&lt;/p>
&lt;p>171&lt;/p>
&lt;p>172 if (height) /* handle odd height */&lt;/p>
&lt;p>173 {&lt;/p>
&lt;p>174 d1 = d;&lt;/p>
&lt;p>175 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>176 {&lt;/p>
&lt;p>177 YUV_TO_RGB1(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>178&lt;/p>
&lt;p>179 YUV_TO_RGB2(r, g, b, y1_ptr[0]); /* output 2 pixels */&lt;/p>
&lt;p>180 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>181&lt;/p>
&lt;p>182 YUV_TO_RGB2(r, g, b, y1_ptr[1]);&lt;/p>
&lt;p>183 RGB_OUT(d1 + BPP, r, g, b);&lt;/p>
&lt;p>184&lt;/p>
&lt;p>185 d1 += 2 * BPP;&lt;/p>
&lt;p>186&lt;/p>
&lt;p>187 y1_ptr += 2;&lt;/p>
&lt;p>188 cb_ptr++;&lt;/p>
&lt;p>189 cr_ptr++;&lt;/p>
&lt;p>190 }&lt;/p>
&lt;p>191&lt;/p>
&lt;p>192 if (w) /* handle width */&lt;/p>
&lt;p>193 {&lt;/p>
&lt;p>194 YUV_TO_RGB1(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>195&lt;/p>
&lt;p>196 YUV_TO_RGB2(r, g, b, y1_ptr[0]); /* output 2 pixels */&lt;/p>
&lt;p>197 RGB_OUT(d1, r, g, b);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>198 d1 += BPP;&lt;/p>
&lt;p>199&lt;/p>
&lt;p>200 y1_ptr++;&lt;/p>
&lt;p>201 cb_ptr++;&lt;/p>
&lt;p>202 cr_ptr++;&lt;/p>
&lt;p>203 }&lt;/p>
&lt;p>204 }&lt;/p>
&lt;p>205 }&lt;/p>
&lt;p>206&lt;/p>
&lt;p>207 static void glue(RGB_NAME, _to_yuv420p)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>208 {&lt;/p>
&lt;p>209 int wrap, wrap3, width2;&lt;/p>
&lt;p>210 int r, g, b, r1, g1, b1, w;&lt;/p>
&lt;p>211 uint8_t *lum, *cb, *cr;&lt;/p>
&lt;p>212 const uint8_t *p;&lt;/p>
&lt;p>213&lt;/p>
&lt;p>214 lum = dst-&amp;gt;data[0];&lt;/p>
&lt;p>215 cb = dst-&amp;gt;data[1];&lt;/p>
&lt;p>216 cr = dst-&amp;gt;data[2];&lt;/p>
&lt;p>217&lt;/p>
&lt;p>218 width2 = (width + 1) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>219 wrap = dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>220 wrap3 = src-&amp;gt;linesize[0];&lt;/p>
&lt;p>221 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>222 for (; height &amp;gt;= 2; height -= 2)&lt;/p>
&lt;p>223 {&lt;/p>
&lt;p>224 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>225 {&lt;/p>
&lt;p>226 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>227 r1 = r;&lt;/p>
&lt;p>228 g1 = g;&lt;/p>
&lt;p>229 b1 = b;&lt;/p>
&lt;p>230 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>231&lt;/p>
&lt;p>232 RGB_IN(r, g, b, p + BPP);&lt;/p>
&lt;p>233 r1 += r;&lt;/p>
&lt;p>234 g1 += g;&lt;/p>
&lt;p>235 b1 += b;&lt;/p>
&lt;p>236 lum[1] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>237 p += wrap3;&lt;/p>
&lt;p>238 lum += wrap;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>239&lt;/p>
&lt;p>240 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>241 r1 += r;&lt;/p>
&lt;p>242 g1 += g;&lt;/p>
&lt;p>243 b1 += b;&lt;/p>
&lt;p>244 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>245&lt;/p>
&lt;p>246 RGB_IN(r, g, b, p + BPP);&lt;/p>
&lt;p>247 r1 += r;&lt;/p>
&lt;p>248 g1 += g;&lt;/p>
&lt;p>249 b1 += b;&lt;/p>
&lt;p>250 lum[1] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>251&lt;/p>
&lt;p>252 cb[0] = RGB_TO_U_CCIR(r1, g1, b1, 2);&lt;/p>
&lt;p>253 cr[0] = RGB_TO_V_CCIR(r1, g1, b1, 2);&lt;/p>
&lt;p>254&lt;/p>
&lt;p>255 cb++;&lt;/p>
&lt;p>256 cr++;&lt;/p>
&lt;p>257 p += - wrap3 + 2 * BPP;&lt;/p>
&lt;p>258 lum += - wrap + 2;&lt;/p>
&lt;p>259 }&lt;/p>
&lt;p>260 if (w)&lt;/p>
&lt;p>261 {&lt;/p>
&lt;p>262 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>263 r1 = r;&lt;/p>
&lt;p>264 g1 = g;&lt;/p>
&lt;p>265 b1 = b;&lt;/p>
&lt;p>266 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>267 p += wrap3;&lt;/p>
&lt;p>268 lum += wrap;&lt;/p>
&lt;p>269 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>270 r1 += r;&lt;/p>
&lt;p>271 g1 += g;&lt;/p>
&lt;p>272 b1 += b;&lt;/p>
&lt;p>273 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>274 cb[0] = RGB_TO_U_CCIR(r1, g1, b1, 1);&lt;/p>
&lt;p>275 cr[0] = RGB_TO_V_CCIR(r1, g1, b1, 1);&lt;/p>
&lt;p>276 cb++;&lt;/p>
&lt;p>277 cr++;&lt;/p>
&lt;p>278 p += - wrap3 + BPP;&lt;/p>
&lt;p>279 lum += - wrap + 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>280 }&lt;/p>
&lt;p>281 p += wrap3 + (wrap3 - width * BPP);&lt;/p>
&lt;p>282 lum += wrap + (wrap - width);&lt;/p>
&lt;p>283 cb += dst-&amp;gt;linesize[1] - width2;&lt;/p>
&lt;p>284 cr += dst-&amp;gt;linesize[2] - width2;&lt;/p>
&lt;p>285 }&lt;/p>
&lt;p>286&lt;/p>
&lt;p>287 if (height) /* handle odd height */&lt;/p>
&lt;p>288 {&lt;/p>
&lt;p>289 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>290 {&lt;/p>
&lt;p>291 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>292 r1 = r;&lt;/p>
&lt;p>293 g1 = g;&lt;/p>
&lt;p>294 b1 = b;&lt;/p>
&lt;p>295 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>296&lt;/p>
&lt;p>297 RGB_IN(r, g, b, p + BPP);&lt;/p>
&lt;p>298 r1 += r;&lt;/p>
&lt;p>299 g1 += g;&lt;/p>
&lt;p>300 b1 += b;&lt;/p>
&lt;p>301 lum[1] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>302 cb[0] = RGB_TO_U_CCIR(r1, g1, b1, 1);&lt;/p>
&lt;p>303 cr[0] = RGB_TO_V_CCIR(r1, g1, b1, 1);&lt;/p>
&lt;p>304 cb++;&lt;/p>
&lt;p>305 cr++;&lt;/p>
&lt;p>306 p += 2 * BPP;&lt;/p>
&lt;p>307 lum += 2;&lt;/p>
&lt;p>308 }&lt;/p>
&lt;p>309 if (w)&lt;/p>
&lt;p>310 {&lt;/p>
&lt;p>311 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>312 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>313 cb[0] = RGB_TO_U_CCIR(r, g, b, 0);&lt;/p>
&lt;p>314 cr[0] = RGB_TO_V_CCIR(r, g, b, 0);&lt;/p>
&lt;p>315 }&lt;/p>
&lt;p>316 }&lt;/p>
&lt;p>317 }&lt;/p>
&lt;p>318&lt;/p>
&lt;p>319 static void glue(RGB_NAME, _to_gray)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>320 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>321 const unsigned char *p;&lt;/p>
&lt;p>322 unsigned char *q;&lt;/p>
&lt;p>323 int r, g, b, dst_wrap, src_wrap;&lt;/p>
&lt;p>324 int x, y;&lt;/p>
&lt;p>325&lt;/p>
&lt;p>326 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>327 src_wrap = src-&amp;gt;linesize[0] - BPP * width;&lt;/p>
&lt;p>328&lt;/p>
&lt;p>329 q = dst-&amp;gt;data[0];&lt;/p>
&lt;p>330 dst_wrap = dst-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>331&lt;/p>
&lt;p>332 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>333 {&lt;/p>
&lt;p>334 for (x = 0; x &amp;lt; width; x++)&lt;/p>
&lt;p>335 {&lt;/p>
&lt;p>336 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>337 q[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>338 q++;&lt;/p>
&lt;p>339 p += BPP;&lt;/p>
&lt;p>340 }&lt;/p>
&lt;p>341 p += src_wrap;&lt;/p>
&lt;p>342 q += dst_wrap;&lt;/p>
&lt;p>343 }&lt;/p>
&lt;p>344 }&lt;/p>
&lt;p>345&lt;/p>
&lt;p>346 static void glue(gray_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>347 {&lt;/p>
&lt;p>348 const unsigned char *p;&lt;/p>
&lt;p>349 unsigned char *q;&lt;/p>
&lt;p>350 int r, dst_wrap, src_wrap;&lt;/p>
&lt;p>351 int x, y;&lt;/p>
&lt;p>352&lt;/p>
&lt;p>353 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>354 src_wrap = src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>355&lt;/p>
&lt;p>356 q = dst-&amp;gt;data[0];&lt;/p>
&lt;p>357 dst_wrap = dst-&amp;gt;linesize[0] - BPP * width;&lt;/p>
&lt;p>358&lt;/p>
&lt;p>359 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>360 {&lt;/p>
&lt;p>361 for (x = 0; x &amp;lt; width; x++)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>362 {&lt;/p>
&lt;p>363 r = p[0];&lt;/p>
&lt;p>364 RGB_OUT(q, r, r, r);&lt;/p>
&lt;p>365 q += BPP;&lt;/p>
&lt;p>366 p++;&lt;/p>
&lt;p>367 }&lt;/p>
&lt;p>368 p += src_wrap;&lt;/p>
&lt;p>369 q += dst_wrap;&lt;/p>
&lt;p>370 }&lt;/p>
&lt;p>371 }&lt;/p>
&lt;p>372&lt;/p>
&lt;p>373 static void glue(pal8_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>374 {&lt;/p>
&lt;p>375 const unsigned char *p;&lt;/p>
&lt;p>376 unsigned char *q;&lt;/p>
&lt;p>377 int r, g, b, dst_wrap, src_wrap;&lt;/p>
&lt;p>378 int x, y;&lt;/p>
&lt;p>379 uint32_t v;&lt;/p>
&lt;p>380 const uint32_t *palette;&lt;/p>
&lt;p>381&lt;/p>
&lt;p>382 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>383 src_wrap = src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>384 palette = (uint32_t*)src-&amp;gt;data[1];&lt;/p>
&lt;p>385&lt;/p>
&lt;p>386 q = dst-&amp;gt;data[0];&lt;/p>
&lt;p>387 dst_wrap = dst-&amp;gt;linesize[0] - BPP * width;&lt;/p>
&lt;p>388&lt;/p>
&lt;p>389 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>390 {&lt;/p>
&lt;p>391 for (x = 0; x &amp;lt; width; x++)&lt;/p>
&lt;p>392 {&lt;/p>
&lt;p>393 v = palette[p[0]];&lt;/p>
&lt;p>394 r = (v &amp;gt;&amp;gt; 16) &amp;amp;0xff;&lt;/p>
&lt;p>395 g = (v &amp;gt;&amp;gt; 8) &amp;amp;0xff;&lt;/p>
&lt;p>396 b = (v) &amp;amp;0xff;&lt;/p>
&lt;p>397 #ifdef RGBA_OUT&lt;/p>
&lt;p>398 {&lt;/p>
&lt;p>399 int a;&lt;/p>
&lt;p>400 a = (v &amp;gt;&amp;gt; 24) &amp;amp;0xff;&lt;/p>
&lt;p>401 RGBA_OUT(q, r, g, b, a);&lt;/p>
&lt;p>402 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>403 #else&lt;/p>
&lt;p>404 RGB_OUT(q, r, g, b);&lt;/p>
&lt;p>405 #endif&lt;/p>
&lt;p>406 q += BPP;&lt;/p>
&lt;p>407 p++;&lt;/p>
&lt;p>408 }&lt;/p>
&lt;p>409 p += src_wrap;&lt;/p>
&lt;p>410 q += dst_wrap;&lt;/p>
&lt;p>411 }&lt;/p>
&lt;p>412 }&lt;/p>
&lt;p>413&lt;/p>
&lt;p>414 #if !defined(FMT_RGBA32) &amp;amp;&amp;amp; defined(RGBA_OUT)&lt;/p>
&lt;p>415 /* alpha support */&lt;/p>
&lt;p>416&lt;/p>
&lt;p>417 static void glue(rgba32_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>418 {&lt;/p>
&lt;p>419 const uint8_t *s;&lt;/p>
&lt;p>420 uint8_t *d;&lt;/p>
&lt;p>421 int src_wrap, dst_wrap, j, y;&lt;/p>
&lt;p>422 unsigned int v, r, g, b, a;&lt;/p>
&lt;p>423&lt;/p>
&lt;p>424 s = src-&amp;gt;data[0];&lt;/p>
&lt;p>425 src_wrap = src-&amp;gt;linesize[0] - width * 4;&lt;/p>
&lt;p>426&lt;/p>
&lt;p>427 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>428 dst_wrap = dst-&amp;gt;linesize[0] - width * BPP;&lt;/p>
&lt;p>429&lt;/p>
&lt;p>430 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>431 {&lt;/p>
&lt;p>432 for (j = 0; j &amp;lt; width; j++)&lt;/p>
&lt;p>433 {&lt;/p>
&lt;p>434 v = ((const uint32_t*)(s))[0];&lt;/p>
&lt;p>435 a = (v &amp;gt;&amp;gt; 24) &amp;amp;0xff;&lt;/p>
&lt;p>436 r = (v &amp;gt;&amp;gt; 16) &amp;amp;0xff;&lt;/p>
&lt;p>437 g = (v &amp;gt;&amp;gt; 8) &amp;amp;0xff;&lt;/p>
&lt;p>438 b = v &amp;amp;0xff;&lt;/p>
&lt;p>439 RGBA_OUT(d, r, g, b, a);&lt;/p>
&lt;p>440 s += 4;&lt;/p>
&lt;p>441 d += BPP;&lt;/p>
&lt;p>442 }&lt;/p>
&lt;p>443 s += src_wrap;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>444 d += dst_wrap;&lt;/p>
&lt;p>445 }&lt;/p>
&lt;p>446 }&lt;/p>
&lt;p>447&lt;/p>
&lt;p>448 static void glue(RGB_NAME, _to_rgba32)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>449 {&lt;/p>
&lt;p>450 const uint8_t *s;&lt;/p>
&lt;p>451 uint8_t *d;&lt;/p>
&lt;p>452 int src_wrap, dst_wrap, j, y;&lt;/p>
&lt;p>453 unsigned int r, g, b, a;&lt;/p>
&lt;p>454&lt;/p>
&lt;p>455 s = src-&amp;gt;data[0];&lt;/p>
&lt;p>456 src_wrap = src-&amp;gt;linesize[0] - width * BPP;&lt;/p>
&lt;p>457&lt;/p>
&lt;p>458 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>459 dst_wrap = dst-&amp;gt;linesize[0] - width * 4;&lt;/p>
&lt;p>460&lt;/p>
&lt;p>461 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>462 {&lt;/p>
&lt;p>463 for (j = 0; j &amp;lt; width; j++)&lt;/p>
&lt;p>464 {&lt;/p>
&lt;p>465 RGBA_IN(r, g, b, a, s);&lt;/p>
&lt;p>466 ((uint32_t*)(d))[0] = (a &amp;lt;&amp;lt; 24) | (r &amp;lt;&amp;lt; 16) | (g &amp;lt;&amp;lt; 8) | b;&lt;/p>
&lt;p>467 d += 4;&lt;/p>
&lt;p>468 s += BPP;&lt;/p>
&lt;p>469 }&lt;/p>
&lt;p>470 s += src_wrap;&lt;/p>
&lt;p>471 d += dst_wrap;&lt;/p>
&lt;p>472 }&lt;/p>
&lt;p>473 }&lt;/p>
&lt;p>474&lt;/p>
&lt;p>475 #endif /* !defined(FMT_RGBA32) &amp;amp;&amp;amp; defined(RGBA_IN) */&lt;/p>
&lt;p>476&lt;/p>
&lt;p>477 #ifndef FMT_RGB24&lt;/p>
&lt;p>478&lt;/p>
&lt;p>479 static void glue(rgb24_to_, RGB_NAME)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>480 {&lt;/p>
&lt;p>481 const uint8_t *s;&lt;/p>
&lt;p>482 uint8_t *d;&lt;/p>
&lt;p>483 int src_wrap, dst_wrap, j, y;&lt;/p>
&lt;p>484 unsigned int r, g, b;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>485&lt;/p>
&lt;p>486 s = src-&amp;gt;data[0];&lt;/p>
&lt;p>487 src_wrap = src-&amp;gt;linesize[0] - width * 3;&lt;/p>
&lt;p>488&lt;/p>
&lt;p>489 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>490 dst_wrap = dst-&amp;gt;linesize[0] - width * BPP;&lt;/p>
&lt;p>491&lt;/p>
&lt;p>492 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>493 {&lt;/p>
&lt;p>494 for (j = 0; j &amp;lt; width; j++)&lt;/p>
&lt;p>495 {&lt;/p>
&lt;p>496 r = s[0];&lt;/p>
&lt;p>497 g = s[1];&lt;/p>
&lt;p>498 b = s[2];&lt;/p>
&lt;p>499 RGB_OUT(d, r, g, b);&lt;/p>
&lt;p>500 s += 3;&lt;/p>
&lt;p>501 d += BPP;&lt;/p>
&lt;p>502 }&lt;/p>
&lt;p>503 s += src_wrap;&lt;/p>
&lt;p>504 d += dst_wrap;&lt;/p>
&lt;p>505 }&lt;/p>
&lt;p>506 }&lt;/p>
&lt;p>507&lt;/p>
&lt;p>508 static void glue(RGB_NAME, _to_rgb24)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>509 {&lt;/p>
&lt;p>510 const uint8_t *s;&lt;/p>
&lt;p>511 uint8_t *d;&lt;/p>
&lt;p>512 int src_wrap, dst_wrap, j, y;&lt;/p>
&lt;p>513 unsigned int r, g, b;&lt;/p>
&lt;p>514&lt;/p>
&lt;p>515 s = src-&amp;gt;data[0];&lt;/p>
&lt;p>516 src_wrap = src-&amp;gt;linesize[0] - width * BPP;&lt;/p>
&lt;p>517&lt;/p>
&lt;p>518 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>519 dst_wrap = dst-&amp;gt;linesize[0] - width * 3;&lt;/p>
&lt;p>520&lt;/p>
&lt;p>521 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>522 {&lt;/p>
&lt;p>523 for (j = 0; j &amp;lt; width; j++)&lt;/p>
&lt;p>524 {&lt;/p>
&lt;p>525 RGB_IN(r, g, b, s)d[0] = r;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>526&lt;/th>
&lt;th>&lt;/th>
&lt;th>d[1]&lt;/th>
&lt;th>= g;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>527&lt;/td>
&lt;td>&lt;/td>
&lt;td>d[2]&lt;/td>
&lt;td>= b;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>528&lt;/td>
&lt;td>&lt;/td>
&lt;td>d +=&lt;/td>
&lt;td>3;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>529&lt;/td>
&lt;td>&lt;/td>
&lt;td>s +=&lt;/td>
&lt;td>BPP;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>530&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>531 s += src_wrap;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>532 d += dst_wrap;&lt;/p>
&lt;p>533 }&lt;/p>
&lt;p>534 }&lt;/p>
&lt;p>535&lt;/p>
&lt;p>536 #endif /* !FMT_RGB24 */&lt;/p>
&lt;p>537&lt;/p>
&lt;p>538 #ifdef FMT_RGB24&lt;/p>
&lt;p>539&lt;/p>
&lt;p>540 static void yuv444p_to_rgb24(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>541 {&lt;/p>
&lt;p>542 const uint8_t *y1_ptr, *cb_ptr, *cr_ptr;&lt;/p>
&lt;p>543 uint8_t *d, *d1;&lt;/p>
&lt;p>544 int w, y, cb, cr, r_add, g_add, b_add;&lt;/p>
&lt;p>545 uint8_t *cm = cropTbl + MAX_NEG_CROP;&lt;/p>
&lt;p>546 unsigned int r, g, b;&lt;/p>
&lt;p>547&lt;/p>
&lt;p>548 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>549 y1_ptr = src-&amp;gt;data[0];&lt;/p>
&lt;p>550 cb_ptr = src-&amp;gt;data[1];&lt;/p>
&lt;p>551 cr_ptr = src-&amp;gt;data[2];&lt;/p>
&lt;p>552 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>553 {&lt;/p>
&lt;p>554 d1 = d;&lt;/p>
&lt;p>555 for (w = width; w &amp;gt; 0; w--)&lt;/p>
&lt;p>556 {&lt;/p>
&lt;p>557 YUV_TO_RGB1_CCIR(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>558&lt;/p>
&lt;p>559 YUV_TO_RGB2_CCIR(r, g, b, y1_ptr[0]);&lt;/p>
&lt;p>560 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>561 d1 += BPP;&lt;/p>
&lt;p>562&lt;/p>
&lt;p>563 y1_ptr++;&lt;/p>
&lt;p>564 cb_ptr++;&lt;/p>
&lt;p>565 cr_ptr++;&lt;/p>
&lt;p>566 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>567 d += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>568 y1_ptr += src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>569 cb_ptr += src-&amp;gt;linesize[1] - width;&lt;/p>
&lt;p>570 cr_ptr += src-&amp;gt;linesize[2] - width;&lt;/p>
&lt;p>571 }&lt;/p>
&lt;p>572 }&lt;/p>
&lt;p>573&lt;/p>
&lt;p>574 static void yuvj444p_to_rgb24(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>575 {&lt;/p>
&lt;p>576 const uint8_t *y1_ptr, *cb_ptr, *cr_ptr;&lt;/p>
&lt;p>577 uint8_t *d, *d1;&lt;/p>
&lt;p>578 int w, y, cb, cr, r_add, g_add, b_add;&lt;/p>
&lt;p>579 uint8_t *cm = cropTbl + MAX_NEG_CROP;&lt;/p>
&lt;p>580 unsigned int r, g, b;&lt;/p>
&lt;p>581&lt;/p>
&lt;p>582 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>583 y1_ptr = src-&amp;gt;data[0];&lt;/p>
&lt;p>584 cb_ptr = src-&amp;gt;data[1];&lt;/p>
&lt;p>585 cr_ptr = src-&amp;gt;data[2];&lt;/p>
&lt;p>586 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>587 {&lt;/p>
&lt;p>588 d1 = d;&lt;/p>
&lt;p>589 for (w = width; w &amp;gt; 0; w--)&lt;/p>
&lt;p>590 {&lt;/p>
&lt;p>591 YUV_TO_RGB1(cb_ptr[0], cr_ptr[0]);&lt;/p>
&lt;p>592&lt;/p>
&lt;p>593 YUV_TO_RGB2(r, g, b, y1_ptr[0]);&lt;/p>
&lt;p>594 RGB_OUT(d1, r, g, b);&lt;/p>
&lt;p>595 d1 += BPP;&lt;/p>
&lt;p>596&lt;/p>
&lt;p>597 y1_ptr++;&lt;/p>
&lt;p>598 cb_ptr++;&lt;/p>
&lt;p>599 cr_ptr++;&lt;/p>
&lt;p>600 }&lt;/p>
&lt;p>601 d += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>602 y1_ptr += src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>603 cb_ptr += src-&amp;gt;linesize[1] - width;&lt;/p>
&lt;p>604 cr_ptr += src-&amp;gt;linesize[2] - width;&lt;/p>
&lt;p>605 }&lt;/p>
&lt;p>606 }&lt;/p>
&lt;p>607&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>608 static void rgb24_to_yuv444p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>609 {&lt;/p>
&lt;p>610 int src_wrap, x, y;&lt;/p>
&lt;p>611 int r, g, b;&lt;/p>
&lt;p>612 uint8_t *lum, *cb, *cr;&lt;/p>
&lt;p>613 const uint8_t *p;&lt;/p>
&lt;p>614&lt;/p>
&lt;p>615 lum = dst-&amp;gt;data[0];&lt;/p>
&lt;p>616 cb = dst-&amp;gt;data[1];&lt;/p>
&lt;p>617 cr = dst-&amp;gt;data[2];&lt;/p>
&lt;p>618&lt;/p>
&lt;p>619 src_wrap = src-&amp;gt;linesize[0] - width * BPP;&lt;/p>
&lt;p>620 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>621&lt;/p>
&lt;p>622 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>623 {&lt;/p>
&lt;p>624 for (x = 0; x &amp;lt; width; x++)&lt;/p>
&lt;p>625 {&lt;/p>
&lt;p>626 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>627 lum[0] = RGB_TO_Y_CCIR(r, g, b);&lt;/p>
&lt;p>628 cb[0] = RGB_TO_U_CCIR(r, g, b, 0);&lt;/p>
&lt;p>629 cr[0] = RGB_TO_V_CCIR(r, g, b, 0);&lt;/p>
&lt;p>630 p += BPP;&lt;/p>
&lt;p>631 cb++;&lt;/p>
&lt;p>632 cr++;&lt;/p>
&lt;p>633 lum++;&lt;/p>
&lt;p>634 }&lt;/p>
&lt;p>635 p += src_wrap;&lt;/p>
&lt;p>636 lum += dst-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>637 cb += dst-&amp;gt;linesize[1] - width;&lt;/p>
&lt;p>638 cr += dst-&amp;gt;linesize[2] - width;&lt;/p>
&lt;p>639 }&lt;/p>
&lt;p>640 }&lt;/p>
&lt;p>641&lt;/p>
&lt;p>642 static void rgb24_to_yuvj420p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>643 {&lt;/p>
&lt;p>644 int wrap, wrap3, width2;&lt;/p>
&lt;p>645 int r, g, b, r1, g1, b1, w;&lt;/p>
&lt;p>646 uint8_t *lum, *cb, *cr;&lt;/p>
&lt;p>647 const uint8_t *p;&lt;/p>
&lt;p>648&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>649 lum = dst-&amp;gt;data[0];&lt;/p>
&lt;p>650 cb = dst-&amp;gt;data[1];&lt;/p>
&lt;p>651 cr = dst-&amp;gt;data[2];&lt;/p>
&lt;p>652&lt;/p>
&lt;p>653 width2 = (width + 1) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>654 wrap = dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>655 wrap3 = src-&amp;gt;linesize[0];&lt;/p>
&lt;p>656 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>657 for (; height &amp;gt;= 2; height -= 2)&lt;/p>
&lt;p>658 {&lt;/p>
&lt;p>659 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>660 {&lt;/p>
&lt;p>661 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>662 r1 = r;&lt;/p>
&lt;p>663 g1 = g;&lt;/p>
&lt;p>664 b1 = b;&lt;/p>
&lt;p>665 lum[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>666&lt;/p>
&lt;p>667 RGB_IN(r, g, b, p + BPP);&lt;/p>
&lt;p>668 r1 += r;&lt;/p>
&lt;p>669 g1 += g;&lt;/p>
&lt;p>670 b1 += b;&lt;/p>
&lt;p>671 lum[1] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>672 p += wrap3;&lt;/p>
&lt;p>673 lum += wrap;&lt;/p>
&lt;p>674&lt;/p>
&lt;p>675 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>676 r1 += r;&lt;/p>
&lt;p>677 g1 += g;&lt;/p>
&lt;p>678 b1 += b;&lt;/p>
&lt;p>679 lum[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>680&lt;/p>
&lt;p>681 RGB_IN(r, g, b, p + BPP);&lt;/p>
&lt;p>682 r1 += r;&lt;/p>
&lt;p>683 g1 += g;&lt;/p>
&lt;p>684 b1 += b;&lt;/p>
&lt;p>685 lum[1] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>686&lt;/p>
&lt;p>687 cb[0] = RGB_TO_U(r1, g1, b1, 2);&lt;/p>
&lt;p>688 cr[0] = RGB_TO_V(r1, g1, b1, 2);&lt;/p>
&lt;p>689&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>690&lt;/th>
&lt;th>&lt;/th>
&lt;th>cb++;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>691&lt;/td>
&lt;td>&lt;/td>
&lt;td>cr++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>692&lt;/td>
&lt;td>&lt;/td>
&lt;td>p += - wrap3 + 2 * BPP;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>693&lt;/td>
&lt;td>&lt;/td>
&lt;td>lum += - wrap + 2;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>694&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>695 if (w)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>696 {&lt;/p>
&lt;p>697 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>698 r1 = r;&lt;/p>
&lt;p>699 g1 = g;&lt;/p>
&lt;p>700 b1 = b;&lt;/p>
&lt;p>701 lum[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>702 p += wrap3;&lt;/p>
&lt;p>703 lum += wrap;&lt;/p>
&lt;p>704 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>705 r1 += r;&lt;/p>
&lt;p>706 g1 += g;&lt;/p>
&lt;p>707 b1 += b;&lt;/p>
&lt;p>708 lum[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>709 cb[0] = RGB_TO_U(r1, g1, b1, 1);&lt;/p>
&lt;p>710 cr[0] = RGB_TO_V(r1, g1, b1, 1);&lt;/p>
&lt;p>711 cb++;&lt;/p>
&lt;p>712 cr++;&lt;/p>
&lt;p>713 p += - wrap3 + BPP;&lt;/p>
&lt;p>714 lum += - wrap + 1;&lt;/p>
&lt;p>715 }&lt;/p>
&lt;p>716 p += wrap3 + (wrap3 - width * BPP);&lt;/p>
&lt;p>717 lum += wrap + (wrap - width);&lt;/p>
&lt;p>718 cb += dst-&amp;gt;linesize[1] - width2;&lt;/p>
&lt;p>719 cr += dst-&amp;gt;linesize[2] - width2;&lt;/p>
&lt;p>720 }&lt;/p>
&lt;p>721&lt;/p>
&lt;p>722 if (height) /* handle odd height */&lt;/p>
&lt;p>723 {&lt;/p>
&lt;p>724 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>725 {&lt;/p>
&lt;p>726 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>727 r1 = r;&lt;/p>
&lt;p>728 g1 = g;&lt;/p>
&lt;p>729 b1 = b;&lt;/p>
&lt;p>730 lum[0] = RGB_TO_Y(r, g, b);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>731&lt;/p>
&lt;p>732 RGB_IN(r, g, b, p + BPP);&lt;/p>
&lt;p>733 r1 += r;&lt;/p>
&lt;p>734 g1 += g;&lt;/p>
&lt;p>735 b1 += b;&lt;/p>
&lt;p>736 lum[1] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>737 cb[0] = RGB_TO_U(r1, g1, b1, 1);&lt;/p>
&lt;p>738 cr[0] = RGB_TO_V(r1, g1, b1, 1);&lt;/p>
&lt;p>739 cb++;&lt;/p>
&lt;p>740 cr++;&lt;/p>
&lt;p>741 p += 2 * BPP;&lt;/p>
&lt;p>742 lum += 2;&lt;/p>
&lt;p>743 }&lt;/p>
&lt;p>744 if (w)&lt;/p>
&lt;p>745 {&lt;/p>
&lt;p>746 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>747 lum[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>748 cb[0] = RGB_TO_U(r, g, b, 0);&lt;/p>
&lt;p>749 cr[0] = RGB_TO_V(r, g, b, 0);&lt;/p>
&lt;p>750 }&lt;/p>
&lt;p>751 }&lt;/p>
&lt;p>752 }&lt;/p>
&lt;p>753&lt;/p>
&lt;p>754 static void rgb24_to_yuvj444p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>755 {&lt;/p>
&lt;p>756 int src_wrap, x, y;&lt;/p>
&lt;p>757 int r, g, b;&lt;/p>
&lt;p>758 uint8_t *lum, *cb, *cr;&lt;/p>
&lt;p>759 const uint8_t *p;&lt;/p>
&lt;p>760&lt;/p>
&lt;p>761 lum = dst-&amp;gt;data[0];&lt;/p>
&lt;p>762 cb = dst-&amp;gt;data[1];&lt;/p>
&lt;p>763 cr = dst-&amp;gt;data[2];&lt;/p>
&lt;p>764&lt;/p>
&lt;p>765 src_wrap = src-&amp;gt;linesize[0] - width * BPP;&lt;/p>
&lt;p>766 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>767 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>768 {&lt;/p>
&lt;p>769 for (x = 0; x &amp;lt; width; x++)&lt;/p>
&lt;p>770 {&lt;/p>
&lt;p>771 RGB_IN(r, g, b, p);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>772 lum[0] = RGB_TO_Y(r, g, b);&lt;/p>
&lt;p>773 cb[0] = RGB_TO_U(r, g, b, 0);&lt;/p>
&lt;p>774 cr[0] = RGB_TO_V(r, g, b, 0);&lt;/p>
&lt;p>775 p += BPP;&lt;/p>
&lt;p>776 cb++;&lt;/p>
&lt;p>777 cr++;&lt;/p>
&lt;p>778 lum++;&lt;/p>
&lt;p>779 }&lt;/p>
&lt;p>780 p += src_wrap;&lt;/p>
&lt;p>781 lum += dst-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>782 cb += dst-&amp;gt;linesize[1] - width;&lt;/p>
&lt;p>783 cr += dst-&amp;gt;linesize[2] - width;&lt;/p>
&lt;p>784 }&lt;/p>
&lt;p>785 }&lt;/p>
&lt;p>786&lt;/p>
&lt;p>787 #endif /* FMT_RGB24 */&lt;/p>
&lt;p>788&lt;/p>
&lt;p>789 #if defined(FMT_RGB24) || defined(FMT_RGBA32)&lt;/p>
&lt;p>790&lt;/p>
&lt;p>791 static void glue(RGB_NAME, _to_pal8)(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>792 {&lt;/p>
&lt;p>793 const unsigned char *p;&lt;/p>
&lt;p>794 unsigned char *q;&lt;/p>
&lt;p>795 int dst_wrap, src_wrap;&lt;/p>
&lt;p>796 int x, y, has_alpha;&lt;/p>
&lt;p>797 unsigned int r, g, b;&lt;/p>
&lt;p>798&lt;/p>
&lt;p>799 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>800 src_wrap = src-&amp;gt;linesize[0] - BPP * width;&lt;/p>
&lt;p>801&lt;/p>
&lt;p>802 q = dst-&amp;gt;data[0];&lt;/p>
&lt;p>803 dst_wrap = dst-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>804 has_alpha = 0;&lt;/p>
&lt;p>805&lt;/p>
&lt;p>806 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>807 {&lt;/p>
&lt;p>808 for (x = 0; x &amp;lt; width; x++)&lt;/p>
&lt;p>809 {&lt;/p>
&lt;p>810 #ifdef RGBA_IN&lt;/p>
&lt;p>811 {&lt;/p>
&lt;p>812 unsigned int a;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>813 RGBA_IN(r, g, b, a, p);&lt;/p>
&lt;p>814&lt;/p>
&lt;p>815 if (a &amp;lt; 0x80) /* crude approximation for alpha ! */&lt;/p>
&lt;p>816 {&lt;/p>
&lt;p>817 has_alpha = 1;&lt;/p>
&lt;p>818 q[0] = TRANSP_INDEX;&lt;/p>
&lt;p>819 }&lt;/p>
&lt;p>820 else&lt;/p>
&lt;p>821 {&lt;/p>
&lt;p>822 q[0] = gif_clut_index(r, g, b);&lt;/p>
&lt;p>823 }&lt;/p>
&lt;p>824 }&lt;/p>
&lt;p>825 #else&lt;/p>
&lt;p>826 RGB_IN(r, g, b, p);&lt;/p>
&lt;p>827 q[0] = gif_clut_index(r, g, b);&lt;/p>
&lt;p>828 #endif&lt;/p>
&lt;p>829 q++;&lt;/p>
&lt;p>830 p += BPP;&lt;/p>
&lt;p>831 }&lt;/p>
&lt;p>832 p += src_wrap;&lt;/p>
&lt;p>833 q += dst_wrap;&lt;/p>
&lt;p>834 }&lt;/p>
&lt;p>835&lt;/p>
&lt;p>836 build_rgb_palette(dst-&amp;gt;data[1], has_alpha);&lt;/p>
&lt;p>837 }&lt;/p>
&lt;p>838&lt;/p>
&lt;p>839 #endif /* defined(FMT_RGB24) || defined(FMT_RGBA32) */&lt;/p>
&lt;p>840&lt;/p>
&lt;p>841 #ifdef RGBA_IN&lt;/p>
&lt;p>842&lt;/p>
&lt;p>843 #define FF_ALPHA_TRANSP 0x0001 /* image has some totally transparent pixels */&lt;/p>
&lt;p>844 #define FF_ALPHA_SEMI_TRANSP 0x0002 /* image has some transparent pixels */&lt;/p>
&lt;p>845&lt;/p>
&lt;p>846 static int glue(get_alpha_info_, RGB_NAME)(const AVPicture *src, int width, int height)&lt;/p>
&lt;p>847 {&lt;/p>
&lt;p>848 const unsigned char *p;&lt;/p>
&lt;p>849 int src_wrap, ret, x, y;&lt;/p>
&lt;p>850 unsigned int r, g, b, a;&lt;/p>
&lt;p>851&lt;/p>
&lt;p>852 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>853 src_wrap = src-&amp;gt;linesize[0] - BPP * width;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>854 ret = 0;&lt;/p>
&lt;p>855 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>856 {&lt;/p>
&lt;p>857 for (x = 0; x &amp;lt; width; x++)&lt;/p>
&lt;p>858 {&lt;/p>
&lt;p>859 RGBA_IN(r, g, b, a, p);&lt;/p>
&lt;p>860 if (a == 0x00)&lt;/p>
&lt;p>861 {&lt;/p>
&lt;p>862 ret |= FF_ALPHA_TRANSP;&lt;/p>
&lt;p>863 }&lt;/p>
&lt;p>864 else if (a != 0xff)&lt;/p>
&lt;p>865 {&lt;/p>
&lt;p>866 ret |= FF_ALPHA_SEMI_TRANSP;&lt;/p>
&lt;p>867 }&lt;/p>
&lt;p>868 p += BPP;&lt;/p>
&lt;p>869 }&lt;/p>
&lt;p>870 p += src_wrap;&lt;/p>
&lt;p>871 }&lt;/p>
&lt;p>872 return ret;&lt;/p>
&lt;p>873 }&lt;/p>
&lt;p>874&lt;/p>
&lt;p>875 #endif /* RGBA_IN */&lt;/p>
&lt;p>876&lt;/p>
&lt;p>877 #undef RGB_IN&lt;/p>
&lt;p>878 #undef RGBA_IN&lt;/p>
&lt;p>879 #undef RGB_OUT&lt;/p>
&lt;p>880 #undef RGBA_OUT&lt;/p>
&lt;p>881 #undef BPP&lt;/p>
&lt;p>882 #undef RGB_NAME&lt;/p>
&lt;p>883 #undef FMT_RGB24&lt;/p>
&lt;p>884 #undef FMT_RGBA32&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="8-imgconvertc-文件">&lt;strong>8 imgconvert.c 文件&lt;/strong>&lt;/h3>
&lt;p>8.1 功能描述&lt;/p>
&lt;p>定义并实现图像颜色空间转换使用的函数和宏，此文件大部分请各位自己仔细分析。&lt;/p>
&lt;p>8.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>2 #include &amp;quot;dsputil.h&amp;quot;&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #define xglue(x, y) x ## y&lt;/p>
&lt;p>5 #define glue(x, y) xglue(x, y)&lt;/p>
&lt;p>6&lt;/p>
&lt;p>7 #define FF_COLOR_RGB 0 // RGB color space&lt;/p>
&lt;p>8 #define FF_COLOR_GRAY 1 // gray color space&lt;/p>
&lt;p>9 #define FF_COLOR_YUV 2 // YUV color space. 16 &amp;lt;= Y &amp;lt;= 235, 16 &amp;lt;= U, V &amp;lt;= 240&lt;/p>
&lt;p>10 #define FF_COLOR_YUV_JPEG 3 // YUV color space. 0 &amp;lt;= Y &amp;lt;= 255, 0 &amp;lt;= U, V &amp;lt;= 255&lt;/p>
&lt;p>11&lt;/p>
&lt;p>12 #define FF_PIXEL_PLANAR 0 // each channel has one component in AVPicture&lt;/p>
&lt;p>13 #define FF_PIXEL_PACKED 1 // only one components containing all the channels&lt;/p>
&lt;p>14 #define FF_PIXEL_PALETTE 2 // one components containing indexes for a palette&lt;/p>
&lt;p>15&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.059.png" alt="">&lt;/p>
&lt;p>定义视频图像格式信息类型。&lt;/p>
&lt;p>16 typedef struct PixFmtInfo&lt;/p>
&lt;p>17 {&lt;/p>
&lt;p>18 const char *name;&lt;/p>
&lt;p>19 uint8_t nb_channels; // number of channels (including alpha)&lt;/p>
&lt;p>20 uint8_t color_type; // color type (see FF_COLOR_xxx constants)&lt;/p>
&lt;p>21 uint8_t pixel_type; // pixel storage type (see FF_PIXEL_xxx constants)&lt;/p>
&lt;p>22 uint8_t is_alpha; // true if alpha can be specified&lt;/p>
&lt;p>23 uint8_t x_chroma_shift; // X chroma subsampling factor is 2 ^ shift&lt;/p>
&lt;p>24 uint8_t y_chroma_shift; // Y chroma subsampling factor is 2 ^ shift&lt;/p>
&lt;p>25 uint8_t depth; // bit depth of the color components&lt;/p>
&lt;p>26 } PixFmtInfo;&lt;/p>
&lt;p>27&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.059.png" alt="">&lt;/p>
&lt;p>定义支持的视频图像格式信息。&lt;/p>
&lt;p>28 // this table gives more information about formats&lt;/p>
&lt;p>29 static PixFmtInfo pix_fmt_info[PIX_FMT_NB] =&lt;/p>
&lt;p>30 {&lt;/p>
&lt;p>31 { &amp;quot;yuv420p&amp;quot;, 3, FF_COLOR_YUV, FF_PIXEL_PLANAR, 0, 1, 1, 8},&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>32 { &amp;quot;yuv422&amp;quot;, 1, FF_COLOR_YUV,&lt;/p>
&lt;p>33 { &amp;quot;rgb24&amp;quot;, 3, FF_COLOR_RGB,&lt;/p>
&lt;p>34 { &amp;quot;bgr24&amp;quot;, 3, FF_COLOR_RGB,&lt;/p>
&lt;p>35 { &amp;quot;yuv422p&amp;quot;, 3, FF_COLOR_YUV,&lt;/p>
&lt;p>36 { &amp;quot;yuv444p&amp;quot;, 3, FF_COLOR_YUV,&lt;/p>
&lt;p>37 { &amp;quot;rgba32&amp;quot;, 4, FF_COLOR_RGB,&lt;/p>
&lt;p>38 { &amp;quot;yuv410p&amp;quot;, 3, FF_COLOR_YUV,&lt;/p>
&lt;p>39 { &amp;quot;yuv411p&amp;quot;, 3, FF_COLOR_YUV,&lt;/p>
&lt;p>40 { &amp;quot;rgb565&amp;quot;, 3, FF_COLOR_RGB,&lt;/p>
&lt;p>41 { &amp;quot;rgb555&amp;quot;, 4, FF_COLOR_RGB,&lt;/p>
&lt;p>FF_PIXEL_PACKED, 0, 1, 0, 8}, FF_PIXEL_PACKED, 0, 0, 0, 8}, FF_PIXEL_PACKED, 0, 0, 0, 8}, FF_PIXEL_PLANAR, 0, 1, 0, 8}, FF_PIXEL_PLANAR, 0, 0, 0, 8}, FF_PIXEL_PACKED, 1, 0, 0, 8}, FF_PIXEL_PLANAR, 0, 2, 2, 8}, FF_PIXEL_PLANAR, 0, 2, 0, 8}, FF_PIXEL_PACKED, 0, 0, 0, 5}, FF_PIXEL_PACKED, 1, 0, 0, 5},&lt;/p>
&lt;p>568
&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.060.png" alt="">&lt;/p>
&lt;p>42 { &amp;quot;gray&amp;quot;, 1, FF_COLOR_GRAY, FF_PIXEL_PLANAR, 0, 0, 0, 8},&lt;/p>
&lt;p>43 { &amp;quot;monow&amp;quot;, 1, FF_COLOR_GRAY, FF_PIXEL_PLANAR, 0, 0, 0, 1},&lt;/p>
&lt;p>44 { &amp;quot;monob&amp;quot;, 1, FF_COLOR_GRAY, FF_PIXEL_PLANAR, 0, 0, 0, 1},&lt;/p>
&lt;p>45 { &amp;quot;pal8&amp;quot;, 4, FF_COLOR_RGB, FF_PIXEL_PALETTE, 1, 0, 0, 8},&lt;/p>
&lt;p>46 { &amp;quot;yuvj420p&amp;quot;, 3, FF_COLOR_YUV_JPEG, FF_PIXEL_PLANAR, 0, 1, 1, 8},&lt;/p>
&lt;p>47 { &amp;quot;yuvj422p&amp;quot;, 3, FF_COLOR_YUV_JPEG, FF_PIXEL_PLANAR, 0, 1, 0, 8},&lt;/p>
&lt;p>48 { &amp;quot;yuvj444p&amp;quot;, 3, FF_COLOR_YUV_JPEG, FF_PIXEL_PLANAR, 0, 0, 0, 8},&lt;/p>
&lt;p>49 { &amp;quot;xvmcmc&amp;quot;, },&lt;/p>
&lt;p>50 { &amp;quot;xvmcidct&amp;quot;,},&lt;/p>
&lt;p>51 { &amp;quot;uyvy422&amp;quot;, 1, FF_COLOR_YUV, FF_PIXEL_PACKED, 0, 1, 0, 8},&lt;/p>
&lt;p>52 { &amp;quot;uyvy411&amp;quot;, 1, FF_COLOR_YUV, FF_PIXEL_PACKED, 0, 2, 0, 8},&lt;/p>
&lt;p>53 };&lt;/p>
&lt;p>54&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>读取视频图像格式信息中色度相对亮度采样比例(用移位的位数表示)。&lt;/p>
&lt;p>55 void avcodec_get_chroma_sub_sample(int pix_fmt, int *h_shift, int *v_shift)&lt;/p>
&lt;p>56 {&lt;/p>
&lt;p>57 *h_shift = pix_fmt_info[pix_fmt].x_chroma_shift;&lt;/p>
&lt;p>58 *v_shift = pix_fmt_info[pix_fmt].y_chroma_shift;&lt;/p>
&lt;p>59 }&lt;/p>
&lt;p>60&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>填充各种视频图像格式对应的 AVPicture 结构字段，返回图像大小。&lt;/p>
&lt;p>61 // Picture field are filled with 'ptr' addresses. Also return size&lt;/p>
&lt;p>62 int avpicture_fill(AVPicture *picture, uint8_t *ptr, int pix_fmt, int width, int height)&lt;/p>
&lt;p>63 {&lt;/p>
&lt;p>64 int size, w2, h2, size2;&lt;/p>
&lt;p>65 PixFmtInfo *pinfo;&lt;/p>
&lt;p>66&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>图像像素大小规整，比如 YUV420P 宽度和高度必须是 2 的整数倍，如果不符合，程序自动填充补足。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">67 if (avcodec_check_dimensions(NULL, width, height))&lt;/p>
&lt;p>68 goto fail;&lt;/p>
&lt;p>69&lt;/p>
&lt;p>70 pinfo = &amp;amp;pix_fmt_info[pix_fmt];&lt;/p>
&lt;p>71 size = width * height;&lt;/p>
&lt;p>72 switch (pix_fmt)&lt;/p>
&lt;p>73 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>按照图像格式，分别计算 AVPicture 结构字段的值。&lt;/p>
&lt;p>74 case PIX_FMT_YUV420P:&lt;/p>
&lt;p>75 case PIX_FMT_YUV422P:&lt;/p>
&lt;p>76 case PIX_FMT_YUV444P:&lt;/p>
&lt;p>77 case PIX_FMT_YUV410P:&lt;/p>
&lt;p>78 case PIX_FMT_YUV411P:&lt;/p>
&lt;p>79 case PIX_FMT_YUVJ420P:&lt;/p>
&lt;p>80 case PIX_FMT_YUVJ422P:&lt;/p>
&lt;p>81 case PIX_FMT_YUVJ444P:&lt;/p>
&lt;p>82 w2 = (width + (1 &amp;lt;&amp;lt; pinfo-&amp;gt;x_chroma_shift) - 1) &amp;gt;&amp;gt; pinfo-&amp;gt;x_chroma_shift;&lt;/p>
&lt;p>83 h2 = (height + (1 &amp;lt;&amp;lt; pinfo-&amp;gt;y_chroma_shift) - 1) &amp;gt;&amp;gt; pinfo-&amp;gt;y_chroma_shift;&lt;/p>
&lt;p>84 size2 = w2 * h2;&lt;/p>
&lt;p>85 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>86 picture-&amp;gt;data[1] = picture-&amp;gt;data[0] + size;&lt;/p>
&lt;p>87 picture-&amp;gt;data[2] = picture-&amp;gt;data[1] + size2;&lt;/p>
&lt;p>88 picture-&amp;gt;linesize[0] = width;&lt;/p>
&lt;p>89 picture-&amp;gt;linesize[1] = w2;&lt;/p>
&lt;p>90 picture-&amp;gt;linesize[2] = w2;&lt;/p>
&lt;p>91 return size + 2 * size2;&lt;/p>
&lt;p>92 case PIX_FMT_RGB24:&lt;/p>
&lt;p>93 case PIX_FMT_BGR24:&lt;/p>
&lt;p>94 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>95 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>96 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>97 picture-&amp;gt;linesize[0] = width * 3;&lt;/p>
&lt;p>98 return size *3;&lt;/p>
&lt;p>99 case PIX_FMT_RGBA32:&lt;/p>
&lt;p>100 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>101 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>102 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>103 picture-&amp;gt;linesize[0] = width * 4;&lt;/p>
&lt;p>104 return size *4;&lt;/p>
&lt;p>105 case PIX_FMT_RGB555:&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">106 case PIX_FMT_RGB565:&lt;/p>
&lt;p>107 case PIX_FMT_YUV422:&lt;/p>
&lt;p>108 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>109 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>110 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>111 picture-&amp;gt;linesize[0] = width * 2;&lt;/p>
&lt;p>112 return size *2;&lt;/p>
&lt;p>113 case PIX_FMT_UYVY422:&lt;/p>
&lt;p>114 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>115 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>116 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>117 picture-&amp;gt;linesize[0] = width * 2;&lt;/p>
&lt;p>118 return size *2;&lt;/p>
&lt;p>119 case PIX_FMT_UYVY411:&lt;/p>
&lt;p>120 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>121 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>122 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>123 picture-&amp;gt;linesize[0] = width + width / 2;&lt;/p>
&lt;p>124 return size + size / 2;&lt;/p>
&lt;p>125 case PIX_FMT_GRAY8:&lt;/p>
&lt;p>126 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>127 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>128 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>129 picture-&amp;gt;linesize[0] = width;&lt;/p>
&lt;p>130 return size;&lt;/p>
&lt;p>131 case PIX_FMT_MONOWHITE:&lt;/p>
&lt;p>132 case PIX_FMT_MONOBLACK:&lt;/p>
&lt;p>133 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>134 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>135 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>136 picture-&amp;gt;linesize[0] = (width + 7) &amp;gt;&amp;gt; 3;&lt;/p>
&lt;p>137 return picture-&amp;gt;linesize[0] *height;&lt;/p>
&lt;p>138 case PIX_FMT_PAL8:&lt;/p>
&lt;p>139 size2 = (size + 3) &amp;amp;~3;&lt;/p>
&lt;p>140 picture-&amp;gt;data[0] = ptr;&lt;/p>
&lt;p>141 picture-&amp;gt;data[1] = ptr + size2; // palette is stored here as 256 32 bit words&lt;/p>
&lt;p>142 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>143 picture-&amp;gt;linesize[0] = width;&lt;/p>
&lt;p>144 picture-&amp;gt;linesize[1] = 4;&lt;/p>
&lt;p>145 return size2 + 256 * 4;&lt;/p>
&lt;p>146 default:&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">147 fail:&lt;/p>
&lt;p>148 picture-&amp;gt;data[0] = NULL;&lt;/p>
&lt;p>149 picture-&amp;gt;data[1] = NULL;&lt;/p>
&lt;p>150 picture-&amp;gt;data[2] = NULL;&lt;/p>
&lt;p>151 picture-&amp;gt;data[3] = NULL;&lt;/p>
&lt;p>152 return - 1;&lt;/p>
&lt;p>153 }&lt;/p>
&lt;p>154 }&lt;/p>
&lt;p>155&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>传入像素格式，图像长宽，计算图像大小。程序简单的复用 avpicture_fill()函数的返回值。&lt;/p>
&lt;p>156 int avpicture_get_size(int pix_fmt, int width, int height)&lt;/p>
&lt;p>157 {&lt;/p>
&lt;p>158 AVPicture dummy_pict;&lt;/p>
&lt;p>159 return avpicture_fill(&amp;amp;dummy_pict, NULL, pix_fmt, width, height);&lt;/p>
&lt;p>160 }&lt;/p>
&lt;p>161&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>初始化 AVPicture 结构。输入像素格式和长宽，计算图像大小，分配图像缓存，填充 AVPicture 结构 。&lt;/p>
&lt;p>162 int avpicture_alloc(AVPicture *picture, int pix_fmt, int width, int height)&lt;/p>
&lt;p>163 {&lt;/p>
&lt;p>164 unsigned int size;&lt;/p>
&lt;p>165 void *ptr;&lt;/p>
&lt;p>166&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>调用函数计算图像大小。&lt;/p>
&lt;p>167 size = avpicture_get_size(pix_fmt, width, height);&lt;/p>
&lt;p>168 if (size &amp;lt; 0)&lt;/p>
&lt;p>169 goto fail;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>调用函数分配图像缓存。&lt;/p>
&lt;p>170 ptr = av_malloc(size);&lt;/p>
&lt;p>171 if (!ptr)&lt;/p>
&lt;p>172 goto fail;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>填充 AVPicture 结构。&lt;/p>
&lt;p>173 avpicture_fill(picture, ptr, pix_fmt, width, height);&lt;/p>
&lt;p>174 return 0;&lt;/p>
&lt;p>175 fail:&lt;/p>
&lt;p>176 memset(picture, 0, sizeof(AVPicture));&lt;/p>
&lt;p>177 return - 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>178 }&lt;/p>
&lt;p>179&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>释放 AVPicture 分配的内存，因为内存首地址在 picture-&amp;gt;data[0]中，所以可以简单的释放。&lt;/p>
&lt;p>180 void avpicture_free(AVPicture *picture)&lt;/p>
&lt;p>181 {&lt;/p>
&lt;p>182 av_free(picture-&amp;gt;data[0]);&lt;/p>
&lt;p>183 }&lt;/p>
&lt;p>184&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>计算各种图像格式平均每个像素占用的 bit 位数。&lt;/p>
&lt;p>185 static int avg_bits_per_pixel(int pix_fmt)&lt;/p>
&lt;p>186 {&lt;/p>
&lt;p>187 int bits;&lt;/p>
&lt;p>188 const PixFmtInfo *pf;&lt;/p>
&lt;p>189&lt;/p>
&lt;p>190 pf = &amp;amp;pix_fmt_info[pix_fmt];&lt;/p>
&lt;p>191 switch (pf-&amp;gt;pixel_type)&lt;/p>
&lt;p>192 {&lt;/p>
&lt;p>193 case FF_PIXEL_PACKED:&lt;/p>
&lt;p>194 switch (pix_fmt)&lt;/p>
&lt;p>195 {&lt;/p>
&lt;p>196 case PIX_FMT_YUV422:&lt;/p>
&lt;p>197 case PIX_FMT_UYVY422:&lt;/p>
&lt;p>198 case PIX_FMT_RGB565:&lt;/p>
&lt;p>199 case PIX_FMT_RGB555:&lt;/p>
&lt;p>200 bits = 16;&lt;/p>
&lt;p>201 break;&lt;/p>
&lt;p>202 case PIX_FMT_UYVY411:&lt;/p>
&lt;p>203 bits = 12;&lt;/p>
&lt;p>204 break;&lt;/p>
&lt;p>205 default:&lt;/p>
&lt;p>206 bits = pf-&amp;gt;depth *pf-&amp;gt;nb_channels;&lt;/p>
&lt;p>207 break;&lt;/p>
&lt;p>208 }&lt;/p>
&lt;p>209 break;&lt;/p>
&lt;p>210 case FF_PIXEL_PLANAR:&lt;/p>
&lt;p>211 if (pf-&amp;gt;x_chroma_shift == 0 &amp;amp;&amp;amp; pf-&amp;gt;y_chroma_shift == 0)&lt;/p>
&lt;p>212 {&lt;/p>
&lt;p>213 bits = pf-&amp;gt;depth *pf-&amp;gt;nb_channels;&lt;/p>
&lt;p>214 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>215 else&lt;/p>
&lt;p>216 {&lt;/p>
&lt;p>217 bits = pf-&amp;gt;depth + ((2 *pf-&amp;gt;depth) &amp;gt;&amp;gt; (pf-&amp;gt;x_chroma_shift + pf-&amp;gt;y_chroma_shift));&lt;/p>
&lt;p>218 }&lt;/p>
&lt;p>219 break;&lt;/p>
&lt;p>220 case FF_PIXEL_PALETTE:&lt;/p>
&lt;p>221 bits = 8;&lt;/p>
&lt;p>222 break;&lt;/p>
&lt;p>223 default:&lt;/p>
&lt;p>224 bits = - 1;&lt;/p>
&lt;p>225 break;&lt;/p>
&lt;p>226 }&lt;/p>
&lt;p>227 return bits;&lt;/p>
&lt;p>228 }&lt;/p>
&lt;p>229&lt;/p>
&lt;p>230 ////////////////////////////&lt;/p>
&lt;p>231&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>图像数据平面拷贝，由于宽度可能有差别，只能一行一行的拷贝。&lt;/p>
&lt;p>232 void ff_img_copy_plane(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>233 {&lt;/p>
&lt;p>234 if ((!dst) || (!src))&lt;/p>
&lt;p>235 return ;&lt;/p>
&lt;p>236 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>237 {&lt;/p>
&lt;p>238 memcpy(dst, src, width);&lt;/p>
&lt;p>239 dst += dst_wrap;&lt;/p>
&lt;p>240 src += src_wrap;&lt;/p>
&lt;p>241 }&lt;/p>
&lt;p>242 }&lt;/p>
&lt;p>243&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>各种图像格式的图像数据拷贝。&lt;/p>
&lt;p>244 void img_copy(AVPicture *dst, const AVPicture *src, int pix_fmt, int width, int height)&lt;/p>
&lt;p>245 {&lt;/p>
&lt;p>246 int bwidth, bits, i;&lt;/p>
&lt;p>247 PixFmtInfo *pf = &amp;amp;pix_fmt_info[pix_fmt];&lt;/p>
&lt;p>248&lt;/p>
&lt;p>249 pf = &amp;amp;pix_fmt_info[pix_fmt];&lt;/p>
&lt;p>250 switch (pf-&amp;gt;pixel_type)&lt;/p>
&lt;p>251 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>252 case FF_PIXEL_PACKED:&lt;/p>
&lt;p>253 switch (pix_fmt)&lt;/p>
&lt;p>254 {&lt;/p>
&lt;p>255 case PIX_FMT_YUV422:&lt;/p>
&lt;p>256 case PIX_FMT_UYVY422:&lt;/p>
&lt;p>257 case PIX_FMT_RGB565:&lt;/p>
&lt;p>258 case PIX_FMT_RGB555:&lt;/p>
&lt;p>259 bits = 16;&lt;/p>
&lt;p>260 break;&lt;/p>
&lt;p>261 case PIX_FMT_UYVY411:&lt;/p>
&lt;p>262 bits = 12;&lt;/p>
&lt;p>263 break;&lt;/p>
&lt;p>264 default:&lt;/p>
&lt;p>265 bits = pf-&amp;gt;depth *pf-&amp;gt;nb_channels;&lt;/p>
&lt;p>266 break;&lt;/p>
&lt;p>267 }&lt;/p>
&lt;p>268 bwidth = (width *bits + 7) &amp;gt;&amp;gt; 3;&lt;/p>
&lt;p>269 ff_img_copy_plane(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0], bwidth, height);&lt;/p>
&lt;p>270 break;&lt;/p>
&lt;p>271 case FF_PIXEL_PLANAR:&lt;/p>
&lt;p>272 for (i = 0; i &amp;lt; pf-&amp;gt;nb_channels; i++)&lt;/p>
&lt;p>273 {&lt;/p>
&lt;p>274 int w, h;&lt;/p>
&lt;p>275 w = width;&lt;/p>
&lt;p>276 h = height;&lt;/p>
&lt;p>277 if (i == 1 || i == 2)&lt;/p>
&lt;p>278 {&lt;/p>
&lt;p>279 w &amp;gt;&amp;gt;= pf-&amp;gt;x_chroma_shift;&lt;/p>
&lt;p>280 h &amp;gt;&amp;gt;= pf-&amp;gt;y_chroma_shift;&lt;/p>
&lt;p>281 }&lt;/p>
&lt;p>282 bwidth = (w *pf-&amp;gt;depth + 7) &amp;gt;&amp;gt; 3;&lt;/p>
&lt;p>283 ff_img_copy_plane(dst-&amp;gt;data[i], dst-&amp;gt;linesize[i], src-&amp;gt;data[i], src-&amp;gt;linesize[i], bwidth, h);&lt;/p>
&lt;p>284 }&lt;/p>
&lt;p>285 break;&lt;/p>
&lt;p>286 case FF_PIXEL_PALETTE:&lt;/p>
&lt;p>287 ff_img_copy_plane(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0], width, height);&lt;/p>
&lt;p>288 // copy the palette&lt;/p>
&lt;p>289 ff_img_copy_plane(dst-&amp;gt;data[1], dst-&amp;gt;linesize[1], src-&amp;gt;data[1], src-&amp;gt;linesize[1], 4,&lt;/p>
&lt;p>256);&lt;/p>
&lt;p>290 break;&lt;/p>
&lt;p>291 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>292 }&lt;/p>
&lt;p>293&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">本文件的后面部分请各位自行仔细分析。&lt;/p>
&lt;p>294 static void yuv422_to_yuv420p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>295 {&lt;/p>
&lt;p>296 const uint8_t *p, *p1;&lt;/p>
&lt;p>297 uint8_t *lum, *cr, *cb, *lum1, *cr1, *cb1;&lt;/p>
&lt;p>298 int w;&lt;/p>
&lt;p>299&lt;/p>
&lt;p>300 p1 = src-&amp;gt;data[0];&lt;/p>
&lt;p>301 lum1 = dst-&amp;gt;data[0];&lt;/p>
&lt;p>302 cb1 = dst-&amp;gt;data[1];&lt;/p>
&lt;p>303 cr1 = dst-&amp;gt;data[2];&lt;/p>
&lt;p>304&lt;/p>
&lt;p>305 for (; height &amp;gt;= 1; height -= 2)&lt;/p>
&lt;p>306 {&lt;/p>
&lt;p>307 p = p1;&lt;/p>
&lt;p>308 lum = lum1;&lt;/p>
&lt;p>309 cb = cb1;&lt;/p>
&lt;p>310 cr = cr1;&lt;/p>
&lt;p>311 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>312 {&lt;/p>
&lt;p>313 lum[0] = p[0];&lt;/p>
&lt;p>314 cb[0] = p[1];&lt;/p>
&lt;p>315 lum[1] = p[2];&lt;/p>
&lt;p>316 cr[0] = p[3];&lt;/p>
&lt;p>317 p += 4;&lt;/p>
&lt;p>318 lum += 2;&lt;/p>
&lt;p>319 cb++;&lt;/p>
&lt;p>320 cr++;&lt;/p>
&lt;p>321 }&lt;/p>
&lt;p>322 if (w)&lt;/p>
&lt;p>323 {&lt;/p>
&lt;p>324 lum[0] = p[0];&lt;/p>
&lt;p>325 cb[0] = p[1];&lt;/p>
&lt;p>326 cr[0] = p[3];&lt;/p>
&lt;p>327 cb++;&lt;/p>
&lt;p>328 cr++;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>329 }&lt;/p>
&lt;p>330 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>331 lum1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>332 if (height &amp;gt; 1)&lt;/p>
&lt;p>333 {&lt;/p>
&lt;p>334 p = p1;&lt;/p>
&lt;p>335 lum = lum1;&lt;/p>
&lt;p>336 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>337 {&lt;/p>
&lt;p>338 lum[0] = p[0];&lt;/p>
&lt;p>339 lum[1] = p[2];&lt;/p>
&lt;p>340 p += 4;&lt;/p>
&lt;p>341 lum += 2;&lt;/p>
&lt;p>342 }&lt;/p>
&lt;p>343 if (w)&lt;/p>
&lt;p>344 {&lt;/p>
&lt;p>345 lum[0] = p[0];&lt;/p>
&lt;p>346 }&lt;/p>
&lt;p>347 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>348 lum1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>349 }&lt;/p>
&lt;p>350 cb1 += dst-&amp;gt;linesize[1];&lt;/p>
&lt;p>351 cr1 += dst-&amp;gt;linesize[2];&lt;/p>
&lt;p>352 }&lt;/p>
&lt;p>353 }&lt;/p>
&lt;p>354&lt;/p>
&lt;p>355 static void uyvy422_to_yuv420p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>356 {&lt;/p>
&lt;p>357 const uint8_t *p, *p1;&lt;/p>
&lt;p>358 uint8_t *lum, *cr, *cb, *lum1, *cr1, *cb1;&lt;/p>
&lt;p>359 int w;&lt;/p>
&lt;p>360&lt;/p>
&lt;p>361 p1 = src-&amp;gt;data[0];&lt;/p>
&lt;p>362&lt;/p>
&lt;p>363 lum1 = dst-&amp;gt;data[0];&lt;/p>
&lt;p>364 cb1 = dst-&amp;gt;data[1];&lt;/p>
&lt;p>365 cr1 = dst-&amp;gt;data[2];&lt;/p>
&lt;p>366&lt;/p>
&lt;p>367 for (; height &amp;gt;= 1; height -= 2)&lt;/p>
&lt;p>368 {&lt;/p>
&lt;p>369 p = p1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>370 lum = lum1;&lt;/p>
&lt;p>371 cb = cb1;&lt;/p>
&lt;p>372 cr = cr1;&lt;/p>
&lt;p>373 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>374 {&lt;/p>
&lt;p>375 lum[0] = p[1];&lt;/p>
&lt;p>376 cb[0] = p[0];&lt;/p>
&lt;p>377 lum[1] = p[3];&lt;/p>
&lt;p>378 cr[0] = p[2];&lt;/p>
&lt;p>379 p += 4;&lt;/p>
&lt;p>380 lum += 2;&lt;/p>
&lt;p>381 cb++;&lt;/p>
&lt;p>382 cr++;&lt;/p>
&lt;p>383 }&lt;/p>
&lt;p>384 if (w)&lt;/p>
&lt;p>385 {&lt;/p>
&lt;p>386 lum[0] = p[1];&lt;/p>
&lt;p>387 cb[0] = p[0];&lt;/p>
&lt;p>388 cr[0] = p[2];&lt;/p>
&lt;p>389 cb++;&lt;/p>
&lt;p>390 cr++;&lt;/p>
&lt;p>391 }&lt;/p>
&lt;p>392 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>393 lum1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>394 if (height &amp;gt; 1)&lt;/p>
&lt;p>395 {&lt;/p>
&lt;p>396 p = p1;&lt;/p>
&lt;p>397 lum = lum1;&lt;/p>
&lt;p>398 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>399 {&lt;/p>
&lt;p>400 lum[0] = p[1];&lt;/p>
&lt;p>401 lum[1] = p[3];&lt;/p>
&lt;p>402 p += 4;&lt;/p>
&lt;p>403 lum += 2;&lt;/p>
&lt;p>404 }&lt;/p>
&lt;p>405 if (w)&lt;/p>
&lt;p>406 {&lt;/p>
&lt;p>407 lum[0] = p[1];&lt;/p>
&lt;p>408 }&lt;/p>
&lt;p>409 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>410 lum1 += dst-&amp;gt;linesize[0];&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>411 }&lt;/p>
&lt;p>412 cb1 += dst-&amp;gt;linesize[1];&lt;/p>
&lt;p>413 cr1 += dst-&amp;gt;linesize[2];&lt;/p>
&lt;p>414 }&lt;/p>
&lt;p>415 }&lt;/p>
&lt;p>416&lt;/p>
&lt;p>417 static void uyvy422_to_yuv422p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>418 {&lt;/p>
&lt;p>419 const uint8_t *p, *p1;&lt;/p>
&lt;p>420 uint8_t *lum, *cr, *cb, *lum1, *cr1, *cb1;&lt;/p>
&lt;p>421 int w;&lt;/p>
&lt;p>422&lt;/p>
&lt;p>423 p1 = src-&amp;gt;data[0];&lt;/p>
&lt;p>424 lum1 = dst-&amp;gt;data[0];&lt;/p>
&lt;p>425 cb1 = dst-&amp;gt;data[1];&lt;/p>
&lt;p>426 cr1 = dst-&amp;gt;data[2];&lt;/p>
&lt;p>427 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>428 {&lt;/p>
&lt;p>429 p = p1;&lt;/p>
&lt;p>430 lum = lum1;&lt;/p>
&lt;p>431 cb = cb1;&lt;/p>
&lt;p>432 cr = cr1;&lt;/p>
&lt;p>433 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>434 {&lt;/p>
&lt;p>435 lum[0] = p[1];&lt;/p>
&lt;p>436 cb[0] = p[0];&lt;/p>
&lt;p>437 lum[1] = p[3];&lt;/p>
&lt;p>438 cr[0] = p[2];&lt;/p>
&lt;p>439 p += 4;&lt;/p>
&lt;p>440 lum += 2;&lt;/p>
&lt;p>441 cb++;&lt;/p>
&lt;p>442 cr++;&lt;/p>
&lt;p>443 }&lt;/p>
&lt;p>444 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>445 lum1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>446 cb1 += dst-&amp;gt;linesize[1];&lt;/p>
&lt;p>447 cr1 += dst-&amp;gt;linesize[2];&lt;/p>
&lt;p>448 }&lt;/p>
&lt;p>449 }&lt;/p>
&lt;p>450&lt;/p>
&lt;p>451 static void yuv422_to_yuv422p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>452 {&lt;/p>
&lt;p>453 const uint8_t *p, *p1;&lt;/p>
&lt;p>454 uint8_t *lum, *cr, *cb, *lum1, *cr1, *cb1;&lt;/p>
&lt;p>455 int w;&lt;/p>
&lt;p>456&lt;/p>
&lt;p>457 p1 = src-&amp;gt;data[0];&lt;/p>
&lt;p>458 lum1 = dst-&amp;gt;data[0];&lt;/p>
&lt;p>459 cb1 = dst-&amp;gt;data[1];&lt;/p>
&lt;p>460 cr1 = dst-&amp;gt;data[2];&lt;/p>
&lt;p>461 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>462 {&lt;/p>
&lt;p>463 p = p1;&lt;/p>
&lt;p>464 lum = lum1;&lt;/p>
&lt;p>465 cb = cb1;&lt;/p>
&lt;p>466 cr = cr1;&lt;/p>
&lt;p>467 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>468 {&lt;/p>
&lt;p>469 lum[0] = p[0];&lt;/p>
&lt;p>470 cb[0] = p[1];&lt;/p>
&lt;p>471 lum[1] = p[2];&lt;/p>
&lt;p>472 cr[0] = p[3];&lt;/p>
&lt;p>473 p += 4;&lt;/p>
&lt;p>474 lum += 2;&lt;/p>
&lt;p>475 cb++;&lt;/p>
&lt;p>476 cr++;&lt;/p>
&lt;p>477 }&lt;/p>
&lt;p>478 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>479 lum1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>480 cb1 += dst-&amp;gt;linesize[1];&lt;/p>
&lt;p>481 cr1 += dst-&amp;gt;linesize[2];&lt;/p>
&lt;p>482 }&lt;/p>
&lt;p>483 }&lt;/p>
&lt;p>484&lt;/p>
&lt;p>485 static void yuv422p_to_yuv422(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>486 {&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>487&lt;/th>
&lt;th>uint8_t *p, *p1;&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>488&lt;/td>
&lt;td>const uint8_t *lum, *cr, *cb, *lum1, *cr1,&lt;/td>
&lt;td>*cb1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>489&lt;/td>
&lt;td>int w;&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>490&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>491&lt;/td>
&lt;td>p1 = dst-&amp;gt;data[0];&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>492&lt;/td>
&lt;td>lum1 = src-&amp;gt;data[0];&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">493 cb1 = src-&amp;gt;data[1];&lt;/p>
&lt;p>494 cr1 = src-&amp;gt;data[2];&lt;/p>
&lt;p>495 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>496 {&lt;/p>
&lt;p>497 p = p1;&lt;/p>
&lt;p>498 lum = lum1;&lt;/p>
&lt;p>499 cb = cb1;&lt;/p>
&lt;p>500 cr = cr1;&lt;/p>
&lt;p>501 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>502 {&lt;/p>
&lt;p>503 p[0] = lum[0];&lt;/p>
&lt;p>504 p[1] = cb[0];&lt;/p>
&lt;p>505 p[2] = lum[1];&lt;/p>
&lt;p>506 p[3] = cr[0];&lt;/p>
&lt;p>507 p += 4;&lt;/p>
&lt;p>508 lum += 2;&lt;/p>
&lt;p>509 cb++;&lt;/p>
&lt;p>510 cr++;&lt;/p>
&lt;p>511 }&lt;/p>
&lt;p>512 p1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>513 lum1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>514 cb1 += src-&amp;gt;linesize[1];&lt;/p>
&lt;p>515 cr1 += src-&amp;gt;linesize[2];&lt;/p>
&lt;p>516 }&lt;/p>
&lt;p>517 }&lt;/p>
&lt;p>518&lt;/p>
&lt;p>519 static void yuv422p_to_uyvy422(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>520 {&lt;/p>
&lt;p>521 uint8_t *p, *p1;&lt;/p>
&lt;p>522 const uint8_t *lum, *cr, *cb, *lum1, *cr1, *cb1;&lt;/p>
&lt;p>523 int w;&lt;/p>
&lt;p>524&lt;/p>
&lt;p>525 p1 = dst-&amp;gt;data[0];&lt;/p>
&lt;p>526 lum1 = src-&amp;gt;data[0];&lt;/p>
&lt;p>527 cb1 = src-&amp;gt;data[1];&lt;/p>
&lt;p>528 cr1 = src-&amp;gt;data[2];&lt;/p>
&lt;p>529 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>530 {&lt;/p>
&lt;p>531 p = p1;&lt;/p>
&lt;p>532 lum = lum1;&lt;/p>
&lt;p>533 cb = cb1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>534 cr = cr1;&lt;/p>
&lt;p>535 for (w = width; w &amp;gt;= 2; w -= 2)&lt;/p>
&lt;p>536 {&lt;/p>
&lt;p>537 p[1] = lum[0];&lt;/p>
&lt;p>538 p[0] = cb[0];&lt;/p>
&lt;p>539 p[3] = lum[1];&lt;/p>
&lt;p>540 p[2] = cr[0];&lt;/p>
&lt;p>541 p += 4;&lt;/p>
&lt;p>542 lum += 2;&lt;/p>
&lt;p>543 cb++;&lt;/p>
&lt;p>544 cr++;&lt;/p>
&lt;p>545 }&lt;/p>
&lt;p>546 p1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>547 lum1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>548 cb1 += src-&amp;gt;linesize[1];&lt;/p>
&lt;p>549 cr1 += src-&amp;gt;linesize[2];&lt;/p>
&lt;p>550 }&lt;/p>
&lt;p>551 }&lt;/p>
&lt;p>552&lt;/p>
&lt;p>553 static void uyvy411_to_yuv411p(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>554 {&lt;/p>
&lt;p>555 const uint8_t *p, *p1;&lt;/p>
&lt;p>556 uint8_t *lum, *cr, *cb, *lum1, *cr1, *cb1;&lt;/p>
&lt;p>557 int w;&lt;/p>
&lt;p>558&lt;/p>
&lt;p>559 p1 = src-&amp;gt;data[0];&lt;/p>
&lt;p>560 lum1 = dst-&amp;gt;data[0];&lt;/p>
&lt;p>561 cb1 = dst-&amp;gt;data[1];&lt;/p>
&lt;p>562 cr1 = dst-&amp;gt;data[2];&lt;/p>
&lt;p>563 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>564 {&lt;/p>
&lt;p>565 p = p1;&lt;/p>
&lt;p>566 lum = lum1;&lt;/p>
&lt;p>567 cb = cb1;&lt;/p>
&lt;p>568 cr = cr1;&lt;/p>
&lt;p>569 for (w = width; w &amp;gt;= 4; w -= 4)&lt;/p>
&lt;p>570 {&lt;/p>
&lt;p>571 cb[0] = p[0];&lt;/p>
&lt;p>572 lum[0] = p[1];&lt;/p>
&lt;p>573 lum[1] = p[2];&lt;/p>
&lt;p>574 cr[0] = p[3];&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>575 lum[2] = p[4];&lt;/p>
&lt;p>576 lum[3] = p[5];&lt;/p>
&lt;p>577 p += 6;&lt;/p>
&lt;p>578 lum += 4;&lt;/p>
&lt;p>579 cb++;&lt;/p>
&lt;p>580 cr++;&lt;/p>
&lt;p>581 }&lt;/p>
&lt;p>582 p1 += src-&amp;gt;linesize[0];&lt;/p>
&lt;p>583 lum1 += dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>584 cb1 += dst-&amp;gt;linesize[1];&lt;/p>
&lt;p>585 cr1 += dst-&amp;gt;linesize[2];&lt;/p>
&lt;p>586 }&lt;/p>
&lt;p>587 }&lt;/p>
&lt;p>588&lt;/p>
&lt;p>589 static void yuv420p_to_yuv422(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>590 {&lt;/p>
&lt;p>591 int w, h;&lt;/p>
&lt;p>592 uint8_t *line1, *line2, *linesrc = dst-&amp;gt;data[0];&lt;/p>
&lt;p>593 uint8_t *lum1, *lum2, *lumsrc = src-&amp;gt;data[0];&lt;/p>
&lt;p>594 uint8_t *cb1, *cb2 = src-&amp;gt;data[1];&lt;/p>
&lt;p>595 uint8_t *cr1, *cr2 = src-&amp;gt;data[2];&lt;/p>
&lt;p>596&lt;/p>
&lt;p>597 for (h = height / 2; h--;)&lt;/p>
&lt;p>598 {&lt;/p>
&lt;p>599 line1 = linesrc;&lt;/p>
&lt;p>600 line2 = linesrc + dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>601&lt;/p>
&lt;p>602 lum1 = lumsrc;&lt;/p>
&lt;p>603 lum2 = lumsrc + src-&amp;gt;linesize[0];&lt;/p>
&lt;p>604&lt;/p>
&lt;p>605 cb1 = cb2;&lt;/p>
&lt;p>606 cr1 = cr2;&lt;/p>
&lt;p>607&lt;/p>
&lt;p>608 for (w = width / 2; w--;)&lt;/p>
&lt;p>609 {&lt;/p>
&lt;p>610 *line1++ = *lum1++;&lt;/p>
&lt;p>611 *line2++ = *lum2++;&lt;/p>
&lt;p>612 *line1++ = *line2++ = *cb1++;&lt;/p>
&lt;p>613 *line1++ = *lum1++;&lt;/p>
&lt;p>614 *line2++ = *lum2++;&lt;/p>
&lt;p>615 *line1++ = *line2++ = *cr1++;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>616 }&lt;/p>
&lt;p>617&lt;/p>
&lt;p>618 linesrc += dst-&amp;gt;linesize[0] *2;&lt;/p>
&lt;p>619 lumsrc += src-&amp;gt;linesize[0] *2;&lt;/p>
&lt;p>620 cb2 += src-&amp;gt;linesize[1];&lt;/p>
&lt;p>621 cr2 += src-&amp;gt;linesize[2];&lt;/p>
&lt;p>622 }&lt;/p>
&lt;p>623 }&lt;/p>
&lt;p>624&lt;/p>
&lt;p>625 static void yuv420p_to_uyvy422(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>626 {&lt;/p>
&lt;p>627 int w, h;&lt;/p>
&lt;p>628 uint8_t *line1, *line2, *linesrc = dst-&amp;gt;data[0];&lt;/p>
&lt;p>629 uint8_t *lum1, *lum2, *lumsrc = src-&amp;gt;data[0];&lt;/p>
&lt;p>630 uint8_t *cb1, *cb2 = src-&amp;gt;data[1];&lt;/p>
&lt;p>631 uint8_t *cr1, *cr2 = src-&amp;gt;data[2];&lt;/p>
&lt;p>632&lt;/p>
&lt;p>633 for (h = height / 2; h--;)&lt;/p>
&lt;p>634 {&lt;/p>
&lt;p>635 line1 = linesrc;&lt;/p>
&lt;p>636 line2 = linesrc + dst-&amp;gt;linesize[0];&lt;/p>
&lt;p>637&lt;/p>
&lt;p>638 lum1 = lumsrc;&lt;/p>
&lt;p>639 lum2 = lumsrc + src-&amp;gt;linesize[0];&lt;/p>
&lt;p>640&lt;/p>
&lt;p>641 cb1 = cb2;&lt;/p>
&lt;p>642 cr1 = cr2;&lt;/p>
&lt;p>643&lt;/p>
&lt;p>644 for (w = width / 2; w--;)&lt;/p>
&lt;p>645 {&lt;/p>
&lt;p>646 *line1++ = *line2++ = *cb1++;&lt;/p>
&lt;p>647 *line1++ = *lum1++;&lt;/p>
&lt;p>648 *line2++ = *lum2++;&lt;/p>
&lt;p>649 *line1++ = *line2++ = *cr1++;&lt;/p>
&lt;p>650 *line1++ = *lum1++;&lt;/p>
&lt;p>651 *line2++ = *lum2++;&lt;/p>
&lt;p>652 }&lt;/p>
&lt;p>653&lt;/p>
&lt;p>654 linesrc += dst-&amp;gt;linesize[0] *2;&lt;/p>
&lt;p>655 lumsrc += src-&amp;gt;linesize[0] *2;&lt;/p>
&lt;p>656 cb2 += src-&amp;gt;linesize[1];&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>657 cr2 += src-&amp;gt;linesize[2];&lt;/p>
&lt;p>658 }&lt;/p>
&lt;p>659 }&lt;/p>
&lt;p>660&lt;/p>
&lt;p>661 #define SCALEBITS 10&lt;/p>
&lt;p>662 #define ONE_HALF (1 &amp;lt;&amp;lt; (SCALEBITS - 1))&lt;/p>
&lt;p>663 #define FIX(x) ((int) ((x) * (1&amp;lt;&amp;lt;SCALEBITS) + 0.5))&lt;/p>
&lt;p>664&lt;/p>
&lt;p>665 #define YUV_TO_RGB1_CCIR(cb1, cr1)\&lt;/p>
&lt;p>666 {\&lt;/p>
&lt;p>667 cb = (cb1) - 128;\&lt;/p>
&lt;p>668 cr = (cr1) - 128;\&lt;/p>
&lt;p>669 r_add = FIX(1.40200*255.0/224.0) * cr + ONE_HALF;\&lt;/p>
&lt;p>670 g_add = - FIX(0.34414*255.0/224.0) * cb - FIX(0.71414*255.0/224.0) * cr + \&lt;/p>
&lt;p>671 ONE_HALF;\&lt;/p>
&lt;p>672 b_add = FIX(1.77200*255.0/224.0) * cb + ONE_HALF;\&lt;/p>
&lt;p>673 }&lt;/p>
&lt;p>674&lt;/p>
&lt;p>675 #define YUV_TO_RGB2_CCIR(r, g, b, y1)\&lt;/p>
&lt;p>676 {\&lt;/p>
&lt;p>677 y = ((y1) - 16) * FIX(255.0/219.0);\&lt;/p>
&lt;p>678 r = cm[(y + r_add) &amp;gt;&amp;gt; SCALEBITS];\&lt;/p>
&lt;p>679 g = cm[(y + g_add) &amp;gt;&amp;gt; SCALEBITS];\&lt;/p>
&lt;p>680 b = cm[(y + b_add) &amp;gt;&amp;gt; SCALEBITS];\&lt;/p>
&lt;p>681 }&lt;/p>
&lt;p>682&lt;/p>
&lt;p>683 #define YUV_TO_RGB1(cb1, cr1)\&lt;/p>
&lt;p>684 {\&lt;/p>
&lt;p>685 cb = (cb1) - 128;\&lt;/p>
&lt;p>686 cr = (cr1) - 128;\&lt;/p>
&lt;p>687 r_add = FIX(1.40200) * cr + ONE_HALF;\&lt;/p>
&lt;p>688 g_add = - FIX(0.34414) * cb - FIX(0.71414) * cr + ONE_HALF;\&lt;/p>
&lt;p>689 b_add = FIX(1.77200) * cb + ONE_HALF;\&lt;/p>
&lt;p>690 }&lt;/p>
&lt;p>691&lt;/p>
&lt;p>692 #define YUV_TO_RGB2(r, g, b, y1)\&lt;/p>
&lt;p>693 {\&lt;/p>
&lt;p>694 y = (y1) &amp;lt;&amp;lt; SCALEBITS;\&lt;/p>
&lt;p>695 r = cm[(y + r_add) &amp;gt;&amp;gt; SCALEBITS];\&lt;/p>
&lt;p>696 g = cm[(y + g_add) &amp;gt;&amp;gt; SCALEBITS];\&lt;/p>
&lt;p>697 b = cm[(y + b_add) &amp;gt;&amp;gt; SCALEBITS];!&lt;a href="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png">&lt;/a>&lt;/p>
&lt;p>698 }&lt;/p>
&lt;p>699&lt;/p>
&lt;p>700 #define Y_CCIR_TO_JPEG(y)\&lt;/p>
&lt;p>701 cm[((y) * FIX(255.0/219.0) + (ONE_HALF - 16 * FIX(255.0/219.0))) &amp;gt;&amp;gt; SCALEBITS]&lt;/p>
&lt;p>702&lt;/p>
&lt;p>703 #define Y_JPEG_TO_CCIR(y)\&lt;/p>
&lt;p>704 (((y) * FIX(219.0/255.0) + (ONE_HALF + (16 &amp;lt;&amp;lt; SCALEBITS))) &amp;gt;&amp;gt; SCALEBITS)&lt;/p>
&lt;p>705&lt;/p>
&lt;p>706 #define C_CCIR_TO_JPEG(y)\&lt;/p>
&lt;p>707 cm[(((y) - 128) * FIX(127.0/112.0) + (ONE_HALF + (128 &amp;lt;&amp;lt; SCALEBITS))) &amp;gt;&amp;gt; SCALEBITS]&lt;/p>
&lt;p>708&lt;/p>
&lt;p>709 /* NOTE: the clamp is really necessary! */&lt;/p>
&lt;p>710 static inline int C_JPEG_TO_CCIR(int y)&lt;/p>
&lt;p>711 {&lt;/p>
&lt;p>712 y = (((y - 128) *FIX(112.0 / 127.0) + (ONE_HALF + (128 &amp;lt;&amp;lt; SCALEBITS))) &amp;gt;&amp;gt; SCALEBITS);&lt;/p>
&lt;p>713 if (y &amp;lt; 16)&lt;/p>
&lt;p>714 y = 16;&lt;/p>
&lt;p>715 return y;&lt;/p>
&lt;p>716 }&lt;/p>
&lt;p>717&lt;/p>
&lt;p>718 #define RGB_TO_Y(r, g, b) \&lt;/p>
&lt;p>719 ((FIX(0.29900) * (r) + FIX(0.58700) * (g) + \&lt;/p>
&lt;p>720 FIX(0.11400) * (b) + ONE_HALF) &amp;gt;&amp;gt; SCALEBITS)&lt;/p>
&lt;p>721&lt;/p>
&lt;p>722 #define RGB_TO_U(r1, g1, b1, shift)\&lt;/p>
&lt;p>723 (((- FIX(0.16874) * r1 - FIX(0.33126) * g1 + \&lt;/p>
&lt;p>724 FIX(0.50000) * b1 + (ONE_HALF &amp;lt;&amp;lt; shift) - 1) &amp;gt;&amp;gt; (SCALEBITS + shift)) + 128)&lt;/p>
&lt;p>725&lt;/p>
&lt;p>726 #define RGB_TO_V(r1, g1, b1, shift)\&lt;/p>
&lt;p>727 (((FIX(0.50000) * r1 - FIX(0.41869) * g1 - \&lt;/p>
&lt;p>728 FIX(0.08131) * b1 + (ONE_HALF &amp;lt;&amp;lt; shift) - 1) &amp;gt;&amp;gt; (SCALEBITS + shift)) + 128)&lt;/p>
&lt;p>729&lt;/p>
&lt;p>730 #define RGB_TO_Y_CCIR(r, g, b) \&lt;/p>
&lt;p>731 ((FIX(0.29900*219.0/255.0) * (r) + FIX(0.58700*219.0/255.0) * (g) + \&lt;/p>
&lt;p>732 FIX(0.11400*219.0/255.0) * (b) + (ONE_HALF + (16 &amp;lt;&amp;lt; SCALEBITS))) &amp;gt;&amp;gt; SCALEBITS)&lt;/p>
&lt;p>733&lt;/p>
&lt;p>734 #define RGB_TO_U_CCIR(r1, g1, b1, shift)\&lt;/p>
&lt;p>735 (((- FIX(0.16874*224.0/255.0) * r1 - FIX(0.33126*224.0/255.0) * g1 + \&lt;/p>
&lt;p>736 FIX(0.50000*224.0/255.0) * b1 + (ONE_HALF &amp;lt;&amp;lt; shift) - 1) &amp;gt;&amp;gt; (SCALEBITS + shift)) + 128)&lt;/p>
&lt;p>737&lt;/p>
&lt;p>738 #define RGB_TO_V_CCIR(r1, g1, b1, shift)!&lt;a href="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png">&lt;/a>&lt;/p>
&lt;p>739 (((FIX(0.50000*224.0/255.0) * r1 - FIX(0.41869*224.0/255.0) * g1 - \&lt;/p>
&lt;p>740 FIX(0.08131*224.0/255.0) * b1 + (ONE_HALF &amp;lt;&amp;lt; shift) - 1) &amp;gt;&amp;gt; (SCALEBITS + shift)) + 128)&lt;/p>
&lt;p>741&lt;/p>
&lt;p>742 static uint8_t y_ccir_to_jpeg[256];&lt;/p>
&lt;p>743 static uint8_t y_jpeg_to_ccir[256];&lt;/p>
&lt;p>744 static uint8_t c_ccir_to_jpeg[256];&lt;/p>
&lt;p>745 static uint8_t c_jpeg_to_ccir[256];&lt;/p>
&lt;p>746&lt;/p>
&lt;p>747 /* apply to each pixel the given table */&lt;/p>
&lt;p>748 static void img_apply_table(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap,&lt;/p>
&lt;p>749 int width, int height, const uint8_t *table1)&lt;/p>
&lt;p>750 {&lt;/p>
&lt;p>751 int n;&lt;/p>
&lt;p>752 const uint8_t *s;&lt;/p>
&lt;p>753 uint8_t *d;&lt;/p>
&lt;p>754 const uint8_t *table;&lt;/p>
&lt;p>755&lt;/p>
&lt;p>756 table = table1;&lt;/p>
&lt;p>757 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>758 {&lt;/p>
&lt;p>759 s = src;&lt;/p>
&lt;p>760 d = dst;&lt;/p>
&lt;p>761 n = width;&lt;/p>
&lt;p>762 while (n &amp;gt;= 4)&lt;/p>
&lt;p>763 {&lt;/p>
&lt;p>764 d[0] = table[s[0]];&lt;/p>
&lt;p>765 d[1] = table[s[1]];&lt;/p>
&lt;p>766 d[2] = table[s[2]];&lt;/p>
&lt;p>767 d[3] = table[s[3]];&lt;/p>
&lt;p>768 d += 4;&lt;/p>
&lt;p>769 s += 4;&lt;/p>
&lt;p>770 n -= 4;&lt;/p>
&lt;p>771 }&lt;/p>
&lt;p>772 while (n &amp;gt; 0)&lt;/p>
&lt;p>773 {&lt;/p>
&lt;p>774 d[0] = table[s[0]];&lt;/p>
&lt;p>775 d++;&lt;/p>
&lt;p>776 s++;&lt;/p>
&lt;p>777 n--;&lt;/p>
&lt;p>778 }&lt;/p>
&lt;p>779 dst += dst_wrap;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>780 src += src_wrap;&lt;/p>
&lt;p>781 }&lt;/p>
&lt;p>782 }&lt;/p>
&lt;p>783&lt;/p>
&lt;p>784 /* XXX: use generic filter ? */&lt;/p>
&lt;p>785 /* XXX: in most cases, the sampling position is incorrect */&lt;/p>
&lt;p>786&lt;/p>
&lt;p>787 /* 4x1 -&amp;gt; 1x1 */&lt;/p>
&lt;p>788 static void shrink41(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>789 {&lt;/p>
&lt;p>790 int w;&lt;/p>
&lt;p>791 const uint8_t *s;&lt;/p>
&lt;p>792 uint8_t *d;&lt;/p>
&lt;p>793&lt;/p>
&lt;p>794 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>795 {&lt;/p>
&lt;p>796 s = src;&lt;/p>
&lt;p>797 d = dst;&lt;/p>
&lt;p>798 for (w = width; w &amp;gt; 0; w--)&lt;/p>
&lt;p>799 {&lt;/p>
&lt;p>800 d[0] = (s[0] + s[1] + s[2] + s[3] + 2) &amp;gt;&amp;gt; 2;&lt;/p>
&lt;p>801 s += 4;&lt;/p>
&lt;p>802 d++;&lt;/p>
&lt;p>803 }&lt;/p>
&lt;p>804 src += src_wrap;&lt;/p>
&lt;p>805 dst += dst_wrap;&lt;/p>
&lt;p>806 }&lt;/p>
&lt;p>807 }&lt;/p>
&lt;p>808&lt;/p>
&lt;p>809 /* 2x1 -&amp;gt; 1x1 */&lt;/p>
&lt;p>810 static void shrink21(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>811 {&lt;/p>
&lt;p>812 int w;&lt;/p>
&lt;p>813 const uint8_t *s;&lt;/p>
&lt;p>814 uint8_t *d;&lt;/p>
&lt;p>815&lt;/p>
&lt;p>816 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>817 {&lt;/p>
&lt;p>818 s = src;&lt;/p>
&lt;p>819 d = dst;&lt;/p>
&lt;p>820 for (w = width; w &amp;gt; 0; w--)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>821 {&lt;/p>
&lt;p>822 d[0] = (s[0] + s[1]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>823 s += 2;&lt;/p>
&lt;p>824 d++;&lt;/p>
&lt;p>825 }&lt;/p>
&lt;p>826 src += src_wrap;&lt;/p>
&lt;p>827 dst += dst_wrap;&lt;/p>
&lt;p>828 }&lt;/p>
&lt;p>829 }&lt;/p>
&lt;p>830&lt;/p>
&lt;p>831 /* 1x2 -&amp;gt; 1x1 */&lt;/p>
&lt;p>832 static void shrink12(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>833 {&lt;/p>
&lt;p>834 int w;&lt;/p>
&lt;p>835 uint8_t *d;&lt;/p>
&lt;p>836 const uint8_t *s1, *s2;&lt;/p>
&lt;p>837&lt;/p>
&lt;p>838 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>839 {&lt;/p>
&lt;p>840 s1 = src;&lt;/p>
&lt;p>841 s2 = s1 + src_wrap;&lt;/p>
&lt;p>842 d = dst;&lt;/p>
&lt;p>843 for (w = width; w &amp;gt;= 4; w -= 4)&lt;/p>
&lt;p>844 {&lt;/p>
&lt;p>845 d[0] = (s1[0] + s2[0]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>846 d[1] = (s1[1] + s2[1]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>847 d[2] = (s1[2] + s2[2]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>848 d[3] = (s1[3] + s2[3]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>849 s1 += 4;&lt;/p>
&lt;p>850 s2 += 4;&lt;/p>
&lt;p>851 d += 4;&lt;/p>
&lt;p>852 }&lt;/p>
&lt;p>853 for (; w &amp;gt; 0; w--)&lt;/p>
&lt;p>854 {&lt;/p>
&lt;p>855 d[0] = (s1[0] + s2[0]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>856 s1++;&lt;/p>
&lt;p>857 s2++;&lt;/p>
&lt;p>858 d++;&lt;/p>
&lt;p>859 }&lt;/p>
&lt;p>860 src += 2 * src_wrap;&lt;/p>
&lt;p>861 dst += dst_wrap;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>862 }&lt;/p>
&lt;p>863 }&lt;/p>
&lt;p>864&lt;/p>
&lt;p>865 /* 2x2 -&amp;gt; 1x1 */&lt;/p>
&lt;p>866 void ff_shrink22(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>867 {&lt;/p>
&lt;p>868 int w;&lt;/p>
&lt;p>869 const uint8_t *s1, *s2;&lt;/p>
&lt;p>870 uint8_t *d;&lt;/p>
&lt;p>871&lt;/p>
&lt;p>872 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>873 {&lt;/p>
&lt;p>874 s1 = src;&lt;/p>
&lt;p>875 s2 = s1 + src_wrap;&lt;/p>
&lt;p>876 d = dst;&lt;/p>
&lt;p>877 for (w = width; w &amp;gt;= 4; w -= 4)&lt;/p>
&lt;p>878 {&lt;/p>
&lt;p>879 d[0] = (s1[0] + s1[1] + s2[0] + s2[1] + 2) &amp;gt;&amp;gt; 2;&lt;/p>
&lt;p>880 d[1] = (s1[2] + s1[3] + s2[2] + s2[3] + 2) &amp;gt;&amp;gt; 2;&lt;/p>
&lt;p>881 d[2] = (s1[4] + s1[5] + s2[4] + s2[5] + 2) &amp;gt;&amp;gt; 2;&lt;/p>
&lt;p>882 d[3] = (s1[6] + s1[7] + s2[6] + s2[7] + 2) &amp;gt;&amp;gt; 2;&lt;/p>
&lt;p>883 s1 += 8;&lt;/p>
&lt;p>884 s2 += 8;&lt;/p>
&lt;p>885 d += 4;&lt;/p>
&lt;p>886 }&lt;/p>
&lt;p>887 for (; w &amp;gt; 0; w--)&lt;/p>
&lt;p>888 {&lt;/p>
&lt;p>889 d[0] = (s1[0] + s1[1] + s2[0] + s2[1] + 2) &amp;gt;&amp;gt; 2;&lt;/p>
&lt;p>890 s1 += 2;&lt;/p>
&lt;p>891 s2 += 2;&lt;/p>
&lt;p>892 d++;&lt;/p>
&lt;p>893 }&lt;/p>
&lt;p>894 src += 2 * src_wrap;&lt;/p>
&lt;p>895 dst += dst_wrap;&lt;/p>
&lt;p>896 }&lt;/p>
&lt;p>897 }&lt;/p>
&lt;p>898&lt;/p>
&lt;p>899 /* 4x4 -&amp;gt; 1x1 */&lt;/p>
&lt;p>900 void ff_shrink44(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>901 {&lt;/p>
&lt;p>902 int w;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>903 const uint8_t *s1, *s2, *s3, *s4;&lt;/p>
&lt;p>904 uint8_t *d;&lt;/p>
&lt;p>905&lt;/p>
&lt;p>906 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>907 {&lt;/p>
&lt;p>908 s1 = src;&lt;/p>
&lt;p>909 s2 = s1 + src_wrap;&lt;/p>
&lt;p>910 s3 = s2 + src_wrap;&lt;/p>
&lt;p>911 s4 = s3 + src_wrap;&lt;/p>
&lt;p>912 d = dst;&lt;/p>
&lt;p>913 for (w = width; w &amp;gt; 0; w--)&lt;/p>
&lt;p>914 {&lt;/p>
&lt;p>915 d[0] = (s1[0] + s1[1] + s1[2] + s1[3] + s2[0] + s2[1] + s2[2] + s2[3] +&lt;/p>
&lt;p>916 s3[0] + s3[1] + s3[2] + s3[3] + s4[0] + s4[1] + s4[2] + s4[3] + 8) &amp;gt;&amp;gt; 4;&lt;/p>
&lt;p>917 s1 += 4;&lt;/p>
&lt;p>918 s2 += 4;&lt;/p>
&lt;p>919 s3 += 4;&lt;/p>
&lt;p>920 s4 += 4;&lt;/p>
&lt;p>921 d++;&lt;/p>
&lt;p>922 }&lt;/p>
&lt;p>923 src += 4 * src_wrap;&lt;/p>
&lt;p>924 dst += dst_wrap;&lt;/p>
&lt;p>925 }&lt;/p>
&lt;p>926 }&lt;/p>
&lt;p>927&lt;/p>
&lt;p>928 static void grow21_line(uint8_t *dst, const uint8_t *src, int width)&lt;/p>
&lt;p>929 {&lt;/p>
&lt;p>930 int w;&lt;/p>
&lt;p>931 const uint8_t *s1;&lt;/p>
&lt;p>932 uint8_t *d;&lt;/p>
&lt;p>933&lt;/p>
&lt;p>934 s1 = src;&lt;/p>
&lt;p>935 d = dst;&lt;/p>
&lt;p>936 for (w = width; w &amp;gt;= 4; w -= 4)&lt;/p>
&lt;p>937 {&lt;/p>
&lt;p>938 d[1] = d[0] = s1[0];&lt;/p>
&lt;p>939 d[3] = d[2] = s1[1];&lt;/p>
&lt;p>940 s1 += 2;&lt;/p>
&lt;p>941 d += 4;&lt;/p>
&lt;p>942 }&lt;/p>
&lt;p>943 for (; w &amp;gt;= 2; w -= 2)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>944 {&lt;/p>
&lt;p>945 d[1] = d[0] = s1[0];&lt;/p>
&lt;p>946 s1++;&lt;/p>
&lt;p>947 d += 2;&lt;/p>
&lt;p>948 }&lt;/p>
&lt;p>949 /* only needed if width is not a multiple of two */&lt;/p>
&lt;p>950 /* XXX: veryfy that */&lt;/p>
&lt;p>951 if (w)&lt;/p>
&lt;p>952 {&lt;/p>
&lt;p>953 d[0] = s1[0];&lt;/p>
&lt;p>954 }&lt;/p>
&lt;p>955 }&lt;/p>
&lt;p>956&lt;/p>
&lt;p>957 static void grow41_line(uint8_t *dst, const uint8_t *src, int width)&lt;/p>
&lt;p>958 {&lt;/p>
&lt;p>959 int w, v;&lt;/p>
&lt;p>960 const uint8_t *s1;&lt;/p>
&lt;p>961 uint8_t *d;&lt;/p>
&lt;p>962&lt;/p>
&lt;p>963 s1 = src;&lt;/p>
&lt;p>964 d = dst;&lt;/p>
&lt;p>965 for (w = width; w &amp;gt;= 4; w -= 4)&lt;/p>
&lt;p>966 {&lt;/p>
&lt;p>967 v = s1[0];&lt;/p>
&lt;p>968 d[0] = v;&lt;/p>
&lt;p>969 d[1] = v;&lt;/p>
&lt;p>970 d[2] = v;&lt;/p>
&lt;p>971 d[3] = v;&lt;/p>
&lt;p>972 s1++;&lt;/p>
&lt;p>973 d += 4;&lt;/p>
&lt;p>974 }&lt;/p>
&lt;p>975 }&lt;/p>
&lt;p>976&lt;/p>
&lt;p>977 /* 1x1 -&amp;gt; 2x1 */&lt;/p>
&lt;p>978 static void grow21(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>979 {&lt;/p>
&lt;p>980 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>981 {&lt;/p>
&lt;p>982 grow21_line(dst, src, width);&lt;/p>
&lt;p>983 src += src_wrap;&lt;/p>
&lt;p>984 dst += dst_wrap;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>985 }&lt;/p>
&lt;p>986 }&lt;/p>
&lt;p>987&lt;/p>
&lt;p>988 /* 1x1 -&amp;gt; 2x2 */&lt;/p>
&lt;p>989 static void grow22(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>990 {&lt;/p>
&lt;p>991 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>992 {&lt;/p>
&lt;p>993 grow21_line(dst, src, width);&lt;/p>
&lt;p>994 if (height % 2)&lt;/p>
&lt;p>995 src += src_wrap;&lt;/p>
&lt;p>996 dst += dst_wrap;&lt;/p>
&lt;p>997 }&lt;/p>
&lt;p>998 }&lt;/p>
&lt;p>999&lt;/p>
&lt;p>1000 /* 1x1 -&amp;gt; 4x1 */&lt;/p>
&lt;p>1001 static void grow41(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>1002 {&lt;/p>
&lt;p>1003 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>1004 {&lt;/p>
&lt;p>1005 grow41_line(dst, src, width);&lt;/p>
&lt;p>1006 src += src_wrap;&lt;/p>
&lt;p>1007 dst += dst_wrap;&lt;/p>
&lt;p>1008 }&lt;/p>
&lt;p>1009 }&lt;/p>
&lt;p>1010&lt;/p>
&lt;p>1011 /* 1x1 -&amp;gt; 4x4 */&lt;/p>
&lt;p>1012 static void grow44(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>1013 {&lt;/p>
&lt;p>1014 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>1015 {&lt;/p>
&lt;p>1016 grow41_line(dst, src, width);&lt;/p>
&lt;p>1017 if ((height &amp;amp;3) == 1)&lt;/p>
&lt;p>1018 src += src_wrap;&lt;/p>
&lt;p>1019 dst += dst_wrap;&lt;/p>
&lt;p>1020 }&lt;/p>
&lt;p>1021 }&lt;/p>
&lt;p>1022&lt;/p>
&lt;p>1023 /* 1x2 -&amp;gt; 2x1 */&lt;/p>
&lt;p>1024 static void conv411(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap, int width, int height)&lt;/p>
&lt;p>1025 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1026 int w, c;&lt;/p>
&lt;p>1027 const uint8_t *s1, *s2;&lt;/p>
&lt;p>1028 uint8_t *d;&lt;/p>
&lt;p>1029&lt;/p>
&lt;p>1030 width &amp;gt;&amp;gt;= 1;&lt;/p>
&lt;p>1031&lt;/p>
&lt;p>1032 for (; height &amp;gt; 0; height--)&lt;/p>
&lt;p>1033 {&lt;/p>
&lt;p>1034 s1 = src;&lt;/p>
&lt;p>1035 s2 = src + src_wrap;&lt;/p>
&lt;p>1036 d = dst;&lt;/p>
&lt;p>1037 for (w = width; w &amp;gt; 0; w--)&lt;/p>
&lt;p>1038 {&lt;/p>
&lt;p>1039 c = (s1[0] + s2[0]) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>1040 d[0] = c;&lt;/p>
&lt;p>1041 d[1] = c;&lt;/p>
&lt;p>1042 s1++;&lt;/p>
&lt;p>1043 s2++;&lt;/p>
&lt;p>1044 d += 2;&lt;/p>
&lt;p>1045 }&lt;/p>
&lt;p>1046 src += src_wrap * 2;&lt;/p>
&lt;p>1047 dst += dst_wrap;&lt;/p>
&lt;p>1048 }&lt;/p>
&lt;p>1049 }&lt;/p>
&lt;p>1050&lt;/p>
&lt;p>1051 /* XXX: add jpeg quantize code */&lt;/p>
&lt;p>1052&lt;/p>
&lt;p>1053 #define TRANSP_INDEX (6*6*6)&lt;/p>
&lt;p>1054&lt;/p>
&lt;p>1055 /* this is maybe slow, but allows for extensions */&lt;/p>
&lt;p>1056 static inline unsigned char gif_clut_index(uint8_t r, uint8_t g, uint8_t b)&lt;/p>
&lt;p>1057 {&lt;/p>
&lt;p>1058 return ((((r) / 47) % 6) *6 * 6+(((g) / 47) % 6) *6+(((b) / 47) % 6));&lt;/p>
&lt;p>1059 }&lt;/p>
&lt;p>1060&lt;/p>
&lt;p>1061 static void build_rgb_palette(uint8_t *palette, int has_alpha)&lt;/p>
&lt;p>1062 {&lt;/p>
&lt;p>1063 uint32_t *pal;&lt;/p>
&lt;p>1064 static const uint8_t pal_value[6] = {0x00, 0x33, 0x66, 0x99, 0xcc, 0xff };&lt;/p>
&lt;p>1065 int i, r, g, b;&lt;/p>
&lt;p>1066&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1067 pal = (uint32_t*)palette;&lt;/p>
&lt;p>1068 i = 0;&lt;/p>
&lt;p>1069 for (r = 0; r &amp;lt; 6; r++)&lt;/p>
&lt;p>1070 {&lt;/p>
&lt;p>1071 for (g = 0; g &amp;lt; 6; g++)&lt;/p>
&lt;p>1072 {&lt;/p>
&lt;p>1073 for (b = 0; b &amp;lt; 6; b++)&lt;/p>
&lt;p>1074 {&lt;/p>
&lt;p>1075 pal[i++] = (0xff &amp;lt;&amp;lt; 24) | (pal_value[r] &amp;lt;&amp;lt; 16) | (pal_value[g] &amp;lt;&amp;lt; 8) | pal_value[b];&lt;/p>
&lt;p>1076 }&lt;/p>
&lt;p>1077 }&lt;/p>
&lt;p>1078 }&lt;/p>
&lt;p>1079 if (has_alpha)&lt;/p>
&lt;p>1080 pal[i++] = 0;&lt;/p>
&lt;p>1081 while (i &amp;lt; 256)&lt;/p>
&lt;p>1082 pal[i++] = 0xff000000;&lt;/p>
&lt;p>1083 }&lt;/p>
&lt;p>1084&lt;/p>
&lt;p>1085 /* copy bit n to bits 0 ... n - 1 */&lt;/p>
&lt;p>1086 static inline unsigned int bitcopy_n(unsigned int a, int n)&lt;/p>
&lt;p>1087 {&lt;/p>
&lt;p>1088 int mask;&lt;/p>
&lt;p>1089 mask = (1 &amp;lt;&amp;lt; n) - 1;&lt;/p>
&lt;p>1090 return (a &amp;amp;(0xff &amp;amp;~mask)) | (( - ((a &amp;gt;&amp;gt; n) &amp;amp;1)) &amp;amp;mask);&lt;/p>
&lt;p>1091 }&lt;/p>
&lt;p>1092&lt;/p>
&lt;p>1093 /* rgb555 handling */&lt;/p>
&lt;p>1094&lt;/p>
&lt;p>1095 #define RGB_NAME rgb555&lt;/p>
&lt;p>1096&lt;/p>
&lt;p>1097 #define RGB_IN(r, g, b, s)\&lt;/p>
&lt;p>1098 {\&lt;/p>
&lt;p>1099 unsigned int v = ((const uint16_t *)(s))[0];\&lt;/p>
&lt;p>1100 r = bitcopy_n(v &amp;gt;&amp;gt; (10 - 3), 3);\&lt;/p>
&lt;p>1101 g = bitcopy_n(v &amp;gt;&amp;gt; (5 - 3), 3);\&lt;/p>
&lt;p>1102 b = bitcopy_n(v &amp;lt;&amp;lt; 3, 3);\&lt;/p>
&lt;p>1103 }&lt;/p>
&lt;p>1104&lt;/p>
&lt;p>1105 #define RGBA_IN(r, g, b, a, s)\&lt;/p>
&lt;p>1106 {\&lt;/p>
&lt;p>1107 unsigned int v = ((const uint16_t *)(s))[0];!&lt;a href="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png">&lt;/a>&lt;/p>
&lt;p>1108 r = bitcopy_n(v &amp;gt;&amp;gt; (10 - 3), 3);\&lt;/p>
&lt;p>1109 g = bitcopy_n(v &amp;gt;&amp;gt; (5 - 3), 3);\&lt;/p>
&lt;p>1110 b = bitcopy_n(v &amp;lt;&amp;lt; 3, 3);\&lt;/p>
&lt;p>1111 a = (-(v &amp;gt;&amp;gt; 15)) &amp;amp; 0xff;\&lt;/p>
&lt;p>1112 }&lt;/p>
&lt;p>1113&lt;/p>
&lt;p>1114 #define RGBA_OUT(d, r, g, b, a)\&lt;/p>
&lt;p>1115 {\&lt;/p>
&lt;p>1116 ((uint16_t *)(d))[0] = ((r &amp;gt;&amp;gt; 3) &amp;lt;&amp;lt; 10) | ((g &amp;gt;&amp;gt; 3) &amp;lt;&amp;lt; 5) | (b &amp;gt;&amp;gt; 3) | \&lt;/p>
&lt;p>1117 ((a &amp;lt;&amp;lt; 8) &amp;amp; 0x8000);\&lt;/p>
&lt;p>1118 }&lt;/p>
&lt;p>1119&lt;/p>
&lt;p>1120 #define BPP 2&lt;/p>
&lt;p>1121&lt;/p>
&lt;p>1122 #include &amp;quot;imgconvert_template.h&amp;quot;&lt;/p>
&lt;p>1123&lt;/p>
&lt;p>1124 /* rgb565 handling */&lt;/p>
&lt;p>1125&lt;/p>
&lt;p>1126 #define RGB_NAME rgb565&lt;/p>
&lt;p>1127&lt;/p>
&lt;p>1128 #define RGB_IN(r, g, b, s)\&lt;/p>
&lt;p>1129 {\&lt;/p>
&lt;p>1130 unsigned int v = ((const uint16_t *)(s))[0];\&lt;/p>
&lt;p>1131 r = bitcopy_n(v &amp;gt;&amp;gt; (11 - 3), 3);\&lt;/p>
&lt;p>1132 g = bitcopy_n(v &amp;gt;&amp;gt; (5 - 2), 2);\&lt;/p>
&lt;p>1133 b = bitcopy_n(v &amp;lt;&amp;lt; 3, 3);\&lt;/p>
&lt;p>1134 }&lt;/p>
&lt;p>1135&lt;/p>
&lt;p>1136 #define RGB_OUT(d, r, g, b)\&lt;/p>
&lt;p>1137 {\&lt;/p>
&lt;p>1138 ((uint16_t *)(d))[0] = ((r &amp;gt;&amp;gt; 3) &amp;lt;&amp;lt; 11) | ((g &amp;gt;&amp;gt; 2) &amp;lt;&amp;lt; 5) | (b &amp;gt;&amp;gt; 3);\&lt;/p>
&lt;p>1139 }&lt;/p>
&lt;p>1140&lt;/p>
&lt;p>1141 #define BPP 2&lt;/p>
&lt;p>1142&lt;/p>
&lt;p>1143 #include &amp;quot;imgconvert_template.h&amp;quot;&lt;/p>
&lt;p>1144&lt;/p>
&lt;p>1145 /* bgr24 handling */&lt;/p>
&lt;p>1146&lt;/p>
&lt;p>1147 #define RGB_NAME bgr24&lt;/p>
&lt;p>1148&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1149 #define RGB_IN(r, g, b, s)\&lt;/p>
&lt;p>1150 {\&lt;/p>
&lt;p>1151 b = (s)[0];\&lt;/p>
&lt;p>1152 g = (s)[1];\&lt;/p>
&lt;p>1153 r = (s)[2];\&lt;/p>
&lt;p>1154 }&lt;/p>
&lt;p>1155&lt;/p>
&lt;p>1156 #define RGB_OUT(d, r, g, b)\&lt;/p>
&lt;p>1157 {\&lt;/p>
&lt;p>1158 (d)[0] = b;\&lt;/p>
&lt;p>1159 (d)[1] = g;\&lt;/p>
&lt;p>1160 (d)[2] = r;\&lt;/p>
&lt;p>1161 }&lt;/p>
&lt;p>1162&lt;/p>
&lt;p>1163 #define BPP 3&lt;/p>
&lt;p>1164&lt;/p>
&lt;p>1165 #include &amp;quot;imgconvert_template.h&amp;quot;&lt;/p>
&lt;p>1166&lt;/p>
&lt;p>1167 #undef RGB_IN&lt;/p>
&lt;p>1168 #undef RGB_OUT&lt;/p>
&lt;p>1169 #undef BPP&lt;/p>
&lt;p>1170&lt;/p>
&lt;p>1171 /* rgb24 handling */&lt;/p>
&lt;p>1172&lt;/p>
&lt;p>1173 #define RGB_NAME rgb24&lt;/p>
&lt;p>1174 #define FMT_RGB24&lt;/p>
&lt;p>1175&lt;/p>
&lt;p>1176 #define RGB_IN(r, g, b, s)\&lt;/p>
&lt;p>1177 {\&lt;/p>
&lt;p>1178 r = (s)[0];\&lt;/p>
&lt;p>1179 g = (s)[1];\&lt;/p>
&lt;p>1180 b = (s)[2];\&lt;/p>
&lt;p>1181 }&lt;/p>
&lt;p>1182&lt;/p>
&lt;p>1183 #define RGB_OUT(d, r, g, b)\&lt;/p>
&lt;p>1184 {\&lt;/p>
&lt;p>1185 (d)[0] = r;\&lt;/p>
&lt;p>1186 (d)[1] = g;\&lt;/p>
&lt;p>1187 (d)[2] = b;\&lt;/p>
&lt;p>1188 }&lt;/p>
&lt;p>1189&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1190 #define BPP 3&lt;/p>
&lt;p>1191&lt;/p>
&lt;p>1192 #include &amp;quot;imgconvert_template.h&amp;quot;&lt;/p>
&lt;p>1193&lt;/p>
&lt;p>1194 /* rgba32 handling */&lt;/p>
&lt;p>1195&lt;/p>
&lt;p>1196 #define RGB_NAME rgba32&lt;/p>
&lt;p>1197 #define FMT_RGBA32&lt;/p>
&lt;p>1198&lt;/p>
&lt;p>1199 #define RGB_IN(r, g, b, s)\&lt;/p>
&lt;p>1200 {\&lt;/p>
&lt;p>1201 unsigned int v = ((const uint32_t *)(s))[0];\&lt;/p>
&lt;p>1202 r = (v &amp;gt;&amp;gt; 16) &amp;amp; 0xff;\&lt;/p>
&lt;p>1203 g = (v &amp;gt;&amp;gt; 8) &amp;amp; 0xff;\&lt;/p>
&lt;p>1204 b = v &amp;amp; 0xff;\&lt;/p>
&lt;p>1205 }&lt;/p>
&lt;p>1206&lt;/p>
&lt;p>1207 #define RGBA_IN(r, g, b, a, s)\&lt;/p>
&lt;p>1208 {\&lt;/p>
&lt;p>1209 unsigned int v = ((const uint32_t *)(s))[0];\&lt;/p>
&lt;p>1210 a = (v &amp;gt;&amp;gt; 24) &amp;amp; 0xff;\&lt;/p>
&lt;p>1211 r = (v &amp;gt;&amp;gt; 16) &amp;amp; 0xff;\&lt;/p>
&lt;p>1212 g = (v &amp;gt;&amp;gt; 8) &amp;amp; 0xff;\&lt;/p>
&lt;p>1213 b = v &amp;amp; 0xff;\&lt;/p>
&lt;p>1214 }&lt;/p>
&lt;p>1215&lt;/p>
&lt;p>1216 #define RGBA_OUT(d, r, g, b, a)\&lt;/p>
&lt;p>1217 {\&lt;/p>
&lt;p>1218 ((uint32_t *)(d))[0] = (a &amp;lt;&amp;lt; 24) | (r &amp;lt;&amp;lt; 16) | (g &amp;lt;&amp;lt; 8) | b;\&lt;/p>
&lt;p>1219 }&lt;/p>
&lt;p>1220&lt;/p>
&lt;p>1221 #define BPP 4&lt;/p>
&lt;p>1222&lt;/p>
&lt;p>1223 #include &amp;quot;imgconvert_template.h&amp;quot;&lt;/p>
&lt;p>1224&lt;/p>
&lt;p>1225 static void mono_to_gray(AVPicture *dst, const AVPicture *src, int width, int height, int xor_mask)&lt;/p>
&lt;p>1226 {&lt;/p>
&lt;p>1227 const unsigned char *p;&lt;/p>
&lt;p>1228 unsigned char *q;&lt;/p>
&lt;p>1229 int v, dst_wrap, src_wrap;&lt;/p>
&lt;p>1230 int y, w;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1231&lt;/p>
&lt;p>1232 p = src-&amp;gt;data[0];&lt;/p>
&lt;p>1233 src_wrap = src-&amp;gt;linesize[0] - ((width + 7) &amp;gt;&amp;gt; 3);&lt;/p>
&lt;p>1234&lt;/p>
&lt;p>1235 q = dst-&amp;gt;data[0];&lt;/p>
&lt;p>1236 dst_wrap = dst-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>1237 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>1238 {&lt;/p>
&lt;p>1239 w = width;&lt;/p>
&lt;p>1240 while (w &amp;gt;= 8)&lt;/p>
&lt;p>1241 {&lt;/p>
&lt;p>1242 v = *p++ ^ xor_mask;&lt;/p>
&lt;p>1243 q[0] = - (v &amp;gt;&amp;gt; 7);&lt;/p>
&lt;p>1244 q[1] = - ((v &amp;gt;&amp;gt; 6) &amp;amp;1);&lt;/p>
&lt;p>1245 q[2] = - ((v &amp;gt;&amp;gt; 5) &amp;amp;1);&lt;/p>
&lt;p>1246 q[3] = - ((v &amp;gt;&amp;gt; 4) &amp;amp;1);&lt;/p>
&lt;p>1247 q[4] = - ((v &amp;gt;&amp;gt; 3) &amp;amp;1);&lt;/p>
&lt;p>1248 q[5] = - ((v &amp;gt;&amp;gt; 2) &amp;amp;1);&lt;/p>
&lt;p>1249 q[6] = - ((v &amp;gt;&amp;gt; 1) &amp;amp;1);&lt;/p>
&lt;p>1250 q[7] = - ((v &amp;gt;&amp;gt; 0) &amp;amp;1);&lt;/p>
&lt;p>1251 w -= 8;&lt;/p>
&lt;p>1252 q += 8;&lt;/p>
&lt;p>1253 }&lt;/p>
&lt;p>1254 if (w &amp;gt; 0)&lt;/p>
&lt;p>1255 {&lt;/p>
&lt;p>1256 v = *p++ ^ xor_mask;&lt;/p>
&lt;p>1257 do&lt;/p>
&lt;p>1258 {&lt;/p>
&lt;p>1259 q[0] = - ((v &amp;gt;&amp;gt; 7) &amp;amp;1);&lt;/p>
&lt;p>1260 q++;&lt;/p>
&lt;p>1261 v &amp;lt;&amp;lt;= 1;&lt;/p>
&lt;p>1262 }&lt;/p>
&lt;p>1263 while (--w);&lt;/p>
&lt;p>1264 }&lt;/p>
&lt;p>1265 p += src_wrap;&lt;/p>
&lt;p>1266 q += dst_wrap;&lt;/p>
&lt;p>1267 }&lt;/p>
&lt;p>1268 }&lt;/p>
&lt;p>1269&lt;/p>
&lt;p>1270 static void monowhite_to_gray(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>1271 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1272 mono_to_gray(dst, src, width, height, 0xff);&lt;/p>
&lt;p>1273 }&lt;/p>
&lt;p>1274&lt;/p>
&lt;p>1275 static void monoblack_to_gray(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>1276 {&lt;/p>
&lt;p>1277 mono_to_gray(dst, src, width, height, 0x00);&lt;/p>
&lt;p>1278 }&lt;/p>
&lt;p>1279&lt;/p>
&lt;p>1280 static void gray_to_mono(AVPicture *dst, const AVPicture *src, int width, int height, int xor_mask)&lt;/p>
&lt;p>1281 {&lt;/p>
&lt;p>1282 int n;&lt;/p>
&lt;p>1283 const uint8_t *s;&lt;/p>
&lt;p>1284 uint8_t *d;&lt;/p>
&lt;p>1285 int j, b, v, n1, src_wrap, dst_wrap, y;&lt;/p>
&lt;p>1286&lt;/p>
&lt;p>1287 s = src-&amp;gt;data[0];&lt;/p>
&lt;p>1288 src_wrap = src-&amp;gt;linesize[0] - width;&lt;/p>
&lt;p>1289&lt;/p>
&lt;p>1290 d = dst-&amp;gt;data[0];&lt;/p>
&lt;p>1291 dst_wrap = dst-&amp;gt;linesize[0] - ((width + 7) &amp;gt;&amp;gt; 3);&lt;/p>
&lt;p>1292&lt;/p>
&lt;p>1293 for (y = 0; y &amp;lt; height; y++)&lt;/p>
&lt;p>1294 {&lt;/p>
&lt;p>1295 n = width;&lt;/p>
&lt;p>1296 while (n &amp;gt;= 8)&lt;/p>
&lt;p>1297 {&lt;/p>
&lt;p>1298 v = 0;&lt;/p>
&lt;p>1299 for (j = 0; j &amp;lt; 8; j++)&lt;/p>
&lt;p>1300 {&lt;/p>
&lt;p>1301 b = s[0];&lt;/p>
&lt;p>1302 s++;&lt;/p>
&lt;p>1303 v = (v &amp;lt;&amp;lt; 1) | (b &amp;gt;&amp;gt; 7);&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>1304&lt;/th>
&lt;th>&lt;/th>
&lt;th>}&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1305&lt;/td>
&lt;td>&lt;/td>
&lt;td>d[0] = v ^ xor_mask;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1306&lt;/td>
&lt;td>&lt;/td>
&lt;td>d++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1307&lt;/td>
&lt;td>&lt;/td>
&lt;td>n -= 8;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1308&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1309 if (n &amp;gt; 0)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1310&lt;/td>
&lt;td>{&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1311&lt;/td>
&lt;td>&lt;/td>
&lt;td>n1 = n;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1312&lt;/td>
&lt;td>&lt;/td>
&lt;td>v = 0;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>1313&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;th>while (n &amp;gt; 0)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1314&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>{&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1315&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>b = s[0];&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1316&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>s++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1317&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>v = (v &amp;lt;&amp;lt; 1)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1318&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>n--;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1319&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1320&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>d[0] = (v &amp;lt;&amp;lt; (8-(n1 &amp;amp;7))) ^ xor_mask;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1321&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>d++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1322&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1323&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>s += src_wrap;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1324&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>d += dst_wrap;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1325&lt;/td>
&lt;td>&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1326&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1327&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1328 static void gray_to_monowhite(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>1329 {&lt;/p>
&lt;p>1330 gray_to_mono(dst, src, width, height, 0xff);&lt;/p>
&lt;p>1331 }&lt;/p>
&lt;p>1332&lt;/p>
&lt;p>1333 static void gray_to_monoblack(AVPicture *dst, const AVPicture *src, int width, int height)&lt;/p>
&lt;p>1334 {&lt;/p>
&lt;p>1335 gray_to_mono(dst, src, width, height, 0x00);&lt;/p>
&lt;p>1336 }&lt;/p>
&lt;p>1337&lt;/p>
&lt;p>1338 typedef struct ConvertEntry&lt;/p>
&lt;p>1339 {&lt;/p>
&lt;p>1340 void(*convert)(AVPicture *dst, const AVPicture *src, int width, int height);&lt;/p>
&lt;p>1341 } ConvertEntry;&lt;/p>
&lt;p>1342&lt;/p>
&lt;p>1343 /* Add each new convertion function in this table. In order to be able&lt;/p>
&lt;p>1344 to convert from any format to any format, the following constraints must be satisfied:&lt;/p>
&lt;p>1345&lt;/p>
&lt;p>1346 - all FF_COLOR_RGB formats must convert to and from PIX_FMT_RGB24&lt;/p>
&lt;p>1347&lt;/p>
&lt;p>1348 - all FF_COLOR_GRAY formats must convert to and from PIX_FMT_GRAY8&lt;/p>
&lt;p>1349&lt;/p>
&lt;p>1350 - all FF_COLOR_RGB formats with alpha must convert to and from PIX_FMT_RGBA32&lt;/p>
&lt;p>1351&lt;/p>
&lt;p>1352 - PIX_FMT_YUV444P and PIX_FMT_YUVJ444P must convert to and from PIX_FMT_RGB24.&lt;/p>
&lt;p>1353&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1354 - PIX_FMT_422 must convert to and from PIX_FMT_422P.&lt;/p>
&lt;p>1355&lt;/p>
&lt;p>1356 The other conversion functions are just optimisations for common cases.&lt;/p>
&lt;p>1357 */&lt;/p>
&lt;p>1358&lt;/p>
&lt;p>1359 static ConvertEntry convert_table[PIX_FMT_NB][PIX_FMT_NB];&lt;/p>
&lt;p>1360&lt;/p>
&lt;p>1361 static void img_convert_init(void)&lt;/p>
&lt;p>1362 {&lt;/p>
&lt;p>1363 int i;&lt;/p>
&lt;p>1364 uint8_t *cm = cropTbl + MAX_NEG_CROP;&lt;/p>
&lt;p>1365&lt;/p>
&lt;p>1366 for (i = 0; i &amp;lt; 256; i++)&lt;/p>
&lt;p>1367 {&lt;/p>
&lt;p>1368 y_ccir_to_jpeg[i] = Y_CCIR_TO_JPEG(i);&lt;/p>
&lt;p>1369 y_jpeg_to_ccir[i] = Y_JPEG_TO_CCIR(i);&lt;/p>
&lt;p>1370 c_ccir_to_jpeg[i] = C_CCIR_TO_JPEG(i);&lt;/p>
&lt;p>1371 c_jpeg_to_ccir[i] = C_JPEG_TO_CCIR(i);&lt;/p>
&lt;p>1372 }&lt;/p>
&lt;p>1373&lt;/p>
&lt;p>1374 convert_table[PIX_FMT_YUV420P][PIX_FMT_YUV422].convert = yuv420p_to_yuv422;&lt;/p>
&lt;p>1375 convert_table[PIX_FMT_YUV420P][PIX_FMT_YUV422].convert = yuv420p_to_yuv422;&lt;/p>
&lt;p>1376 convert_table[PIX_FMT_YUV420P][PIX_FMT_RGB555].convert = yuv420p_to_rgb555;&lt;/p>
&lt;p>1377 convert_table[PIX_FMT_YUV420P][PIX_FMT_RGB565].convert = yuv420p_to_rgb565;&lt;/p>
&lt;p>1378 convert_table[PIX_FMT_YUV420P][PIX_FMT_BGR24].convert = yuv420p_to_bgr24;&lt;/p>
&lt;p>1379 convert_table[PIX_FMT_YUV420P][PIX_FMT_RGB24].convert = yuv420p_to_rgb24;&lt;/p>
&lt;p>1380 convert_table[PIX_FMT_YUV420P][PIX_FMT_RGBA32].convert = yuv420p_to_rgba32;&lt;/p>
&lt;p>1381 convert_table[PIX_FMT_YUV420P][PIX_FMT_UYVY422].convert = yuv420p_to_uyvy422;&lt;/p>
&lt;p>1382&lt;/p>
&lt;p>1383 convert_table[PIX_FMT_YUV422P][PIX_FMT_YUV422].convert = yuv422p_to_yuv422;&lt;/p>
&lt;p>1384 convert_table[PIX_FMT_YUV422P][PIX_FMT_UYVY422].convert = yuv422p_to_uyvy422;&lt;/p>
&lt;p>1385&lt;/p>
&lt;p>1386 convert_table[PIX_FMT_YUV444P][PIX_FMT_RGB24].convert = yuv444p_to_rgb24;&lt;/p>
&lt;p>1387&lt;/p>
&lt;p>1388 convert_table[PIX_FMT_YUVJ420P][PIX_FMT_RGB555].convert = yuvj420p_to_rgb555;&lt;/p>
&lt;p>1389 convert_table[PIX_FMT_YUVJ420P][PIX_FMT_RGB565].convert = yuvj420p_to_rgb565;&lt;/p>
&lt;p>1390 convert_table[PIX_FMT_YUVJ420P][PIX_FMT_BGR24].convert = yuvj420p_to_bgr24;&lt;/p>
&lt;p>1391 convert_table[PIX_FMT_YUVJ420P][PIX_FMT_RGB24].convert = yuvj420p_to_rgb24;&lt;/p>
&lt;p>1392 convert_table[PIX_FMT_YUVJ420P][PIX_FMT_RGBA32].convert = yuvj420p_to_rgba32;&lt;/p>
&lt;p>1393&lt;/p>
&lt;p>1394 convert_table[PIX_FMT_YUVJ444P][PIX_FMT_RGB24].convert = yuvj444p_to_rgb24;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1395&lt;/p>
&lt;p>1396 convert_table[PIX_FMT_YUV422][PIX_FMT_YUV420P].convert = yuv422_to_yuv420p;&lt;/p>
&lt;p>1397 convert_table[PIX_FMT_YUV422][PIX_FMT_YUV422P].convert = yuv422_to_yuv422p;&lt;/p>
&lt;p>1398&lt;/p>
&lt;p>1399 convert_table[PIX_FMT_UYVY422][PIX_FMT_YUV420P].convert = uyvy422_to_yuv420p;&lt;/p>
&lt;p>1400 convert_table[PIX_FMT_UYVY422][PIX_FMT_YUV422P].convert = uyvy422_to_yuv422p;&lt;/p>
&lt;p>1401&lt;/p>
&lt;p>1402 convert_table[PIX_FMT_RGB24][PIX_FMT_YUV420P].convert = rgb24_to_yuv420p;&lt;/p>
&lt;p>1403 convert_table[PIX_FMT_RGB24][PIX_FMT_RGB565].convert = rgb24_to_rgb565;&lt;/p>
&lt;p>1404 convert_table[PIX_FMT_RGB24][PIX_FMT_RGB555].convert = rgb24_to_rgb555;&lt;/p>
&lt;p>1405 convert_table[PIX_FMT_RGB24][PIX_FMT_RGBA32].convert = rgb24_to_rgba32;&lt;/p>
&lt;p>1406 convert_table[PIX_FMT_RGB24][PIX_FMT_BGR24].convert = rgb24_to_bgr24;&lt;/p>
&lt;p>1407 convert_table[PIX_FMT_RGB24][PIX_FMT_GRAY8].convert = rgb24_to_gray;&lt;/p>
&lt;p>1408 convert_table[PIX_FMT_RGB24][PIX_FMT_PAL8].convert = rgb24_to_pal8;&lt;/p>
&lt;p>1409 convert_table[PIX_FMT_RGB24][PIX_FMT_YUV444P].convert = rgb24_to_yuv444p;&lt;/p>
&lt;p>1410 convert_table[PIX_FMT_RGB24][PIX_FMT_YUVJ420P].convert = rgb24_to_yuvj420p;&lt;/p>
&lt;p>1411 convert_table[PIX_FMT_RGB24][PIX_FMT_YUVJ444P].convert = rgb24_to_yuvj444p;&lt;/p>
&lt;p>1412&lt;/p>
&lt;p>1413 convert_table[PIX_FMT_RGBA32][PIX_FMT_RGB24].convert = rgba32_to_rgb24;&lt;/p>
&lt;p>1414 convert_table[PIX_FMT_RGBA32][PIX_FMT_RGB555].convert = rgba32_to_rgb555;&lt;/p>
&lt;p>1415 convert_table[PIX_FMT_RGBA32][PIX_FMT_PAL8].convert = rgba32_to_pal8;&lt;/p>
&lt;p>1416 convert_table[PIX_FMT_RGBA32][PIX_FMT_YUV420P].convert = rgba32_to_yuv420p;&lt;/p>
&lt;p>1417 convert_table[PIX_FMT_RGBA32][PIX_FMT_GRAY8].convert = rgba32_to_gray;&lt;/p>
&lt;p>1418&lt;/p>
&lt;p>1419 convert_table[PIX_FMT_BGR24][PIX_FMT_RGB24].convert = bgr24_to_rgb24;&lt;/p>
&lt;p>1420 convert_table[PIX_FMT_BGR24][PIX_FMT_YUV420P].convert = bgr24_to_yuv420p;&lt;/p>
&lt;p>1421 convert_table[PIX_FMT_BGR24][PIX_FMT_GRAY8].convert = bgr24_to_gray;&lt;/p>
&lt;p>1422&lt;/p>
&lt;p>1423 convert_table[PIX_FMT_RGB555][PIX_FMT_RGB24].convert = rgb555_to_rgb24;&lt;/p>
&lt;p>1424 convert_table[PIX_FMT_RGB555][PIX_FMT_RGBA32].convert = rgb555_to_rgba32;&lt;/p>
&lt;p>1425 convert_table[PIX_FMT_RGB555][PIX_FMT_YUV420P].convert = rgb555_to_yuv420p;&lt;/p>
&lt;p>1426 convert_table[PIX_FMT_RGB555][PIX_FMT_GRAY8].convert = rgb555_to_gray;&lt;/p>
&lt;p>1427&lt;/p>
&lt;p>1428 convert_table[PIX_FMT_RGB565][PIX_FMT_RGB24].convert = rgb565_to_rgb24;&lt;/p>
&lt;p>1429 convert_table[PIX_FMT_RGB565][PIX_FMT_YUV420P].convert = rgb565_to_yuv420p;&lt;/p>
&lt;p>1430 convert_table[PIX_FMT_RGB565][PIX_FMT_GRAY8].convert = rgb565_to_gray;&lt;/p>
&lt;p>1431&lt;/p>
&lt;p>1432 convert_table[PIX_FMT_GRAY8][PIX_FMT_RGB555].convert = gray_to_rgb555;&lt;/p>
&lt;p>1433 convert_table[PIX_FMT_GRAY8][PIX_FMT_RGB565].convert = gray_to_rgb565;&lt;/p>
&lt;p>1434 convert_table[PIX_FMT_GRAY8][PIX_FMT_RGB24].convert = gray_to_rgb24;&lt;/p>
&lt;p>1435 convert_table[PIX_FMT_GRAY8][PIX_FMT_BGR24].convert = gray_to_bgr24;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1436 convert_table[PIX_FMT_GRAY8][PIX_FMT_RGBA32].convert = gray_to_rgba32;&lt;/p>
&lt;p>1437 convert_table[PIX_FMT_GRAY8][PIX_FMT_MONOWHITE].convert = gray_to_monowhite;&lt;/p>
&lt;p>1438 convert_table[PIX_FMT_GRAY8][PIX_FMT_MONOBLACK].convert = gray_to_monoblack;&lt;/p>
&lt;p>1439&lt;/p>
&lt;p>1440 convert_table[PIX_FMT_MONOWHITE][PIX_FMT_GRAY8].convert = monowhite_to_gray;&lt;/p>
&lt;p>1441&lt;/p>
&lt;p>1442 convert_table[PIX_FMT_MONOBLACK][PIX_FMT_GRAY8].convert = monoblack_to_gray;&lt;/p>
&lt;p>1443&lt;/p>
&lt;p>1444 convert_table[PIX_FMT_PAL8][PIX_FMT_RGB555].convert = pal8_to_rgb555;&lt;/p>
&lt;p>1445 convert_table[PIX_FMT_PAL8][PIX_FMT_RGB565].convert = pal8_to_rgb565;&lt;/p>
&lt;p>1446 convert_table[PIX_FMT_PAL8][PIX_FMT_BGR24].convert = pal8_to_bgr24;&lt;/p>
&lt;p>1447 convert_table[PIX_FMT_PAL8][PIX_FMT_RGB24].convert = pal8_to_rgb24;&lt;/p>
&lt;p>1448 convert_table[PIX_FMT_PAL8][PIX_FMT_RGBA32].convert = pal8_to_rgba32;&lt;/p>
&lt;p>1449&lt;/p>
&lt;p>1450 convert_table[PIX_FMT_UYVY411][PIX_FMT_YUV411P].convert = uyvy411_to_yuv411p;&lt;/p>
&lt;p>1451 }&lt;/p>
&lt;p>1452&lt;/p>
&lt;p>1453 static inline int is_yuv_planar(PixFmtInfo *ps)&lt;/p>
&lt;p>1454 {&lt;/p>
&lt;p>1455 return (ps-&amp;gt;color_type == FF_COLOR_YUV || ps-&amp;gt;color_type == FF_COLOR_YUV_JPEG)&lt;/p>
&lt;p>1456 &amp;amp;&amp;amp; ps-&amp;gt;pixel_type == FF_PIXEL_PLANAR;&lt;/p>
&lt;p>1457 }&lt;/p>
&lt;p>1458&lt;/p>
&lt;p>1459 int img_convert(AVPicture *dst, int dst_pix_fmt, const AVPicture *src, int src_pix_fmt,&lt;/p>
&lt;p>1460 int src_width, int src_height)&lt;/p>
&lt;p>1461 {&lt;/p>
&lt;p>1462 static int inited;&lt;/p>
&lt;p>1463 int i, ret, dst_width, dst_height, int_pix_fmt;&lt;/p>
&lt;p>1464 PixFmtInfo *src_pix, *dst_pix;&lt;/p>
&lt;p>1465 ConvertEntry *ce;&lt;/p>
&lt;p>1466 AVPicture tmp1, *tmp = &amp;amp;tmp1;&lt;/p>
&lt;p>1467&lt;/p>
&lt;p>1468 if (src_pix_fmt &amp;lt; 0 || src_pix_fmt &amp;gt;= PIX_FMT_NB || dst_pix_fmt &amp;lt; 0 || dst_pix_fmt &amp;gt;= PIX_FMT_NB)&lt;/p>
&lt;p>1469 return - 1;&lt;/p>
&lt;p>1470&lt;/p>
&lt;p>1471 if (src_width &amp;lt;= 0 || src_height &amp;lt;= 0)&lt;/p>
&lt;p>1472 return 0;&lt;/p>
&lt;p>1473&lt;/p>
&lt;p>1474 if (!inited)&lt;/p>
&lt;p>1475 {&lt;/p>
&lt;p>1476 inited = 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1477 img_convert_init();&lt;/p>
&lt;p>1478 }&lt;/p>
&lt;p>1479&lt;/p>
&lt;p>1480 dst_width = src_width;&lt;/p>
&lt;p>1481 dst_height = src_height;&lt;/p>
&lt;p>1482&lt;/p>
&lt;p>1483 dst_pix = &amp;amp;pix_fmt_info[dst_pix_fmt];&lt;/p>
&lt;p>1484 src_pix = &amp;amp;pix_fmt_info[src_pix_fmt];&lt;/p>
&lt;p>1485&lt;/p>
&lt;p>1486 if (src_pix_fmt == dst_pix_fmt) // no conversion needed: just copy&lt;/p>
&lt;p>1487 {&lt;/p>
&lt;p>1488 img_copy(dst, src, dst_pix_fmt, dst_width, dst_height);&lt;/p>
&lt;p>1489 return 0;&lt;/p>
&lt;p>1490 }&lt;/p>
&lt;p>1491&lt;/p>
&lt;p>1492 ce = &amp;amp;convert_table[src_pix_fmt][dst_pix_fmt];&lt;/p>
&lt;p>1493 if (ce-&amp;gt;convert)&lt;/p>
&lt;p>1494 {&lt;/p>
&lt;p>1495 ce-&amp;gt;convert(dst, src, dst_width, dst_height); // specific conversion routine&lt;/p>
&lt;p>1496 return 0;&lt;/p>
&lt;p>1497 }&lt;/p>
&lt;p>1498&lt;/p>
&lt;p>1499 if (is_yuv_planar(dst_pix) &amp;amp;&amp;amp; src_pix_fmt == PIX_FMT_GRAY8) // gray to YUV&lt;/p>
&lt;p>1500 {&lt;/p>
&lt;p>1501 int w, h, y;&lt;/p>
&lt;p>1502 uint8_t *d;&lt;/p>
&lt;p>1503&lt;/p>
&lt;p>1504 if (dst_pix-&amp;gt;color_type == FF_COLOR_YUV_JPEG)&lt;/p>
&lt;p>1505 {&lt;/p>
&lt;p>1506 ff_img_copy_plane(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0] ,&lt;/p>
&lt;p>1507 dst_width, dst_height);&lt;/p>
&lt;p>1508 }&lt;/p>
&lt;p>1509 else&lt;/p>
&lt;p>1510 {&lt;/p>
&lt;p>1511 img_apply_table(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0],&lt;/p>
&lt;p>1512 dst_width, dst_height, y_jpeg_to_ccir);&lt;/p>
&lt;p>1513 }&lt;/p>
&lt;p>1514&lt;/p>
&lt;p>1515 w = dst_width; // fill U and V with 128&lt;/p>
&lt;p>1516 h = dst_height;&lt;/p>
&lt;p>1517 w &amp;gt;&amp;gt;= dst_pix-&amp;gt;x_chroma_shift;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1518 h &amp;gt;&amp;gt;= dst_pix-&amp;gt;y_chroma_shift;&lt;/p>
&lt;p>1519 for (i = 1; i &amp;lt;= 2; i++)&lt;/p>
&lt;p>1520 {&lt;/p>
&lt;p>1521 d = dst-&amp;gt;data[i];&lt;/p>
&lt;p>1522 for (y = 0; y &amp;lt; h; y++)&lt;/p>
&lt;p>1523 {&lt;/p>
&lt;p>1524 memset(d, 128, w);&lt;/p>
&lt;p>1525 d += dst-&amp;gt;linesize[i];&lt;/p>
&lt;p>1526 }&lt;/p>
&lt;p>1527 }&lt;/p>
&lt;p>1528 return 0;&lt;/p>
&lt;p>1529 }&lt;/p>
&lt;p>1530&lt;/p>
&lt;p>1531 if (is_yuv_planar(src_pix) &amp;amp;&amp;amp; dst_pix_fmt == PIX_FMT_GRAY8) // YUV to gray&lt;/p>
&lt;p>1532 {&lt;/p>
&lt;p>1533 if (src_pix-&amp;gt;color_type == FF_COLOR_YUV_JPEG)&lt;/p>
&lt;p>1534 {&lt;/p>
&lt;p>1535 ff_img_copy_plane(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0] ,&lt;/p>
&lt;p>1536 dst_width, dst_height);&lt;/p>
&lt;p>1537 }&lt;/p>
&lt;p>1538 else&lt;/p>
&lt;p>1539 {&lt;/p>
&lt;p>1540 img_apply_table(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0],&lt;/p>
&lt;p>1541 dst_width, dst_height, y_ccir_to_jpeg);&lt;/p>
&lt;p>1542 }&lt;/p>
&lt;p>1543 return 0;&lt;/p>
&lt;p>1544 }&lt;/p>
&lt;p>1545&lt;/p>
&lt;p>1546 if (is_yuv_planar(dst_pix) &amp;amp;&amp;amp; is_yuv_planar(src_pix)) // YUV to YUV planar&lt;/p>
&lt;p>1547 {&lt;/p>
&lt;p>1548 int x_shift, y_shift, w, h, xy_shift;&lt;/p>
&lt;p>1549 void(*resize_func)(uint8_t *dst, int dst_wrap, const uint8_t *src, int src_wrap,&lt;/p>
&lt;p>1550 int width, int height);&lt;/p>
&lt;p>1551&lt;/p>
&lt;p>1552 // compute chroma size of the smallest dimensions&lt;/p>
&lt;p>1553 w = dst_width;&lt;/p>
&lt;p>1554 h = dst_height;&lt;/p>
&lt;p>1555 if (dst_pix-&amp;gt;x_chroma_shift &amp;gt;= src_pix-&amp;gt;x_chroma_shift)&lt;/p>
&lt;p>1556 w &amp;gt;&amp;gt;= dst_pix-&amp;gt;x_chroma_shift;&lt;/p>
&lt;p>1557 else&lt;/p>
&lt;p>1558 w &amp;gt;&amp;gt;= src_pix-&amp;gt;x_chroma_shift;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1559 if (dst_pix-&amp;gt;y_chroma_shift &amp;gt;= src_pix-&amp;gt;y_chroma_shift)&lt;/p>
&lt;p>1560 h &amp;gt;&amp;gt;= dst_pix-&amp;gt;y_chroma_shift;&lt;/p>
&lt;p>1561 else&lt;/p>
&lt;p>1562 h &amp;gt;&amp;gt;= src_pix-&amp;gt;y_chroma_shift;&lt;/p>
&lt;p>1563&lt;/p>
&lt;p>1564 x_shift = (dst_pix-&amp;gt;x_chroma_shift - src_pix-&amp;gt;x_chroma_shift);&lt;/p>
&lt;p>1565 y_shift = (dst_pix-&amp;gt;y_chroma_shift - src_pix-&amp;gt;y_chroma_shift);&lt;/p>
&lt;p>1566 xy_shift = ((x_shift &amp;amp;0xf) &amp;lt;&amp;lt; 4) | (y_shift &amp;amp;0xf);&lt;/p>
&lt;p>1567&lt;/p>
&lt;p>1568 // there must be filters for conversion at least from and to YUV444 format&lt;/p>
&lt;p>1569 switch (xy_shift)&lt;/p>
&lt;p>1570 {&lt;/p>
&lt;p>1571 case 0x00:&lt;/p>
&lt;p>1572 resize_func = ff_img_copy_plane;&lt;/p>
&lt;p>1573 break;&lt;/p>
&lt;p>1574 case 0x10:&lt;/p>
&lt;p>1575 resize_func = shrink21;&lt;/p>
&lt;p>1576 break;&lt;/p>
&lt;p>1577 case 0x20:&lt;/p>
&lt;p>1578 resize_func = shrink41;&lt;/p>
&lt;p>1579 break;&lt;/p>
&lt;p>1580 case 0x01:&lt;/p>
&lt;p>1581 resize_func = shrink12;&lt;/p>
&lt;p>1582 break;&lt;/p>
&lt;p>1583 case 0x11:&lt;/p>
&lt;p>1584 resize_func = ff_shrink22;&lt;/p>
&lt;p>1585 break;&lt;/p>
&lt;p>1586 case 0x22:&lt;/p>
&lt;p>1587 resize_func = ff_shrink44;&lt;/p>
&lt;p>1588 break;&lt;/p>
&lt;p>1589 case 0xf0:&lt;/p>
&lt;p>1590 resize_func = grow21;&lt;/p>
&lt;p>1591 break;&lt;/p>
&lt;p>1592 case 0xe0:&lt;/p>
&lt;p>1593 resize_func = grow41;&lt;/p>
&lt;p>1594 break;&lt;/p>
&lt;p>1595 case 0xff:&lt;/p>
&lt;p>1596 resize_func = grow22;&lt;/p>
&lt;p>1597 break;&lt;/p>
&lt;p>1598 case 0xee:&lt;/p>
&lt;p>1599 resize_func = grow44;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1600 break;&lt;/p>
&lt;p>1601 case 0xf1:&lt;/p>
&lt;p>1602 resize_func = conv411;&lt;/p>
&lt;p>1603 break;&lt;/p>
&lt;p>1604 default:&lt;/p>
&lt;p>1605 goto no_chroma_filter; // currently not handled&lt;/p>
&lt;p>1606 }&lt;/p>
&lt;p>1607&lt;/p>
&lt;p>1608 ff_img_copy_plane(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], src-&amp;gt;data[0], src-&amp;gt;linesize[0],&lt;/p>
&lt;p>1609 dst_width, dst_height);&lt;/p>
&lt;p>1610&lt;/p>
&lt;p>1611 for (i = 1; i &amp;lt;= 2; i++)&lt;/p>
&lt;p>1612 resize_func(dst-&amp;gt;data[i], dst-&amp;gt;linesize[i], src-&amp;gt;data[i], src-&amp;gt;linesize[i],&lt;/p>
&lt;p>1613 dst_width &amp;gt;&amp;gt; dst_pix-&amp;gt;x_chroma_shift, dst_height &amp;gt;&amp;gt; dst_pix-&amp;gt;y_chroma_shift);&lt;/p>
&lt;p>1614&lt;/p>
&lt;p>1615 // if yuv color space conversion is needed, we do it here on the destination image&lt;/p>
&lt;p>1616 if (dst_pix-&amp;gt;color_type != src_pix-&amp;gt;color_type)&lt;/p>
&lt;p>1617 {&lt;/p>
&lt;p>1618 const uint8_t *y_table, *c_table;&lt;/p>
&lt;p>1619 if (dst_pix-&amp;gt;color_type == FF_COLOR_YUV)&lt;/p>
&lt;p>1620 {&lt;/p>
&lt;p>1621 y_table = y_jpeg_to_ccir;&lt;/p>
&lt;p>1622 c_table = c_jpeg_to_ccir;&lt;/p>
&lt;p>1623 }&lt;/p>
&lt;p>1624 else&lt;/p>
&lt;p>1625 {&lt;/p>
&lt;p>1626 y_table = y_ccir_to_jpeg;&lt;/p>
&lt;p>1627 c_table = c_ccir_to_jpeg;&lt;/p>
&lt;p>1628 }&lt;/p>
&lt;p>1629&lt;/p>
&lt;p>1630 img_apply_table(dst-&amp;gt;data[0], dst-&amp;gt;linesize[0], dst-&amp;gt;data[0], dst-&amp;gt;linesize[0],&lt;/p>
&lt;p>1631 dst_width, dst_height, y_table);&lt;/p>
&lt;p>1632&lt;/p>
&lt;p>1633 for (i = 1; i &amp;lt;= 2; i++)&lt;/p>
&lt;p>1634 img_apply_table(dst-&amp;gt;data[i], dst-&amp;gt;linesize[i], dst-&amp;gt;data[i], dst-&amp;gt;linesize[i],&lt;/p>
&lt;p>1635 dst_width &amp;gt;&amp;gt; dst_pix-&amp;gt;x_chroma_shift, dst_height &amp;gt;&amp;gt; dst_pix-&amp;gt;y_chroma_shift, c_table);&lt;/p>
&lt;p>1636 }&lt;/p>
&lt;p>1637 return 0;&lt;/p>
&lt;p>1638 }&lt;/p>
&lt;p>1639&lt;/p>
&lt;p>1640 no_chroma_filter: // try to use an intermediate format&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1641&lt;/p>
&lt;p>1642 if (src_pix_fmt == PIX_FMT_YUV422 || dst_pix_fmt == PIX_FMT_YUV422)&lt;/p>
&lt;p>1643 {&lt;/p>
&lt;p>1644 int_pix_fmt = PIX_FMT_YUV422P; // specific case: convert to YUV422P first&lt;/p>
&lt;p>1645 }&lt;/p>
&lt;p>1646 else if (src_pix_fmt == PIX_FMT_UYVY422 || dst_pix_fmt == PIX_FMT_UYVY422)&lt;/p>
&lt;p>1647 {&lt;/p>
&lt;p>1648&lt;/p>
&lt;p>1649 int_pix_fmt = PIX_FMT_YUV422P; // specific case: convert to YUV422P first&lt;/p>
&lt;p>1650 }&lt;/p>
&lt;p>1651 else if (src_pix_fmt == PIX_FMT_UYVY411 || dst_pix_fmt == PIX_FMT_UYVY411)&lt;/p>
&lt;p>1652 {&lt;/p>
&lt;p>1653&lt;/p>
&lt;p>1654 int_pix_fmt = PIX_FMT_YUV411P; // specific case: convert to YUV411P first&lt;/p>
&lt;p>1655 }&lt;/p>
&lt;p>1656 else if ((src_pix-&amp;gt;color_type == FF_COLOR_GRAY &amp;amp;&amp;amp; src_pix_fmt != PIX_FMT_GRAY8)&lt;/p>
&lt;p>1657 || (dst_pix-&amp;gt;color_type == FF_COLOR_GRAY &amp;amp;&amp;amp; dst_pix_fmt != PIX_FMT_GRAY8))&lt;/p>
&lt;p>1658 {&lt;/p>
&lt;p>1659&lt;/p>
&lt;p>1660 int_pix_fmt = PIX_FMT_GRAY8; // gray8 is the normalized format&lt;/p>
&lt;p>1661 }&lt;/p>
&lt;p>1662 else if ((is_yuv_planar(src_pix) &amp;amp;&amp;amp; src_pix_fmt != PIX_FMT_YUV444P&lt;/p>
&lt;p>1663 &amp;amp;&amp;amp; src_pix_fmt != PIX_FMT_YUVJ444P))&lt;/p>
&lt;p>1664 {&lt;/p>
&lt;p>1665 if (src_pix-&amp;gt;color_type == FF_COLOR_YUV_JPEG) // yuv444 is the normalized format&lt;/p>
&lt;p>1666 int_pix_fmt = PIX_FMT_YUVJ444P;&lt;/p>
&lt;p>1667 else&lt;/p>
&lt;p>1668 int_pix_fmt = PIX_FMT_YUV444P;&lt;/p>
&lt;p>1669 }&lt;/p>
&lt;p>1670 else if ((is_yuv_planar(dst_pix) &amp;amp;&amp;amp; dst_pix_fmt != PIX_FMT_YUV444P&lt;/p>
&lt;p>1671 &amp;amp;&amp;amp; dst_pix_fmt != PIX_FMT_YUVJ444P))&lt;/p>
&lt;p>1672 {&lt;/p>
&lt;p>1673 if (dst_pix-&amp;gt;color_type == FF_COLOR_YUV_JPEG) // yuv444 is the normalized format&lt;/p>
&lt;p>1674 int_pix_fmt = PIX_FMT_YUVJ444P;&lt;/p>
&lt;p>1675 else&lt;/p>
&lt;p>1676 int_pix_fmt = PIX_FMT_YUV444P;&lt;/p>
&lt;p>1677 }&lt;/p>
&lt;p>1678 else // the two formats are rgb or gray8 or yuv[j]444p&lt;/p>
&lt;p>1679 {&lt;/p>
&lt;p>1680 if (src_pix-&amp;gt;is_alpha &amp;amp;&amp;amp; dst_pix-&amp;gt;is_alpha)&lt;/p>
&lt;p>1681 int_pix_fmt = PIX_FMT_RGBA32;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>1682 else&lt;/p>
&lt;p>1683 int_pix_fmt = PIX_FMT_RGB24;&lt;/p>
&lt;p>1684 }&lt;/p>
&lt;p>1685&lt;/p>
&lt;p>1686 if (avpicture_alloc(tmp, int_pix_fmt, dst_width, dst_height) &amp;lt; 0)&lt;/p>
&lt;p>1687 return - 1;&lt;/p>
&lt;p>1688&lt;/p>
&lt;p>1689 ret = - 1;&lt;/p>
&lt;p>1690&lt;/p>
&lt;p>1691 if (img_convert(tmp, int_pix_fmt, src, src_pix_fmt, src_width, src_height) &amp;lt; 0)&lt;/p>
&lt;p>1692 goto fail1;&lt;/p>
&lt;p>1693&lt;/p>
&lt;p>1694 if (img_convert(dst, dst_pix_fmt, tmp, int_pix_fmt, dst_width, dst_height) &amp;lt; 0)&lt;/p>
&lt;p>1695 goto fail1;&lt;/p>
&lt;p>1696 ret = 0;&lt;/p>
&lt;p>1697&lt;/p>
&lt;p>1698 fail1:&lt;/p>
&lt;p>1699 avpicture_free(tmp);&lt;/p>
&lt;p>1700 return ret;&lt;/p>
&lt;p>1701 }&lt;/p>
&lt;p>1702&lt;/p>
&lt;p>1703 #undef FIX&lt;/p>
&lt;h3 id="images2020ffmpegasposewordsa0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4020png9-msrlec-文件">&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;strong>9 msrle.c 文件&lt;/strong>&lt;/h3>
&lt;p>9.1 功能描述&lt;/p>
&lt;p>此文件实现微软行程长度压缩算法解码器，此文件请各位参考压缩算法自己仔细分析。&lt;/p>
&lt;p>9.2 文件注释&lt;/p>
&lt;p>1 #include &amp;lt;stdio.h&amp;gt;&lt;/p>
&lt;p>2 #include &amp;lt;stdlib.h&amp;gt;&lt;/p>
&lt;p>3 #include &amp;lt;string.h&amp;gt;&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 #include &amp;quot;../libavutil/common.h&amp;quot;&lt;/p>
&lt;p>6 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>7 #include &amp;quot;dsputil.h&amp;quot;&lt;/p>
&lt;p>8&lt;/p>
&lt;p>9 #define FF_BUFFER_HINTS_VALID 0x01 // Buffer hints value is meaningful (if 0 ignore)&lt;/p>
&lt;p>10 #define FF_BUFFER_HINTS_READABLE 0x02 // Codec will read from buffer&lt;/p>
&lt;p>11 #define FF_BUFFER_HINTS_PRESERVE 0x04 // User must not alter buffer content&lt;/p>
&lt;p>12 #define FF_BUFFER_HINTS_REUSABLE 0x08 // Codec will reuse the buffer (update)&lt;/p>
&lt;p>13&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>此文件请各位参考压缩算法自己仔细分析。&lt;/p>
&lt;p>14 typedef struct MsrleContext&lt;/p>
&lt;p>15 {&lt;/p>
&lt;p>16 AVCodecContext *avctx;&lt;/p>
&lt;p>17 AVFrame frame;&lt;/p>
&lt;p>18&lt;/p>
&lt;p>19 unsigned char *buf;&lt;/p>
&lt;p>20 int size;&lt;/p>
&lt;p>21&lt;/p>
&lt;p>22 } MsrleContext;&lt;/p>
&lt;p>23&lt;/p>
&lt;p>24 #define FETCH_NEXT_STREAM_BYTE() \&lt;/p>
&lt;p>25 if (stream_ptr &amp;gt;= s-&amp;gt;size) \&lt;/p>
&lt;p>26 { \&lt;/p>
&lt;p>27 return; \&lt;/p>
&lt;p>28 } \&lt;/p>
&lt;p>29 stream_byte = s-&amp;gt;buf[stream_ptr++];&lt;/p>
&lt;p>30&lt;/p>
&lt;p>31 static void msrle_decode_pal4(MsrleContext *s)&lt;/p>
&lt;p>32 {&lt;/p>
&lt;p>33 int stream_ptr = 0;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>34 unsigned char rle_code;&lt;/p>
&lt;p>35 unsigned char extra_byte, odd_pixel;&lt;/p>
&lt;p>36 unsigned char stream_byte;&lt;/p>
&lt;p>37 int pixel_ptr = 0;&lt;/p>
&lt;p>38 int row_dec = s-&amp;gt;frame.linesize[0];&lt;/p>
&lt;p>39 int row_ptr = (s-&amp;gt;avctx-&amp;gt;height - 1) *row_dec;&lt;/p>
&lt;p>40 int frame_size = row_dec * s-&amp;gt;avctx-&amp;gt;height;&lt;/p>
&lt;p>41 int i;&lt;/p>
&lt;p>42&lt;/p>
&lt;p>43 // make the palette available&lt;/p>
&lt;p>44 memcpy(s-&amp;gt;frame.data[1], s-&amp;gt;avctx-&amp;gt;palctrl-&amp;gt;palette, AVPALETTE_SIZE);&lt;/p>
&lt;p>45 if (s-&amp;gt;avctx-&amp;gt;palctrl-&amp;gt;palette_changed)&lt;/p>
&lt;p>46 {&lt;/p>
&lt;p>47 // s-&amp;gt;frame.palette_has_changed = 1;&lt;/p>
&lt;p>48 s-&amp;gt;avctx-&amp;gt;palctrl-&amp;gt;palette_changed = 0;&lt;/p>
&lt;p>49 }&lt;/p>
&lt;p>50&lt;/p>
&lt;p>51 while (row_ptr &amp;gt;= 0)&lt;/p>
&lt;p>52 {&lt;/p>
&lt;p>53 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>54 rle_code = stream_byte;&lt;/p>
&lt;p>55 if (rle_code == 0)&lt;/p>
&lt;p>56 {&lt;/p>
&lt;p>57 // fetch the next byte to see how to handle escape code&lt;/p>
&lt;p>58 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>59 if (stream_byte == 0)&lt;/p>
&lt;p>60 {&lt;/p>
&lt;p>61 // line is done, goto the next one&lt;/p>
&lt;p>62 row_ptr -= row_dec;&lt;/p>
&lt;p>63 pixel_ptr = 0;&lt;/p>
&lt;p>64 }&lt;/p>
&lt;p>65 else if (stream_byte == 1)&lt;/p>
&lt;p>66 {&lt;/p>
&lt;p>67 // decode is done&lt;/p>
&lt;p>68 return ;&lt;/p>
&lt;p>69 }&lt;/p>
&lt;p>70 else if (stream_byte == 2)&lt;/p>
&lt;p>71 {&lt;/p>
&lt;p>72 // reposition frame decode coordinates&lt;/p>
&lt;p>73 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>74 pixel_ptr += stream_byte;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>75 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>76 row_ptr -= stream_byte * row_dec;&lt;/p>
&lt;p>77 }&lt;/p>
&lt;p>78 else&lt;/p>
&lt;p>79 {&lt;/p>
&lt;p>80 // copy pixels from encoded stream&lt;/p>
&lt;p>81 odd_pixel = stream_byte &amp;amp;1;&lt;/p>
&lt;p>82 rle_code = (stream_byte + 1) / 2;&lt;/p>
&lt;p>83 extra_byte = rle_code &amp;amp;0x01;&lt;/p>
&lt;p>84 if ((row_ptr + pixel_ptr + stream_byte &amp;gt; frame_size) || (row_ptr &amp;lt; 0))&lt;/p>
&lt;p>85 {&lt;/p>
&lt;p>86 return ;&lt;/p>
&lt;p>87 }&lt;/p>
&lt;p>88&lt;/p>
&lt;p>89 for (i = 0; i &amp;lt; rle_code; i++)&lt;/p>
&lt;p>90 {&lt;/p>
&lt;p>91 if (pixel_ptr &amp;gt;= s-&amp;gt;avctx-&amp;gt;width)&lt;/p>
&lt;p>92 break;&lt;/p>
&lt;p>93 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>94 s-&amp;gt;frame.data[0][row_ptr + pixel_ptr] = stream_byte &amp;gt;&amp;gt; 4;&lt;/p>
&lt;p>95 pixel_ptr++;&lt;/p>
&lt;p>96 if (i + 1 == rle_code &amp;amp;&amp;amp; odd_pixel)&lt;/p>
&lt;p>97 break;&lt;/p>
&lt;p>98 if (pixel_ptr &amp;gt;= s-&amp;gt;avctx-&amp;gt;width)&lt;/p>
&lt;p>99 break;&lt;/p>
&lt;p>100 s-&amp;gt;frame.data[0][row_ptr + pixel_ptr] = stream_byte &amp;amp;0x0F;&lt;/p>
&lt;p>101 pixel_ptr++;&lt;/p>
&lt;p>102 }&lt;/p>
&lt;p>103&lt;/p>
&lt;p>104 // if the RLE code is odd, skip a byte in the stream&lt;/p>
&lt;p>105 if (extra_byte)&lt;/p>
&lt;p>106 stream_ptr++;&lt;/p>
&lt;p>107 }&lt;/p>
&lt;p>108 }&lt;/p>
&lt;p>109 else&lt;/p>
&lt;p>110 {&lt;/p>
&lt;p>111 // decode a run of data&lt;/p>
&lt;p>112 if ((row_ptr + pixel_ptr + stream_byte &amp;gt; frame_size) || (row_ptr &amp;lt; 0))&lt;/p>
&lt;p>113 {&lt;/p>
&lt;p>114 return ;&lt;/p>
&lt;p>115 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>116 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>117 for (i = 0; i &amp;lt; rle_code; i++)&lt;/p>
&lt;p>118 {&lt;/p>
&lt;p>119 if (pixel_ptr &amp;gt;= s-&amp;gt;avctx-&amp;gt;width)&lt;/p>
&lt;p>120 break;&lt;/p>
&lt;p>121 if ((i &amp;amp;1) == 0)&lt;/p>
&lt;p>122 s-&amp;gt;frame.data[0][row_ptr + pixel_ptr] = stream_byte &amp;gt;&amp;gt; 4;&lt;/p>
&lt;p>123 else&lt;/p>
&lt;p>124 s-&amp;gt;frame.data[0][row_ptr + pixel_ptr] = stream_byte &amp;amp;0x0F;&lt;/p>
&lt;p>125 pixel_ptr++;&lt;/p>
&lt;p>126 }&lt;/p>
&lt;p>127 }&lt;/p>
&lt;p>128 }&lt;/p>
&lt;p>129&lt;/p>
&lt;p>130 // one last sanity check on the way out&lt;/p>
&lt;p>131 if (stream_ptr &amp;lt; s-&amp;gt;size)&lt;/p>
&lt;p>132 {&lt;/p>
&lt;p>133 // error&lt;/p>
&lt;p>134 }&lt;/p>
&lt;p>135 }&lt;/p>
&lt;p>136&lt;/p>
&lt;p>137 static void msrle_decode_pal8(MsrleContext *s)&lt;/p>
&lt;p>138 {&lt;/p>
&lt;p>139 int stream_ptr = 0;&lt;/p>
&lt;p>140 unsigned char rle_code;&lt;/p>
&lt;p>141 unsigned char extra_byte;&lt;/p>
&lt;p>142 unsigned char stream_byte;&lt;/p>
&lt;p>143 int pixel_ptr = 0;&lt;/p>
&lt;p>144 int row_dec = s-&amp;gt;frame.linesize[0];&lt;/p>
&lt;p>145 int row_ptr = (s-&amp;gt;avctx-&amp;gt;height - 1) *row_dec;&lt;/p>
&lt;p>146 int frame_size = row_dec * s-&amp;gt;avctx-&amp;gt;height;&lt;/p>
&lt;p>147&lt;/p>
&lt;p>148 // make the palette available&lt;/p>
&lt;p>149 memcpy(s-&amp;gt;frame.data[1], s-&amp;gt;avctx-&amp;gt;palctrl-&amp;gt;palette, AVPALETTE_SIZE);&lt;/p>
&lt;p>150 if (s-&amp;gt;avctx-&amp;gt;palctrl-&amp;gt;palette_changed)&lt;/p>
&lt;p>151 {&lt;/p>
&lt;p>152 // s-&amp;gt;frame.palette_has_changed = 1;&lt;/p>
&lt;p>153 s-&amp;gt;avctx-&amp;gt;palctrl-&amp;gt;palette_changed = 0;&lt;/p>
&lt;p>154 }&lt;/p>
&lt;p>155&lt;/p>
&lt;p>156 while (row_ptr &amp;gt;= 0)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>157&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>158&lt;/td>
&lt;td>&lt;/td>
&lt;td>FETCH_NEXT_STREAM_BYTE();&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>159&lt;/td>
&lt;td>&lt;/td>
&lt;td>rle_code = stream_byte;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>160 if (rle_code == 0)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>161 {&lt;/p>
&lt;p>162 // fetch the next byte to see how to handle escape code&lt;/p>
&lt;p>163 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>164 if (stream_byte == 0)&lt;/p>
&lt;p>165 {&lt;/p>
&lt;p>166 // line is done, goto the next one&lt;/p>
&lt;p>167 row_ptr -= row_dec;&lt;/p>
&lt;p>168 pixel_ptr = 0;&lt;/p>
&lt;p>169 }&lt;/p>
&lt;p>170 else if (stream_byte == 1)&lt;/p>
&lt;p>171 {&lt;/p>
&lt;p>172 // decode is done&lt;/p>
&lt;p>173 return ;&lt;/p>
&lt;p>174 }&lt;/p>
&lt;p>175 else if (stream_byte == 2)&lt;/p>
&lt;p>176 {&lt;/p>
&lt;p>177 // reposition frame decode coordinates&lt;/p>
&lt;p>178 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>179 pixel_ptr += stream_byte;&lt;/p>
&lt;p>180 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>181 row_ptr -= stream_byte * row_dec;&lt;/p>
&lt;p>182 }&lt;/p>
&lt;p>183 else&lt;/p>
&lt;p>184 {&lt;/p>
&lt;p>185 // copy pixels from encoded stream&lt;/p>
&lt;p>186 if ((row_ptr + pixel_ptr + stream_byte &amp;gt; frame_size) || (row_ptr &amp;lt; 0))&lt;/p>
&lt;p>187 {&lt;/p>
&lt;p>188 return ;&lt;/p>
&lt;p>189 }&lt;/p>
&lt;p>190&lt;/p>
&lt;p>191 rle_code = stream_byte;&lt;/p>
&lt;p>192 extra_byte = stream_byte &amp;amp;0x01;&lt;/p>
&lt;p>193 if (stream_ptr + rle_code + extra_byte &amp;gt; s-&amp;gt;size)&lt;/p>
&lt;p>194 {&lt;/p>
&lt;p>195 return ;&lt;/p>
&lt;p>196 }&lt;/p>
&lt;p>197&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>198 while (rle_code--)&lt;/p>
&lt;p>199 {&lt;/p>
&lt;p>200 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>201 s-&amp;gt;frame.data[0][row_ptr + pixel_ptr] = stream_byte;&lt;/p>
&lt;p>202 pixel_ptr++;&lt;/p>
&lt;p>203 }&lt;/p>
&lt;p>204&lt;/p>
&lt;p>205 // if the RLE code is odd, skip a byte in the stream&lt;/p>
&lt;p>206 if (extra_byte)&lt;/p>
&lt;p>207 stream_ptr++;&lt;/p>
&lt;p>208 }&lt;/p>
&lt;p>209 }&lt;/p>
&lt;p>210 else&lt;/p>
&lt;p>211 {&lt;/p>
&lt;p>212 // decode a run of data&lt;/p>
&lt;p>213 if ((row_ptr + pixel_ptr + stream_byte &amp;gt; frame_size) || (row_ptr &amp;lt; 0))&lt;/p>
&lt;p>214 {&lt;/p>
&lt;p>215 return ;&lt;/p>
&lt;p>216 }&lt;/p>
&lt;p>217&lt;/p>
&lt;p>218 FETCH_NEXT_STREAM_BYTE();&lt;/p>
&lt;p>219&lt;/p>
&lt;p>220 while (rle_code--)&lt;/p>
&lt;p>221 {&lt;/p>
&lt;p>222 s-&amp;gt;frame.data[0][row_ptr + pixel_ptr] = stream_byte;&lt;/p>
&lt;p>223 pixel_ptr++;&lt;/p>
&lt;p>224 }&lt;/p>
&lt;p>225 }&lt;/p>
&lt;p>226 }&lt;/p>
&lt;p>227&lt;/p>
&lt;p>228 // one last sanity check on the way out&lt;/p>
&lt;p>229 if (stream_ptr &amp;lt; s-&amp;gt;size)&lt;/p>
&lt;p>230 {&lt;/p>
&lt;p>231 // error&lt;/p>
&lt;p>232 }&lt;/p>
&lt;p>233 }&lt;/p>
&lt;p>234&lt;/p>
&lt;p>235 static int msrle_decode_init(AVCodecContext *avctx)&lt;/p>
&lt;p>236 {&lt;/p>
&lt;p>237 MsrleContext *s = (MsrleContext*)avctx-&amp;gt;priv_data;&lt;/p>
&lt;p>238&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>239 s-&amp;gt;avctx = avctx;&lt;/p>
&lt;p>240&lt;/p>
&lt;p>241 avctx-&amp;gt;pix_fmt = PIX_FMT_PAL8;&lt;/p>
&lt;p>242&lt;/p>
&lt;p>243 s-&amp;gt;frame.data[0] = NULL;&lt;/p>
&lt;p>244&lt;/p>
&lt;p>245 return 0;&lt;/p>
&lt;p>246 }&lt;/p>
&lt;p>247&lt;/p>
&lt;p>248 static int msrle_decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size)&lt;/p>
&lt;p>249 {&lt;/p>
&lt;p>250 MsrleContext *s = (MsrleContext*)avctx-&amp;gt;priv_data;&lt;/p>
&lt;p>251&lt;/p>
&lt;p>252 s-&amp;gt;buf = buf;&lt;/p>
&lt;p>253 s-&amp;gt;size = buf_size;&lt;/p>
&lt;p>254&lt;/p>
&lt;p>255 if (avctx-&amp;gt;reget_buffer(avctx, &amp;amp;s-&amp;gt;frame))&lt;/p>
&lt;p>256 return - 1;&lt;/p>
&lt;p>257&lt;/p>
&lt;p>258 switch (avctx-&amp;gt;bits_per_sample)&lt;/p>
&lt;p>259 {&lt;/p>
&lt;p>260 case 8:&lt;/p>
&lt;p>261 msrle_decode_pal8(s);&lt;/p>
&lt;p>262 break;&lt;/p>
&lt;p>263 case 4:&lt;/p>
&lt;p>264 msrle_decode_pal4(s);&lt;/p>
&lt;p>265 break;&lt;/p>
&lt;p>266 default:&lt;/p>
&lt;p>267 break;&lt;/p>
&lt;p>268 }&lt;/p>
&lt;p>269&lt;/p>
&lt;p>270 *data_size = sizeof(AVFrame);&lt;/p>
&lt;p>271 *(AVFrame*)data = s-&amp;gt;frame;&lt;/p>
&lt;p>272&lt;/p>
&lt;p>273 // report that the buffer was completely consumed&lt;/p>
&lt;p>274 return buf_size;&lt;/p>
&lt;p>275 }&lt;/p>
&lt;p>276&lt;/p>
&lt;p>277 static int msrle_decode_end(AVCodecContext *avctx)&lt;/p>
&lt;p>278 {&lt;/p>
&lt;p>279 MsrleContext *s = (MsrleContext*)avctx-&amp;gt;priv_data;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>280&lt;/p>
&lt;p>281 // release the last frame&lt;/p>
&lt;p>282 if (s-&amp;gt;frame.data[0])&lt;/p>
&lt;p>283 avctx-&amp;gt;release_buffer(avctx, &amp;amp;s-&amp;gt;frame);&lt;/p>
&lt;p>284&lt;/p>
&lt;p>285 return 0;&lt;/p>
&lt;p>286 }&lt;/p>
&lt;p>287&lt;/p>
&lt;p>288 AVCodec msrle_decoder =&lt;/p>
&lt;p>289 {&lt;/p>
&lt;p>290 &amp;quot;msrle&amp;quot;,&lt;/p>
&lt;p>291 CODEC_TYPE_VIDEO,&lt;/p>
&lt;p>292 CODEC_ID_MSRLE,&lt;/p>
&lt;p>293 sizeof(MsrleContext),&lt;/p>
&lt;p>294 msrle_decode_init,&lt;/p>
&lt;p>295 NULL,&lt;/p>
&lt;p>296 msrle_decode_end,&lt;/p>
&lt;p>297 msrle_decode_frame&lt;/p>
&lt;p>298 };&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="10-turespeech_datah-文件">&lt;strong>10 turespeech_data.h 文件&lt;/strong>&lt;/h3>
&lt;p>10.1 功能描述&lt;/p>
&lt;p>此文件定义 true speed 音频解码器使用的常数，此文件请各位参考 TrueSpeed 压缩算法自己仔细分析。&lt;/p>
&lt;p>10.2 文件注释&lt;/p>
&lt;p>1 #ifndef TRUESPEECH_DATA&lt;/p>
&lt;p>2 #define TRUESPEECH_DATA&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #pragma warning(disable:4305 )&lt;/p>
&lt;p>5&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>此文件请各位参考 TrueSpeed 压缩算法自己仔细分析。&lt;/p>
&lt;p>6 /* codebooks fo expanding input filter */&lt;/p>
&lt;p>7 static const int16_t ts_cb_0[32] =&lt;/p>
&lt;p>8 {&lt;/p>
&lt;p>9 0x8240, 0x8364, 0x84CE, 0x865D, 0x8805, 0x89DE, 0x8BD7, 0x8DF4,&lt;/p>
&lt;p>10 0x9051, 0x92E2, 0x95DE, 0x990F, 0x9C81, 0xA079, 0xA54C, 0xAAD2,&lt;/p>
&lt;p>11 0xB18A, 0xB90A, 0xC124, 0xC9CC, 0xD339, 0xDDD3, 0xE9D6, 0xF893,&lt;/p>
&lt;p>12 0x096F, 0x1ACA, 0x29EC, 0x381F, 0x45F9, 0x546A, 0x63C3, 0x73B5,&lt;/p>
&lt;p>13 };&lt;/p>
&lt;p>14&lt;/p>
&lt;p>15 static const int16_t ts_cb_1[32] =&lt;/p>
&lt;p>16 {&lt;/p>
&lt;p>17 0x9F65, 0xB56B, 0xC583, 0xD371, 0xE018, 0xEBB4, 0xF61C, 0xFF59,&lt;/p>
&lt;p>18 0x085B, 0x1106, 0x1952, 0x214A, 0x28C9, 0x2FF8, 0x36E6, 0x3D92,&lt;/p>
&lt;p>19 0x43DF, 0x49BB, 0x4F46, 0x5467, 0x5930, 0x5DA3, 0x61EC, 0x65F9,&lt;/p>
&lt;p>20 0x69D4, 0x6D5A, 0x709E, 0x73AD, 0x766B, 0x78F0, 0x7B5A, 0x7DA5,&lt;/p>
&lt;p>21 };&lt;/p>
&lt;p>22&lt;/p>
&lt;p>23 static const int16_t ts_cb_2[16] =&lt;/p>
&lt;p>24 {&lt;/p>
&lt;p>25 0x96F8, 0xA3B4, 0xAF45, 0xBA53, 0xC4B1, 0xCECC, 0xD86F, 0xE21E,&lt;/p>
&lt;p>26 0xEBF3, 0xF640, 0x00F7, 0x0C20, 0x1881, 0x269A, 0x376B, 0x4D60,&lt;/p>
&lt;p>27 };&lt;/p>
&lt;p>28&lt;/p>
&lt;p>29 static const int16_t ts_cb_3[16] =&lt;/p>
&lt;p>30 {&lt;/p>
&lt;p>31 0xC654, 0xDEF2, 0xEFAA, 0xFD94, 0x096A, 0x143F, 0x1E7B, 0x282C,&lt;/p>
&lt;p>32 0x3176, 0x3A89, 0x439F, 0x4CA2, 0x557F, 0x5E50, 0x6718, 0x6F8D,&lt;/p>
&lt;p>33 };&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>34&lt;/p>
&lt;p>35 static const int16_t ts_cb_4[16] =&lt;/p>
&lt;p>36 {&lt;/p>
&lt;p>37 0xABE7, 0xBBA8, 0xC81C, 0xD326, 0xDD0E, 0xE5D4, 0xEE22, 0xF618,&lt;/p>
&lt;p>38 0xFE28, 0x064F, 0x0EB7, 0x17B8, 0x21AA, 0x2D8B, 0x3BA2, 0x4DF9,&lt;/p>
&lt;p>39 };&lt;/p>
&lt;p>40&lt;/p>
&lt;p>41 static const int16_t ts_cb_5[8] = { 0xD51B, 0xF12E, 0x042E, 0x13C7, 0x2260, 0x311B, 0x40DE, 0x5385,};&lt;/p>
&lt;p>42&lt;/p>
&lt;p>43 static const int16_t ts_cb_6[8] = { 0xB550, 0xC825, 0xD980, 0xE997, 0xF883, 0x0752, 0x1811, 0x2E18,};&lt;/p>
&lt;p>44&lt;/p>
&lt;p>45 static const int16_t ts_cb_7[8] = { 0xCEF0, 0xE4F9, 0xF6BB, 0x0646, 0x14F5, 0x23FF, 0x356F, 0x4A8D,};&lt;/p>
&lt;p>46&lt;/p>
&lt;p>47 static const int16_t *ts_codebook[8] = {ts_cb_0, ts_cb_1, ts_cb_2, ts_cb_3,&lt;/p>
&lt;p>48 ts_cb_4, ts_cb_5, ts_cb_6, ts_cb_7};&lt;/p>
&lt;p>49 /* table used for decoding pulse positions */&lt;/p>
&lt;p>50 static const int16_t ts_140[120] =&lt;/p>
&lt;p>51 {&lt;/p>
&lt;p>52 0x0E46, 0x0CCC, 0x0B6D, 0x0A28, 0x08FC, 0x07E8, 0x06EB, 0x0604,&lt;/p>
&lt;p>53 0x0532, 0x0474, 0x03C9, 0x0330, 0x02A8, 0x0230, 0x01C7, 0x016C,&lt;/p>
&lt;p>54 0x011E, 0x00DC, 0x00A5, 0x0078, 0x0054, 0x0038, 0x0023, 0x0014,&lt;/p>
&lt;p>55 0x000A, 0x0004, 0x0001, 0x0000, 0x0000, 0x0000,&lt;/p>
&lt;p>56&lt;/p>
&lt;p>57 0x0196, 0x017A, 0x015F, 0x0145, 0x012C, 0x0114, 0x00FD, 0x00E7,&lt;/p>
&lt;p>58 0x00D2, 0x00BE, 0x00AB, 0x0099, 0x0088, 0x0078, 0x0069, 0x005B,&lt;/p>
&lt;p>59 0x004E, 0x0042, 0x0037, 0x002D, 0x0024, 0x001C, 0x0015, 0x000F,&lt;/p>
&lt;p>60 0x000A, 0x0006, 0x0003, 0x0001, 0x0000, 0x0000,&lt;/p>
&lt;p>61&lt;/p>
&lt;p>62 0x001D, 0x001C, 0x001B, 0x001A, 0x0019, 0x0018, 0x0017, 0x0016,&lt;/p>
&lt;p>63 0x0015, 0x0014, 0x0013, 0x0012, 0x0011, 0x0010, 0x000F, 0x000E,&lt;/p>
&lt;p>64 0x000D, 0x000C, 0x000B, 0x000A, 0x0009, 0x0008, 0x0007, 0x0006,&lt;/p>
&lt;p>65 0x0005, 0x0004, 0x0003, 0x0002, 0x0001, 0x0000,&lt;/p>
&lt;p>66&lt;/p>
&lt;p>67 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,&lt;/p>
&lt;p>68 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,&lt;/p>
&lt;p>69 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001,&lt;/p>
&lt;p>70 0x0001, 0x0001, 0x0001, 0x0001, 0x0001, 0x0001&lt;/p>
&lt;p>71 };&lt;/p>
&lt;p>72&lt;/p>
&lt;p>73 /* filter for correlated input filter */&lt;/p>
&lt;p>74 static const int16_t ts_230[8] = { 0x7F3B, 0x7E78, 0x7DB6, 0x7CF5, 0x7C35, 0x7B76, 0x7AB8, 0x79FC };&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>75&lt;/p>
&lt;p>76 /* two-point filters table */&lt;/p>
&lt;p>77 static const int16_t ts_240[25 * 2] =&lt;/p>
&lt;p>78 {&lt;/p>
&lt;p>79 0xED2F, 0x5239,&lt;/p>
&lt;p>80 0x54F1, 0xE4A9,&lt;/p>
&lt;p>81 0x2620, 0xEE3E,&lt;/p>
&lt;p>82 0x09D6, 0x2C40,&lt;/p>
&lt;p>83 0xEFB5, 0x2BE0,&lt;/p>
&lt;p>84&lt;/p>
&lt;p>85 0x3FE1, 0x3339,&lt;/p>
&lt;p>86 0x442F, 0xE6FE,&lt;/p>
&lt;p>87 0x4458, 0xF9DF,&lt;/p>
&lt;p>88 0xF231, 0x43DB,&lt;/p>
&lt;p>89 0x3DB0, 0xF705,&lt;/p>
&lt;p>90&lt;/p>
&lt;p>91 0x4F7B, 0xFEFB,&lt;/p>
&lt;p>92 0x26AD, 0x0CDC,&lt;/p>
&lt;p>93 0x33C2, 0x0739,&lt;/p>
&lt;p>94 0x12BE, 0x43A2,&lt;/p>
&lt;p>95 0x1BDF, 0x1F3E,&lt;/p>
&lt;p>96&lt;/p>
&lt;p>97 0x0211, 0x0796,&lt;/p>
&lt;p>98 0x2AEB, 0x163F,&lt;/p>
&lt;p>99 0x050D, 0x3A38,&lt;/p>
&lt;p>100 0x0D1E, 0x0D78,&lt;/p>
&lt;p>101 0x150F, 0x3346,&lt;/p>
&lt;p>102&lt;/p>
&lt;p>103 0x38A4, 0x0B7D,&lt;/p>
&lt;p>104 0x2D5D, 0x1FDF,&lt;/p>
&lt;p>105 0x19B7, 0x2822,&lt;/p>
&lt;p>106 0x0D99, 0x1F12,&lt;/p>
&lt;p>107 0x194C, 0x0CE6&lt;/p>
&lt;p>108 };&lt;/p>
&lt;p>109&lt;/p>
&lt;p>110 /* possible pulse values */&lt;/p>
&lt;p>111 static const int16_t ts_562[64] =&lt;/p>
&lt;p>112 {&lt;/p>
&lt;p>113 0x0002, 0x0006, 0xFFFE, 0xFFFA,&lt;/p>
&lt;p>114 0x0004, 0x000C, 0xFFFC, 0xFFF4,&lt;/p>
&lt;p>115 0x0006, 0x0012, 0xFFFA, 0xFFEE,&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>116 0x000A, 0x001E, 0xFFF6, 0xFFE2,&lt;/p>
&lt;p>117 0x0010, 0x0030, 0xFFF0, 0xFFD0,&lt;/p>
&lt;p>118 0x0019, 0x004B, 0xFFE7, 0xFFB5,&lt;/p>
&lt;p>119 0x0028, 0x0078, 0xFFD8, 0xFF88,&lt;/p>
&lt;p>120 0x0040, 0x00C0, 0xFFC0, 0xFF40,&lt;/p>
&lt;p>121 0x0065, 0x012F, 0xFF9B, 0xFED1,&lt;/p>
&lt;p>122 0x00A1, 0x01E3, 0xFF5F, 0xFE1D,&lt;/p>
&lt;p>123 0x0100, 0x0300, 0xFF00, 0xFD00,&lt;/p>
&lt;p>124 0x0196, 0x04C2, 0xFE6A, 0xFB3E,&lt;/p>
&lt;p>125 0x0285, 0x078F, 0xFD7B, 0xF871,&lt;/p>
&lt;p>126 0x0400, 0x0C00, 0xFC00, 0xF400,&lt;/p>
&lt;p>127 0x0659, 0x130B, 0xF9A7, 0xECF5,&lt;/p>
&lt;p>128 0x0A14, 0x1E3C, 0xF5EC, 0xE1C4&lt;/p>
&lt;p>129 };&lt;/p>
&lt;p>130&lt;/p>
&lt;p>131 /* filters used in final output calculations */&lt;/p>
&lt;p>132 static const int16_t ts_5E2[8] = { 0x4666, 0x26B8, 0x154C, 0x0BB6, 0x0671, 0x038B, 0x01F3, 0x0112 };&lt;/p>
&lt;p>133&lt;/p>
&lt;p>134 static const int16_t ts_5F2[8] = { 0x6000, 0x4800, 0x3600, 0x2880, 0x1E60, 0x16C8, 0x1116, 0x0CD1 };&lt;/p>
&lt;p>135&lt;/p>
&lt;p>136 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="11-turespeechc-文件">&lt;strong>11 turespeech.c 文件&lt;/strong>&lt;/h3>
&lt;p>11.1 功能描述&lt;/p>
&lt;p>此文件实现 true speed 音频解码器，此文件请各位参考压缩算法自己仔细分析。&lt;/p>
&lt;p>11.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avcodec.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>3 #include &amp;quot;truespeech_data.h&amp;quot;&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 // TrueSpeech decoder context&lt;/p>
&lt;p>6&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.058.png" alt="">&lt;/p>
&lt;p>此文件请各位参考 TrueSpeed 压缩算法自己仔细分析。&lt;/p>
&lt;p>7 typedef struct TSContext&lt;/p>
&lt;p>8 {&lt;/p>
&lt;p>9 // input data&lt;/p>
&lt;p>10 int16_t vector[8]; // input vector: 5/5/4/4/4/3/3/3&lt;/p>
&lt;p>11 int offset1[2]; // 8-bit value, used in one copying offset&lt;/p>
&lt;p>12 int offset2[4]; // 7-bit value, encodes offsets for copying and for two-point filter&lt;/p>
&lt;p>13 int pulseoff[4]; // 4-bit offset of pulse values block&lt;/p>
&lt;p>14 int pulsepos[4]; // 27-bit variable, encodes 7 pulse positions&lt;/p>
&lt;p>15 int pulseval[4]; // 7x2-bit pulse values&lt;/p>
&lt;p>16 int flag; // 1-bit flag, shows how to choose filters&lt;/p>
&lt;p>17 // temporary data&lt;/p>
&lt;p>18 int filtbuf[146]; // some big vector used for storing filters&lt;/p>
&lt;p>19 int prevfilt[8]; // filter from previous frame&lt;/p>
&lt;p>20 int16_t tmp1[8]; // coefficients for adding to out&lt;/p>
&lt;p>21 int16_t tmp2[8]; // coefficients for adding to out&lt;/p>
&lt;p>22 int16_t tmp3[8]; // coefficients for adding to out&lt;/p>
&lt;p>23 int16_t cvector[8]; // correlated input vector&lt;/p>
&lt;p>24 int filtval; // gain value for one function&lt;/p>
&lt;p>25 int16_t newvec[60]; // tmp vector&lt;/p>
&lt;p>26 int16_t filters[32]; // filters for every subframe&lt;/p>
&lt;p>27 } TSContext;&lt;/p>
&lt;p>28&lt;/p>
&lt;p>29 #if !defined(LE_32)&lt;/p>
&lt;p>30 #define LE_32(x) ((((uint8_t*)(x))[3] &amp;lt;&amp;lt; 24)| (((uint8_t*)(x))[2] &amp;lt;&amp;lt; 16) | \&lt;/p>
&lt;p>31 (((uint8_t*)(x))[1] &amp;lt;&amp;lt; 8) | ((uint8_t*)(x))[0])&lt;/p>
&lt;p>32 #endif&lt;/p>
&lt;p>33&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>34 static int truespeech_decode_init(AVCodecContext *avctx)&lt;/p>
&lt;p>35 {&lt;/p>
&lt;p>36 return 0;&lt;/p>
&lt;p>37 }&lt;/p>
&lt;p>38&lt;/p>
&lt;p>39 static void truespeech_read_frame(TSContext *dec, uint8_t *input)&lt;/p>
&lt;p>40 {&lt;/p>
&lt;p>41 uint32_t t;&lt;/p>
&lt;p>42&lt;/p>
&lt;p>43 t = LE_32(input); // first dword&lt;/p>
&lt;p>44 input += 4;&lt;/p>
&lt;p>45&lt;/p>
&lt;p>46 dec-&amp;gt;flag = t &amp;amp;1;&lt;/p>
&lt;p>47&lt;/p>
&lt;p>48 dec-&amp;gt;vector[0] = ts_codebook[0][(t &amp;gt;&amp;gt; 1) &amp;amp;0x1F];&lt;/p>
&lt;p>49 dec-&amp;gt;vector[1] = ts_codebook[1][(t &amp;gt;&amp;gt; 6) &amp;amp;0x1F];&lt;/p>
&lt;p>50 dec-&amp;gt;vector[2] = ts_codebook[2][(t &amp;gt;&amp;gt; 11) &amp;amp;0xF];&lt;/p>
&lt;p>51 dec-&amp;gt;vector[3] = ts_codebook[3][(t &amp;gt;&amp;gt; 15) &amp;amp;0xF];&lt;/p>
&lt;p>52 dec-&amp;gt;vector[4] = ts_codebook[4][(t &amp;gt;&amp;gt; 19) &amp;amp;0xF];&lt;/p>
&lt;p>53 dec-&amp;gt;vector[5] = ts_codebook[5][(t &amp;gt;&amp;gt; 23) &amp;amp;0x7];&lt;/p>
&lt;p>54 dec-&amp;gt;vector[6] = ts_codebook[6][(t &amp;gt;&amp;gt; 26) &amp;amp;0x7];&lt;/p>
&lt;p>55 dec-&amp;gt;vector[7] = ts_codebook[7][(t &amp;gt;&amp;gt; 29) &amp;amp;0x7];&lt;/p>
&lt;p>56&lt;/p>
&lt;p>57&lt;/p>
&lt;p>58 t = LE_32(input); // second dword&lt;/p>
&lt;p>59 input += 4;&lt;/p>
&lt;p>60&lt;/p>
&lt;p>61 dec-&amp;gt;offset2[0] = (t &amp;gt;&amp;gt; 0) &amp;amp;0x7F;&lt;/p>
&lt;p>62 dec-&amp;gt;offset2[1] = (t &amp;gt;&amp;gt; 7) &amp;amp;0x7F;&lt;/p>
&lt;p>63 dec-&amp;gt;offset2[2] = (t &amp;gt;&amp;gt; 14) &amp;amp;0x7F;&lt;/p>
&lt;p>64 dec-&amp;gt;offset2[3] = (t &amp;gt;&amp;gt; 21) &amp;amp;0x7F;&lt;/p>
&lt;p>65&lt;/p>
&lt;p>66 dec-&amp;gt;offset1[0] = ((t &amp;gt;&amp;gt; 28) &amp;amp;0xF) &amp;lt;&amp;lt; 4;&lt;/p>
&lt;p>67&lt;/p>
&lt;p>68&lt;/p>
&lt;p>69 t = LE_32(input); // third dword&lt;/p>
&lt;p>70 input += 4;&lt;/p>
&lt;p>71&lt;/p>
&lt;p>72 dec-&amp;gt;pulseval[0] = (t &amp;gt;&amp;gt; 0) &amp;amp;0x3FFF;&lt;/p>
&lt;p>73 dec-&amp;gt;pulseval[1] = (t &amp;gt;&amp;gt; 14) &amp;amp;0x3FFF;&lt;/p>
&lt;p>74&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>75 dec-&amp;gt;offset1[1] = (t &amp;gt;&amp;gt; 28) &amp;amp;0x0F;&lt;/p>
&lt;p>76&lt;/p>
&lt;p>77&lt;/p>
&lt;p>78 t = LE_32(input); // fourth dword&lt;/p>
&lt;p>79 input += 4;&lt;/p>
&lt;p>80&lt;/p>
&lt;p>81 dec-&amp;gt;pulseval[2] = (t &amp;gt;&amp;gt; 0) &amp;amp;0x3FFF;&lt;/p>
&lt;p>82 dec-&amp;gt;pulseval[3] = (t &amp;gt;&amp;gt; 14) &amp;amp;0x3FFF;&lt;/p>
&lt;p>83&lt;/p>
&lt;p>84 dec-&amp;gt;offset1[1] |= ((t &amp;gt;&amp;gt; 28) &amp;amp;0x0F) &amp;lt;&amp;lt; 4;&lt;/p>
&lt;p>85&lt;/p>
&lt;p>86&lt;/p>
&lt;p>87 t = LE_32(input); // fifth dword&lt;/p>
&lt;p>88 input += 4;&lt;/p>
&lt;p>89&lt;/p>
&lt;p>90 dec-&amp;gt;pulsepos[0] = (t &amp;gt;&amp;gt; 4) &amp;amp;0x7FFFFFF;&lt;/p>
&lt;p>91&lt;/p>
&lt;p>92 dec-&amp;gt;pulseoff[0] = (t &amp;gt;&amp;gt; 0) &amp;amp;0xF;&lt;/p>
&lt;p>93&lt;/p>
&lt;p>94 dec-&amp;gt;offset1[0] |= (t &amp;gt;&amp;gt; 31) &amp;amp;1;&lt;/p>
&lt;p>95&lt;/p>
&lt;p>96&lt;/p>
&lt;p>97 t = LE_32(input); // sixth dword&lt;/p>
&lt;p>98 input += 4;&lt;/p>
&lt;p>99&lt;/p>
&lt;p>100 dec-&amp;gt;pulsepos[1] = (t &amp;gt;&amp;gt; 4) &amp;amp;0x7FFFFFF;&lt;/p>
&lt;p>101&lt;/p>
&lt;p>102 dec-&amp;gt;pulseoff[1] = (t &amp;gt;&amp;gt; 0) &amp;amp;0xF;&lt;/p>
&lt;p>103&lt;/p>
&lt;p>104 dec-&amp;gt;offset1[0] |= ((t &amp;gt;&amp;gt; 31) &amp;amp;1) &amp;lt;&amp;lt; 1;&lt;/p>
&lt;p>105&lt;/p>
&lt;p>106&lt;/p>
&lt;p>107 t = LE_32(input); // seventh dword&lt;/p>
&lt;p>108 input += 4;&lt;/p>
&lt;p>109&lt;/p>
&lt;p>110 dec-&amp;gt;pulsepos[2] = (t &amp;gt;&amp;gt; 4) &amp;amp;0x7FFFFFF;&lt;/p>
&lt;p>111&lt;/p>
&lt;p>112 dec-&amp;gt;pulseoff[2] = (t &amp;gt;&amp;gt; 0) &amp;amp;0xF;&lt;/p>
&lt;p>113&lt;/p>
&lt;p>114 dec-&amp;gt;offset1[0] |= ((t &amp;gt;&amp;gt; 31) &amp;amp;1) &amp;lt;&amp;lt; 2;&lt;/p>
&lt;p>115&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>116&lt;/p>
&lt;p>117 t = LE_32(input); // eighth dword&lt;/p>
&lt;p>118 input += 4;&lt;/p>
&lt;p>119&lt;/p>
&lt;p>120 dec-&amp;gt;pulsepos[3] = (t &amp;gt;&amp;gt; 4) &amp;amp;0x7FFFFFF;&lt;/p>
&lt;p>121&lt;/p>
&lt;p>122 dec-&amp;gt;pulseoff[3] = (t &amp;gt;&amp;gt; 0) &amp;amp;0xF;&lt;/p>
&lt;p>123&lt;/p>
&lt;p>124 dec-&amp;gt;offset1[0] |= ((t &amp;gt;&amp;gt; 31) &amp;amp;1) &amp;lt;&amp;lt; 3;&lt;/p>
&lt;p>125 }&lt;/p>
&lt;p>126&lt;/p>
&lt;p>127 static void truespeech_correlate_filter(TSContext *dec)&lt;/p>
&lt;p>128 {&lt;/p>
&lt;p>129 int16_t tmp[8];&lt;/p>
&lt;p>130 int i, j;&lt;/p>
&lt;p>131&lt;/p>
&lt;p>132 for (i = 0; i &amp;lt; 8; i++)&lt;/p>
&lt;p>133 {&lt;/p>
&lt;p>134 if (i &amp;gt; 0)&lt;/p>
&lt;p>135 {&lt;/p>
&lt;p>136 memcpy(tmp, dec-&amp;gt;cvector, i *2);&lt;/p>
&lt;p>137 for (j = 0; j &amp;lt; i; j++)&lt;/p>
&lt;p>138 dec-&amp;gt;cvector[j] =((tmp[i-j-1]*dec-&amp;gt;vector[i])+(dec-&amp;gt;cvector[j]&amp;lt;&amp;lt; 15)+0x4000)&amp;gt;&amp;gt;15;&lt;/p>
&lt;p>139 }&lt;/p>
&lt;p>140 dec-&amp;gt;cvector[i] = (8-dec-&amp;gt;vector[i]) &amp;gt;&amp;gt; 3;&lt;/p>
&lt;p>141 }&lt;/p>
&lt;p>142&lt;/p>
&lt;p>143 for (i = 0; i &amp;lt; 8; i++)&lt;/p>
&lt;p>144 dec-&amp;gt;cvector[i] = (dec-&amp;gt;cvector[i] *ts_230[i]) &amp;gt;&amp;gt; 15;&lt;/p>
&lt;p>145&lt;/p>
&lt;p>146 dec-&amp;gt;filtval = dec-&amp;gt;vector[0];&lt;/p>
&lt;p>147 }&lt;/p>
&lt;p>148&lt;/p>
&lt;p>149 static void truespeech_filters_merge(TSContext *dec)&lt;/p>
&lt;p>150 {&lt;/p>
&lt;p>151 int i;&lt;/p>
&lt;p>152&lt;/p>
&lt;p>153 if (!dec-&amp;gt;flag)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>154&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>155&lt;/td>
&lt;td>&lt;/td>
&lt;td>for (i = 0; i &amp;lt; 8; i++)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>156&lt;/td>
&lt;td>&lt;/td>
&lt;td>{&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">157 dec-&amp;gt;filters[i + 0] = dec-&amp;gt;prevfilt[i];&lt;/p>
&lt;p>158 dec-&amp;gt;filters[i + 8] = dec-&amp;gt;prevfilt[i];&lt;/p>
&lt;p>159 }&lt;/p>
&lt;p>160 }&lt;/p>
&lt;p>161 else&lt;/p>
&lt;p>162 {&lt;/p>
&lt;p>163 for (i = 0; i &amp;lt; 8; i++)&lt;/p>
&lt;p>164 {&lt;/p>
&lt;p>165 dec-&amp;gt;filters[i + 0] = (dec-&amp;gt;cvector[i] *21846+dec-&amp;gt;prevfilt[i] *10923+16384) &amp;gt;&amp;gt;&lt;/p>
&lt;p>15;&lt;/p>
&lt;p>166 dec-&amp;gt;filters[i + 8] = (dec-&amp;gt;cvector[i] *10923+dec-&amp;gt;prevfilt[i] *21846+16384) &amp;gt;&amp;gt;&lt;/p>
&lt;p>15;&lt;/p>
&lt;p>167 }&lt;/p>
&lt;p>168 }&lt;/p>
&lt;p>169 for (i = 0; i &amp;lt; 8; i++)&lt;/p>
&lt;p>170 {&lt;/p>
&lt;p>171 dec-&amp;gt;filters[i + 16] = dec-&amp;gt;cvector[i];&lt;/p>
&lt;p>172 dec-&amp;gt;filters[i + 24] = dec-&amp;gt;cvector[i];&lt;/p>
&lt;p>173 }&lt;/p>
&lt;p>174 }&lt;/p>
&lt;p>175&lt;/p>
&lt;p>176 static void truespeech_apply_twopoint_filter(TSContext *dec, int quart)&lt;/p>
&lt;p>177 {&lt;/p>
&lt;p>178 int16_t tmp[146+60], *ptr0, *ptr1, *filter;&lt;/p>
&lt;p>179 int i, t, off;&lt;/p>
&lt;p>180&lt;/p>
&lt;p>181 t = dec-&amp;gt;offset2[quart];&lt;/p>
&lt;p>182 if (t == 127)&lt;/p>
&lt;p>183 {&lt;/p>
&lt;p>184 memset(dec-&amp;gt;newvec, 0, 60 *2);&lt;/p>
&lt;p>185 return ;&lt;/p>
&lt;p>186 }&lt;/p>
&lt;p>187&lt;/p>
&lt;p>188 for (i = 0; i &amp;lt; 146; i++)&lt;/p>
&lt;p>189 tmp[i] = dec-&amp;gt;filtbuf[i];&lt;/p>
&lt;p>190&lt;/p>
&lt;p>191 off = (t / 25) + dec-&amp;gt;offset1[quart &amp;gt;&amp;gt; 1] + 18;&lt;/p>
&lt;p>192 ptr0 = tmp + 145-off;&lt;/p>
&lt;p>193 ptr1 = tmp + 146;&lt;/p>
&lt;p>194 filter = (int16_t*)ts_240 + (t % 25) *2;&lt;/p>
&lt;p>195 for (i = 0; i &amp;lt; 60; i++)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>196 {&lt;/p>
&lt;p>197 t = (ptr0[0] *filter[0] + ptr0[1] *filter[1] + 0x2000) &amp;gt;&amp;gt; 14;&lt;/p>
&lt;p>198 ptr0++;&lt;/p>
&lt;p>199 dec-&amp;gt;newvec[i] = t;&lt;/p>
&lt;p>200 ptr1[i] = t;&lt;/p>
&lt;p>201 }&lt;/p>
&lt;p>202 }&lt;/p>
&lt;p>203&lt;/p>
&lt;p>204 static void truespeech_place_pulses(TSContext *dec, int16_t *out, int quart)&lt;/p>
&lt;p>205 {&lt;/p>
&lt;p>206 int16_t tmp[7];&lt;/p>
&lt;p>207 int i, j, t;&lt;/p>
&lt;p>208 int16_t *ptr1, *ptr2;&lt;/p>
&lt;p>209 int coef;&lt;/p>
&lt;p>210&lt;/p>
&lt;p>211 memset(out, 0, 60 *2);&lt;/p>
&lt;p>212 for (i = 0; i &amp;lt; 7; i++)&lt;/p>
&lt;p>213 {&lt;/p>
&lt;p>214 t = dec-&amp;gt;pulseval[quart] &amp;amp;3;&lt;/p>
&lt;p>215 dec-&amp;gt;pulseval[quart] &amp;gt;&amp;gt;= 2;&lt;/p>
&lt;p>216 tmp[6-i] = ts_562[dec-&amp;gt;pulseoff[quart] *4+t];&lt;/p>
&lt;p>217 }&lt;/p>
&lt;p>218&lt;/p>
&lt;p>219 coef = dec-&amp;gt;pulsepos[quart] &amp;gt;&amp;gt; 15;&lt;/p>
&lt;p>220 ptr1 = (int16_t*)ts_140 + 30;&lt;/p>
&lt;p>221 ptr2 = tmp;&lt;/p>
&lt;p>222 for (i = 0, j = 3; (i &amp;lt; 30) &amp;amp;&amp;amp; (j &amp;gt; 0); i++)&lt;/p>
&lt;p>223 {&lt;/p>
&lt;p>224 t = *ptr1++;&lt;/p>
&lt;p>225 if (coef &amp;gt;= t)&lt;/p>
&lt;p>226 coef -= t;&lt;/p>
&lt;p>227 else&lt;/p>
&lt;p>228 {&lt;/p>
&lt;p>229 out[i] = *ptr2++;&lt;/p>
&lt;p>230 ptr1 += 30;&lt;/p>
&lt;p>231 j--;&lt;/p>
&lt;p>232 }&lt;/p>
&lt;p>233 }&lt;/p>
&lt;p>234 coef = dec-&amp;gt;pulsepos[quart] &amp;amp;0x7FFF;&lt;/p>
&lt;p>235 ptr1 = (int16_t*)ts_140;&lt;/p>
&lt;p>236 for (i = 30, j = 4; (i &amp;lt; 60) &amp;amp;&amp;amp; (j &amp;gt; 0); i++)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>237&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>238&lt;/td>
&lt;td>&lt;/td>
&lt;td>t = *ptr1++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>239&lt;/td>
&lt;td>&lt;/td>
&lt;td>if (coef &amp;gt;= t)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>240 coef -= t;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>241 else&lt;/p>
&lt;p>242 {&lt;/p>
&lt;p>243 out[i] = *ptr2++;&lt;/p>
&lt;p>244 ptr1 += 30;&lt;/p>
&lt;p>245 j--;&lt;/p>
&lt;p>246 }&lt;/p>
&lt;p>247 }&lt;/p>
&lt;p>248 }&lt;/p>
&lt;p>249&lt;/p>
&lt;p>250 static void truespeech_update_filters(TSContext *dec, int16_t *out, int quart)&lt;/p>
&lt;p>251 {&lt;/p>
&lt;p>252 int i;&lt;/p>
&lt;p>253&lt;/p>
&lt;p>254 for (i = 0; i &amp;lt; 86; i++)&lt;/p>
&lt;p>255 dec-&amp;gt;filtbuf[i] = dec-&amp;gt;filtbuf[i + 60];&lt;/p>
&lt;p>256&lt;/p>
&lt;p>257 for (i = 0; i &amp;lt; 60; i++)&lt;/p>
&lt;p>258 {&lt;/p>
&lt;p>259 dec-&amp;gt;filtbuf[i + 86] = out[i] + dec-&amp;gt;newvec[i] - (dec-&amp;gt;newvec[i] &amp;gt;&amp;gt; 3);&lt;/p>
&lt;p>260 out[i] += dec-&amp;gt;newvec[i];&lt;/p>
&lt;p>261 }&lt;/p>
&lt;p>262 }&lt;/p>
&lt;p>263&lt;/p>
&lt;p>264 static void truespeech_synth(TSContext *dec, int16_t *out, int quart)&lt;/p>
&lt;p>265 {&lt;/p>
&lt;p>266 int i, k;&lt;/p>
&lt;p>267 int t[8];&lt;/p>
&lt;p>268 int16_t *ptr0, *ptr1;&lt;/p>
&lt;p>269&lt;/p>
&lt;p>270 ptr0 = dec-&amp;gt;tmp1;&lt;/p>
&lt;p>271 ptr1 = dec-&amp;gt;filters + quart * 8;&lt;/p>
&lt;p>272 for (i = 0; i &amp;lt; 60; i++)&lt;/p>
&lt;p>273 {&lt;/p>
&lt;p>274 int sum = 0;&lt;/p>
&lt;p>275 for (k = 0; k &amp;lt; 8; k++)&lt;/p>
&lt;p>276 sum += ptr0[k] *ptr1[k];&lt;/p>
&lt;p>277 sum = (sum + (out[i] &amp;lt;&amp;lt; 12) + 0x800) &amp;gt;&amp;gt; 12;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>278&lt;/th>
&lt;th>&lt;/th>
&lt;th>out[i] = clip(sum, - 0x7FFE, 0x7FFE);&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>279&lt;/td>
&lt;td>&lt;/td>
&lt;td>for (k = 7; k &amp;gt; 0; k--)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>280&lt;/td>
&lt;td>&lt;/td>
&lt;td>ptr0[k] = ptr0[k - 1];&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>281&lt;/td>
&lt;td>&lt;/td>
&lt;td>ptr0[0] = out[i];&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>282&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>283&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>284 for (i = 0; i &amp;lt; 8; i++)&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>285 t[i] = (ts_5E2[i] *ptr1[i]) &amp;gt;&amp;gt; 15;&lt;/p>
&lt;p>286&lt;/p>
&lt;p>287 ptr0 = dec-&amp;gt;tmp2;&lt;/p>
&lt;p>288 for (i = 0; i &amp;lt; 60; i++)&lt;/p>
&lt;p>289 {&lt;/p>
&lt;p>290 int sum = 0;&lt;/p>
&lt;p>291 for (k = 0; k &amp;lt; 8; k++)&lt;/p>
&lt;p>292 sum += ptr0[k] *t[k];&lt;/p>
&lt;p>293 for (k = 7; k &amp;gt; 0; k--)&lt;/p>
&lt;p>294 ptr0[k] = ptr0[k - 1];&lt;/p>
&lt;p>295 ptr0[0] = out[i];&lt;/p>
&lt;p>296 out[i] = ((out[i] &amp;lt;&amp;lt; 12) - sum) &amp;gt;&amp;gt; 12;&lt;/p>
&lt;p>297 }&lt;/p>
&lt;p>298&lt;/p>
&lt;p>299 for (i = 0; i &amp;lt; 8; i++)&lt;/p>
&lt;p>300 t[i] = (ts_5F2[i] *ptr1[i]) &amp;gt;&amp;gt; 15;&lt;/p>
&lt;p>301&lt;/p>
&lt;p>302 ptr0 = dec-&amp;gt;tmp3;&lt;/p>
&lt;p>303 for (i = 0; i &amp;lt; 60; i++)&lt;/p>
&lt;p>304 {&lt;/p>
&lt;p>305 int sum = out[i] &amp;lt;&amp;lt; 12;&lt;/p>
&lt;p>306 for (k = 0; k &amp;lt; 8; k++)&lt;/p>
&lt;p>307 sum += ptr0[k] *t[k];&lt;/p>
&lt;p>308 for (k = 7; k &amp;gt; 0; k--)&lt;/p>
&lt;p>309 ptr0[k] = ptr0[k - 1];&lt;/p>
&lt;p>310 ptr0[0] = clip((sum + 0x800) &amp;gt;&amp;gt; 12, - 0x7FFE, 0x7FFE);&lt;/p>
&lt;p>311&lt;/p>
&lt;p>312 sum = ((ptr0[1]*(dec-&amp;gt;filtval - (dec-&amp;gt;filtval &amp;gt;&amp;gt; 2))) &amp;gt;&amp;gt; 4) + sum;&lt;/p>
&lt;p>313 sum = sum - (sum &amp;gt;&amp;gt; 3);&lt;/p>
&lt;p>314 out[i] = clip((sum + 0x800) &amp;gt;&amp;gt; 12, - 0x7FFE, 0x7FFE);&lt;/p>
&lt;p>315 }&lt;/p>
&lt;p>316 }&lt;/p>
&lt;p>317&lt;/p>
&lt;p>318 static void truespeech_save_prevvec(TSContext *c)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>319 {&lt;/p>
&lt;p>320 int i;&lt;/p>
&lt;p>321&lt;/p>
&lt;p>322 for (i = 0; i &amp;lt; 8; i++)&lt;/p>
&lt;p>323 c-&amp;gt;prevfilt[i] = c-&amp;gt;cvector[i];&lt;/p>
&lt;p>324 }&lt;/p>
&lt;p>325&lt;/p>
&lt;p>326 int truespeech_decode_frame(AVCodecContext *avctx, void *data, int *data_size, uint8_t *buf, int buf_size)&lt;/p>
&lt;p>327 {&lt;/p>
&lt;p>328 TSContext *c = avctx-&amp;gt;priv_data;&lt;/p>
&lt;p>329&lt;/p>
&lt;p>330 int i;&lt;/p>
&lt;p>331 short *samples = data;&lt;/p>
&lt;p>332 int consumed = 0;&lt;/p>
&lt;p>333 int16_t out_buf[240];&lt;/p>
&lt;p>334&lt;/p>
&lt;p>335 if (!buf_size)&lt;/p>
&lt;p>336 return 0;&lt;/p>
&lt;p>337&lt;/p>
&lt;p>338 while (consumed &amp;lt; buf_size)&lt;/p>
&lt;p>339 {&lt;/p>
&lt;p>340 truespeech_read_frame(c, buf + consumed);&lt;/p>
&lt;p>341 consumed += 32;&lt;/p>
&lt;p>342&lt;/p>
&lt;p>343 truespeech_correlate_filter(c);&lt;/p>
&lt;p>344 truespeech_filters_merge(c);&lt;/p>
&lt;p>345&lt;/p>
&lt;p>346 memset(out_buf, 0, 240 *2);&lt;/p>
&lt;p>347 for (i = 0; i &amp;lt; 4; i++)&lt;/p>
&lt;p>348 {&lt;/p>
&lt;p>349 truespeech_apply_twopoint_filter(c, i);&lt;/p>
&lt;p>350 truespeech_place_pulses(c, out_buf + i * 60, i);&lt;/p>
&lt;p>351 truespeech_update_filters(c, out_buf + i * 60, i);&lt;/p>
&lt;p>352 truespeech_synth(c, out_buf + i * 60, i);&lt;/p>
&lt;p>353 }&lt;/p>
&lt;p>354&lt;/p>
&lt;p>355 truespeech_save_prevvec(c);&lt;/p>
&lt;p>356&lt;/p>
&lt;p>357 for (i = 0; i &amp;lt; 240; i++) // finally output decoded frame&lt;/p>
&lt;p>358 *samples++ = out_buf[i];&lt;/p>
&lt;p>359&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>360 }&lt;/p>
&lt;p>361&lt;/p>
&lt;p>362 *data_size = consumed * 15;&lt;/p>
&lt;p>363&lt;/p>
&lt;p>364 return buf_size;&lt;/p>
&lt;p>365 }&lt;/p>
&lt;p>366&lt;/p>
&lt;p>367 AVCodec truespeech_decoder =&lt;/p>
&lt;p>368 {&lt;/p>
&lt;p>369 &amp;quot;truespeech&amp;quot;,&lt;/p>
&lt;p>370 CODEC_TYPE_AUDIO,&lt;/p>
&lt;p>371 CODEC_ID_TRUESPEECH,&lt;/p>
&lt;p>372 sizeof(TSContext),&lt;/p>
&lt;p>373 truespeech_decode_init,&lt;/p>
&lt;p>374 NULL,&lt;/p>
&lt;p>375 NULL,&lt;/p>
&lt;p>376 truespeech_decode_frame,&lt;/p>
&lt;p>377 };&lt;/p>
&lt;h2 id="53-libavformat容器模块">&lt;strong>5.3 libavformat容器模块&lt;/strong>&lt;/h2>
&lt;h3 id="1-文件列表-2">&lt;strong>1 文件列表&lt;/strong>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件类型&lt;/th>
&lt;th>文件名&lt;/th>
&lt;th>大小(bytes)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>avformat.h&lt;/td>
&lt;td>5352&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>allformats.c&lt;/td>
&lt;td>299&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>cutils.c&lt;/td>
&lt;td>606&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>file.c&lt;/td>
&lt;td>1504&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.029.png" alt="">&lt;/td>
&lt;td>avio.h&lt;/td>
&lt;td>3103&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>avio.c&lt;/td>
&lt;td>2286&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>aviobuf.c&lt;/td>
&lt;td>6887&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>utils_format.c&lt;/td>
&lt;td>7662&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.040.png" alt="">&lt;/td>
&lt;td>avidec.c&lt;/td>
&lt;td>21713&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="2-avformath-文件">&lt;strong>2 avformat.h 文件&lt;/strong>&lt;/h3>
&lt;p>2.1 功能描述&lt;/p>
&lt;p>定义识别文件格式和媒体类型库使用的宏、数据结构和函数，通常这些宏、数据结构和函数在此模块内相 对全局有效。&lt;/p>
&lt;p>2.2 文件注释&lt;/p>
&lt;p>1 #ifndef AVFORMAT_H&lt;/p>
&lt;p>2 #define AVFORMAT_H&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #ifdef cplusplus&lt;/p>
&lt;p>5 extern &amp;quot;C&amp;quot;&lt;/p>
&lt;p>6 {&lt;/p>
&lt;p>7 #endif&lt;/p>
&lt;p>8&lt;/p>
&lt;p>9 #define LIBAVFORMAT_VERSION_INT ((50&amp;lt;&amp;lt;16)+(4&amp;lt;&amp;lt;8)+0)&lt;/p>
&lt;p>10 #define LIBAVFORMAT_VERSION 50.4.0&lt;/p>
&lt;p>11 #define LIBAVFORMAT_BUILD LIBAVFORMAT_VERSION_INT&lt;/p>
&lt;p>12&lt;/p>
&lt;p>13 #define LIBAVFORMAT_IDENT &amp;quot;Lavf&amp;quot; AV_STRINGIFY(LIBAVFORMAT_VERSION)&lt;/p>
&lt;p>14&lt;/p>
&lt;p>15 #include &amp;quot;../libavcodec/avcodec.h&amp;quot;&lt;/p>
&lt;p>16 #include &amp;quot;avio.h&amp;quot;&lt;/p>
&lt;p>17&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.062.png" alt="">&lt;/p>
&lt;p>一些简单的宏定义&lt;/p>
&lt;p>18 #define AVERROR_UNKNOWN (-1) // unknown error&lt;/p>
&lt;p>19 #define AVERROR_IO (-2) // i/o error&lt;/p>
&lt;p>20 #define AVERROR_NUMEXPECTED (-3) // number syntax expected in filename&lt;/p>
&lt;p>21 #define AVERROR_INVALIDDATA (-4) // invalid data found&lt;/p>
&lt;p>22 #define AVERROR_NOMEM (-5) // not enough memory&lt;/p>
&lt;p>23 #define AVERROR_NOFMT (-6) // unknown format&lt;/p>
&lt;p>24 #define AVERROR_NOTSUPP (-7) // operation not supported&lt;/p>
&lt;p>25&lt;/p>
&lt;p>26 #define AVSEEK_FLAG_BACKWARD 1 // seek backward&lt;/p>
&lt;p>27 #define AVSEEK_FLAG_BYTE 2 // seeking based on position in bytes&lt;/p>
&lt;p>28 #define AVSEEK_FLAG_ANY 4 // seek to any frame, even non keyframes&lt;/p>
&lt;p>29&lt;/p>
&lt;p>30 #define AVFMT_NOFILE 0x0001 // no file should be opened&lt;/p>
&lt;p>31&lt;/p>
&lt;p>32 #define PKT_FLAG_KEY 0x0001&lt;/p>
&lt;p>33&lt;/p>
&lt;p>34 #define AVINDEX_KEYFRAME 0x0001&lt;/p>
&lt;p>35&lt;/p>
&lt;p>36 #define AVPROBE_SCORE_MAX 100&lt;/p>
&lt;p>37&lt;/p>
&lt;p>38 #define MAX_STREAMS 20&lt;/p>
&lt;p>39&lt;/p>
&lt;p>音视频数据包定义，在瘦身后的 ffplay 中，每一个包是一个完整的数据帧。注意保存音视频数据包的内存&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.063.png" alt="">是 malloc 出来的，用完后应及时用 free 归还给系统。&lt;/p>
&lt;p>40 typedef struct AVPacket&lt;/p>
&lt;p>41 {&lt;/p>
&lt;p>42 int64_t pts; // presentation time stamp in time_base units // 表示时间，对视频是显示时间&lt;/p>
&lt;p>43 int64_t dts; // decompression time stamp in time_base units// 解码时间，这个不是很重要&lt;/p>
&lt;p>44 int64_t pos; // byte position in stream, -1 if unknown&lt;/p>
&lt;p>45 uint8_t *data; // 实际保存音视频数据缓存的首地址&lt;/p>
&lt;p>46 int size; // 实际保存音视频数据缓存的大小&lt;/p>
&lt;p>47 int stream_index; // 当前音视频数据包对应的流索引，在本例中用于区别音频还是视频。&lt;/p>
&lt;p>48 int flags; // 数据包的一些标记，比如是否是关键帧等。&lt;/p>
&lt;p>49 void(*destruct)(struct AVPacket*);&lt;/p>
&lt;p>50 } AVPacket;&lt;/p>
&lt;p>51&lt;/p>
&lt;p>音视频数据包链表定义，注意每一个 AVPacketList 仅含有一个 AVPacket，和传统的很多很多节点的 list&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.063.png" alt="">不同，不要被 list 名字迷惑。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>52 typedef struct AVPacketList&lt;/p>
&lt;p>53 {&lt;/p>
&lt;p>54 AVPacket pkt;&lt;/p>
&lt;p>55 struct AVPacketList *next; // 用于把各个 AVPacketList 串联起来。&lt;/p>
&lt;p>56 } AVPacketList;&lt;/p>
&lt;p>57&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.064.png" alt="">&lt;/p>
&lt;p>释放掉音视频数据包占用的内存，把首地址置空是一个很好的习惯。&lt;/p>
&lt;p>58 static inline void av_destruct_packet(AVPacket *pkt)&lt;/p>
&lt;p>59 {&lt;/p>
&lt;p>60 av_free(pkt-&amp;gt;data);&lt;/p>
&lt;p>61 pkt-&amp;gt;data = NULL;&lt;/p>
&lt;p>62 pkt-&amp;gt;size = 0;&lt;/p>
&lt;p>63 }&lt;/p>
&lt;p>64&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.065.png" alt="">&lt;/p>
&lt;p>判断一些指针，中转一下，释放掉音视频数据包占用的内存。&lt;/p>
&lt;p>65 static inline void av_free_packet(AVPacket *pkt)&lt;/p>
&lt;p>66 {&lt;/p>
&lt;p>67 if (pkt &amp;amp;&amp;amp; pkt-&amp;gt;destruct)&lt;/p>
&lt;p>68 pkt-&amp;gt;destruct(pkt);&lt;/p>
&lt;p>69 }&lt;/p>
&lt;p>70&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.066.png" alt="">&lt;/p>
&lt;p>读文件往数据包中填数据，注意程序跑到这里时，文件偏移量已确定，要读数据的大小也确定，但是&lt;/p>
&lt;p>数据包的缓存没有分配。分配好内存后，要初始化包的一些变量。&lt;/p>
&lt;p>71 static inline int av_get_packet(ByteIOContext *s, AVPacket *pkt, int size)&lt;/p>
&lt;p>72 {&lt;/p>
&lt;p>73 int ret;&lt;/p>
&lt;p>74 unsigned char *data;&lt;/p>
&lt;p>75 if ((unsigned)size &amp;gt; (unsigned)size + FF_INPUT_BUFFER_PADDING_SIZE)&lt;/p>
&lt;p>76 return AVERROR_NOMEM;&lt;/p>
&lt;p>77&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.065.png" alt="">&lt;/p>
&lt;p>分配数据包缓存&lt;/p>
&lt;p>78 data = av_malloc(size + FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>79 if (!data)&lt;/p>
&lt;p>80 return AVERROR_NOMEM;&lt;/p>
&lt;p>81&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.064.png" alt="">&lt;/p>
&lt;p>把数据包中 pad 部分清 0，这是一个很好的习惯。 缓存清 0 不管在什么情况下都是好习惯。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>82 memset(data + size, 0, FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>83&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.064.png" alt="">&lt;/p>
&lt;p>设置 AVPacket 其他的成员变量，能确定的就赋确定值，不能确定的赋初值。&lt;/p>
&lt;p>84 pkt-&amp;gt;pts = AV_NOPTS_VALUE;&lt;/p>
&lt;p>85 pkt-&amp;gt;dts = AV_NOPTS_VALUE;&lt;/p>
&lt;p>86 pkt-&amp;gt;pos = - 1;&lt;/p>
&lt;p>87 pkt-&amp;gt;flags = 0;&lt;/p>
&lt;p>88 pkt-&amp;gt;stream_index = 0;&lt;/p>
&lt;p>89 pkt-&amp;gt;data = data;&lt;/p>
&lt;p>90 pkt-&amp;gt;size = size;&lt;/p>
&lt;p>91 pkt-&amp;gt;destruct = av_destruct_packet;&lt;/p>
&lt;p>92&lt;/p>
&lt;p>93 pkt-&amp;gt;pos = url_ftell(s);&lt;/p>
&lt;p>94&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.065.png" alt="">&lt;/p>
&lt;p>实际读广义文件填充数据包，如果读文件错误时通常是到了末尾，要归还刚刚 malloc 出来的内存。&lt;/p>
&lt;p>95 ret = url_fread(s, pkt-&amp;gt;data, size);&lt;/p>
&lt;p>96 if (ret &amp;lt;= 0)&lt;/p>
&lt;p>97 av_free_packet(pkt);&lt;/p>
&lt;p>98 else&lt;/p>
&lt;p>99 pkt-&amp;gt;size = ret;&lt;/p>
&lt;p>100&lt;/p>
&lt;p>101 return ret;&lt;/p>
&lt;p>102 }&lt;/p>
&lt;p>103&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.067.png" alt="">&lt;/p>
&lt;p>为识别文 件格 式， 要读 一部 分文 件头数 据来 分析 匹配 ffplay 支持的文 件格 式文 件特 征。 于是&lt;/p>
&lt;p>AVProbeData 结构就定义了文件名，首地址和大小。此处的读独立于其他文件操作。&lt;/p>
&lt;p>104 typedef struct AVProbeData&lt;/p>
&lt;p>105 {&lt;/p>
&lt;p>106 const char *filename;&lt;/p>
&lt;p>107 unsigned char *buf;&lt;/p>
&lt;p>108 int buf_size;&lt;/p>
&lt;p>109 } AVProbeData;&lt;/p>
&lt;p>110&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.065.png" alt="">&lt;/p>
&lt;p>文件索引结构，flags 和 size 位定义是为了节省内存。&lt;/p>
&lt;p>111 typedef struct AVIndexEntry&lt;/p>
&lt;p>112 {&lt;/p>
&lt;p>113 int64_t pos;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>114 int64_t timestamp;&lt;/p>
&lt;p>115 int flags: 2;&lt;/p>
&lt;p>116 int size: 30;&lt;/p>
&lt;p>117 } AVIndexEntry;&lt;/p>
&lt;p>118&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.065.png" alt="">&lt;/p>
&lt;p>AVStream 抽象的表示一个媒体流，定义了所有媒体一些通用的属性。&lt;/p>
&lt;p>119 typedef struct AVStream&lt;/p>
&lt;p>120 {&lt;/p>
&lt;p>121 AVCodecContext *actx;// 关联到解码器//codec context,change from AVCodecContext *codec;&lt;/p>
&lt;p>122&lt;/p>
&lt;p>123 void *priv_data; // 在本例中，关联到 AVIStream&lt;/p>
&lt;p>124&lt;/p>
&lt;p>125 AVRational time_base; // 由 av_set_pts_info()函数初始化&lt;/p>
&lt;p>126&lt;/p>
&lt;p>127 AVIndexEntry *index_entries; // only used if the format does not support seeking natively&lt;/p>
&lt;p>128 int nb_index_entries;&lt;/p>
&lt;p>129 int index_entries_allocated_size;&lt;/p>
&lt;p>130&lt;/p>
&lt;p>131 double frame_last_delay; // 帧最后延迟&lt;/p>
&lt;p>132 } AVStream;&lt;/p>
&lt;p>133&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.064.png" alt="">&lt;/p>
&lt;p>AVFormatParameters 结构在瘦身后的 ffplay 中没有实际意义，为保证函数接口不变，没有删除。&lt;/p>
&lt;p>134 typedef struct AVFormatParameters&lt;/p>
&lt;p>135 {&lt;/p>
&lt;p>136 int dbg; //only for debug&lt;/p>
&lt;p>137 } AVFormatParameters;&lt;/p>
&lt;p>138&lt;/p>
&lt;p>AVInputFormat 定义输入文件容器格式，着重于功能函数，一种文件容器格式对应一个 AVInputFormat&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.068.png" alt="">结构，在程序运行时有多个实例，但瘦身后 ffplay 仅一个实例。&lt;/p>
&lt;p>139 typedef struct AVInputFormat&lt;/p>
&lt;p>140 {&lt;/p>
&lt;p>141 const char *name; // 文件容器格式名，用于人性化阅读，维护代码&lt;/p>
&lt;p>142&lt;/p>
&lt;p>143 int priv_data_size; // 程序运行时，文件容器格式对应的上下文结构大小，便于内存分配。&lt;/p>
&lt;p>144&lt;/p>
&lt;p>145 int(*read_probe)(AVProbeData*); // 功能性函数&lt;/p>
&lt;p>146&lt;/p>
&lt;p>147 int(*read_header)(struct AVFormatContext *, AVFormatParameters *ap);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>148&lt;/p>
&lt;p>149 int(*read_packet)(struct AVFormatContext *, AVPacket *pkt);&lt;/p>
&lt;p>150&lt;/p>
&lt;p>151 int(*read_close)(struct AVFormatContext*);&lt;/p>
&lt;p>152&lt;/p>
&lt;p>153 const char *extensions; // 此种文件容器格式对应的文件扩展名，识别文件格式的最后办法。&lt;/p>
&lt;p>154&lt;/p>
&lt;p>155 struct AVInputFormat *next; // 用于把 ffplay 支持的所有文件容器格式链成一个链表。&lt;/p>
&lt;p>156&lt;/p>
&lt;p>157 } AVInputFormat;&lt;/p>
&lt;p>158&lt;/p>
&lt;p>AVFormatContext 结构表示程序运行的当前文件容器格式使用的上下文，着重于所有文件容器共有的属&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.068.png" alt="">性，程序运行后仅一个实例。&lt;/p>
&lt;p>159 typedef struct AVFormatContext // format I/O context&lt;/p>
&lt;p>160 {&lt;/p>
&lt;p>161 struct AVInputFormat *iformat; // 关联程序运行时，实际的文件容器格式指针。&lt;/p>
&lt;p>162&lt;/p>
&lt;p>163 void *priv_data; // 关联具体文件容器格式上下文的指针，在本例中是 AVIContext&lt;/p>
&lt;p>164&lt;/p>
&lt;p>165 ByteIOContext pb; // 关联广义输入文件&lt;/p>
&lt;p>166&lt;/p>
&lt;p>167 int nb_streams; // 广义输入文件中媒体流计数&lt;/p>
&lt;p>168&lt;/p>
&lt;p>169 AVStream *streams[MAX_STREAMS];// 关联广义输入文件中的媒体流&lt;/p>
&lt;p>170&lt;/p>
&lt;p>171 } AVFormatContext;&lt;/p>
&lt;p>172&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.065.png" alt="">&lt;/p>
&lt;p>相关函数说明参考相应的 c 实现文件。&lt;/p>
&lt;p>173 int avidec_init(void);&lt;/p>
&lt;p>174&lt;/p>
&lt;p>175 void av_register_input_format(AVInputFormat *format);&lt;/p>
&lt;p>176&lt;/p>
&lt;p>177 void av_register_all(void);&lt;/p>
&lt;p>178&lt;/p>
&lt;p>179 AVInputFormat *av_probe_input_format(AVProbeData *pd, int is_opened);&lt;/p>
&lt;p>180 int match_ext(const char *filename, const char *extensions);&lt;/p>
&lt;p>181&lt;/p>
&lt;p>182 int av_open_input_stream(AVFormatContext **ic_ptr, ByteIOContext *pb, const char *filename,&lt;/p>
&lt;p>183 AVInputFormat *fmt, AVFormatParameters *ap);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>184&lt;/p>
&lt;p>185 int av_open_input_file(AVFormatContext **ic_ptr, const char *filename, AVInputFormat *fmt,&lt;/p>
&lt;p>186 int buf_size, AVFormatParameters *ap);&lt;/p>
&lt;p>187&lt;/p>
&lt;p>188 int av_read_frame(AVFormatContext *s, AVPacket *pkt);&lt;/p>
&lt;p>189 int av_read_packet(AVFormatContext *s, AVPacket *pkt);&lt;/p>
&lt;p>190 void av_close_input_file(AVFormatContext *s);&lt;/p>
&lt;p>191 AVStream *av_new_stream(AVFormatContext *s, int id);&lt;/p>
&lt;p>192 void av_set_pts_info(AVStream *s, int pts_wrap_bits, int pts_num, int pts_den);&lt;/p>
&lt;p>193&lt;/p>
&lt;p>194 int av_index_search_timestamp(AVStream *st, int64_t timestamp, int flags);&lt;/p>
&lt;p>195 int av_add_index_entry(AVStream *st, int64_t pos, int64_t timestamp, int size, int distance, int flags);&lt;/p>
&lt;p>196&lt;/p>
&lt;p>197 int strstart(const char *str, const char *val, const char **ptr);&lt;/p>
&lt;p>198 void pstrcpy(char *buf, int buf_size, const char *str);&lt;/p>
&lt;p>199&lt;/p>
&lt;p>200 #ifdef cplusplus&lt;/p>
&lt;p>201 }&lt;/p>
&lt;p>202&lt;/p>
&lt;p>203 #endif&lt;/p>
&lt;p>204&lt;/p>
&lt;p>205 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="3-allformatc-文件">&lt;strong>3 allformat.c 文件&lt;/strong>&lt;/h3>
&lt;p>3.1 功能描述&lt;/p>
&lt;p>简单的注册/初始化函数，把相应的协议，文件格式，解码器等用相应的链表串起来便于查找。&lt;/p>
&lt;p>3.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>3 extern URLProtocol file_protocol;&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 void av_register_all(void)&lt;/p>
&lt;p>6 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.069.png" alt="">&lt;/p>
&lt;p>7 到 11 行，in ited 变量声明成 static ，做一下比较是为了避免此函数多次调用。&lt;/p>
&lt;p>编程基本原则之一，初始化函数只调用一次，不能随意多次调用。&lt;/p>
&lt;p>7 static int inited = 0;&lt;/p>
&lt;p>8&lt;/p>
&lt;p>9 if (inited != 0)&lt;/p>
&lt;p>10 return ;&lt;/p>
&lt;p>11 inited = 1;&lt;/p>
&lt;p>12&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.070.png" alt="">&lt;/p>
&lt;p>ffplay 把 CPU 当做一个广义的 DSP。有些计算可以用 CPU 自带的加速指令来优化，ffplay 把这类函数&lt;/p>
&lt;p>独立出来放到 dsputil.h 和 dsputil.c 文件中，用函数指针的方法映射到各个 CPU 具体的加速优化实现函数， 此处初始化这些函数指针。&lt;/p>
&lt;p>13 avcodec_init();&lt;/p>
&lt;p>14&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.071.png" alt="">&lt;/p>
&lt;p>把所有的解码器用链表的方式都串连起来，链表头指针是 first_avcodec。&lt;/p>
&lt;p>15 avcodec_register_all()&lt;/p>
&lt;p>16&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.071.png" alt="">&lt;/p>
&lt;p>把所有的输入文件格式用链表的方式都串连起来，链表头指针是 first_iformat。&lt;/p>
&lt;p>17 avidec_init();&lt;/p>
&lt;p>18&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.071.png" alt="">&lt;/p>
&lt;p>把所有的输入协议用链表的方式都串连起来，比如 tcp/udp/file 等，链表头指针是 first_protocol。&lt;/p>
&lt;p>19 register_protocol(&amp;amp;file_protocol);&lt;/p>
&lt;p>20 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="4-cutilsc-文件">&lt;strong>4 cutils.c 文件&lt;/strong>&lt;/h3>
&lt;p>4.1 功能描述&lt;/p>
&lt;p>ffplay 文件格式分析模块使用的两个工具类函数，都是对字符串的操作。&lt;/p>
&lt;p>4.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>strstart 实际的功能就是在 str 字符串中搜索 val 字符串指示的头，并且去掉头后用*ptr 返回。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.072.png" alt="">在本例中，在播本地文件时，在命令行输入时可能会在文件路径名前加前缀&amp;quot;file:&amp;quot;, 为调用系统的 open&lt;/p>
&lt;p>函数，需要把这几个前导字符去掉，仅仅传入完整有效的文件路径名。 和 rtsp://等网络协议相对应，播本地文件时应加 file:前缀。&lt;/p>
&lt;p>3 int strstart(const char *str, const char *val, const char **ptr)&lt;/p>
&lt;p>4 {&lt;/p>
&lt;p>5 const char *p, *q;&lt;/p>
&lt;p>6 p = str;&lt;/p>
&lt;p>7 q = val;&lt;/p>
&lt;p>8 while (*q != '\0')&lt;/p>
&lt;p>9 {&lt;/p>
&lt;p>10 if (*p != *q)&lt;/p>
&lt;p>11 return 0;&lt;/p>
&lt;p>12 p++;&lt;/p>
&lt;p>13 q++;&lt;/p>
&lt;p>14 }&lt;/p>
&lt;p>15 if (ptr)&lt;/p>
&lt;p>16 *ptr = p;&lt;/p>
&lt;p>17 return 1;&lt;/p>
&lt;p>18 }&lt;/p>
&lt;p>19&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.073.png" alt="">&lt;/p>
&lt;p>字符串拷贝函数，拷贝的字符数由 buf_size 指定，更安全的字符串拷贝操作。&lt;/p>
&lt;p>传统的 strcpy()函数是拷贝一个完整的字符串，如果目标字符串缓冲区小于源字符串长度，那么就会 发生缓冲区溢出导致错误，并且这种错误很难发现。&lt;/p>
&lt;p>20 void pstrcpy(char *buf, int buf_size, const char *str)&lt;/p>
&lt;p>21 {&lt;/p>
&lt;p>22 int c;&lt;/p>
&lt;p>23 char *q = buf;&lt;/p>
&lt;p>24&lt;/p>
&lt;p>25 if (buf_size &amp;lt;= 0)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>26 return ;&lt;/p>
&lt;p>27&lt;/p>
&lt;p>28 for (;;)&lt;/p>
&lt;p>29 {&lt;/p>
&lt;p>30 c = *str++;&lt;/p>
&lt;p>31 if (c == 0 || q &amp;gt;= buf + buf_size - 1)&lt;/p>
&lt;p>32 break;&lt;/p>
&lt;p>33 *q++ = c;&lt;/p>
&lt;p>34 }&lt;/p>
&lt;p>35 *q = '\0';&lt;/p>
&lt;p>36 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="5-filec-文件">&lt;strong>5 file.c 文件&lt;/strong>&lt;/h3>
&lt;p>5.1 功能描述&lt;/p>
&lt;p>ffplay 把 file 当做类似于 rtsp，rtp，tcp 等协议的一种协议，用 file:前缀标示 file 协议。 URLContext 结构抽象统一表示这些广义上的协议，对外提供统一的抽象接口。 各具体的广义协议实现文件实现 URLContext 接口。此文件实现了 file 广义协议的 URLContext 接口。&lt;/p>
&lt;p>5.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;../berrno.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>3 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>4 #include &amp;lt;fcntl.h&amp;gt;&lt;/p>
&lt;p>5&lt;/p>
&lt;p>6 #ifndef CONFIG_WIN32&lt;/p>
&lt;p>7 #include &amp;lt;unistd.h&amp;gt;&lt;/p>
&lt;p>8 #include &amp;lt;sys/ioctl.h&amp;gt;&lt;/p>
&lt;p>9 #include &amp;lt;sys/time.h&amp;gt;&lt;/p>
&lt;p>10 #else&lt;/p>
&lt;p>11 #include &amp;lt;io.h&amp;gt;&lt;/p>
&lt;p>12 #define open(fname,oflag,pmode) _open(fname,oflag,pmode)&lt;/p>
&lt;p>13 #endif&lt;/p>
&lt;p>14&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.074.png" alt="">&lt;/p>
&lt;p>打开本地媒体文件，把本地文件句柄作为广义文件句柄存放在 priv_data 中。&lt;/p>
&lt;p>15 static int file_open(URLContext *h, const char *filename, int flags)&lt;/p>
&lt;p>16 {&lt;/p>
&lt;p>17 int access;&lt;/p>
&lt;p>18 int fd;&lt;/p>
&lt;p>19&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.075.png" alt="">&lt;/p>
&lt;p>规整本地路径文件名，去掉前面可能的&amp;quot;file:&amp;quot; 字符串。ffplay 把本地文件看做广义 URL 协议。&lt;/p>
&lt;p>20 strstart(filename, &amp;quot;file:&amp;quot;, &amp;amp;filename);&lt;/p>
&lt;p>21&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.075.png" alt="">&lt;/p>
&lt;p>设置本地文件存取属性。&lt;/p>
&lt;p>22 if (flags &amp;amp;URL_RDWR)&lt;/p>
&lt;p>23 access = O_CREAT | O_TRUNC | O_RDWR;&lt;/p>
&lt;p>24 else if (flags &amp;amp;URL_WRONLY)&lt;/p>
&lt;p>25 access = O_CREAT | O_TRUNC | O_WRONLY;&lt;/p>
&lt;p>26 else&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">27 access = O_RDONLY;&lt;/p>
&lt;p>28 #if defined(CONFIG_WIN32) || defined(CONFIG_OS2) || defined( CYGWIN )&lt;/p>
&lt;p>29 access |= O_BINARY;&lt;/p>
&lt;p>30 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.075.png" alt="">&lt;/p>
&lt;p>调用 open()打开本地文件，并把本地文件句柄作为广义的 URL 句柄存放在 priv_data 变量中。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>31&lt;/th>
&lt;th>&lt;/th>
&lt;th>fd = open(filename, access, 0666);&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>32&lt;/td>
&lt;td>&lt;/td>
&lt;td>if (fd &amp;lt; 0)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>33&lt;/td>
&lt;td>&lt;/td>
&lt;td>return - ENOENT;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>34&lt;/td>
&lt;td>&lt;/td>
&lt;td>h-&amp;gt;priv_data = (void*)(size_t)fd;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>35&lt;/td>
&lt;td>&lt;/td>
&lt;td>return 0;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>36&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>37&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.075.png" alt="">转换广义 URL 句柄为本地文件句柄，调用 read()函数读本地文件。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>38 static int file_read(URLContext *h, unsigned char *buf, int size)&lt;/p>
&lt;p>39 {&lt;/p>
&lt;p>40 int fd = (size_t)h-&amp;gt;priv_data;&lt;/p>
&lt;p>41 return read(fd, buf, size);&lt;/p>
&lt;p>42 }&lt;/p>
&lt;p>43&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.074.png" alt="">&lt;/p>
&lt;p>转换广义 URL 句柄为本地文件句柄，调用 w ite()函数写本地文件，本播放器没实际使用此函数。&lt;/p>
&lt;p>44 static int file_write(URLContext *h, unsigned char *buf, int size)&lt;/p>
&lt;p>45 {&lt;/p>
&lt;p>46 int fd = (size_t)h-&amp;gt;priv_data;&lt;/p>
&lt;p>47 return write(fd, buf, size);&lt;/p>
&lt;p>48 }&lt;/p>
&lt;p>49&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.075.png" alt="">&lt;/p>
&lt;p>转换广义 URL 句柄为本地文件句柄，调用 lseek()函数设置本地文件读指针。&lt;/p>
&lt;p>50 static offset_t file_seek(URLContext *h, offset_t pos, int whence)&lt;/p>
&lt;p>51 {&lt;/p>
&lt;p>52 int fd = (size_t)h-&amp;gt;priv_data;&lt;/p>
&lt;p>53 return lseek(fd, pos, whence);&lt;/p>
&lt;p>54 }&lt;/p>
&lt;p>55&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.075.png" alt="">&lt;/p>
&lt;p>转换广义 URL 句柄为本地文件句柄，调用 close()函数关闭本地文件。&lt;/p>
&lt;p>56 static int file_close(URLContext *h)&lt;/p>
&lt;p>57 {&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">58 int fd = (size_t)h-&amp;gt;priv_data;&lt;/p>
&lt;p>59 return close(fd);&lt;/p>
&lt;p>60 }&lt;/p>
&lt;p>61&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.074.png" alt="">&lt;/p>
&lt;p>用 file 协议相应函数初始化 URLProtocol 结构。&lt;/p>
&lt;p>62 URLProtocol file_protocol =&lt;/p>
&lt;p>63 {&lt;/p>
&lt;p>64 &amp;quot;file&amp;quot;,&lt;/p>
&lt;p>65 file_open,&lt;/p>
&lt;p>66 file_read,&lt;/p>
&lt;p>67 file_write,&lt;/p>
&lt;p>68 file_seek,&lt;/p>
&lt;p>69 file_close,&lt;/p>
&lt;p>70 };&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="6-avioh-文件">&lt;strong>6 avio.h 文件&lt;/strong>&lt;/h3>
&lt;p>6.1 功能描述&lt;/p>
&lt;p>文件读写模块定义的数据结构和函数声明，ffplay 把这些全部放到这个.h 文件中。&lt;/p>
&lt;p>6.2 文件注释&lt;/p>
&lt;p>1 #ifndef AVIO_H&lt;/p>
&lt;p>2 #define AVIO_H&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 #define URL_EOF (-1)&lt;/p>
&lt;p>5&lt;/p>
&lt;p>6 typedef int64_t offset_t;&lt;/p>
&lt;p>7&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.076.png" alt="">&lt;/p>
&lt;p>简单的文件存取宏定义&lt;/p>
&lt;p>8 #define URL_RDONLY 0&lt;/p>
&lt;p>9 #define URL_WRONLY 1&lt;/p>
&lt;p>10 #define URL_RDWR 2&lt;/p>
&lt;p>11&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.077.png" alt="">&lt;/p>
&lt;p>URLContex t 结构表示程序运行的当前广义文件协议使用的上下文，着重于所有广义文件协议共有的 属性(并且是在程序运行时才能确定其值)和关联其他结构的字段。&lt;/p>
&lt;p>12 typedef struct URLContext&lt;/p>
&lt;p>13 {&lt;/p>
&lt;p>14 struct URLProtocol *prot; // 关联相应的广义输入文件协议。&lt;/p>
&lt;p>15 int flags;&lt;/p>
&lt;p>16 int max_packet_size; // 如果非 0，表示最大包大小，用于分配足够的缓存。&lt;/p>
&lt;p>17 void *priv_data; // 在本例中，关联一个文件句柄&lt;/p>
&lt;p>18 char filename[1]; // 在本例中，存取本地文件名，filename 仅指示本地文件名首地址。&lt;/p>
&lt;p>19 } URLContext;&lt;/p>
&lt;p>20&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.078.png" alt="">&lt;/p>
&lt;p>URLProtocol 定义广义的文件协议，着重于功能函数，一种广义的文件协议对应一个 URLProtocol 结 构，本例删掉了 pipe，udp，tcp 等输入协议，仅保留一个 file 协议。&lt;/p>
&lt;p>21 typedef struct URLProtocol&lt;/p>
&lt;p>22 {&lt;/p>
&lt;p>23 const char *name; // 协议文件名，便于人性化阅读理解。&lt;/p>
&lt;p>24 int(*url_open)(URLContext *h, const char *filename, int flags);&lt;/p>
&lt;p>25 int(*url_read)(URLContext *h, unsigned char *buf, int size);&lt;/p>
&lt;p>26 int(*url_write)(URLContext *h, unsigned char *buf, int size);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>27 offset_t(*url_seek)(URLContext *h, offset_t pos, int whence);&lt;/p>
&lt;p>28 int(*url_close)(URLContext *h);&lt;/p>
&lt;p>29 struct URLProtocol *next; // 把所有支持的输入协议串链起来，便于遍历查找。&lt;/p>
&lt;p>30 } URLProtocol;&lt;/p>
&lt;p>31&lt;/p>
&lt;p>ByteIOCon tex t 结构扩展 URLProtocol 结构成内部有缓冲机制的广泛意义上的文件，改善广义输入&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.080.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.079.png" alt="">文件的 IO 性能。 主要变量间的逻辑位置关系简单示意如下：&lt;/p>
&lt;p>32 typedef struct ByteIOContext&lt;/p>
&lt;p>33 {&lt;/p>
&lt;p>34 unsigned char *buffer; // 缓存首地址&lt;/p>
&lt;p>35 int buffer_size; // 缓存大小&lt;/p>
&lt;p>36 unsigned char *buf_ptr, *buf_end; // 缓存读指针和末指针&lt;/p>
&lt;p>37 void *opaque; // 指向 URLContext 结构的指针，便于跳转&lt;/p>
&lt;p>38 int(*read_packet)(void *opaque, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>39 int(*write_packet)(void *opaque, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>40 offset_t(*seek)(void *opaque, offset_t offset, int whence);&lt;/p>
&lt;p>41 offset_t pos; // position in the file of the current buffer&lt;/p>
&lt;p>42 int must_flush; // true if the next seek should flush&lt;/p>
&lt;p>43 int eof_reached; // true if eof reached&lt;/p>
&lt;p>44 int write_flag; // true if open for writing&lt;/p>
&lt;p>45 int max_packet_size; // 如果非 0，表示最大数据帧大小，用于分配足够的缓存。&lt;/p>
&lt;p>46 int error; // contains the error code or 0 if no error happened&lt;/p>
&lt;p>47 } ByteIOContext;&lt;/p>
&lt;p>48&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.081.png" alt="">相关函数说明参考相应的 c 实现文件。&lt;/p>
&lt;p>49 int url_open(URLContext **h, const char *filename, int flags);&lt;/p>
&lt;p>50 int url_read(URLContext *h, unsigned char *buf, int size);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>51 int url_write(URLContext *h, unsigned char *buf, int size);&lt;/p>
&lt;p>52 offset_t url_seek(URLContext *h, offset_t pos, int whence);&lt;/p>
&lt;p>53 int url_close(URLContext *h);&lt;/p>
&lt;p>54 int url_get_max_packet_size(URLContext *h);&lt;/p>
&lt;p>55&lt;/p>
&lt;p>56 int register_protocol(URLProtocol *protocol);&lt;/p>
&lt;p>57&lt;/p>
&lt;p>58 int init_put_byte(ByteIOContext *s,&lt;/p>
&lt;p>59 unsigned char *buffer,&lt;/p>
&lt;p>60 int buffer_size,&lt;/p>
&lt;p>61 int write_flag,&lt;/p>
&lt;p>62 void *opaque,&lt;/p>
&lt;p>63 int(*read_buf)(void *opaque, uint8_t *buf, int buf_size),&lt;/p>
&lt;p>64 int(*write_buf)(void *opaque, uint8_t *buf, int buf_size),&lt;/p>
&lt;p>65 offset_t(*seek)(void *opaque, offset_t offset, int whence));&lt;/p>
&lt;p>66&lt;/p>
&lt;p>67 offset_t url_fseek(ByteIOContext *s, offset_t offset, int whence);&lt;/p>
&lt;p>68 void url_fskip(ByteIOContext *s, offset_t offset);&lt;/p>
&lt;p>69 offset_t url_ftell(ByteIOContext *s);&lt;/p>
&lt;p>70 offset_t url_fsize(ByteIOContext *s);&lt;/p>
&lt;p>71 int url_feof(ByteIOContext *s);&lt;/p>
&lt;p>72 int url_ferror(ByteIOContext *s);&lt;/p>
&lt;p>73&lt;/p>
&lt;p>74 int url_fread(ByteIOContext *s, unsigned char *buf, int size); // get_buffer&lt;/p>
&lt;p>75 int get_byte(ByteIOContext *s);&lt;/p>
&lt;p>76 unsigned int get_le32(ByteIOContext *s);&lt;/p>
&lt;p>77 unsigned int get_le16(ByteIOContext *s);&lt;/p>
&lt;p>78&lt;/p>
&lt;p>79 int url_setbufsize(ByteIOContext *s, int buf_size);&lt;/p>
&lt;p>80 int url_fopen(ByteIOContext *s, const char *filename, int flags);&lt;/p>
&lt;p>81 int url_fclose(ByteIOContext *s);&lt;/p>
&lt;p>82&lt;/p>
&lt;p>83 int url_open_buf(ByteIOContext *s, uint8_t *buf, int buf_size, int flags);&lt;/p>
&lt;p>84 int url_close_buf(ByteIOContext *s);&lt;/p>
&lt;p>85&lt;/p>
&lt;p>86 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="7-avioc-文件">&lt;strong>7 avio.c 文件&lt;/strong>&lt;/h3>
&lt;p>7.1 功能描述&lt;/p>
&lt;p>此文件实现了 URLProtocol 抽象层广义文件操作函数，由于 URLProtocol 是底层其他具体文件 (file,pipe 等)&lt;/p>
&lt;p>的简单封装，这一层只是一个中转站，大部分函数都是简单中转到底层的具体实现函数。&lt;/p>
&lt;p>7.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;../berrno.h&amp;quot;&lt;/p>
&lt;p>2 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>3&lt;/p>
&lt;p>4 URLProtocol *first_protocol = NULL;&lt;/p>
&lt;p>5&lt;/p>
&lt;p>ffplay 抽象底层的 file ，pipe 等为 URLProtocol，然后把这些 URLProtocol 串联起来做成链表，便于查找 。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.082.png" alt="">register_protocol 实际就是串联的各个 URLProtocol，全局表头为 first_protocol。&lt;/p>
&lt;p>6 int register_protocol(URLProtocol *protocol)&lt;/p>
&lt;p>7 {&lt;/p>
&lt;p>8 URLProtocol **p;&lt;/p>
&lt;p>9 p = &amp;amp;first_protocol;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.083.png" alt="">&lt;/p>
&lt;p>移动指针到 URLProtocol 链表末尾。&lt;/p>
&lt;p>10 while (*p != NULL)&lt;/p>
&lt;p>11 p = &amp;amp;(*p)-&amp;gt;next;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.084.png" alt="">&lt;/p>
&lt;p>在 URLProtocol 链表末尾直接挂接当前的 URLProtocol 指针。&lt;/p>
&lt;p>12 *p = protocol;&lt;/p>
&lt;p>13 protocol-&amp;gt;next = NULL;&lt;/p>
&lt;p>14 return 0;&lt;/p>
&lt;p>15 }&lt;/p>
&lt;p>16&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.085.png" alt="">&lt;/p>
&lt;p>打开广义输入文件。此函数主要有三部分逻辑，首先从文件路径名中分离出协议字符串到 proto_str&lt;/p>
&lt;p>字符数组中，接着遍历 URLProtocol 链表查找匹配 proto_str 字符数组中的字符串来确定使用的协议，最 后调用相应的文件协议的打开函数打开输入文件。&lt;/p>
&lt;p>17 int url_open(URLContext **puc, const char *filename, int flags)&lt;/p>
&lt;p>18 {&lt;/p>
&lt;p>19 URLContext *uc;&lt;/p>
&lt;p>20 URLProtocol *up;&lt;/p>
&lt;p>21 const char *p;&lt;/p>
&lt;p>22 char proto_str[128], *q;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>23 int err;&lt;/p>
&lt;p>24&lt;/p>
&lt;p>以冒号和结束符作为边界从文件名中分离出的协议字符串到 proto_str 字符数组。由于协议只能是字符 ，&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.086.png" alt="">所以在边界前识别到非字符就断定是 file。&lt;/p>
&lt;p>25 p = filename;&lt;/p>
&lt;p>26 q = proto_str;&lt;/p>
&lt;p>27 while (*p != '\0' &amp;amp;&amp;amp; *p != ':')&lt;/p>
&lt;p>28 {&lt;/p>
&lt;p>29 if (!isalpha(*p)) // protocols can only contain alphabetic chars&lt;/p>
&lt;p>30 goto file_proto;&lt;/p>
&lt;p>31 if ((q - proto_str) &amp;lt; sizeof(proto_str) - 1)&lt;/p>
&lt;p>32 *q++ = *p;&lt;/p>
&lt;p>33 p++;&lt;/p>
&lt;p>34 }&lt;/p>
&lt;p>35&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.087.png" alt="">&lt;/p>
&lt;p>如果协议字符串只有一个字符，我们就认为是 w indow s 下的逻辑盘符，断定是 file 。&lt;/p>
&lt;p>36 if (*p == '\0' || (q - proto_str) &amp;lt;= 1)&lt;/p>
&lt;p>37 {&lt;/p>
&lt;p>38 file_proto:&lt;/p>
&lt;p>39 strcpy(proto_str, &amp;quot;file&amp;quot;);&lt;/p>
&lt;p>40 }&lt;/p>
&lt;p>41 else&lt;/p>
&lt;p>42 {&lt;/p>
&lt;p>43 *q = '\0';&lt;/p>
&lt;p>44 }&lt;/p>
&lt;p>45&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.087.png" alt="">&lt;/p>
&lt;p>遍历 URLProtocol 链表匹配使用的协议，如果没有找到就返回错误码。&lt;/p>
&lt;p>46 up = first_protocol;&lt;/p>
&lt;p>47 while (up != NULL)&lt;/p>
&lt;p>48 {&lt;/p>
&lt;p>49 if (!strcmp(proto_str, up-&amp;gt;name))&lt;/p>
&lt;p>50 goto found;&lt;/p>
&lt;p>51 up = up-&amp;gt;next;&lt;/p>
&lt;p>52 }&lt;/p>
&lt;p>53 err = - ENOENT;&lt;/p>
&lt;p>54 goto fail;&lt;/p>
&lt;p>55 found:&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>如果找到就分配 URLContext 结构内存，特别注意内存大小要加上文件名长度，文件名字符串结束标&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.088.png" alt="">记 0 也要预先分配 1 个字节内存，这 1 个字节就是 URLContext 结构中的 char filename[1]。&lt;/p>
&lt;p>56 uc = av_malloc(sizeof(URLContext) + strlen(filename));&lt;/p>
&lt;p>57 if (!uc)&lt;/p>
&lt;p>58 {&lt;/p>
&lt;p>59 err = - ENOMEM;&lt;/p>
&lt;p>60 goto fail;&lt;/p>
&lt;p>61 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.089.png" alt="">&lt;/p>
&lt;p>strcpy 函数会自动在 filename 字符数组后面补 0 作为字符串结束标记，所以不用特别赋值为 0。&lt;/p>
&lt;p>62 strcpy(uc-&amp;gt;filename, filename);&lt;/p>
&lt;p>63 uc-&amp;gt;prot = up;&lt;/p>
&lt;p>64 uc-&amp;gt;flags = flags;&lt;/p>
&lt;p>65 uc-&amp;gt;max_packet_size = 0; // default: stream file&lt;/p>
&lt;p>接着调用相应协议的文件打开函数实质打开文件。如果文件打开错误，就需要释放 malloc 出来的内&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.056.png" alt="">存，并返回错误码。&lt;/p>
&lt;p>66 err = up-&amp;gt;url_open(uc, filename, flags);&lt;/p>
&lt;p>67 if (err &amp;lt; 0)&lt;/p>
&lt;p>68 {&lt;/p>
&lt;p>69 av_free(uc); // 打开失败，释放刚刚分配的内存。&lt;/p>
&lt;p>70 *puc = NULL;&lt;/p>
&lt;p>71 return err;&lt;/p>
&lt;p>72 }&lt;/p>
&lt;p>73 *puc = uc;&lt;/p>
&lt;p>74 return 0;&lt;/p>
&lt;p>75 fail:&lt;/p>
&lt;p>76 *puc = NULL;&lt;/p>
&lt;p>77 return err;&lt;/p>
&lt;p>78 }&lt;/p>
&lt;p>79&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>简单的中转读操作到底层协议的读函数，完成读操作。&lt;/p>
&lt;p>80 int url_read(URLContext *h, unsigned char *buf, int size)&lt;/p>
&lt;p>81 {&lt;/p>
&lt;p>82 int ret;&lt;/p>
&lt;p>83 if (h-&amp;gt;flags &amp;amp;URL_WRONLY)&lt;/p>
&lt;p>84 return AVERROR_IO;&lt;/p>
&lt;p>85 ret = h-&amp;gt;prot-&amp;gt;url_read(h, buf, size);&lt;/p>
&lt;p>86 return ret;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>87 }&lt;/p>
&lt;p>88&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.046.png" alt="">&lt;/p>
&lt;p>简单的中转 seek 操作到底层协议的 seek 函数，完成 seek 操作。&lt;/p>
&lt;p>89 offset_t url_seek(URLContext *h, offset_t pos, int whence)&lt;/p>
&lt;p>90 {&lt;/p>
&lt;p>91 offset_t ret;&lt;/p>
&lt;p>92&lt;/p>
&lt;p>93 if (!h-&amp;gt;prot-&amp;gt;url_seek)&lt;/p>
&lt;p>94 return - EPIPE;&lt;/p>
&lt;p>95 ret = h-&amp;gt;prot-&amp;gt;url_seek(h, pos, whence);&lt;/p>
&lt;p>96 return ret;&lt;/p>
&lt;p>97 }&lt;/p>
&lt;p>98&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.090.png" alt="">&lt;/p>
&lt;p>简单的中转关闭操作到底层协议的关闭函数，完成关闭操作，并释放在 url_open()函数中 malloc 出&lt;/p>
&lt;p>来的内存。&lt;/p>
&lt;p>99 int url_close(URLContext *h)&lt;/p>
&lt;p>100 {&lt;/p>
&lt;p>101 int ret;&lt;/p>
&lt;p>102&lt;/p>
&lt;p>103 ret = h-&amp;gt;prot-&amp;gt;url_close(h);&lt;/p>
&lt;p>104 av_free(h);&lt;/p>
&lt;p>105 return ret;&lt;/p>
&lt;p>106 }&lt;/p>
&lt;p>107&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.061.png" alt="">&lt;/p>
&lt;p>取最大数据包大小，如果非 0，必须是实质有效的。&lt;/p>
&lt;p>108 int url_get_max_packet_size(URLContext *h)&lt;/p>
&lt;p>109 {&lt;/p>
&lt;p>110 return h-&amp;gt;max_packet_size;&lt;/p>
&lt;p>111 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="8-aviobufc-文件">&lt;strong>8 aviobuf.c 文件&lt;/strong>&lt;/h3>
&lt;p>8.1 功能描述&lt;/p>
&lt;p>有缓存的广义文件 ByteIOContext 相关的文件操作，比如 open，read，close，seek 等等。&lt;/p>
&lt;p>8.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;../berrno.h&amp;quot;&lt;/p>
&lt;p>2 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>3 #include &amp;quot;avio.h&amp;quot;&lt;/p>
&lt;p>4 #include &amp;lt;stdarg.h&amp;gt;&lt;/p>
&lt;p>5&lt;/p>
&lt;p>6 #define IO_BUFFER_SIZE 32768&lt;/p>
&lt;p>7&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>初始化广义文件 ByteIOContext 结构，一些简单的赋值操作。&lt;/p>
&lt;p>8 int init_put_byte(ByteIOContext *s,&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>9&lt;/th>
&lt;th>&lt;/th>
&lt;th>unsigned char *buffer,&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>10&lt;/td>
&lt;td>&lt;/td>
&lt;td>int buffer_size,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>11&lt;/td>
&lt;td>&lt;/td>
&lt;td>int write_flag,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>12&lt;/td>
&lt;td>&lt;/td>
&lt;td>void *opaque,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>13&lt;/td>
&lt;td>&lt;/td>
&lt;td>int(*read_buf)(void *opaque, uint8_t *buf, int buf_size),&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>14&lt;/td>
&lt;td>&lt;/td>
&lt;td>int(*write_buf)(void *opaque, uint8_t *buf, int buf_size),&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>&lt;/td>
&lt;td>offset_t(*seek)(void *opaque, offset_t offset, int whence))&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>16&lt;/td>
&lt;td>{&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buffer = buffer;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buffer_size = buffer_size;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buf_ptr = buffer;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>20&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;write_flag = write_flag;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>21&lt;/td>
&lt;td>&lt;/td>
&lt;td>if (!s-&amp;gt;write_flag)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>22&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buf_end = buffer; // 初始情况下，缓存中没有效数据，所以 buf_end 指向缓存首地址。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>23&lt;/td>
&lt;td>&lt;/td>
&lt;td>else&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>24&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buf_end = buffer + buffer_size;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>25&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;opaque = opaque;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>26&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;write_buf = write_buf;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>27&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;read_buf = read_buf;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>28&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;seek = seek;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>29&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;pos = 0;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>30&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;must_flush = 0;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>31&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;eof_reached = 0;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>32&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;error = 0;&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">33 s-&amp;gt;max_packet_size = 0;&lt;/p>
&lt;p>34 return 0;&lt;/p>
&lt;p>35 }&lt;/p>
&lt;p>36&lt;/p>
&lt;p>广义文件 ByteIOContext 的 seek 操作。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.092.png" alt="">输入变量：s 为广义文件句柄，offset 为偏移量，whence 为定位方式。 输出变量：相对广义文件开始的偏移量。&lt;/p>
&lt;p>37 offset_t url_fseek(ByteIOContext *s, offset_t offset, int whence)&lt;/p>
&lt;p>38 {&lt;/p>
&lt;p>39 offset_t offset1;&lt;/p>
&lt;p>40&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.092.png" alt="">&lt;/p>
&lt;p>只支持 SEEK_CU R 和 SEEK_SET 定位方式，不支持 SEEK_END 方式。&lt;/p>
&lt;p>SEEK_CUR:从文件当前读写位置为基准偏移 offset 字节。 SEEK_SET:从文件开始位置偏移 offset 字节。&lt;/p>
&lt;p>41 if (whence != SEEK_CUR &amp;amp;&amp;amp; whence != SEEK_SET)&lt;/p>
&lt;p>42 return - EINVAL;&lt;/p>
&lt;p>43&lt;/p>
&lt;p>ffplay 把 SEEK_CU R 和 SEEK_SET 统一成 SEEK_SET 方式处理，所以如果是 SEEK_CU R 方式就要转 换成 SEEK_SET 的偏移量。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.093.png" alt="">offset1 = s-&amp;gt;pos - (s-&amp;gt;buf_end - s-&amp;gt;buffer) + (s-&amp;gt;buf_ptr - s-&amp;gt;buffer) 算式关系请参照 3.6&lt;/p>
&lt;p>节的示意图，表示广义文件的当前实际偏移。&lt;/p>
&lt;p>44 if (whence == SEEK_CUR)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>45&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>46&lt;/td>
&lt;td>&lt;/td>
&lt;td>offset1 = s-&amp;gt;pos - (s-&amp;gt;buf_end - s-&amp;gt;buffer) + (s-&amp;gt;buf_ptr - s-&amp;gt;buffer);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>47&lt;/td>
&lt;td>&lt;/td>
&lt;td>if (offset == 0)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>48&lt;/td>
&lt;td>&lt;/td>
&lt;td>return offset1; // 如果偏移量为 0，返回实际偏移位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">计算绝对偏移量，赋值给 offset。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>49 offset += offset1; // 加上实际偏移量，统一成相对广义文件开始的绝对偏移量&lt;/p>
&lt;p>50 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>计算绝对偏移量相对当前缓存的偏移量，赋值给 offset1。&lt;/p>
&lt;p>51 offset1 = offset - (s-&amp;gt;pos - (s-&amp;gt;buf_end - s-&amp;gt;buffer));&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>判断绝对偏移量是否在当前缓存中，如果在当前缓存中，就简单的修改 buf_ptr 指针。&lt;/p>
&lt;p>52 if (offset1 &amp;gt;= 0 &amp;amp;&amp;amp; offset1 &amp;lt;= (s-&amp;gt;buf_end - s-&amp;gt;buffer))&lt;/p>
&lt;p>53 {&lt;/p>
&lt;p>54 s-&amp;gt;buf_ptr = s-&amp;gt;buffer + offset1; // can do the seek inside the buffer&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>55 }&lt;/p>
&lt;p>56 else&lt;/p>
&lt;p>57 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>判断当前广义文件是否可以 seek，如果不能 seek 就返回错误。&lt;/p>
&lt;p>58 if (!s-&amp;gt;seek)&lt;/p>
&lt;p>59 return - EPIPE;&lt;/p>
&lt;p>调用底层具体的文件系统的 seek 函数完成实际的 seek 操作，此时缓存需重新初始化，buf_end 重新指&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.095.png" alt="">向缓存首地址，并修改 pos 变量为广义文件当前实际偏移量。&lt;/p>
&lt;p>60 s-&amp;gt;buf_ptr = s-&amp;gt;buffer;&lt;/p>
&lt;p>61 s-&amp;gt;buf_end = s-&amp;gt;buffer;&lt;/p>
&lt;p>62 if (s-&amp;gt;seek(s-&amp;gt;opaque, offset, SEEK_SET) == (offset_t) - EPIPE)&lt;/p>
&lt;p>63 return - EPIPE;&lt;/p>
&lt;p>64 s-&amp;gt;pos = offset;&lt;/p>
&lt;p>65 }&lt;/p>
&lt;p>66 s-&amp;gt;eof_reached = 0;&lt;/p>
&lt;p>67&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>返回广义文件当前的实际偏移量。&lt;/p>
&lt;p>68 return offset;&lt;/p>
&lt;p>69 }&lt;/p>
&lt;p>70&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>广义文件 ByteIOContext 的当前实际偏移量再偏移 offset 字节，调用 url_fseek 实现。&lt;/p>
&lt;p>71 void url_fskip(ByteIOContext *s, offset_t offset)&lt;/p>
&lt;p>72 {&lt;/p>
&lt;p>73 url_fseek(s, offset, SEEK_CUR);&lt;/p>
&lt;p>74 }&lt;/p>
&lt;p>75&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>返回广义文件 ByteIOContext 的当前实际偏移量。&lt;/p>
&lt;p>76 offset_t url_ftell(ByteIOContext *s)&lt;/p>
&lt;p>77 {&lt;/p>
&lt;p>78 return url_fseek(s, 0, SEEK_CUR);&lt;/p>
&lt;p>79 }&lt;/p>
&lt;p>80&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>返回广义文件 ByteIOContext 的大小。&lt;/p>
&lt;p>81 offset_t url_fsize(ByteIOContext *s)&lt;/p>
&lt;p>82 {&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">83 offset_t size;&lt;/p>
&lt;p>84&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>判断当前广义文件 ByteIOContext 是否能 seek，如果不能就返回错误&lt;/p>
&lt;p>85 if (!s-&amp;gt;seek)&lt;/p>
&lt;p>86 return - EPIPE;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>调用底层的 seek 函数取得文件大小。&lt;/p>
&lt;p>87 size = s-&amp;gt;seek(s-&amp;gt;opaque, - 1, SEEK_END) + 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>注意 seek 操作改变了读指针，所以要重新 seek 到当前读指针位置。&lt;/p>
&lt;p>88 s-&amp;gt;seek(s-&amp;gt;opaque, s-&amp;gt;pos, SEEK_SET);&lt;/p>
&lt;p>89 return size;&lt;/p>
&lt;p>90 }&lt;/p>
&lt;p>91&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>判断当前广义文件 ByteIOContext 是否到末尾&lt;/p>
&lt;p>92 int url_feof(ByteIOContext *s)&lt;/p>
&lt;p>93 {&lt;/p>
&lt;p>94 return s-&amp;gt;eof_reached;&lt;/p>
&lt;p>95 }&lt;/p>
&lt;p>96&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>返回当前广义文件 ByteIOContext 操作错误码&lt;/p>
&lt;p>97 int url_ferror(ByteIOContext *s)&lt;/p>
&lt;p>98 {&lt;/p>
&lt;p>99 return s-&amp;gt;error;&lt;/p>
&lt;p>100 }&lt;/p>
&lt;p>101&lt;/p>
&lt;p>102 // Input stream&lt;/p>
&lt;p>103&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>填充广义文件 ByteIOContext 内部的数据缓存区。&lt;/p>
&lt;p>104 static void fill_buffer(ByteIOContext *s)&lt;/p>
&lt;p>105 {&lt;/p>
&lt;p>106 int len;&lt;/p>
&lt;p>107&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果到了广义文件 ByteIOContext 末尾就直接返回。&lt;/p>
&lt;p>108 if (s-&amp;gt;eof_reached)&lt;/p>
&lt;p>109 return ;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>110&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.096.png" alt="">&lt;/p>
&lt;p>调用底层文件系统的读函数实际读数据填到缓存，注意这里经过了好几次跳转才到底层读函数。首先&lt;/p>
&lt;p>跳转的 url_read_buf()函数，再跳转到 url_read()，再跳转到实际文件协议的读函数完成读操作。&lt;/p>
&lt;p>111 len = s-&amp;gt;read_buf(s-&amp;gt;opaque, s-&amp;gt;buffer, s-&amp;gt;buffer_size); // url_read_buf //&lt;/p>
&lt;p>112 if (len &amp;lt;= 0)&lt;/p>
&lt;p>113 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>如果是到达文件末尾就不要改 buffer 参数，这样不用重新读数据就可以做 seek back 操作。&lt;/p>
&lt;p>114 s-&amp;gt;eof_reached = 1;&lt;/p>
&lt;p>115&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>设置错误码，便于分析定位。&lt;/p>
&lt;p>116 if (len &amp;lt; 0)&lt;/p>
&lt;p>117 s-&amp;gt;error = len;&lt;/p>
&lt;p>118 }&lt;/p>
&lt;p>119 else&lt;/p>
&lt;p>120 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>如果正确读取，修改一下基本参数。参加 3.6 节中的示意图。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>121&lt;/th>
&lt;th>&lt;/th>
&lt;th>s-&amp;gt;pos += len;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>122&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buf_ptr = s-&amp;gt;buffer;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>123&lt;/td>
&lt;td>&lt;/td>
&lt;td>s-&amp;gt;buf_end = s-&amp;gt;buffer + len;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>124&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>125 }&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>126&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>从广义文件 ByteIOContext 中读取一个字节。&lt;/p>
&lt;p>127 int get_byte(ByteIOContext *s)&lt;/p>
&lt;p>128 {&lt;/p>
&lt;p>129 if (s-&amp;gt;buf_ptr &amp;lt; s-&amp;gt;buf_end)&lt;/p>
&lt;p>130 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果广义文件 ByteIOContext 内部缓存有数据，就修改读指针，返回读取的数据。&lt;/p>
&lt;p>131 return *s-&amp;gt;buf_ptr++;&lt;/p>
&lt;p>132 }&lt;/p>
&lt;p>133 else&lt;/p>
&lt;p>134 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>如果广义文件 ByteIOContext 内部缓存没有数据，就先填充内部缓存。&lt;/p>
&lt;p>135 fill_buffer(s);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>如果广义文件 ByteIOContext 内部缓存有数据，就修改读指针，返回读取的数据。如果没有数据就是&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.097.png" alt="">到了文件末尾，返回 0。&lt;/p>
&lt;p>NOTE: return 0 if EOF, so you cannot use it if EOF handling is necessary&lt;/p>
&lt;p>136 if (s-&amp;gt;buf_ptr &amp;lt; s-&amp;gt;buf_end)&lt;/p>
&lt;p>137 return *s-&amp;gt;buf_ptr++;&lt;/p>
&lt;p>138 else&lt;/p>
&lt;p>139 return 0;&lt;/p>
&lt;p>140 }&lt;/p>
&lt;p>141 }&lt;/p>
&lt;p>142&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>从广义文件 ByteIOContext 中以小端方式读取两个字节,实现代码充分复用 get_byte()函数。&lt;/p>
&lt;p>143 unsigned int get_le16(ByteIOContext *s)&lt;/p>
&lt;p>144 {&lt;/p>
&lt;p>145 unsigned int val;&lt;/p>
&lt;p>146 val = get_byte(s);&lt;/p>
&lt;p>147 val |= get_byte(s) &amp;lt;&amp;lt; 8;&lt;/p>
&lt;p>148 return val;&lt;/p>
&lt;p>149 }&lt;/p>
&lt;p>150&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>从广义文件 ByteIOContext 中以小端方式读取四个字节,实现代码充分复用 get_le16()函数。&lt;/p>
&lt;p>151 unsigned int get_le32(ByteIOContext *s)&lt;/p>
&lt;p>152 {&lt;/p>
&lt;p>153 unsigned int val;&lt;/p>
&lt;p>154 val = get_le16(s);&lt;/p>
&lt;p>155 val |= get_le16(s) &amp;lt;&amp;lt; 16;&lt;/p>
&lt;p>156 return val;&lt;/p>
&lt;p>157 }&lt;/p>
&lt;p>158&lt;/p>
&lt;p>159 #define url_write_buf NULL&lt;/p>
&lt;p>160&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>简单中转读操作函数。&lt;/p>
&lt;p>161 static int url_read_buf(void *opaque, uint8_t *buf, int buf_size)&lt;/p>
&lt;p>162 {&lt;/p>
&lt;p>163 URLContext *h = opaque;&lt;/p>
&lt;p>164 return url_read(h, buf, buf_size);&lt;/p>
&lt;p>165 }&lt;/p>
&lt;p>166&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.098.png" alt="">&lt;/p>
&lt;p>简单中转 seek 操作函数。&lt;/p>
&lt;p>167 static offset_t url_seek_buf(void *opaque, offset_t offset, int whence)&lt;/p>
&lt;p>168 {&lt;/p>
&lt;p>169 URLContext *h = opaque;&lt;/p>
&lt;p>170 return url_seek(h, offset, whence);&lt;/p>
&lt;p>171 }&lt;/p>
&lt;p>172&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>设置并分配广义文件 ByteIOContext 内部缓存的大小。更多的应用在修改内部缓存大小场合。&lt;/p>
&lt;p>173 int url_setbufsize(ByteIOContext *s, int buf_size) // must be called before any I/O&lt;/p>
&lt;p>174 {&lt;/p>
&lt;p>175 uint8_t *buffer;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>分配广义文件 ByteIOContext 内部缓存。&lt;/p>
&lt;p>176 buffer = av_malloc(buf_size);&lt;/p>
&lt;p>177 if (!buffer)&lt;/p>
&lt;p>178 return - ENOMEM;&lt;/p>
&lt;p>179&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>释放掉原来广义文件 ByteIOContext 的内部缓存，这是一个保险的操作。&lt;/p>
&lt;p>180 av_free(s-&amp;gt;buffer);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>设置广义文件 ByteIOContext 内部缓存相关参数。&lt;/p>
&lt;p>181 s-&amp;gt;buffer = buffer;&lt;/p>
&lt;p>182 s-&amp;gt;buffer_size = buf_size;&lt;/p>
&lt;p>183 s-&amp;gt;buf_ptr = buffer;&lt;/p>
&lt;p>184 if (!s-&amp;gt;write_flag)&lt;/p>
&lt;p>185 s-&amp;gt;buf_end = buffer; // 因为此时只是分配了内存,并没有读入数据,所以 buf_end 指向首地址&lt;/p>
&lt;p>186 else&lt;/p>
&lt;p>187 s-&amp;gt;buf_end = buffer + buf_size;&lt;/p>
&lt;p>188 return 0;&lt;/p>
&lt;p>189 }&lt;/p>
&lt;p>190&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>打开广义文件 ByteIOContext&lt;/p>
&lt;p>191 int url_fopen(ByteIOContext *s, const char *filename, int flags)&lt;/p>
&lt;p>192 {&lt;/p>
&lt;p>193 URLContext *h;&lt;/p>
&lt;p>194 uint8_t *buffer;&lt;/p>
&lt;p>195 int buffer_size, max_packet_size;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>196 int err;&lt;/p>
&lt;p>197&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>调用底层文件系统的 open 函数实质性打开文件&lt;/p>
&lt;p>198 err = url_open(&amp;amp;h, filename, flags);&lt;/p>
&lt;p>199 if (err &amp;lt; 0)&lt;/p>
&lt;p>200 return err;&lt;/p>
&lt;p>201&lt;/p>
&lt;p>读取底层文件系统支持的最大包大小。如果非 0，则设置为内部缓存的大小；否则内部缓存设置为默认&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.099.png" alt="">大小 IO_BUFFER_SIZE(32768 字节)。&lt;/p>
&lt;p>202 max_packet_size = url_get_max_packet_size(h);&lt;/p>
&lt;p>203 if (max_packet_size)&lt;/p>
&lt;p>204 {&lt;/p>
&lt;p>205 buffer_size = max_packet_size; // no need to bufferize more than one packet&lt;/p>
&lt;p>206 }&lt;/p>
&lt;p>207 else&lt;/p>
&lt;p>208 {&lt;/p>
&lt;p>209 buffer_size = IO_BUFFER_SIZE;&lt;/p>
&lt;p>210 }&lt;/p>
&lt;p>211&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.100.png" alt="">&lt;/p>
&lt;p>分配广义文件 ByteIOContext 内部缓存，如果错误就关闭文件返回错误码。&lt;/p>
&lt;p>212 buffer = av_malloc(buffer_size);&lt;/p>
&lt;p>213 if (!buffer)&lt;/p>
&lt;p>214 {&lt;/p>
&lt;p>215 url_close(h);&lt;/p>
&lt;p>216 return - ENOMEM;&lt;/p>
&lt;p>217 }&lt;/p>
&lt;p>218&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>初始化广义文件 ByteIOContext 数据结构，如果错误就关闭文件，释放内部缓存，返回错误码&lt;/p>
&lt;p>219 if (init_put_byte(s,&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>220&lt;/th>
&lt;th>&lt;/th>
&lt;th>buffer,&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>221&lt;/td>
&lt;td>&lt;/td>
&lt;td>buffer_size,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>222&lt;/td>
&lt;td>&lt;/td>
&lt;td>(h-&amp;gt;flags &amp;amp;URL_WRONLY&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>223&lt;/td>
&lt;td>&lt;/td>
&lt;td>h,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>224&lt;/td>
&lt;td>&lt;/td>
&lt;td>url_read_buf,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>225&lt;/td>
&lt;td>&lt;/td>
&lt;td>url_write_buf,&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>226&lt;/td>
&lt;td>&lt;/td>
&lt;td>url_seek_buf) &amp;lt; 0)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>227&lt;/td>
&lt;td>{&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">228 url_close(h);&lt;/p>
&lt;p>229 av_free(buffer);&lt;/p>
&lt;p>230 return AVERROR_IO;&lt;/p>
&lt;p>231 }&lt;/p>
&lt;p>232&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.101.png" alt="">&lt;/p>
&lt;p>保存最大包大小。&lt;/p>
&lt;p>233 s-&amp;gt;max_packet_size = max_packet_size;&lt;/p>
&lt;p>234&lt;/p>
&lt;p>235 return 0;&lt;/p>
&lt;p>236 }&lt;/p>
&lt;p>237&lt;/p>
&lt;p>关闭广义文件 ByteIOContext，首先释放掉内部使用的缓存，再把自己的字段置 0，最后转入底层文件&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.096.png" alt="">系统的关闭函数实质性关闭文件。&lt;/p>
&lt;p>238 int url_fclose(ByteIOContext *s)&lt;/p>
&lt;p>239 {&lt;/p>
&lt;p>240 URLContext *h = s-&amp;gt;opaque;&lt;/p>
&lt;p>241&lt;/p>
&lt;p>242 av_free(s-&amp;gt;buffer);&lt;/p>
&lt;p>243 memset(s, 0, sizeof(ByteIOContext));&lt;/p>
&lt;p>244 return url_close(h);&lt;/p>
&lt;p>245 }&lt;/p>
&lt;p>246&lt;/p>
&lt;p>广义文件 ByteIOContext 读操作，注意此函数从 get_buffer 改名而来，更贴切函数功能，也为了完备&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.095.png" alt="">广义文件操作函数集。&lt;/p>
&lt;p>247 int url_fread(ByteIOContext *s, unsigned char *buf, int size) // get_buffer&lt;/p>
&lt;p>248 {&lt;/p>
&lt;p>249 int len, size1;&lt;/p>
&lt;p>250&lt;/p>
&lt;p>考虑到 size 可能比缓存中的数据大得多，此时就多次读缓存，所以用 size1 保存要读取的总字节数，size&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.095.png" alt="">意义变更为还需要读取的字节数。&lt;/p>
&lt;p>251 size1 = size;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>如果还需要读的字节数大于 0，就进入循环继续读。&lt;/p>
&lt;p>252 while (size &amp;gt; 0)&lt;/p>
&lt;p>253 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.103.png" alt="">&lt;/p>
&lt;p>计算当次循环应该读取的字节数 len ，首先设置 len 为内部缓存数据长度，再和需要读的字节数 size 比，&lt;/p>
&lt;p>有条件修正 len 的值。&lt;/p>
&lt;p>254 len = s-&amp;gt;buf_end - s-&amp;gt;buf_ptr;&lt;/p>
&lt;p>255 if (len &amp;gt; size)&lt;/p>
&lt;p>256 len = size;&lt;/p>
&lt;p>257 if (len == 0)&lt;/p>
&lt;p>258 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果内部缓存没有数据。&lt;/p>
&lt;p>259 if (size &amp;gt; s-&amp;gt;buffer_size) // 读操作是否绕过内部缓存的判别条件&lt;/p>
&lt;p>260 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果要读取的数据量比内部缓存数据量大，就调用底层函数读取数据绕过内部缓存直接到目标缓存。&lt;/p>
&lt;p>261 len = s-&amp;gt;read_buf(s-&amp;gt;opaque, buf, size);&lt;/p>
&lt;p>262 if (len &amp;lt;= 0)&lt;/p>
&lt;p>263 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果底层文件系统读错误，设置文件末尾标记和错误码，跳出循环，返回实际读到的字节数。&lt;/p>
&lt;p>264 s-&amp;gt;eof_reached = 1;&lt;/p>
&lt;p>265 if (len &amp;lt; 0)&lt;/p>
&lt;p>266 s-&amp;gt;error = len;&lt;/p>
&lt;p>267 break;&lt;/p>
&lt;p>268 }&lt;/p>
&lt;p>269 else&lt;/p>
&lt;p>270 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>如果底层文件系统正确读，修改相关参数，进入下一轮循环。特别注意此处读文件绕过了内部缓存。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>271&lt;/th>
&lt;th>&lt;/th>
&lt;th>s-&amp;gt;pos += len;&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;p>272&lt;/p>&lt;p>273&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;p>size -= len;&lt;/p>&lt;p>buf += len; // 因为绕过了内部缓存，特别注意此处的修改&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;p>274&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;p>s-&amp;gt;buf_ptr = s-&amp;gt;buffer;&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;p>275&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;p>s-&amp;gt;buf_end = s-&amp;gt;buffer /* +len */;//因为绕过了内部缓存,特别注意此处&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>276&lt;/td>
&lt;td>&lt;p>}&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>277&lt;/td>
&lt;td>&lt;p>}&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>278&lt;/td>
&lt;td>&lt;p>else&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>279&lt;/td>
&lt;td>&lt;p>{&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">如果要读取的数据量比内部缓存数据量小，就调用底层函数读取数据到内部缓存，判断读成果否。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>280 fill_buffer(s);&lt;/p>
&lt;p>281 len = s-&amp;gt;buf_end - s-&amp;gt;buf_ptr;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>282&lt;/th>
&lt;th>&lt;/th>
&lt;th>if (len == 0)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>283&lt;/td>
&lt;td>&lt;/td>
&lt;td>break;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>284&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>285&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>286&lt;/td>
&lt;td>else&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>287&lt;/td>
&lt;td>{&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">如果内部缓存有数据，就拷贝 len 长度的数据到缓存区，并修改相关参数，进入下一个循环的条件判断。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>288 memcpy(buf, s-&amp;gt;buf_ptr, len);&lt;/p>
&lt;p>289 buf += len;&lt;/p>
&lt;p>290 s-&amp;gt;buf_ptr += len;&lt;/p>
&lt;p>291 size -= len;&lt;/p>
&lt;p>292 }&lt;/p>
&lt;p>293 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>返回实际读取的字节数。&lt;/p>
&lt;p>294 return size1 - size;&lt;/p>
&lt;p>295 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;h3 id="9-utils_formatc-文件">&lt;strong>9 utils_format.c 文件&lt;/strong>&lt;/h3>
&lt;p>9.1 功能描述&lt;/p>
&lt;p>识别文件格式和媒体格式部分使用的一些工具类函数。&lt;/p>
&lt;p>9.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;../berrno.h&amp;quot;&lt;/p>
&lt;p>2 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>3 #include &amp;lt;assert.h&amp;gt;&lt;/p>
&lt;p>4&lt;/p>
&lt;p>5 #define UINT_MAX (0xffffffff)&lt;/p>
&lt;p>6&lt;/p>
&lt;p>7 #define PROBE_BUF_MIN 2048&lt;/p>
&lt;p>8 #define PROBE_BUF_MAX 131072&lt;/p>
&lt;p>9&lt;/p>
&lt;p>10 AVInputFormat *first_iformat = NULL;&lt;/p>
&lt;p>11&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>注册文件容器格式。ffplay 把所有支持的文件容器格式用链表串联起来，表头是 first_iformat。&lt;/p>
&lt;p>12 void av_register_input_format(AVInputFormat *format)&lt;/p>
&lt;p>13 {&lt;/p>
&lt;p>14 AVInputFormat **p;&lt;/p>
&lt;p>15 p = &amp;amp;first_iformat;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>循环移动节点指针到最后一个文件容器格式。&lt;/p>
&lt;p>16 while (*p != NULL)&lt;/p>
&lt;p>17 p = &amp;amp;(*p)-&amp;gt;next;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>直接挂接要注册的文件容器格式。&lt;/p>
&lt;p>18 *p = format;&lt;/p>
&lt;p>19 format-&amp;gt;next = NULL;&lt;/p>
&lt;p>20 }&lt;/p>
&lt;p>21&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>比较文件的扩展名来识别文件类型。&lt;/p>
&lt;p>22 int match_ext(const char *filename, const char *extensions)&lt;/p>
&lt;p>23 {&lt;/p>
&lt;p>24 const char *ext, *p;&lt;/p>
&lt;p>25 char ext1[32], *q;&lt;/p>
&lt;p>26&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.104.png" alt="">&lt;/p>
&lt;p>如果输入文件为空就直接返回。&lt;/p>
&lt;p>27 if (!filename)&lt;/p>
&lt;p>28 return 0;&lt;/p>
&lt;p>29&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>用'.'号作为扩展名分割符，在文件名中找扩展名分割符。&lt;/p>
&lt;p>30 ext = strrchr(filename, '.');&lt;/p>
&lt;p>31 if (ext)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>32&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>33&lt;/td>
&lt;td>&lt;/td>
&lt;td>ext++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>34&lt;/td>
&lt;td>&lt;/td>
&lt;td>p = extensions;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>35&lt;/td>
&lt;td>&lt;/td>
&lt;td>for (;;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>36&lt;/td>
&lt;td>&lt;/td>
&lt;td>{&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.099.png" alt="">文件名中可能有多个标点符号，取两个标点符号间或一个标点和一个结束符间的字符串和扩展名比较 来判断文件类型，所以可能要多次比较，所以这里有一个循环。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>37 q = ext1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>定位下一个标点符号或字符串结束符，把这之间的字符拷贝到扩展名字符数组中。&lt;/p>
&lt;p>38 while (*p != '\0' &amp;amp;&amp;amp; *p != ',' &amp;amp;&amp;amp; q - ext1 &amp;lt; sizeof(ext1) - 1)&lt;/p>
&lt;p>39 *q++ = *p++;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>添加扩展名字符串结束标记 0。&lt;/p>
&lt;p>40 *q = '\0';&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>比较识别的扩展名是否后给定的扩展名相同，如果相同就返回 1，否则继续。&lt;/p>
&lt;p>41 if (!strcasecmp(ext1, ext))&lt;/p>
&lt;p>42 return 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>判断是否到了文件名末尾，如果是就返回，否则进入下一个循环&lt;/p>
&lt;p>43 if (*p == '\0')&lt;/p>
&lt;p>44 break;&lt;/p>
&lt;p>45 p++;&lt;/p>
&lt;p>46 }&lt;/p>
&lt;p>47 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果在前面的循环中没有匹配到扩展名，就是不识别的文件类型，返回 0&lt;/p>
&lt;p>48 return 0;&lt;/p>
&lt;p>49 }&lt;/p>
&lt;p>50&lt;/p>
&lt;p>探测输入的文件容器格式，返回识别出来的文件格式。如果没有识别出来，就返回初始值 NULL。&lt;/p>
&lt;p>51 AVInputFormat *av_probe_input_format(AVProbeData *pd, int is_opened)&lt;/p>
&lt;p>52 {&lt;/p>
&lt;p>53 AVInputFormat *fmt1, *fmt;&lt;/p>
&lt;p>54 int score, score_max;&lt;/p>
&lt;p>55&lt;/p>
&lt;p>56 fmt = NULL;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.105.png" alt="">&lt;/p>
&lt;p>score，score_max 可以理解识别文件容器格式的正确级别。文件容器格式识别结果，如果完全正确可&lt;/p>
&lt;p>以设定为 100，如果可能正确可以设定为 50，没识别出来设定为 0。识别方法不同导致等级不同。&lt;/p>
&lt;p>57 score_max = 0;&lt;/p>
&lt;p>58 for (fmt1 = first_iformat; fmt1 != NULL; fmt1 = fmt1-&amp;gt;next)&lt;/p>
&lt;p>59 {&lt;/p>
&lt;p>60 if (!is_opened)&lt;/p>
&lt;p>61 continue;&lt;/p>
&lt;p>62&lt;/p>
&lt;p>63 score = 0;&lt;/p>
&lt;p>64 if (fmt1-&amp;gt;read_probe)&lt;/p>
&lt;p>65 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.106.png" alt="">&lt;/p>
&lt;p>读取文件头，判断文件头的内容来识别文件容器格式，这种识别方法非常可靠，设定 score 为 100。&lt;/p>
&lt;p>66 score = fmt1-&amp;gt;read_probe(pd);&lt;/p>
&lt;p>67 }&lt;/p>
&lt;p>68 else if (fmt1-&amp;gt;extensions)&lt;/p>
&lt;p>69 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.096.png" alt="">&lt;/p>
&lt;p>通过文件扩展名来识别文件容器格式，因为文件扩展名任何人都可以改，如果改变扩展名，这种方法&lt;/p>
&lt;p>就错误，如果不改变扩展名，这种识别方法有点可靠，综合等级为 50。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>70&lt;/th>
&lt;th>&lt;/th>
&lt;th>if (match_ext(pd-&amp;gt;filename, fmt1-&amp;gt;extensions))&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>71&lt;/td>
&lt;td>&lt;/td>
&lt;td>score = 50;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>72&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.107.png" alt="">如果识别出来的等级大于最大要求的等级，就认为正确识别，相关参数赋值后，进下一个循环，最后 返回最高级别对应的文件容器格式。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>73 if (score &amp;gt; score_max)&lt;/p>
&lt;p>74 {&lt;/p>
&lt;p>75 score_max = score;&lt;/p>
&lt;p>76 fmt = fmt1;&lt;/p>
&lt;p>77 }&lt;/p>
&lt;p>78 }&lt;/p>
&lt;p>返回文件容器格式，如果没有识别出来，返回的是初始值 NULL。&lt;/p>
&lt;p>79 return fmt;&lt;/p>
&lt;p>80 }&lt;/p>
&lt;p>81&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>打开输入流，其中 AVFormatParameters *ap 参数在瘦身后的 ffplay 中没有用到，保留为了不改变接口。&lt;/p>
&lt;p>82 int av_open_input_stream(AVFormatContext **ic_ptr, ByteIOContext *pb, const char *filename,&lt;/p>
&lt;p>83 AVInputFormat *fmt, AVFormatParameters *ap)&lt;/p>
&lt;p>84 {&lt;/p>
&lt;p>85 int err;&lt;/p>
&lt;p>86 AVFormatContext *ic;&lt;/p>
&lt;p>87 AVFormatParameters default_ap;&lt;/p>
&lt;p>88&lt;/p>
&lt;p>89 if (!ap)&lt;/p>
&lt;p>90 {&lt;/p>
&lt;p>91 ap = &amp;amp;default_ap;&lt;/p>
&lt;p>92 memset(ap, 0, sizeof(default_ap));&lt;/p>
&lt;p>93 }&lt;/p>
&lt;p>94&lt;/p>
&lt;p>分配 AVFormatContext 内存，部分成员变量在接下来的程序代码中赋值，部分成员变量在下面调用的&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.099.png" alt="">ic-&amp;gt;iformat-&amp;gt;read_header(ic, ap)函数中赋值。&lt;/p>
&lt;p>95 ic = av_mallocz(sizeof(AVFormatContext));&lt;/p>
&lt;p>96 if (!ic)&lt;/p>
&lt;p>97 {&lt;/p>
&lt;p>98 err = AVERROR_NOMEM;&lt;/p>
&lt;p>99 goto fail;&lt;/p>
&lt;p>100 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>关联 AVFormatContext 和 AVInputFormat&lt;/p>
&lt;p>101 ic-&amp;gt;iformat = fmt;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>关联 AVFormatContext 和广义文件 ByteIOContext&lt;/p>
&lt;p>102 if (pb)&lt;/p>
&lt;p>103 ic-&amp;gt;pb = *pb;&lt;/p>
&lt;p>104&lt;/p>
&lt;p>105 if (fmt-&amp;gt;priv_data_size &amp;gt; 0)&lt;/p>
&lt;p>106 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>分配 priv_data 指向的内存。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>107 ic-&amp;gt;priv_data = av_mallocz(fmt-&amp;gt;priv_data_size);&lt;/p>
&lt;p>108 if (!ic-&amp;gt;priv_data)&lt;/p>
&lt;p>109 {&lt;/p>
&lt;p>110 err = AVERROR_NOMEM;&lt;/p>
&lt;p>111 goto fail;&lt;/p>
&lt;p>112 }&lt;/p>
&lt;p>113 }&lt;/p>
&lt;p>114 else&lt;/p>
&lt;p>115 {&lt;/p>
&lt;p>116 ic-&amp;gt;priv_data = NULL;&lt;/p>
&lt;p>117 }&lt;/p>
&lt;p>118&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>读取文件头，识别媒体流格式。&lt;/p>
&lt;p>119 err = ic-&amp;gt;iformat-&amp;gt;read_header(ic, ap);&lt;/p>
&lt;p>120 if (err &amp;lt; 0)&lt;/p>
&lt;p>121 goto fail;&lt;/p>
&lt;p>122&lt;/p>
&lt;p>123 *ic_ptr = ic;&lt;/p>
&lt;p>124 return 0;&lt;/p>
&lt;p>125&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>简单常规的错误处理。&lt;/p>
&lt;p>126 fail:&lt;/p>
&lt;p>127 if (ic)&lt;/p>
&lt;p>128 av_freep(&amp;amp;ic-&amp;gt;priv_data);&lt;/p>
&lt;p>129&lt;/p>
&lt;p>130 av_free(ic);&lt;/p>
&lt;p>131 *ic_ptr = NULL;&lt;/p>
&lt;p>132 return err;&lt;/p>
&lt;p>133 }&lt;/p>
&lt;p>134&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>打开输入文件，并识别文件格式，然后调用函数识别媒体流格式。&lt;/p>
&lt;p>135 int av_open_input_file(AVFormatContext **ic_ptr, const char *filename, AVInputFormat *fmt,&lt;/p>
&lt;p>136 int buf_size, AVFormatParameters *ap)&lt;/p>
&lt;p>137 {&lt;/p>
&lt;p>138 int err, must_open_file, file_opened, probe_size;&lt;/p>
&lt;p>139 AVProbeData probe_data, *pd = &amp;amp;probe_data;&lt;/p>
&lt;p>140 ByteIOContext pb1, *pb = &amp;amp;pb1;&lt;/p>
&lt;p>141&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>142 file_opened = 0;&lt;/p>
&lt;p>143 pd-&amp;gt;filename = &amp;quot;&amp;quot;;&lt;/p>
&lt;p>144 if (filename)&lt;/p>
&lt;p>145 pd-&amp;gt;filename = filename;&lt;/p>
&lt;p>146 pd-&amp;gt;buf = NULL;&lt;/p>
&lt;p>147 pd-&amp;gt;buf_size = 0;&lt;/p>
&lt;p>148&lt;/p>
&lt;p>149 must_open_file = 1;&lt;/p>
&lt;p>150&lt;/p>
&lt;p>151 if (!fmt || must_open_file)&lt;/p>
&lt;p>152 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>打开输入文件，关联 ByteIOContext，经过跳转几次后才实质调用文件系统 open()函数实质打开文件。&lt;/p>
&lt;p>153 if (url_fopen(pb, filename, URL_RDONLY) &amp;lt; 0)&lt;/p>
&lt;p>154 {&lt;/p>
&lt;p>155 err = AVERROR_IO;&lt;/p>
&lt;p>156 goto fail;&lt;/p>
&lt;p>157 }&lt;/p>
&lt;p>158 file_opened = 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果程序指定 ByteIOContext 内部使用的缓存大小，就重新设置内部缓存大小。通常不指定大小。&lt;/p>
&lt;p>159 if (buf_size &amp;gt; 0)&lt;/p>
&lt;p>160 url_setbufsize(pb, buf_size);&lt;/p>
&lt;p>161&lt;/p>
&lt;p>先读 PROBE_ BUF_ MIN(2048)字节文件开始数据识别文件格式，如果不能识别文件格式，就把识别文&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.108.png" alt="">件缓存以 2 倍的增长扩大再读文件开始数据识别，直到识别出文件格式或者超过 131072 字节缓存。&lt;/p>
&lt;p>162 for (probe_size = PROBE_BUF_MIN; probe_size &amp;lt;= PROBE_BUF_MAX &amp;amp;&amp;amp; !fmt; probe_size &amp;lt;&amp;lt;= 1)&lt;/p>
&lt;p>163 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>重新分配缓存，重新读文件开始数据。&lt;/p>
&lt;p>164 pd-&amp;gt;buf = av_realloc(pd-&amp;gt;buf, probe_size);&lt;/p>
&lt;p>165 pd-&amp;gt;buf_size = url_fread(pb, pd-&amp;gt;buf, probe_size);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>把文件读指针 seek 到文件开始处，便于下一次读。&lt;/p>
&lt;p>166 if (url_fseek(pb, 0, SEEK_SET) == (offset_t) - EPIPE)&lt;/p>
&lt;p>167 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>如果 seek 错误，关闭文件，再重新打开。&lt;/p>
&lt;p>168 url_fclose(pb);&lt;/p>
&lt;p>169 if (url_fopen(pb, filename, URL_RDONLY) &amp;lt; 0)&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">170 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>重新打开文件出错，设置错误码，跳到错误处理。&lt;/p>
&lt;p>171 file_opened = 0;&lt;/p>
&lt;p>172 err = AVERROR_IO;&lt;/p>
&lt;p>173 goto fail;&lt;/p>
&lt;p>174 }&lt;/p>
&lt;p>175 }&lt;/p>
&lt;p>176&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>重新识别文件格式，因为一次比一次数据多，数据少的时候可能识别不出，数据多了可能就可以了。&lt;/p>
&lt;p>177 fmt = av_probe_input_format(pd, 1);&lt;/p>
&lt;p>178 }&lt;/p>
&lt;p>179 av_freep(&amp;amp;pd-&amp;gt;buf);&lt;/p>
&lt;p>180 }&lt;/p>
&lt;p>181&lt;/p>
&lt;p>182 if (!fmt)&lt;/p>
&lt;p>183 {&lt;/p>
&lt;p>184 err = AVERROR_NOFMT;&lt;/p>
&lt;p>185 goto fail;&lt;/p>
&lt;p>186 }&lt;/p>
&lt;p>187&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>识别出文件格式后，调用函数识别流 av_open_input_stream 格式。&lt;/p>
&lt;p>188 err = av_open_input_stream(ic_ptr, pb, filename, fmt, ap);&lt;/p>
&lt;p>189 if (err)&lt;/p>
&lt;p>190 goto fail;&lt;/p>
&lt;p>191 return 0;&lt;/p>
&lt;p>192&lt;/p>
&lt;p>193 fail:&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>简单的异常错误处理。&lt;/p>
&lt;p>194 av_freep(&amp;amp;pd-&amp;gt;buf);&lt;/p>
&lt;p>195 if (file_opened)&lt;/p>
&lt;p>196 url_fclose(pb);&lt;/p>
&lt;p>197 *ic_ptr = NULL;&lt;/p>
&lt;p>198 return err;&lt;/p>
&lt;p>199 }&lt;/p>
&lt;p>200&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>一次读取一个数据包，在瘦身后的 ffplay 中，一次读取一个完整的数据帧，数据包。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>201 int av_read_packet(AVFormatContext *s, AVPacket *pkt)&lt;/p>
&lt;p>202 {&lt;/p>
&lt;p>203 return s-&amp;gt;iformat-&amp;gt;read_packet(s, pkt);&lt;/p>
&lt;p>204 }&lt;/p>
&lt;p>205&lt;/p>
&lt;p>添加索引到索引表。有些媒体文件为便于 seek，有音视频数据帧有索引，ffplay 把这些索引以时间排&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.109.png" alt="">序放到一个数据中。返回值添加项的索引。&lt;/p>
&lt;p>206 int av_add_index_entry(AVStream *st, int64_t pos, int64_t timestamp, int size, int distance, int flags)&lt;/p>
&lt;p>207 {&lt;/p>
&lt;p>208 AVIndexEntry *entries, *ie;&lt;/p>
&lt;p>209 int index;&lt;/p>
&lt;p>210&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>索引项越界判断，如果占有内存达到 UINT_MAX 时，返回。&lt;/p>
&lt;p>211 if ((unsigned)st-&amp;gt;nb_index_entries + 1 &amp;gt;= UINT_MAX / sizeof(AVIndexEntry))&lt;/p>
&lt;p>212 return - 1;&lt;/p>
&lt;p>213&lt;/p>
&lt;p>重新分配索引内存。注意 av_fast_realloc()函数并不是每次调用就一定会重新分配内存，那样效率就&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.105.png" alt="">太低了。&lt;/p>
&lt;p>214 entries = av_fast_realloc(st-&amp;gt;index_entries, &amp;amp;st-&amp;gt;index_entries_allocated_size,&lt;/p>
&lt;p>215 (st-&amp;gt;nb_index_entries + 1) * sizeof(AVIndexEntry));&lt;/p>
&lt;p>216 if (!entries)&lt;/p>
&lt;p>217 return - 1;&lt;/p>
&lt;p>218&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>保持重新分配内存后，索引的首地址。&lt;/p>
&lt;p>219 st-&amp;gt;index_entries = entries;&lt;/p>
&lt;p>220&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>以时间为顺序查找当前索引应该插在索引表的位置。&lt;/p>
&lt;p>221 index = av_index_search_timestamp(st, timestamp, AVSEEK_FLAG_ANY);&lt;/p>
&lt;p>222&lt;/p>
&lt;p>223 if (index &amp;lt; 0)&lt;/p>
&lt;p>224 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>续补，既接着最后一个插入，索引计算加 1，取得索引项指针，便于后面赋值操作。&lt;/p>
&lt;p>225 index = st-&amp;gt;nb_index_entries++;&lt;/p>
&lt;p>226 ie = &amp;amp;entries[index];&lt;/p>
&lt;p>227 assert(index == 0 || ie[ - 1].timestamp &amp;lt; timestamp);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>228 }&lt;/p>
&lt;p>229 else&lt;/p>
&lt;p>230 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>中插，既插入索引表的中间，取得索引项指针，便于后面赋值操作。&lt;/p>
&lt;p>231 ie = &amp;amp;entries[index];&lt;/p>
&lt;p>232 if (ie-&amp;gt;timestamp != timestamp)&lt;/p>
&lt;p>233 {&lt;/p>
&lt;p>234 if (ie-&amp;gt;timestamp &amp;lt;= timestamp)&lt;/p>
&lt;p>235 return - 1;&lt;/p>
&lt;p>236&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>把索引项后面的项全部后移一项，空出当前索引项。&lt;/p>
&lt;p>237 memmove(entries + index + 1, entries + index,&lt;/p>
&lt;p>238 sizeof(AVIndexEntry)*(st-&amp;gt;nb_index_entries - index));&lt;/p>
&lt;p>239&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>索引项计数加 1。&lt;/p>
&lt;p>240 st-&amp;gt;nb_index_entries++;&lt;/p>
&lt;p>241 }&lt;/p>
&lt;p>242 }&lt;/p>
&lt;p>243&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>修改索引项参数，完成排序添加。&lt;/p>
&lt;p>244 ie-&amp;gt;pos = pos;&lt;/p>
&lt;p>245 ie-&amp;gt;timestamp = timestamp;&lt;/p>
&lt;p>246 ie-&amp;gt;size = size;&lt;/p>
&lt;p>247 ie-&amp;gt;flags = flags;&lt;/p>
&lt;p>248&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.110.png" alt="">&lt;/p>
&lt;p>返回索引。&lt;/p>
&lt;p>249 return index;&lt;/p>
&lt;p>250 }&lt;/p>
&lt;p>251&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>以时间为关键字查找当前索引应排在索引表中的位置。&lt;/p>
&lt;p>252 int av_index_search_timestamp(AVStream *st, int64_t wanted_timestamp, int flags)&lt;/p>
&lt;p>253 {&lt;/p>
&lt;p>254 AVIndexEntry *entries = st-&amp;gt;index_entries;&lt;/p>
&lt;p>255 int nb_entries = st-&amp;gt;nb_index_entries;&lt;/p>
&lt;p>256 int a, b, m;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>257 int64_t timestamp;&lt;/p>
&lt;p>258&lt;/p>
&lt;p>259 a = - 1;&lt;/p>
&lt;p>260 b = nb_entries;&lt;/p>
&lt;p>261&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>以时间为关键字折半查找位置，请仔细理解。&lt;/p>
&lt;p>262 while (b - a &amp;gt; 1)&lt;/p>
&lt;p>263 {&lt;/p>
&lt;p>264 m = (a + b) &amp;gt;&amp;gt; 1;&lt;/p>
&lt;p>265 timestamp = entries[m].timestamp;&lt;/p>
&lt;p>266 if (timestamp &amp;gt;= wanted_timestamp)&lt;/p>
&lt;p>267 b = m;&lt;/p>
&lt;p>268 if (timestamp &amp;lt;= wanted_timestamp)&lt;/p>
&lt;p>269 a = m;&lt;/p>
&lt;p>270 }&lt;/p>
&lt;p>271&lt;/p>
&lt;p>272 m = (flags &amp;amp;AVSEEK_FLAG_BACKWARD) ? a : b;&lt;/p>
&lt;p>273&lt;/p>
&lt;p>274 if (!(flags &amp;amp;AVSEEK_FLAG_ANY))&lt;/p>
&lt;p>275 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>Seek 时，找关键帧，从关键帧开始解码，注意有些帧解码但不显示。&lt;/p>
&lt;p>276 while (m &amp;gt;= 0 &amp;amp;&amp;amp; m &amp;lt; nb_entries &amp;amp;&amp;amp; !(entries[m].flags &amp;amp;AVINDEX_KEYFRAME))&lt;/p>
&lt;p>277 {&lt;/p>
&lt;p>278 m += (flags &amp;amp;AVSEEK_FLAG_BACKWARD) ? - 1: 1;&lt;/p>
&lt;p>279 }&lt;/p>
&lt;p>280 }&lt;/p>
&lt;p>281&lt;/p>
&lt;p>282 if (m == nb_entries)&lt;/p>
&lt;p>283 return - 1;&lt;/p>
&lt;p>284&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>返回找到的位置。&lt;/p>
&lt;p>285 return m;&lt;/p>
&lt;p>286 }&lt;/p>
&lt;p>287&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>关闭输入媒体文件，一大堆的关闭释放操作。&lt;/p>
&lt;p>288 void av_close_input_file(AVFormatContext *s)&lt;/p>
&lt;p>289 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>290 int i;&lt;/p>
&lt;p>291 AVStream *st;&lt;/p>
&lt;p>292&lt;/p>
&lt;p>293 if (s-&amp;gt;iformat-&amp;gt;read_close)&lt;/p>
&lt;p>294 s-&amp;gt;iformat-&amp;gt;read_close(s);&lt;/p>
&lt;p>295&lt;/p>
&lt;p>296 for (i = 0; i &amp;lt; s-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>297 {&lt;/p>
&lt;p>298 st = s-&amp;gt;streams[i];&lt;/p>
&lt;p>299 av_free(st-&amp;gt;index_entries);&lt;/p>
&lt;p>300 av_free(st-&amp;gt;actx);&lt;/p>
&lt;p>301 av_free(st);&lt;/p>
&lt;p>302 }&lt;/p>
&lt;p>303&lt;/p>
&lt;p>304 url_fclose(&amp;amp;s-&amp;gt;pb);&lt;/p>
&lt;p>305&lt;/p>
&lt;p>306 av_freep(&amp;amp;s-&amp;gt;priv_data);&lt;/p>
&lt;p>307 av_free(s);&lt;/p>
&lt;p>308 }&lt;/p>
&lt;p>309&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>new 一个新的媒体流，返回 AVStream 指针&lt;/p>
&lt;p>310 AVStream *av_new_stream(AVFormatContext *s, int id)&lt;/p>
&lt;p>311 {&lt;/p>
&lt;p>312 AVStream *st;&lt;/p>
&lt;p>313&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>判断媒体流的数目是否超限，如果超过就丢弃当前流返回 NULL。&lt;/p>
&lt;p>314 if (s-&amp;gt;nb_streams &amp;gt;= MAX_STREAMS)&lt;/p>
&lt;p>315 return NULL;&lt;/p>
&lt;p>316&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>分配一块 AVStream 内存。&lt;/p>
&lt;p>317 st = av_mallocz(sizeof(AVStream));&lt;/p>
&lt;p>318 if (!st)&lt;/p>
&lt;p>319 return NULL;&lt;/p>
&lt;p>320&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>通过 avcodec_alloc_context 分配一块 AVFormatContext 内存，并关联到 AVStream。&lt;/p>
&lt;p>321 st-&amp;gt;actx = avcodec_alloc_context();&lt;/p>
&lt;p>322&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.111.png" alt="">&lt;/p>
&lt;p>关联 AVFormatContext 和 AVStream。&lt;/p>
&lt;p>323 s-&amp;gt;streams[s-&amp;gt;nb_streams++] = st;&lt;/p>
&lt;p>324 return st;&lt;/p>
&lt;p>325 }&lt;/p>
&lt;p>326&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>设置计算 pts 时钟的相关参数。&lt;/p>
&lt;p>327 void av_set_pts_info(AVStream *s, int pts_wrap_bits, int pts_num, int pts_den)&lt;/p>
&lt;p>328 {&lt;/p>
&lt;p>329 s-&amp;gt;time_base.num = pts_num;&lt;/p>
&lt;p>330 s-&amp;gt;time_base.den = pts_den;&lt;/p>
&lt;p>331 }&lt;/p>
&lt;h3 id="images2020ffmpegasposewordsa0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4020png10-avidecc-文件">&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;strong>10 avidec.c 文件&lt;/strong>&lt;/h3>
&lt;p>10.1 功能描述&lt;/p>
&lt;p>AVI 文件解析的相关函数，注意有些地方有些技巧性代码。&lt;/p>
&lt;p>注意 1：AVI 文件容器媒体数据有两种存放方式，非交织存放和交织存放。交织存放就是音视频数据以帧为最 小连续单位，相互间隔存放，这样音视频帧互相交织在一起，并且存放的间隔没有特别规定；非交织存放就是把 单一媒体的所有数据帧连续存放在一起，非交织存放的 avi 文件很少。&lt;/p>
&lt;p>注意 2：AVI 文件索引结构 AVIINDEXENTRY 中的 dwChunkOffset 字段指示的偏移有的是相对文件开始字节的偏 移，有的事相对文件数据块 chunk 的偏移。&lt;/p>
&lt;p>注意 3：附带的 avi 测试文件是交织存放的。&lt;/p>
&lt;p>10.2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;avformat.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>3 #include &amp;lt;assert.h&amp;gt;&lt;/p>
&lt;p>4&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>几个简单的宏定义。&lt;/p>
&lt;p>5 #define AVIIF_INDEX 0x10&lt;/p>
&lt;p>6&lt;/p>
&lt;p>7 #define AVIF_HASINDEX 0x00000010 // Index at end of file?&lt;/p>
&lt;p>8 #define AVIF_MUSTUSEINDEX 0x00000020&lt;/p>
&lt;p>9&lt;/p>
&lt;p>10 #define INT_MAX 2147483647&lt;/p>
&lt;p>11&lt;/p>
&lt;p>12 #define MKTAG(a,b,c,d) (a | (b &amp;lt;&amp;lt; 8) | (c &amp;lt;&amp;lt; 16) | (d &amp;lt;&amp;lt; 24))&lt;/p>
&lt;p>13&lt;/p>
&lt;p>14 #define FFMIN(a,b) ((a) &amp;gt; (b) ? (b) : (a))&lt;/p>
&lt;p>15 #define FFMAX(a,b) ((a) &amp;gt; (b) ? (a) : (b))&lt;/p>
&lt;p>16&lt;/p>
&lt;p>17 static int avi_load_index(AVFormatContext *s);&lt;/p>
&lt;p>18 static int guess_ni_flag(AVFormatContext *s);&lt;/p>
&lt;p>19&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>AVI 文件中的流参数定义，和 AVStream 数据结构协作。&lt;/p>
&lt;p>20 typedef struct AVIStream&lt;/p>
&lt;p>21 {&lt;/p>
&lt;p>22 int64_t frame_offset; // 帧偏移，视频用帧计数，音频用字节计数，用于计算 pts 表示时间&lt;/p>
&lt;p>23 int remaining; // 表示需要读的数据大小，初值是帧裸数组大小，全部读完后为 0。&lt;/p>
&lt;p>24 int packet_size; // 包大小，非交织和帧裸数据大小相同，交织比帧裸数据大小大 8 字节。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>25&lt;/p>
&lt;p>26 int scale;&lt;/p>
&lt;p>27 int rate;&lt;/p>
&lt;p>28 int sample_size; // size of one sample (or packet) (in the rate/scale sense) in bytes&lt;/p>
&lt;p>29&lt;/p>
&lt;p>30 int64_t cum_len; // temporary storage (used during seek)&lt;/p>
&lt;p>31&lt;/p>
&lt;p>32 int prefix; // normally 'd'&amp;lt;&amp;lt;8 + 'c' or 'w'&amp;lt;&amp;lt;8 + 'b'&lt;/p>
&lt;p>33 int prefix_count;&lt;/p>
&lt;p>34 } AVIStream;&lt;/p>
&lt;p>35&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>AVI 文件中的文件格式参数相关定义，和 AVFormatContext 协作。&lt;/p>
&lt;p>36 typedef struct&lt;/p>
&lt;p>37 {&lt;/p>
&lt;p>38 int64_t riff_end; // RIFF 块大小&lt;/p>
&lt;p>39 int64_t movi_list; // 媒体数据块开始字节相对文件开始字节的偏移&lt;/p>
&lt;p>40 int64_t movi_end; // 媒体数据块开始字节相对文件开始字节的偏移&lt;/p>
&lt;p>41 int non_interleaved;// 指示是否是非交织 AVI&lt;/p>
&lt;p>42 int stream_index_2; // 为了和 AVPacket 中的 stream_index 相区别加一个后缀。&lt;/p>
&lt;p>// 指示当前应该读取的流的索引。初值为-1，表示没有确定应该读的流。&lt;/p>
&lt;p>// 实际表示 AVFormatContext 结构中 AVStream *streams[] 数组中的索引。&lt;/p>
&lt;p>43 } AVIContext;&lt;/p>
&lt;p>44&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>CodecTag 数据结构，用于关联具体媒体格式的 ID 和 Tag 标签。&lt;/p>
&lt;p>45 typedef struct CodecTag&lt;/p>
&lt;p>46 {&lt;/p>
&lt;p>47 int id; // ID 号码&lt;/p>
&lt;p>48 unsigned int tag; // 标签&lt;/p>
&lt;p>49 } CodecTag;&lt;/p>
&lt;p>50&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>瘦身后的 ffplay 支持的一些视频媒体 ID 和 Tag 标签数组。&lt;/p>
&lt;p>51 const CodecTag codec_bmp_tags[] =&lt;/p>
&lt;p>52 {&lt;/p>
&lt;p>53 {CODEC_ID_MSRLE, MKTAG('m', 'r', 'l', 'e')},&lt;/p>
&lt;p>54 {CODEC_ID_MSRLE, MKTAG(0x1, 0x0, 0x0, 0x0)},&lt;/p>
&lt;p>55 {CODEC_ID_NONE, 0},&lt;/p>
&lt;p>56 };&lt;/p>
&lt;p>57&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.112.png" alt="">&lt;/p>
&lt;p>瘦身后的 ffplay 支持的一些音频媒体 ID 和 Tag 标签数组。&lt;/p>
&lt;p>58 const CodecTag codec_wav_tags[] =&lt;/p>
&lt;p>59 {&lt;/p>
&lt;p>60 {CODEC_ID_TRUESPEECH, 0x22},&lt;/p>
&lt;p>61 {0, 0},&lt;/p>
&lt;p>62 };&lt;/p>
&lt;p>63&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>以媒体 tag 标签为关键字，查找 codec_bmp_tags 或 codec_wav_tags 数组，返回媒体 ID。&lt;/p>
&lt;p>64 enum CodecID codec_get_id(const CodecTag *tags, unsigned int tag)&lt;/p>
&lt;p>65 {&lt;/p>
&lt;p>66 while (tags-&amp;gt;id != CODEC_ID_NONE)&lt;/p>
&lt;p>67 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>比较 Tag 关键字，相等时返回对应媒体 ID。&lt;/p>
&lt;p>68 if (toupper((tag &amp;gt;&amp;gt; 0) &amp;amp;0xFF) == toupper((tags-&amp;gt;tag &amp;gt;&amp;gt; 0) &amp;amp;0xFF)&lt;/p>
&lt;p>69 &amp;amp;&amp;amp; toupper((tag &amp;gt;&amp;gt; 8) &amp;amp;0xFF) == toupper((tags-&amp;gt;tag &amp;gt;&amp;gt; 8) &amp;amp;0xFF)&lt;/p>
&lt;p>70 &amp;amp;&amp;amp; toupper((tag &amp;gt;&amp;gt; 16)&amp;amp;0xFF) == toupper((tags-&amp;gt;tag &amp;gt;&amp;gt; 16)&amp;amp;0xFF)&lt;/p>
&lt;p>71 &amp;amp;&amp;amp; toupper((tag &amp;gt;&amp;gt; 24)&amp;amp;0xFF) == toupper((tags-&amp;gt;tag &amp;gt;&amp;gt; 24)&amp;amp;0xFF))&lt;/p>
&lt;p>72 return tags-&amp;gt;id;&lt;/p>
&lt;p>73&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>比较 Tag 关键字，不等移到数组的下一项。&lt;/p>
&lt;p>74 tags++;&lt;/p>
&lt;p>75 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>所有关键字都不匹配，返回 CODEC_ID_NONE。&lt;/p>
&lt;p>76 return CODEC_ID_NONE;&lt;/p>
&lt;p>77 }&lt;/p>
&lt;p>78&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>校验 AVI 文件，读取 AVI 文件媒体数据块的偏移大小信息，和 avi_probe()函数部分相同。&lt;/p>
&lt;p>79 static int get_riff(AVIContext *avi, ByteIOContext *pb)&lt;/p>
&lt;p>80 {&lt;/p>
&lt;p>81 uint32_t tag;&lt;/p>
&lt;p>82 tag = get_le32(pb);&lt;/p>
&lt;p>83&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>校验 AVI 文件开始关键字串&amp;quot;RIFF&amp;quot;。&lt;/p>
&lt;p>84 if (tag != MKTAG('R', 'I', 'F', 'F'))&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>85 return - 1;&lt;/p>
&lt;p>86&lt;/p>
&lt;p>87 avi-&amp;gt;riff_end = get_le32(pb); // RIFF chunk size&lt;/p>
&lt;p>88 avi-&amp;gt;riff_end += url_ftell(pb); // RIFF chunk end&lt;/p>
&lt;p>89 tag = get_le32(pb);&lt;/p>
&lt;p>90&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>校验 AVI 文件关键字串&amp;quot;AVI &amp;quot;或&amp;quot;AVIX&amp;quot;。&lt;/p>
&lt;p>91 if (tag != MKTAG('A', 'V', 'I', ' ') &amp;amp;&amp;amp; tag != MKTAG('A', 'V', 'I', 'X'))&lt;/p>
&lt;p>92 return - 1;&lt;/p>
&lt;p>93&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果通过 AVI 文件关键字串&amp;quot;RIFF&amp;quot;和&amp;quot;AVI &amp;quot;或&amp;quot;AVIX&amp;quot;校验，就认为是 AVI 文件，这种方式非常可靠。&lt;/p>
&lt;p>94 return 0;&lt;/p>
&lt;p>95 }&lt;/p>
&lt;p>96&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>排序建立 AVI 索引表，函数名为 clean_index,不准确，功能以具体的实现代码为准。&lt;/p>
&lt;p>97 static void clean_index(AVFormatContext *s)&lt;/p>
&lt;p>98 {&lt;/p>
&lt;p>99 int i, j;&lt;/p>
&lt;p>100&lt;/p>
&lt;p>101 for (i = 0; i &amp;lt; s-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>102 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>对每个流都建一个独立的索引表。&lt;/p>
&lt;p>103 AVStream *st = s-&amp;gt;streams[i];&lt;/p>
&lt;p>104 AVIStream *ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>105 int n = st-&amp;gt;nb_index_entries;&lt;/p>
&lt;p>106 int max = ast-&amp;gt;sample_size;&lt;/p>
&lt;p>107 int64_t pos, size, ts;&lt;/p>
&lt;p>108&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果索引表项大于 1，则认为索引表已建好，不再排序重建。如果 sample_size 为 0,则没办法重建。&lt;/p>
&lt;p>109 if (n != 1 || ast-&amp;gt;sample_size == 0)&lt;/p>
&lt;p>110 continue;&lt;/p>
&lt;p>111&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.113.png" alt="">&lt;/p>
&lt;p>此种情况多半是用在非交织存储的 avi 音频流。不管交织还是非交织存储，视频流通常都有索引。&lt;/p>
&lt;p>防止包太小需要太多的索引项占有大量内存，设定最小帧 size 阈值为 1024。比如有些音频流，最小解 码帧只十多个字节，如果文件比较大则在索引上耗费太多内存。&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>112 while (max &amp;lt; 1024)&lt;/p>
&lt;p>113 max += max;&lt;/p>
&lt;p>114&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>取位置，大小，时钟等基本参数。&lt;/p>
&lt;p>115 pos = st-&amp;gt;index_entries[0].pos;&lt;/p>
&lt;p>116 size = st-&amp;gt;index_entries[0].size;&lt;/p>
&lt;p>117 ts = st-&amp;gt;index_entries[0].timestamp;&lt;/p>
&lt;p>118&lt;/p>
&lt;p>119 for (j = 0; j &amp;lt; size; j += max)&lt;/p>
&lt;p>120 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>以 max 指定的字节打包成帧，添加到索引表。&lt;/p>
&lt;p>121 av_add_index_entry(st, pos + j, ts + j / ast-&amp;gt;sample_size, FFMIN(max, size - j), 0, AVINDEX_KEYFRAME);&lt;/p>
&lt;p>122 }&lt;/p>
&lt;p>123 }&lt;/p>
&lt;p>124 }&lt;/p>
&lt;p>125&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>读取 AVI 文件头，读取 AVI 文件索引，并识别具体的媒体格式，关联一些数据结构。&lt;/p>
&lt;p>126 static int avi_read_header(AVFormatContext *s, AVFormatParameters *ap)&lt;/p>
&lt;p>127 {&lt;/p>
&lt;p>128 AVIContext *avi = s-&amp;gt;priv_data;&lt;/p>
&lt;p>129 ByteIOContext *pb = &amp;amp;s-&amp;gt;pb;&lt;/p>
&lt;p>130 uint32_t tag, tag1, handler;&lt;/p>
&lt;p>131 int codec_type, stream_index, frame_period, bit_rate;&lt;/p>
&lt;p>132 unsigned int size, nb_frames;&lt;/p>
&lt;p>133 int i, n;&lt;/p>
&lt;p>134 AVStream *st;&lt;/p>
&lt;p>135 AVIStream *ast;&lt;/p>
&lt;p>136&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>当前应该读取的流的索引赋初值为-1，表示没有确定应该读的流。&lt;/p>
&lt;p>137 avi-&amp;gt;stream_index_2 = - 1;&lt;/p>
&lt;p>138&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>校验 AVI 文件，读取 AVI 文件媒体数据块的偏移大小信息。&lt;/p>
&lt;p>139 if (get_riff(avi, pb) &amp;lt; 0)&lt;/p>
&lt;p>140 return - 1;&lt;/p>
&lt;p>141&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.114.png" alt="">&lt;/p>
&lt;p>简单变量符初值。&lt;/p>
&lt;p>142 stream_index = - 1; // first list tag&lt;/p>
&lt;p>143 codec_type = - 1;&lt;/p>
&lt;p>144 frame_period = 0;&lt;/p>
&lt;p>145&lt;/p>
&lt;p>146 for (;;)&lt;/p>
&lt;p>147 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>AVI 文件的基本结构是块，一个文件有多个块，并且块还可以内嵌，在这里循环读文件头中的块。&lt;/p>
&lt;p>148 if (url_feof(pb))&lt;/p>
&lt;p>149 goto fail;&lt;/p>
&lt;p>150&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>读取每个块的标签和大小。&lt;/p>
&lt;p>151 tag = get_le32(pb);&lt;/p>
&lt;p>152 size = get_le32(pb);&lt;/p>
&lt;p>153&lt;/p>
&lt;p>154 switch (tag)&lt;/p>
&lt;p>155 {&lt;/p>
&lt;p>156 case MKTAG('L', 'I', 'S', 'T'): // ignored, except when start of video packets&lt;/p>
&lt;p>157 tag1 = get_le32(pb);&lt;/p>
&lt;p>158 if (tag1 == MKTAG('m', 'o', 'v', 'i'))&lt;/p>
&lt;p>159 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>读取 movi 媒体数据块的偏移和大小。&lt;/p>
&lt;p>160 avi-&amp;gt;movi_list = url_ftell(pb) - 4;&lt;/p>
&lt;p>161 if (size)&lt;/p>
&lt;p>162 avi-&amp;gt;movi_end = avi-&amp;gt;movi_list + size;&lt;/p>
&lt;p>163 else&lt;/p>
&lt;p>164 avi-&amp;gt;movi_end = url_fsize(pb);&lt;/p>
&lt;p>165&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>AVI 文件头后面是 movi 媒体数据块，所以到了 movi 块，文件头肯定读完，需要跳出循环。&lt;/p>
&lt;p>166 goto end_of_header; //&lt;/p>
&lt;p>167 }&lt;/p>
&lt;p>168 break;&lt;/p>
&lt;p>169 case MKTAG('a', 'v', 'i', 'h'): // avi header, using frame_period is bad idea&lt;/p>
&lt;p>170 frame_period = get_le32(pb);&lt;/p>
&lt;p>171 bit_rate = get_le32(pb) *8;&lt;/p>
&lt;p>172 get_le32(pb);&lt;/p>
&lt;p>读取 non_interleaved 的初值。&lt;/p>
&lt;p>173 avi-&amp;gt;non_interleaved |= get_le32(pb) &amp;amp; AVIF_MUSTUSEINDEX;&lt;/p>
&lt;p>174&lt;/p>
&lt;p>175 url_fskip(pb, 2 *4);&lt;/p>
&lt;p>176 n = get_le32(pb);&lt;/p>
&lt;p>177 for (i = 0; i &amp;lt; n; i++)&lt;/p>
&lt;p>178 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.115.png" alt="">&lt;/p>
&lt;p>读取流数目 n 后，分配 AVStream 和 AVIStream 数据结构，在 187 行把它们关联起来。&lt;/p>
&lt;p>特别注意 av_new_stream()函数关联 AVFormatContext 和 AVStream 结构，分配关联 AVCodecContext 结构&lt;/p>
&lt;p>179 AVIStream *ast;&lt;/p>
&lt;p>180 st = av_new_stream(s, i);&lt;/p>
&lt;p>181 if (!st)&lt;/p>
&lt;p>182 goto fail;&lt;/p>
&lt;p>183&lt;/p>
&lt;p>184 ast = av_mallocz(sizeof(AVIStream));&lt;/p>
&lt;p>185 if (!ast)&lt;/p>
&lt;p>186 goto fail;&lt;/p>
&lt;p>187 st-&amp;gt;priv_data = ast;&lt;/p>
&lt;p>188&lt;/p>
&lt;p>189 st-&amp;gt;actx-&amp;gt;bit_rate = bit_rate;&lt;/p>
&lt;p>190 }&lt;/p>
&lt;p>191 url_fskip(pb, size - 7 * 4);&lt;/p>
&lt;p>192 break;&lt;/p>
&lt;p>193 case MKTAG('s', 't', 'r', 'h'): // stream header&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>指示当前流在 AVFormatContext 结构中 AVStream *streams[MAX_STREAMS]数组中的索引。&lt;/p>
&lt;p>194 stream_index++;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>从 strh 块读取所有流共有的一些信息，跳过有些不用的字段，填写需要的字段。&lt;/p>
&lt;p>195 tag1 = get_le32(pb);&lt;/p>
&lt;p>196 handler = get_le32(pb);&lt;/p>
&lt;p>197&lt;/p>
&lt;p>198 if (stream_index &amp;gt;= s-&amp;gt;nb_streams)&lt;/p>
&lt;p>199 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>出现这种情况通常代表媒体文件数据有错，ffplay 简单的跳过。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>200&lt;/th>
&lt;th>&lt;/th>
&lt;th>url_fskip(pb, size - 8);&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>201&lt;/td>
&lt;td>&lt;/td>
&lt;td>break;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>202&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">203 st = s-&amp;gt;streams[stream_index];&lt;/p>
&lt;p>204 ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>205&lt;/p>
&lt;p>206 get_le32(pb); // flags&lt;/p>
&lt;p>207 get_le16(pb); // priority&lt;/p>
&lt;p>208 get_le16(pb); // language&lt;/p>
&lt;p>209 get_le32(pb); // initial frame&lt;/p>
&lt;p>210 ast-&amp;gt;scale = get_le32(pb);&lt;/p>
&lt;p>211 ast-&amp;gt;rate = get_le32(pb);&lt;/p>
&lt;p>212 if (ast-&amp;gt;scale &amp;amp;&amp;amp; ast-&amp;gt;rate)&lt;/p>
&lt;p>213 {}&lt;/p>
&lt;p>214 else if (frame_period)&lt;/p>
&lt;p>215 {&lt;/p>
&lt;p>216 ast-&amp;gt;rate = 1000000;&lt;/p>
&lt;p>217 ast-&amp;gt;scale = frame_period;&lt;/p>
&lt;p>218 }&lt;/p>
&lt;p>219 else&lt;/p>
&lt;p>220 {&lt;/p>
&lt;p>221 ast-&amp;gt;rate = 25;&lt;/p>
&lt;p>222 ast-&amp;gt;scale = 1;&lt;/p>
&lt;p>223 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>设置当前流的时间信息，用于计算 pts 表示时间，进而同步。&lt;/p>
&lt;p>224 av_set_pts_info(st, 64, ast-&amp;gt;scale, ast-&amp;gt;rate);&lt;/p>
&lt;p>225&lt;/p>
&lt;p>226 ast-&amp;gt;cum_len = get_le32(pb); // start&lt;/p>
&lt;p>227 nb_frames = get_le32(pb);&lt;/p>
&lt;p>228&lt;/p>
&lt;p>229 get_le32(pb); // buffer size&lt;/p>
&lt;p>230 get_le32(pb); // quality&lt;/p>
&lt;p>231 ast-&amp;gt;sample_size = get_le32(pb); // sample ssize&lt;/p>
&lt;p>232&lt;/p>
&lt;p>233 switch (tag1)&lt;/p>
&lt;p>234 {&lt;/p>
&lt;p>235 case MKTAG('v', 'i', 'd', 's'): codec_type = CODEC_TYPE_VIDEO;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>特别注意视频流的每一帧大小不同，所以 sample_size 设置为 0；对比音频流每一帧大小固定的情况。&lt;/p>
&lt;p>236 ast-&amp;gt;sample_size = 0;&lt;/p>
&lt;p>237 break;&lt;/p>
&lt;p>238 case MKTAG('a', 'u', 'd', 's'): codec_type = CODEC_TYPE_AUDIO;&lt;/p>
&lt;p>239 break;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>240 case MKTAG('t', 'x', 't', 's'): //FIXME&lt;/p>
&lt;p>241 codec_type = CODEC_TYPE_DATA; //CODEC_TYPE_SUB ? FIXME&lt;/p>
&lt;p>242 break;&lt;/p>
&lt;p>243 case MKTAG('p', 'a', 'd', 's'): codec_type = CODEC_TYPE_UNKNOWN;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果是填充流，stream_index 减 1 就实现了简单的丢弃，不计入流数目总数。&lt;/p>
&lt;p>244 stream_index--;&lt;/p>
&lt;p>245 break;&lt;/p>
&lt;p>246 default:&lt;/p>
&lt;p>247 goto fail;&lt;/p>
&lt;p>248 }&lt;/p>
&lt;p>249 ast-&amp;gt;frame_offset = ast-&amp;gt;cum_len * FFMAX(ast-&amp;gt;sample_size, 1);&lt;/p>
&lt;p>250 url_fskip(pb, size - 12 * 4);&lt;/p>
&lt;p>251 break;&lt;/p>
&lt;p>252 case MKTAG('s', 't', 'r', 'f'): // stream header&lt;/p>
&lt;p>从 strf 块读取流中编解码器的一些信息，跳过有些不用的字段，填写需要的字段。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.109.png" alt="">注意有些编解码器需要的附加信息从此块中读出，保持至 extradata 并最终传给相应的编解码器。&lt;/p>
&lt;p>253 if (stream_index &amp;gt;= s-&amp;gt;nb_streams)&lt;/p>
&lt;p>254 {&lt;/p>
&lt;p>255 url_fskip(pb, size);&lt;/p>
&lt;p>256 }&lt;/p>
&lt;p>257 else&lt;/p>
&lt;p>258 {&lt;/p>
&lt;p>259 st = s-&amp;gt;streams[stream_index];&lt;/p>
&lt;p>260 switch (codec_type)&lt;/p>
&lt;p>261 {&lt;/p>
&lt;p>262 case CODEC_TYPE_VIDEO: // BITMAPINFOHEADER&lt;/p>
&lt;p>263 get_le32(pb); // size&lt;/p>
&lt;p>264 st-&amp;gt;actx-&amp;gt;width = get_le32(pb);&lt;/p>
&lt;p>265 st-&amp;gt;actx-&amp;gt;height = get_le32(pb);&lt;/p>
&lt;p>266 get_le16(pb); // panes&lt;/p>
&lt;p>267 st-&amp;gt;actx-&amp;gt;bits_per_sample = get_le16(pb); // depth&lt;/p>
&lt;p>268 tag1 = get_le32(pb);&lt;/p>
&lt;p>269 get_le32(pb); // ImageSize&lt;/p>
&lt;p>270 get_le32(pb); // XPelsPerMeter&lt;/p>
&lt;p>271 get_le32(pb); // YPelsPerMeter&lt;/p>
&lt;p>272 get_le32(pb); // ClrUsed&lt;/p>
&lt;p>273 get_le32(pb); // ClrImportant&lt;/p>
&lt;p>274&lt;/p>
&lt;p>275 if (size &amp;gt; 10 *4 &amp;amp;&amp;amp; size &amp;lt; (1 &amp;lt;&amp;lt; 30))&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>276 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>对视频，extradata 通常是保存的是 BITMAPINFO&lt;/p>
&lt;p>277 st-&amp;gt;actx-&amp;gt;extradata_size = size - 10 * 4;&lt;/p>
&lt;p>278 st-&amp;gt;actx-&amp;gt;extradata = av_malloc(st-&amp;gt;actx-&amp;gt;extradata_size +&lt;/p>
&lt;p>279 FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>280 url_fread(pb, st-&amp;gt;actx-&amp;gt;extradata, st-&amp;gt;actx-&amp;gt;extradata_size);&lt;/p>
&lt;p>281 }&lt;/p>
&lt;p>282&lt;/p>
&lt;p>283 if (st-&amp;gt;actx-&amp;gt;extradata_size &amp;amp;1)&lt;/p>
&lt;p>284 get_byte(pb);&lt;/p>
&lt;p>285&lt;/p>
&lt;p>286 /* Extract palette from extradata if bpp &amp;lt;= 8 */&lt;/p>
&lt;p>287 /* This code assumes that extradata contains only palette */&lt;/p>
&lt;p>288 /* This is true for all paletted codecs implemented in ffmpeg */&lt;/p>
&lt;p>289 if (st-&amp;gt;actx-&amp;gt;extradata_size &amp;amp;&amp;amp; (st-&amp;gt;actx-&amp;gt;bits_per_sample &amp;lt;= 8))&lt;/p>
&lt;p>290 {&lt;/p>
&lt;p>291 int min = FFMIN(st-&amp;gt;actx-&amp;gt;extradata_size, AVPALETTE_SIZE);&lt;/p>
&lt;p>292&lt;/p>
&lt;p>293 st-&amp;gt;actx-&amp;gt;palctrl = av_mallocz(sizeof(AVPaletteControl));&lt;/p>
&lt;p>294 memcpy(st-&amp;gt;actx-&amp;gt;palctrl-&amp;gt;palette, st-&amp;gt;actx-&amp;gt;extradata, min);&lt;/p>
&lt;p>295 st-&amp;gt;actx-&amp;gt;palctrl-&amp;gt;palette_changed = 1;&lt;/p>
&lt;p>296 }&lt;/p>
&lt;p>297&lt;/p>
&lt;p>298 st-&amp;gt;actx-&amp;gt;codec_type = CODEC_TYPE_VIDEO;&lt;/p>
&lt;p>299 st-&amp;gt;actx-&amp;gt;codec_id = codec_get_id(codec_bmp_tags, tag1);&lt;/p>
&lt;p>300&lt;/p>
&lt;p>301 st-&amp;gt;frame_last_delay = 1.0 * ast-&amp;gt;scale / ast-&amp;gt;rate;&lt;/p>
&lt;p>302&lt;/p>
&lt;p>303 break;&lt;/p>
&lt;p>304 case CODEC_TYPE_AUDIO:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>305&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>306&lt;/td>
&lt;td>&lt;/td>
&lt;td>AVCodecContext *actx = st-&amp;gt;actx;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>307&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>308&lt;/td>
&lt;td>&lt;/td>
&lt;td>int id = get_le16(pb);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>309&lt;/td>
&lt;td>&lt;/td>
&lt;td>actx-&amp;gt;codec_type = CODEC_TYPE_AUDIO;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>310&lt;/td>
&lt;td>&lt;/td>
&lt;td>actx-&amp;gt;channels = get_le16(pb);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>311&lt;/td>
&lt;td>&lt;/td>
&lt;td>actx-&amp;gt;sample_rate = get_le32(pb);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>312&lt;/td>
&lt;td>&lt;/td>
&lt;td>actx-&amp;gt;bit_rate = get_le32(pb) *8;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>313&lt;/td>
&lt;td>&lt;/td>
&lt;td>actx-&amp;gt;block_align = get_le16(pb);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>314&lt;/td>
&lt;td>&lt;/td>
&lt;td>if (size == 14) // We're dealing with plain vanilla WAVEFORMAT&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">315 actx-&amp;gt;bits_per_sample = 8;&lt;/p>
&lt;p>316 else&lt;/p>
&lt;p>317 actx-&amp;gt;bits_per_sample = get_le16(pb);&lt;/p>
&lt;p>318 actx-&amp;gt;codec_id = codec_get_id(codec_wav_tags, id);&lt;/p>
&lt;p>319&lt;/p>
&lt;p>320 if (size &amp;gt; 16)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>321&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>322&lt;/td>
&lt;td>&lt;/td>
&lt;td>actx-&amp;gt;extradata_size = get_le16(pb);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>323&lt;/td>
&lt;td>&lt;/td>
&lt;td>if (actx-&amp;gt;extradata_size &amp;gt; 0)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>324&lt;/td>
&lt;td>&lt;/td>
&lt;td>{&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">对音频，extradata 通常是保存的是 WAVEFORMATEX&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>325 if (actx-&amp;gt;extradata_size &amp;gt; size - 18)&lt;/p>
&lt;p>326 actx-&amp;gt;extradata_size = size - 18;&lt;/p>
&lt;p>327 actx-&amp;gt;extradata = av_mallocz(actx-&amp;gt;extradata_size +&lt;/p>
&lt;p>328 FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>329 url_fread(pb, actx-&amp;gt;extradata, actx-&amp;gt;extradata_size);&lt;/p>
&lt;p>330 }&lt;/p>
&lt;p>331 else&lt;/p>
&lt;p>332 {&lt;/p>
&lt;p>333 actx-&amp;gt;extradata_size = 0;&lt;/p>
&lt;p>334 }&lt;/p>
&lt;p>335&lt;/p>
&lt;p>336 // It is possible for the chunk to contain garbage at the end&lt;/p>
&lt;p>337 if (size - actx-&amp;gt;extradata_size - 18 &amp;gt; 0)&lt;/p>
&lt;p>338 url_fskip(pb, size - actx-&amp;gt;extradata_size - 18);&lt;/p>
&lt;p>339 }&lt;/p>
&lt;p>340 }&lt;/p>
&lt;p>341&lt;/p>
&lt;p>342 if (size % 2) // 2-aligned (fix for Stargate SG-1 - 3x18 - Shades of&lt;/p>
&lt;p>Grey.avi)&lt;/p>
&lt;p>343 url_fskip(pb, 1);&lt;/p>
&lt;p>344&lt;/p>
&lt;p>345 break;&lt;/p>
&lt;p>346 default:&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>对其他流类型，ffplay 简单的设置为 data 流。常规的是音频流和视频流，其他的少见。&lt;/p>
&lt;p>347 st-&amp;gt;actx-&amp;gt;codec_type = CODEC_TYPE_DATA;&lt;/p>
&lt;p>348 st-&amp;gt;actx-&amp;gt;codec_id = CODEC_ID_NONE;&lt;/p>
&lt;p>349 url_fskip(pb, size);&lt;/p>
&lt;p>350 break;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>351 }&lt;/p>
&lt;p>352 }&lt;/p>
&lt;p>353 break;&lt;/p>
&lt;p>354 default: // skip tag&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>对其他不识别的块 chunk，跳过。&lt;/p>
&lt;p>355 size += (size &amp;amp;1);&lt;/p>
&lt;p>356 url_fskip(pb, size);&lt;/p>
&lt;p>357 break;&lt;/p>
&lt;p>358 }&lt;/p>
&lt;p>359 }&lt;/p>
&lt;p>360&lt;/p>
&lt;p>361 end_of_header:&lt;/p>
&lt;p>362 if (stream_index != s-&amp;gt;nb_streams - 1)&lt;/p>
&lt;p>363 {&lt;/p>
&lt;p>364 fail:&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>校验流的数目，如果有误，释放相关资源，返回-1 错误。&lt;/p>
&lt;p>365 for (i = 0; i &amp;lt; s-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>366 {&lt;/p>
&lt;p>367 av_freep(&amp;amp;s-&amp;gt;streams[i]-&amp;gt;actx-&amp;gt;extradata);&lt;/p>
&lt;p>368 av_freep(&amp;amp;s-&amp;gt;streams[i]);&lt;/p>
&lt;p>369 }&lt;/p>
&lt;p>370 return - 1;&lt;/p>
&lt;p>371 }&lt;/p>
&lt;p>372&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>加载 AVI 文件索引。&lt;/p>
&lt;p>373 avi_load_index(s);&lt;/p>
&lt;p>374&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>判别是否是非交织 avi。&lt;/p>
&lt;p>375 avi-&amp;gt;non_interleaved |= guess_ni_flag(s);&lt;/p>
&lt;p>376 if (avi-&amp;gt;non_interleaved)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>对那些非交织存储的媒体流，人工的补上索引，便于读取操作。&lt;/p>
&lt;p>377 clean_index(s);&lt;/p>
&lt;p>378&lt;/p>
&lt;p>379 return 0;&lt;/p>
&lt;p>380 }&lt;/p>
&lt;p>381&lt;/p>
&lt;p>avi 文件可以简单认为音视频媒体数据时间基相同，因此音视频数据需要同步读取，同步解码，播放才&lt;/p>
&lt;p>能同步。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.116.png" alt="">交织存储的 avi 文件，临近存储的音视频帧解码时间表示时间相近，微小的解码时间表示时间差别可 以用帧缓存队列抵消，所以可以简单的按照文件顺序读取媒体数据。&lt;/p>
&lt;p>非交织存储的 avi 文件，视频和音频这两种媒体数据相隔甚远，小缓存简单的顺序读文件时，不能同 时读到音频和视频数据，最后导致不同步，ffplay 采取按最近时间点来决定读音频还是视频数据。&lt;/p>
&lt;p>382 int avi_read_packet(AVFormatContext *s, AVPacket *pkt)&lt;/p>
&lt;p>383 {&lt;/p>
&lt;p>384 AVIContext *avi = s-&amp;gt;priv_data;&lt;/p>
&lt;p>385 ByteIOContext *pb = &amp;amp;s-&amp;gt;pb;&lt;/p>
&lt;p>386 int n, d[8], size;&lt;/p>
&lt;p>387 offset_t i, sync;&lt;/p>
&lt;p>388&lt;/p>
&lt;p>389 if (avi-&amp;gt;non_interleaved)&lt;/p>
&lt;p>390 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果是非交织 AVI，用最近时间点来决定读取视频还是音频数据。&lt;/p>
&lt;p>391 int best_stream_index = 0;&lt;/p>
&lt;p>392 AVStream *best_st = NULL;&lt;/p>
&lt;p>393 AVIStream *best_ast;&lt;/p>
&lt;p>394 int64_t best_ts = INT64_MAX;&lt;/p>
&lt;p>395 int i;&lt;/p>
&lt;p>396&lt;/p>
&lt;p>397 for (i = 0; i &amp;lt; s-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>398 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>遍历所有媒体流，按照已经播放的流数据，计算下一个最近的时间点。&lt;/p>
&lt;p>399 AVStream *st = s-&amp;gt;streams[i];&lt;/p>
&lt;p>400 AVIStream *ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>401 int64_t ts = ast-&amp;gt;frame_offset;&lt;/p>
&lt;p>402&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>把帧偏移换算成帧数。&lt;/p>
&lt;p>403 if (ast-&amp;gt;sample_size)&lt;/p>
&lt;p>404 ts /= ast-&amp;gt;sample_size;&lt;/p>
&lt;p>405&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>把帧数换算成 pts 表示时间。&lt;/p>
&lt;p>406 ts = av_rescale(ts, AV_TIME_BASE *(int64_t)st-&amp;gt;time_base.num, st-&amp;gt;time_base.den);&lt;/p>
&lt;p>407&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.117.png" alt="">&lt;/p>
&lt;p>取最小的时间点对应的时间，流指针，流索引作为要读取的最佳 (读取)流参数。&lt;/p>
&lt;p>408 if (ts &amp;lt; best_ts) // 每次读取时间点(ast-&amp;gt;frame_offset)最近的包&lt;/p>
&lt;p>409 {&lt;/p>
&lt;p>410 best_ts = ts;&lt;/p>
&lt;p>411 best_st = st;&lt;/p>
&lt;p>412 best_stream_index = i;&lt;/p>
&lt;p>413 }&lt;/p>
&lt;p>414 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>保存最佳流对应的 AVIStream，便于 432 行赋值并传递参数 packet_size 和 remaining。&lt;/p>
&lt;p>415 best_ast = best_st-&amp;gt;priv_data;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.096.png" alt="">&lt;/p>
&lt;p>换算最小的时间点，查找索引表取出对应的索引。在缓存足够大，一次性完整读取帧数据时，此时&lt;/p>
&lt;p>best_ast-&amp;gt;remaining 参数为 0。&lt;/p>
&lt;p>416 best_ts = av_rescale(best_ts,best_st-&amp;gt;time_base.den,AV_TIME_BASE *(int64_t)best_st-&amp;gt;time_base.num);&lt;/p>
&lt;p>417 if (best_ast-&amp;gt;remaining)&lt;/p>
&lt;p>418 i = av_index_search_timestamp(best_st, best_ts, AVSEEK_FLAG_ANY | AVSEEK_FLAG_BACKWARD);&lt;/p>
&lt;p>419 else&lt;/p>
&lt;p>420 i = av_index_search_timestamp(best_st, best_ts, AVSEEK_FLAG_ANY);&lt;/p>
&lt;p>421&lt;/p>
&lt;p>422 if (i &amp;gt;= 0)&lt;/p>
&lt;p>423 {&lt;/p>
&lt;p>找到最佳索引，取出其他参数，在 426 行 seek 到相应位置，在 430 行保存最佳流索引，在 432 行保存&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.096.png" alt="">并传递要读取的数据大小(通过最佳流索引找到最佳流，再找到对应 AVIStream 结构，再找到数据大小)。&lt;/p>
&lt;p>424 int64_t pos = best_st-&amp;gt;index_entries[i].pos;&lt;/p>
&lt;p>425 pos += best_ast-&amp;gt;packet_size - best_ast-&amp;gt;remaining;&lt;/p>
&lt;p>426 url_fseek(&amp;amp;s-&amp;gt;pb, pos + 8, SEEK_SET);&lt;/p>
&lt;p>427&lt;/p>
&lt;p>428 assert(best_ast-&amp;gt;remaining &amp;lt;= best_ast-&amp;gt;packet_size);&lt;/p>
&lt;p>429&lt;/p>
&lt;p>430 avi-&amp;gt;stream_index_2 = best_stream_index;&lt;/p>
&lt;p>431 if (!best_ast-&amp;gt;remaining)&lt;/p>
&lt;p>432 best_ast-&amp;gt;packet_size = best_ast-&amp;gt;remaining = best_st-&amp;gt;index_entries[i].size;&lt;/p>
&lt;p>433 }&lt;/p>
&lt;p>434 }&lt;/p>
&lt;p>435&lt;/p>
&lt;p>436 resync:&lt;/p>
&lt;p>437&lt;/p>
&lt;p>438 if (avi-&amp;gt;stream_index_2 &amp;gt;= 0)&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">439 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>如果找到最佳流索引，以此为根参数，取出其他参数和读取媒体数据。&lt;/p>
&lt;p>440 AVStream *st = s-&amp;gt;streams[avi-&amp;gt;stream_index_2];&lt;/p>
&lt;p>441 AVIStream *ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>442 int size;&lt;/p>
&lt;p>443&lt;/p>
&lt;p>444 if (ast-&amp;gt;sample_size &amp;lt;= 1) // minorityreport.AVI block_align=1024 sample_size=1 IMA- ADPCM&lt;/p>
&lt;p>445 size = INT_MAX;&lt;/p>
&lt;p>446 else if (ast-&amp;gt;sample_size &amp;lt; 32)&lt;/p>
&lt;p>447 size = 64 * ast-&amp;gt;sample_size;&lt;/p>
&lt;p>448 else&lt;/p>
&lt;p>449 size = ast-&amp;gt;sample_size;&lt;/p>
&lt;p>450&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>在缓存足够大，一次全部读取一帧媒体数据的情况下，451 行判断不成立，size 等于 ast-&amp;gt;sample_size&lt;/p>
&lt;p>451 if (size &amp;gt; ast-&amp;gt;remaining)&lt;/p>
&lt;p>452 size = ast-&amp;gt;remaining;&lt;/p>
&lt;p>453&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>调用 av_get_packet()函数实际读取媒体数据到 pkt 包中。&lt;/p>
&lt;p>454 av_get_packet(pb, pkt, size);&lt;/p>
&lt;p>455&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>修改媒体流的一些其他参数。&lt;/p>
&lt;p>456 pkt-&amp;gt;dts = ast-&amp;gt;frame_offset;&lt;/p>
&lt;p>457&lt;/p>
&lt;p>458 if (ast-&amp;gt;sample_size)&lt;/p>
&lt;p>459 pkt-&amp;gt;dts /= ast-&amp;gt;sample_size;&lt;/p>
&lt;p>460&lt;/p>
&lt;p>461 pkt-&amp;gt;stream_index = avi-&amp;gt;stream_index_2;&lt;/p>
&lt;p>462&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>在简单情况顺序播放时，463 行到 487 行没有什么实际意义。&lt;/p>
&lt;p>463 if (st-&amp;gt;actx-&amp;gt;codec_type == CODEC_TYPE_VIDEO)&lt;/p>
&lt;p>464 {&lt;/p>
&lt;p>465 if (st-&amp;gt;index_entries)&lt;/p>
&lt;p>466 {&lt;/p>
&lt;p>467 AVIndexEntry *e;&lt;/p>
&lt;p>468 int index;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>469&lt;/p>
&lt;p>470 index = av_index_search_timestamp(st, pkt-&amp;gt;dts, 0);&lt;/p>
&lt;p>471 e = &amp;amp;st-&amp;gt;index_entries[index];&lt;/p>
&lt;p>472&lt;/p>
&lt;p>473 if (index &amp;gt;= 0 &amp;amp;&amp;amp; e-&amp;gt;timestamp == ast-&amp;gt;frame_offset)&lt;/p>
&lt;p>474 {&lt;/p>
&lt;p>475 if (e-&amp;gt;flags &amp;amp;AVINDEX_KEYFRAME)&lt;/p>
&lt;p>476 pkt-&amp;gt;flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>477 }&lt;/p>
&lt;p>478 }&lt;/p>
&lt;p>479 else&lt;/p>
&lt;p>480 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果没有索引，较好的办法是把所有帧都设为关键帧。&lt;/p>
&lt;p>|481||pkt-&amp;gt;flags |= PKT_FLAG_KEY;|
| - | - | - |
|482|}||
|483|}||
|484|else||
|485|{||
486 pkt-&amp;gt;flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>487 }&lt;/p>
&lt;p>488&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>修改帧偏移。&lt;/p>
&lt;p>489 if (ast-&amp;gt;sample_size)&lt;/p>
&lt;p>490 ast-&amp;gt;frame_offset += pkt-&amp;gt;size;&lt;/p>
&lt;p>491 else&lt;/p>
&lt;p>492 ast-&amp;gt;frame_offset++;&lt;/p>
&lt;p>493&lt;/p>
&lt;p>494 ast-&amp;gt;remaining -= size;&lt;/p>
&lt;p>495 if (!ast-&amp;gt;remaining)&lt;/p>
&lt;p>496 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>缓存足够大时，程序一定跑到这里，复位标志性参数。&lt;/p>
&lt;p>497 avi-&amp;gt;stream_index_2 = - 1;&lt;/p>
&lt;p>498 ast-&amp;gt;packet_size = 0;&lt;/p>
&lt;p>499 if (size &amp;amp;1)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>500&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>501&lt;/td>
&lt;td>&lt;/td>
&lt;td>get_byte(pb);&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>502&lt;/td>
&lt;td>&lt;/td>
&lt;td>size++;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>503&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">504 }&lt;/p>
&lt;p>505&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>返回实际读到的数据大小。&lt;/p>
&lt;p>506 return size;&lt;/p>
&lt;p>507 }&lt;/p>
&lt;p>508&lt;/p>
&lt;p>509 memset(d, - 1, sizeof(int) *8);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>把数组 d[8]清为-1，为了在下面的流标记查找时不会出错。&lt;/p>
&lt;p>510 for (i = sync = url_ftell(pb); !url_feof(pb); i++)&lt;/p>
&lt;p>511 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>交织 avi 时顺序读取文件，媒体数据。&lt;/p>
&lt;p>512 int j;&lt;/p>
&lt;p>513&lt;/p>
&lt;p>514 if (i &amp;gt;= avi-&amp;gt;movi_end)&lt;/p>
&lt;p>515 break;&lt;/p>
&lt;p>516&lt;/p>
&lt;p>首先要找到流标记，比如 00db,00dc,01w b 等。在 32bit CPU 上为存取数据方便，把 avi 文件中的帧标记&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.095.png" alt="">和帧大小共 8 个字节对应赋值到 in t 型数组 d[8]中，这样每次是整数操作。&lt;/p>
&lt;p>517 for (j = 0; j &amp;lt; 7; j++)&lt;/p>
&lt;p>518 d[j] = d[j + 1];&lt;/p>
&lt;p>519&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>518 行把整型缓存前移一个单位。520 行从文件中读一个字节补充到整型缓存，计算包大小和流索引。&lt;/p>
&lt;p>520 d[7] = get_byte(pb);&lt;/p>
&lt;p>521&lt;/p>
&lt;p>522 size = d[4] + (d[5] &amp;lt;&amp;lt; 8) + (d[6] &amp;lt;&amp;lt; 16) + (d[7] &amp;lt;&amp;lt; 24);&lt;/p>
&lt;p>523&lt;/p>
&lt;p>524 if (d[2] &amp;gt;= '0' &amp;amp;&amp;amp; d[2] &amp;lt;= '9' &amp;amp;&amp;amp; d[3] &amp;gt;= '0' &amp;amp;&amp;amp; d[3] &amp;lt;= '9')&lt;/p>
&lt;p>525 {&lt;/p>
&lt;p>526 n = (d[2] - '0') *10+(d[3] - '0');&lt;/p>
&lt;p>527 }&lt;/p>
&lt;p>528 else&lt;/p>
&lt;p>529 {&lt;/p>
&lt;p>530 n = 100; //invalid stream id&lt;/p>
&lt;p>531 }&lt;/p>
&lt;p>532&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.118.png" alt="">&lt;/p>
&lt;p>校验 size 大小，如果偏移位置加 size 超过数据块大小就不是有效的流标记。&lt;/p>
&lt;p>校验流索引，如果&amp;lt;0 就不是有效的流标记。流索引从 0 开始计数，媒体文件通常不超过 10 个流。&lt;/p>
&lt;p>533 if (i + size &amp;gt; avi-&amp;gt;movi_end || d[0] &amp;lt; 0)&lt;/p>
&lt;p>534 continue;&lt;/p>
&lt;p>535&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>536 行到 541 行代码处理诸如 jun k 等需要跳过的块。&lt;/p>
&lt;p>536 if ((d[0] == 'i' &amp;amp;&amp;amp; d[1] == 'x' &amp;amp;&amp;amp; n &amp;lt; s-&amp;gt;nb_streams)&lt;/p>
&lt;p>537 || (d[0] == 'J' &amp;amp;&amp;amp; d[1] == 'U' &amp;amp;&amp;amp; d[2] == 'N' &amp;amp;&amp;amp; d[3] == 'K'))&lt;/p>
&lt;p>538 {&lt;/p>
&lt;p>539 url_fskip(pb, size);&lt;/p>
&lt;p>540 goto resync;&lt;/p>
&lt;p>541 }&lt;/p>
&lt;p>542&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>计算流索引号 n。&lt;/p>
&lt;p>543 if (d[0] &amp;gt;= '0' &amp;amp;&amp;amp; d[0] &amp;lt;= '9' &amp;amp;&amp;amp; d[1] &amp;gt;= '0' &amp;amp;&amp;amp; d[1] &amp;lt;= '9')&lt;/p>
&lt;p>544 {&lt;/p>
&lt;p>545 n = (d[0] - '0') *10+(d[1] - '0');&lt;/p>
&lt;p>546 }&lt;/p>
&lt;p>547 else&lt;/p>
&lt;p>548 {&lt;/p>
&lt;p>549 n = 100; //invalid stream id&lt;/p>
&lt;p>550 }&lt;/p>
&lt;p>551&lt;/p>
&lt;p>552 //parse ##dc/##wb&lt;/p>
&lt;p>553 if (n &amp;lt; s-&amp;gt;nb_streams)&lt;/p>
&lt;p>554 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果流索引号 n 比流总数小，认为有效。(我个人认为这个校验不太严格。)&lt;/p>
&lt;p>555 AVStream *st;&lt;/p>
&lt;p>556 AVIStream *ast;&lt;/p>
&lt;p>557 st = s-&amp;gt;streams[n];&lt;/p>
&lt;p>558 ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>559&lt;/p>
&lt;p>560 if (((ast-&amp;gt;prefix_count &amp;lt; 5 || sync + 9 &amp;gt; i) &amp;amp;&amp;amp; d[2] &amp;lt; 128 &amp;amp;&amp;amp; d[3] &amp;lt; 128)&lt;/p>
&lt;p>561 || d[2] * 256 + d[3] == ast-&amp;gt;prefix)&lt;/p>
&lt;p>562 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>if(d[2]*256+d[3]==ast-&amp;gt;prefix)为真表示 &amp;quot;db&amp;quot;,&amp;quot;dc&amp;quot;,&amp;quot;wb&amp;quot;等字串匹配，找到正确帧标记。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.119.png" alt="">判断 d[2]&amp;lt;128 &amp;amp;&amp;amp; d[3]&amp;lt;128 是因为 'd','b','c','w'等字符的 ascii 码小于 128。&lt;/p>
&lt;p>判断 ast-&amp;gt;prefix_count&amp;lt;5 || sync + 9 &amp;gt; i，是判断单一媒体的 5 帧内或找帧标记超过 9 个字节。&lt;/p>
&lt;p>563 行到 569 行是单一媒体帧边界初次识别成功和以后识别成功的简单处理，计数自增或保存标记。&lt;/p>
&lt;p>563 if (d[2] * 256 + d[3] == ast-&amp;gt;prefix)&lt;/p>
&lt;p>564 ast-&amp;gt;prefix_count++;&lt;/p>
&lt;p>565 else&lt;/p>
&lt;p>566 {&lt;/p>
&lt;p>567 ast-&amp;gt;prefix = d[2] *256+d[3];&lt;/p>
&lt;p>568 ast-&amp;gt;prefix_count = 0;&lt;/p>
&lt;p>569 }&lt;/p>
&lt;p>570&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>找到相应的流索引后，保存相关参数，跳转到实质性读媒体程序。&lt;/p>
&lt;p>571 avi-&amp;gt;stream_index_2 = n;&lt;/p>
&lt;p>572 ast-&amp;gt;packet_size = size + 8;&lt;/p>
&lt;p>573 ast-&amp;gt;remaining = size;&lt;/p>
&lt;p>574 goto resync;&lt;/p>
&lt;p>575 }&lt;/p>
&lt;p>576 }&lt;/p>
&lt;p>577 // palette changed chunk&lt;/p>
&lt;p>578 if (d[0] &amp;gt;= '0' &amp;amp;&amp;amp; d[0] &amp;lt;= '9' &amp;amp;&amp;amp; d[1] &amp;gt;= '0' &amp;amp;&amp;amp; d[1] &amp;lt;= '9'&lt;/p>
&lt;p>579 &amp;amp;&amp;amp; (d[2] == 'p' &amp;amp;&amp;amp; d[3] == 'c') &amp;amp;&amp;amp; n &amp;lt; s-&amp;gt;nb_streams &amp;amp;&amp;amp; i + size &amp;lt;= avi-&amp;gt;movi_end)&lt;/p>
&lt;p>580 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.102.png" alt="">&lt;/p>
&lt;p>处理调色板改变块数据，读取调色板数据到编解码器上下文的调色板数组中。&lt;/p>
&lt;p>581 AVStream *st;&lt;/p>
&lt;p>582 int first, clr, flags, k, p;&lt;/p>
&lt;p>583&lt;/p>
&lt;p>584 st = s-&amp;gt;streams[n];&lt;/p>
&lt;p>585&lt;/p>
&lt;p>586 first = get_byte(pb);&lt;/p>
&lt;p>587 clr = get_byte(pb);&lt;/p>
&lt;p>588 if (!clr) // all 256 colors used&lt;/p>
&lt;p>589 clr = 256;&lt;/p>
&lt;p>590 flags = get_le16(pb);&lt;/p>
&lt;p>591 p = 4;&lt;/p>
&lt;p>592 for (k = first; k &amp;lt; clr + first; k++)&lt;/p>
&lt;p>593 {&lt;/p>
&lt;p>594 int r, g, b;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>595 r = get_byte(pb);&lt;/p>
&lt;p>596 g = get_byte(pb);&lt;/p>
&lt;p>597 b = get_byte(pb);&lt;/p>
&lt;p>598 get_byte(pb);&lt;/p>
&lt;p>599 st-&amp;gt;actx-&amp;gt;palctrl-&amp;gt;palette[k] = b + (g &amp;lt;&amp;lt; 8) + (r &amp;lt;&amp;lt; 16);&lt;/p>
&lt;p>600 }&lt;/p>
&lt;p>601 st-&amp;gt;actx-&amp;gt;palctrl-&amp;gt;palette_changed = 1;&lt;/p>
&lt;p>602 goto resync;&lt;/p>
&lt;p>603 }&lt;/p>
&lt;p>604 }&lt;/p>
&lt;p>605&lt;/p>
&lt;p>606 return - 1;&lt;/p>
&lt;p>607 }&lt;/p>
&lt;p>608&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>实质读取 AVI 文件的索引。&lt;/p>
&lt;p>609 static int avi_read_idx1(AVFormatContext *s, int size)&lt;/p>
&lt;p>610 {&lt;/p>
&lt;p>611 AVIContext *avi = s-&amp;gt;priv_data;&lt;/p>
&lt;p>612 ByteIOContext *pb = &amp;amp;s-&amp;gt;pb;&lt;/p>
&lt;p>613 int nb_index_entries, i;&lt;/p>
&lt;p>614 AVStream *st;&lt;/p>
&lt;p>615 AVIStream *ast;&lt;/p>
&lt;p>616 unsigned int index, tag, flags, pos, len;&lt;/p>
&lt;p>617 unsigned last_pos = - 1;&lt;/p>
&lt;p>618&lt;/p>
&lt;p>619 nb_index_entries = size / 16;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>如果没有索引块 chunk，直接返回。&lt;/p>
&lt;p>620 if (nb_index_entries &amp;lt;= 0)&lt;/p>
&lt;p>621 return - 1;&lt;/p>
&lt;p>622&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>遍历整个索引项。&lt;/p>
&lt;p>623 for (i = 0; i &amp;lt; nb_index_entries; i++)&lt;/p>
&lt;p>624 {&lt;/p>
&lt;p>625 tag = get_le32(pb);&lt;/p>
&lt;p>626 flags = get_le32(pb);&lt;/p>
&lt;p>627 pos = get_le32(pb);&lt;/p>
&lt;p>628 len = get_le32(pb);&lt;/p>
&lt;p>629&lt;/p>
&lt;p>如果第一个索引指示的偏移量大于数据块的偏移量，则索引指示的偏移量是相对文件开始字节的偏移&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.120.png" alt="">量。索引加载到内存后，如果是相对数据块的偏移量就要换算成相对于文件开始字节的偏移量，便于 seek&lt;/p>
&lt;p>操作。在 631 行和 633 行统一处理这两个情况。&lt;/p>
&lt;p>630 if (i == 0 &amp;amp;&amp;amp; pos &amp;gt; avi-&amp;gt;movi_list)&lt;/p>
&lt;p>631 avi-&amp;gt;movi_list = 0;&lt;/p>
&lt;p>632&lt;/p>
&lt;p>633 pos += avi-&amp;gt;movi_list;&lt;/p>
&lt;p>634&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>计算流 ID，如索引块中的 00dc，01w b 等关键字表示的流 ID 分别为数字 0 和 1。&lt;/p>
&lt;p>635 index = ((tag &amp;amp;0xff) - '0') *10;&lt;/p>
&lt;p>636 index += ((tag &amp;gt;&amp;gt; 8) &amp;amp;0xff) - '0';&lt;/p>
&lt;p>637 if (index &amp;gt;= s-&amp;gt;nb_streams)&lt;/p>
&lt;p>638 continue;&lt;/p>
&lt;p>639&lt;/p>
&lt;p>640 st = s-&amp;gt;streams[index];&lt;/p>
&lt;p>641 ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>642&lt;/p>
&lt;p>643 if (last_pos == pos)&lt;/p>
&lt;p>644 avi-&amp;gt;non_interleaved = 1;&lt;/p>
&lt;p>645 else&lt;/p>
&lt;p>646 av_add_index_entry(st, pos, ast-&amp;gt;cum_len, len, 0, (flags&amp;amp;AVIIF_INDEX)?AVINDEX_KEYFRAME:0);&lt;/p>
&lt;p>647&lt;/p>
&lt;p>648 if (ast-&amp;gt;sample_size)&lt;/p>
&lt;p>649 ast-&amp;gt;cum_len += len / ast-&amp;gt;sample_size;&lt;/p>
&lt;p>650 else&lt;/p>
&lt;p>651 ast-&amp;gt;cum_len++;&lt;/p>
&lt;p>652 last_pos = pos;&lt;/p>
&lt;p>653 }&lt;/p>
&lt;p>654 return 0;&lt;/p>
&lt;p>655 }&lt;/p>
&lt;p>656&lt;/p>
&lt;p>判断是否是非交织存放媒体数据，其中 ni 是 non_interleaved 的缩写，非交织的意思。如果是非交织&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.121.png" alt="">存放返回 1，交织存放返回 0。&lt;/p>
&lt;p>非交织存放的 avi 文件，如果有多个媒体流，肯定有某个流的开始字节文件偏移量大于其他某个流的 末尾字节的文件偏移量。程序利用这个来判断是否是非交织存放，否则认定为交织存放。&lt;/p>
&lt;p>657 static int guess_ni_flag(AVFormatContext *s)&lt;/p>
&lt;p>658 {&lt;/p>
&lt;p>659 int i;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>660 int64_t last_start = 0;&lt;/p>
&lt;p>661 int64_t first_end = INT64_MAX;&lt;/p>
&lt;p>662&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.101.png" alt="">&lt;/p>
&lt;p>遍历 AVI 文件中所有的索引，取流开始偏移量的最大值和末尾偏移量的最小值判断。&lt;/p>
&lt;p>663 for (i = 0; i &amp;lt; s-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>664 {&lt;/p>
&lt;p>665 AVStream *st = s-&amp;gt;streams[i];&lt;/p>
&lt;p>666 int n = st-&amp;gt;nb_index_entries;&lt;/p>
&lt;p>667&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.101.png" alt="">&lt;/p>
&lt;p>如果某个流没有 index 项，认为这个流没有数据，这个流忽略不计。&lt;/p>
&lt;p>668 if (n &amp;lt;= 0)&lt;/p>
&lt;p>669 continue;&lt;/p>
&lt;p>670&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.101.png" alt="">&lt;/p>
&lt;p>遍历 AVI 文件中所有的索引，取流开始偏移量的最大值。&lt;/p>
&lt;p>671 if (st-&amp;gt;index_entries[0].pos &amp;gt; last_start)&lt;/p>
&lt;p>672 last_start = st-&amp;gt;index_entries[0].pos;&lt;/p>
&lt;p>673&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.101.png" alt="">&lt;/p>
&lt;p>遍历 AVI 文件中所有的索引，取流末尾偏移量的最小值。&lt;/p>
&lt;p>674 if (st-&amp;gt;index_entries[n - 1].pos &amp;lt; first_end)&lt;/p>
&lt;p>675 first_end = st-&amp;gt;index_entries[n - 1].pos;&lt;/p>
&lt;p>676 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.100.png" alt="">&lt;/p>
&lt;p>如果某个流的开始最大值大于某个流的末尾最小值，认为是非交织存储，否则是交织存储。&lt;/p>
&lt;p>677 return last_start &amp;gt; first_end;&lt;/p>
&lt;p>678 }&lt;/p>
&lt;p>679&lt;/p>
&lt;p>加载 AVI 文件索引块 chunk，特别注意在 avi_read_ idx1()函数调用的 av_add_index_entry()函数是分媒&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.109.png" alt="">体类型按照时间顺序重新排序的。&lt;/p>
&lt;p>680 static int avi_load_index(AVFormatContext *s)&lt;/p>
&lt;p>681 {&lt;/p>
&lt;p>682 AVIContext *avi = s-&amp;gt;priv_data;&lt;/p>
&lt;p>683 ByteIOContext *pb = &amp;amp;s-&amp;gt;pb;&lt;/p>
&lt;p>684 uint32_t tag, size;&lt;/p>
&lt;p>685 offset_t pos = url_ftell(pb);&lt;/p>
&lt;p>686&lt;/p>
&lt;p>687 url_fseek(pb, avi-&amp;gt;movi_end, SEEK_SET);&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">688&lt;/p>
&lt;p>689 for (;;)&lt;/p>
&lt;p>690 {&lt;/p>
&lt;p>691 if (url_feof(pb))&lt;/p>
&lt;p>692 break;&lt;/p>
&lt;p>693 tag = get_le32(pb);&lt;/p>
&lt;p>694 size = get_le32(pb);&lt;/p>
&lt;p>695&lt;/p>
&lt;p>696 switch (tag)&lt;/p>
&lt;p>697 {&lt;/p>
&lt;p>698 case MKTAG('i', 'd', 'x', '1'):&lt;/p>
&lt;p>699 if (avi_read_idx1(s, size) &amp;lt; 0)&lt;/p>
&lt;p>700 goto skip;&lt;/p>
&lt;p>701 else&lt;/p>
&lt;p>702 goto the_end;&lt;/p>
&lt;p>703 break;&lt;/p>
&lt;p>704 default:&lt;/p>
&lt;p>705 skip:&lt;/p>
&lt;p>706 size += (size &amp;amp;1);&lt;/p>
&lt;p>707 url_fskip(pb, size);&lt;/p>
&lt;p>708 break;&lt;/p>
&lt;p>709 }&lt;/p>
&lt;p>710 }&lt;/p>
&lt;p>711 the_end:&lt;/p>
&lt;p>712 url_fseek(pb, pos, SEEK_SET);&lt;/p>
&lt;p>713 return 0;&lt;/p>
&lt;p>714 }&lt;/p>
&lt;p>715&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.094.png" alt="">&lt;/p>
&lt;p>关闭 AVI 文件，释放内存和其他相关资源。&lt;/p>
&lt;p>716 static int avi_read_close(AVFormatContext *s)&lt;/p>
&lt;p>717 {&lt;/p>
&lt;p>718 int i;&lt;/p>
&lt;p>719 AVIContext *avi = s-&amp;gt;priv_data;&lt;/p>
&lt;p>720&lt;/p>
&lt;p>721 for (i = 0; i &amp;lt; s-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>722 {&lt;/p>
&lt;p>723 AVStream *st = s-&amp;gt;streams[i];&lt;/p>
&lt;p>724 AVIStream *ast = st-&amp;gt;priv_data;&lt;/p>
&lt;p>725 av_free(ast);&lt;/p>
&lt;p>726 av_free(st-&amp;gt;actx-&amp;gt;extradata);&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">727 av_free(st-&amp;gt;actx-&amp;gt;palctrl);&lt;/p>
&lt;p>728 }&lt;/p>
&lt;p>729&lt;/p>
&lt;p>730 return 0;&lt;/p>
&lt;p>731 }&lt;/p>
&lt;p>732&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>AVI 文件判断，取 AVI 文件的关键字串&amp;quot;RIFF&amp;quot;和&amp;quot;AVI &amp;quot;判断，和 get_riff()函数部分相同。&lt;/p>
&lt;p>733 static int avi_probe(AVProbeData *p)&lt;/p>
&lt;p>734 {&lt;/p>
&lt;p>735 if (p-&amp;gt;buf_size &amp;lt;= 32) // check file header&lt;/p>
&lt;p>736 return 0;&lt;/p>
&lt;p>737 if (p-&amp;gt;buf[0] == 'R' &amp;amp;&amp;amp; p-&amp;gt;buf[1] == 'I' &amp;amp;&amp;amp; p-&amp;gt;buf[2] == 'F' &amp;amp;&amp;amp; p-&amp;gt;buf[3] == 'F'&lt;/p>
&lt;p>738 &amp;amp;&amp;amp; p-&amp;gt;buf[8] == 'A' &amp;amp;&amp;amp; p-&amp;gt;buf[9] == 'V' &amp;amp;&amp;amp; p-&amp;gt;buf[10] == 'I'&amp;amp;&amp;amp; p-&amp;gt;buf[11] == ' ')&lt;/p>
&lt;p>739 return AVPROBE_SCORE_MAX;&lt;/p>
&lt;p>740 else&lt;/p>
&lt;p>741 return 0;&lt;/p>
&lt;p>742 }&lt;/p>
&lt;p>743&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>初始化 AVI 文件格式 AVInputFormat 结构，直接的赋值操作。&lt;/p>
&lt;p>744 AVInputFormat avi_iformat =&lt;/p>
&lt;p>745 {&lt;/p>
&lt;p>746 &amp;quot;avi&amp;quot;,&lt;/p>
&lt;p>747 sizeof(AVIContext),&lt;/p>
&lt;p>748 avi_probe,&lt;/p>
&lt;p>749 avi_read_header,&lt;/p>
&lt;p>750 avi_read_packet,&lt;/p>
&lt;p>751 avi_read_close,&lt;/p>
&lt;p>752 };&lt;/p>
&lt;p>753&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.091.png" alt="">&lt;/p>
&lt;p>注册 avi 文件格式，ffplay 把所有支持的文件格式用链表串联起来，表头是 first_iformat，便于查找。&lt;/p>
&lt;p>754 int avidec_init(void)&lt;/p>
&lt;p>755 {&lt;/p>
&lt;p>756 av_register_input_format(&amp;amp;avi_iformat);&lt;/p>
&lt;p>757 return 0;&lt;/p>
&lt;p>758 }&lt;/p>
&lt;p>759&lt;/p>
&lt;h2 id="54-libswscale视频色彩空间转换">&lt;strong>5.4 libswscale视频色彩空间转换&lt;/strong>&lt;/h2>
&lt;h2 id="55-libswresample音频重采样">&lt;strong>5.5 libswresample音频重采样&lt;/strong>&lt;/h2>
&lt;h2 id="56-libavfilter音视频滤器">&lt;strong>5.6 libavfilter音视频滤器&lt;/strong>&lt;/h2>
&lt;h2 id="57-libavdevice设备输入和输出容器">&lt;strong>5.7 libavdevice设备输入和输出容器&lt;/strong>&lt;/h2>
&lt;h2 id="58-libpostproc视频后期处理">&lt;strong>5.8 libpostproc视频后期处理&lt;/strong>&lt;/h2>
&lt;h1 id="第六章-播放器">&lt;strong>第六章 播放器&lt;/strong>&lt;/h1>
&lt;h2 id="61-视频播放器">&lt;strong>6.1 视频播放器&lt;/strong>&lt;/h2>
&lt;h3 id="611-ffmpeg库的配置">&lt;strong>6.1.1 ffmpeg库的配置&lt;/strong>&lt;/h3>
&lt;p>从http://ffmpeg.zeranoe.com/builds/网站上&lt;/p>
&lt;p>1.下载Dev版本，里面包含了ffmpeg的xxx.h头文件以及xxx.lib库文件；&lt;/p>
&lt;p>2.下载Shared版本，里面包含了ffmpeg的dll文件；&lt;/p>
&lt;p>3.将这两部分文件拷贝到VC工程下面就可以了。&lt;/p>
&lt;p>&lt;strong>FFMPEG 库移植到 VC 需要的步骤：&lt;/strong>&lt;/p>
&lt;p>在VC下使用FFMPEG编译好的库，不仅仅是把.h，.lib，.dll拷贝到工程中就行了，还需要做以下几步。（此方法适用于自己使用MinGW编译的库，也同样适用于从网上下载的编译好的库，例如http://ffmpeg.zeranoe.com/builds/）。&lt;/p>
&lt;p>（1）像其他额外库一样，设置VC的Include路径为你c:\msys\local\include,设置VClib路径为次c:\msys\local\bin，增加操作系统的一个Path c:\msys\local\bin（这一步好像不是必须的）。&lt;/p>
&lt;p>（2）将mingw安装目录下的include的inttypes.h，stdint.h，_mingw.h三个文件拷到你ffmpeg库的目录下的include&lt;/p>
&lt;p>（3）在_mingw.h文件的结尾处(在#endif 一行之前)添加了一行：&lt;/p>
&lt;p>#define __restrict__&lt;/p>
&lt;p>（4）把所有long long改成了__int64，如果是直接在vs2008下编译，则这个修改应该是不需要的(这步我没有遇到)&lt;/p>
&lt;p>（5）&lt;/p>
&lt;p>#ifdef __cplusplus&lt;/p>
&lt;p>#include &amp;quot;stdio.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;stdlib.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;string.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;SDL/SDL.h&amp;quot;&lt;/p>
&lt;p>//#include &amp;quot;windows.h&amp;quot;&lt;/p>
&lt;p>extern &amp;quot;C&amp;quot;&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>#include &amp;quot;ffmpeg/avutil.h&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>#include &amp;quot;ffmpeg/avcodec.h&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>#include &amp;quot;ffmpeg/avformat.h&amp;quot;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>#pragma comment(lib,&amp;quot;avutil.lib&amp;quot;)&lt;/p>
&lt;p>#pragma comment(lib,&amp;quot;avcodec.lib&amp;quot;)&lt;/p>
&lt;p>#pragma comment(lib,&amp;quot;avformat.lib&amp;quot;)&lt;/p>
&lt;p>（6）如果遇到error C3861: 'UINT64_C': identifier not found&lt;/p>
&lt;p>在common.h里加入定义如下：&lt;/p>
&lt;p>#ifndef INT64_C&lt;/p>
&lt;p>#define INT64_C(c) (c ## LL)&lt;/p>
&lt;p>#define UINT64_C(c) (c ## ULL)&lt;/p>
&lt;p>#endif&lt;/p>
&lt;h3 id="612-一个简单的视频播放器">&lt;strong>6.1.2 一个简单的视频播放器&lt;/strong>&lt;/h3>
&lt;p>该播放器虽然简单，但是几乎包含了使用FFMPEG播放一个视频所有必备的API，并且使用SDL显示解码出来的视频。&lt;/p>
&lt;p>并且支持流媒体等多种视频输入，处于简单考虑，没有音频部分，同时视频播放采用直接延时40ms的方式&lt;/p>
&lt;p>平台使用VC2010&lt;/p>
&lt;p>使用了最新的FFMPEG类库&lt;/p>
&lt;p>int _tmain(int argc, _TCHAR* argv[])&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *pFormatCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>int i, videoindex;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *pCodecCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *pCodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>char filepath[]=&amp;quot;nwn.mp4&amp;quot;;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>avformat_network_init();&lt;/p>
&lt;p>&lt;code> &lt;/code>pFormatCtx = avformat_alloc_context();&lt;/p>
&lt;p>&lt;code> &lt;/code>if(avformat_open_input(&amp;amp;pFormatCtx,filepath,NULL,NULL)!=0){&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;无法打开文件\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if(av_find_stream_info(pFormatCtx)&amp;lt;0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Couldn't find stream information.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>videoindex=-1;&lt;/p>
&lt;p>&lt;code> &lt;/code>for(i=0; i&lt;pFormatCtx->nb_streams; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pFormatCtx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type==AVMEDIA_TYPE_VIDEO)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>videoindex=i;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if(videoindex==-1)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Didn't find a video stream.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodecCtx=pFormatCtx-&amp;gt;streams[videoindex]-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodec=avcodec_find_decoder(pCodecCtx-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pCodec==NULL)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Codec not found.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if(avcodec_open(pCodecCtx, pCodec)&amp;lt;0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Could not open codec.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *pFrame,*pFrameYUV;&lt;/p>
&lt;p>&lt;code> &lt;/code>pFrame=avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>pFrameYUV=avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *out_buffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>out_buffer=new uint8_t[avpicture_get_size(PIX_FMT_YUV420P, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height)];&lt;/p>
&lt;p>&lt;code> &lt;/code>avpicture_fill((AVPicture *)pFrameYUV, out_buffer, PIX_FMT_YUV420P, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height);&lt;/p>
&lt;p>//------------SDL----------------&lt;/p>
&lt;p>&lt;code> &lt;/code>if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>printf( &amp;quot;Could not initialize SDL - %s\n&amp;quot;, SDL_GetError());&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_Surface *screen;&lt;/p>
&lt;p>&lt;code> &lt;/code>screen = SDL_SetVideoMode(pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height, 0, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(!screen) { printf(&amp;quot;SDL: could not set video mode - exiting\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_Overlay *bmp;&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp = SDL_CreateYUVOverlay(pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height,SDL_YV12_OVERLAY, screen);&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_Rect rect;&lt;/p>
&lt;p>//---------------&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret, got_picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>static struct SwsContext *img_convert_ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>int y_size = pCodecCtx-&amp;gt;width * pCodecCtx-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket *packet=(AVPacket *)malloc(sizeof(AVPacket));&lt;/p>
&lt;p>&lt;code> &lt;/code>av_new_packet(packet, y_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>//输出一下信息-----------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;文件信息-----------------------------------------\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_dump_format(pFormatCtx,0,filepath,0);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;-------------------------------------------------\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//------------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>while(av_read_frame(pFormatCtx, packet)&amp;gt;=0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if(packet-&amp;gt;stream_index==videoindex)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;amp;got_picture, packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(ret &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;解码错误\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if(got_picture)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>img_convert_ctx = sws_getContext(pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height, pCodecCtx-&amp;gt;pix_fmt, pCodecCtx-&amp;gt;width, pCodecCtx-&amp;gt;height, PIX_FMT_YUV420P, SWS_BICUBIC, NULL, NULL, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>sws_scale(img_convert_ctx, (const uint8_t* const*)pFrame-&amp;gt;data, pFrame-&amp;gt;linesize, 0, pCodecCtx-&amp;gt;height, pFrameYUV-&amp;gt;data, pFrameYUV-&amp;gt;linesize);&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_LockYUVOverlay(bmp);&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp-&amp;gt;pixels[0]=pFrameYUV-&amp;gt;data[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp-&amp;gt;pixels[2]=pFrameYUV-&amp;gt;data[1];&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp-&amp;gt;pixels[1]=pFrameYUV-&amp;gt;data[2];&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp-&amp;gt;pitches[0]=pFrameYUV-&amp;gt;linesize[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp-&amp;gt;pitches[2]=pFrameYUV-&amp;gt;linesize[1];&lt;/p>
&lt;p>&lt;code> &lt;/code>bmp-&amp;gt;pitches[1]=pFrameYUV-&amp;gt;linesize[2];&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_UnlockYUVOverlay(bmp);&lt;/p>
&lt;p>&lt;code> &lt;/code>rect.x = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>rect.y = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>rect.w = pCodecCtx-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>rect.h = pCodecCtx-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_DisplayYUVOverlay(bmp, &amp;amp;rect);&lt;/p>
&lt;p>&lt;code> &lt;/code>//延时40ms&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_Delay(40);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free_packet(packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>delete[] out_buffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(pFrameYUV);&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(pCodecCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>avformat_close_input(&amp;amp;pFormatCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;h2 id="62-音频播放器">&lt;strong>6.2 音频播放器&lt;/strong>&lt;/h2>
&lt;p>注意：&lt;/p>
&lt;p>1.程序输出的解码后PCM音频数据可以使用Audition打开播放&lt;/p>
&lt;p>2.m4a,aac文件可以直接播放。mp3文件需要调整SDL音频帧大小为4608（默认是4096），否则播放会不流畅&lt;/p>
&lt;p>3.也可以播放视频中的音频&lt;/p>
&lt;p>#include &amp;lt;stdlib.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;string.h&amp;gt;&lt;/p>
&lt;p>extern &amp;quot;C&amp;quot;&lt;/p>
&lt;p>{&lt;/p>
&lt;p>#include &amp;quot;libavcodec/avcodec.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libavformat/avformat.h&amp;quot;&lt;/p>
&lt;p>//SDL&lt;/p>
&lt;p>#include &amp;quot;sdl/SDL.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;sdl/SDL_thread.h&amp;quot;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#include &amp;quot;decoder.h&amp;quot;&lt;/p>
&lt;p>//#include &amp;quot;wave.h&amp;quot;&lt;/p>
&lt;p>//#define _WAVE_&lt;/p>
&lt;p>//全局变量---------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>static Uint8 *audio_chunk;&lt;/p>
&lt;p>&lt;code> &lt;/code>static Uint32 audio_len;&lt;/p>
&lt;p>&lt;code> &lt;/code>static Uint8 *audio_pos;&lt;/p>
&lt;p>//-----------------&lt;/p>
&lt;p>&lt;code> &lt;/code>/* The audio function callback takes the following parameters:&lt;/p>
&lt;p>&lt;code> &lt;/code>stream: A pointer to the audio buffer to be filled&lt;/p>
&lt;p>&lt;code> &lt;/code>len: The length (in bytes) of the audio buffer (这是固定的4096？)&lt;/p>
&lt;p>&lt;code> &lt;/code>回调函数&lt;/p>
&lt;p>&lt;code> &lt;/code>注意：mp3为什么播放不顺畅？&lt;/p>
&lt;p>&lt;code> &lt;/code>len=4096;audio_len=4608;两个相差512！为了这512，还得再调用一次回调函数。。。&lt;/p>
&lt;p>&lt;code> &lt;/code>m4a,aac就不存在此问题(都是4096)！&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>void fill_audio(void *udata,Uint8 *stream,int len){&lt;/p>
&lt;p>&lt;code> &lt;/code>/* Only play if we have data left */&lt;/p>
&lt;p>&lt;code> &lt;/code>if(audio_len==0)&lt;/p>
&lt;p>&lt;code> &lt;/code>return;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* Mix as much data as possible */&lt;/p>
&lt;p>&lt;code> &lt;/code>len=(len&amp;gt;audio_len?audio_len:len);&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_MixAudio(stream,audio_pos,len,SDL_MIX_MAXVOLUME);&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_pos += len;&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_len -= len;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>//-----------------&lt;/p>
&lt;p>int decode_audio(char* no_use)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *pFormatCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>int i, audioStream;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *pCodecCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *pCodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>char url[300]={0};&lt;/p>
&lt;p>&lt;code> &lt;/code>strcpy(url,no_use);&lt;/p>
&lt;p>&lt;code> &lt;/code>//Register all available file formats and codecs&lt;/p>
&lt;p>&lt;code> &lt;/code>av_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>//支持网络流输入&lt;/p>
&lt;p>&lt;code> &lt;/code>avformat_network_init();&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化&lt;/p>
&lt;p>&lt;code> &lt;/code>pFormatCtx = avformat_alloc_context();&lt;/p>
&lt;p>&lt;code> &lt;/code>//有参数avdic&lt;/p>
&lt;p>&lt;code> &lt;/code>//if(avformat_open_input(&amp;amp;pFormatCtx,url,NULL,&amp;amp;avdic)!=0){&lt;/p>
&lt;p>&lt;code> &lt;/code>if(avformat_open_input(&amp;amp;pFormatCtx,url,NULL,NULL)!=0){&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Couldn't open file.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Retrieve stream information&lt;/p>
&lt;p>&lt;code> &lt;/code>if(av_find_stream_info(pFormatCtx)&amp;lt;0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Couldn't find stream information.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Dump valid information onto standard error&lt;/p>
&lt;p>&lt;code> &lt;/code>av_dump_format(pFormatCtx, 0, url, false);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Find the first audio stream&lt;/p>
&lt;p>&lt;code> &lt;/code>audioStream=-1;&lt;/p>
&lt;p>&lt;code> &lt;/code>for(i=0; i &amp;lt; pFormatCtx-&amp;gt;nb_streams; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>//原为codec_type==CODEC_TYPE_AUDIO&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pFormatCtx-&amp;gt;streams[i]-&amp;gt;codec-&amp;gt;codec_type==AVMEDIA_TYPE_AUDIO)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>audioStream=i;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if(audioStream==-1)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Didn't find a audio stream.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Get a pointer to the codec context for the audio stream&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodecCtx=pFormatCtx-&amp;gt;streams[audioStream]-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Find the decoder for the audio stream&lt;/p>
&lt;p>&lt;code> &lt;/code>pCodec=avcodec_find_decoder(pCodecCtx-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pCodec==NULL)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Codec not found.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Open codec&lt;/p>
&lt;p>&lt;code> &lt;/code>if(avcodec_open(pCodecCtx, pCodec)&amp;lt;0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Could not open codec.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/********* For output file ******************/&lt;/p>
&lt;p>&lt;code> &lt;/code>FILE *pFile;&lt;/p>
&lt;p>#ifdef _WAVE_&lt;/p>
&lt;p>&lt;code> &lt;/code>pFile=fopen(&amp;quot;output.wav&amp;quot;, &amp;quot;wb&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>fseek(pFile, 44, SEEK_SET); //预留文件头的位置&lt;/p>
&lt;p>#else&lt;/p>
&lt;p>&lt;code> &lt;/code>pFile=fopen(&amp;quot;output.pcm&amp;quot;, &amp;quot;wb&amp;quot;);&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>// Open the time stamp file&lt;/p>
&lt;p>&lt;code> &lt;/code>FILE *pTSFile;&lt;/p>
&lt;p>&lt;code> &lt;/code>pTSFile=fopen(&amp;quot;audio_time_stamp.txt&amp;quot;, &amp;quot;wb&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pTSFile==NULL)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Could not open output file.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(pTSFile, &amp;quot;Time Base: %d/%d\n&amp;quot;, pCodecCtx-&amp;gt;time_base.num, pCodecCtx-&amp;gt;time_base.den);&lt;/p>
&lt;p>&lt;code> &lt;/code>/*** Write audio into file ******/&lt;/p>
&lt;p>&lt;code> &lt;/code>//把结构体改为指针&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket *packet=(AVPacket *)malloc(sizeof(AVPacket));&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>//音频和视频解码更加统一！&lt;/p>
&lt;p>&lt;code> &lt;/code>//新加&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *pFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>pFrame=avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>//---------SDL--------------------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化&lt;/p>
&lt;p>&lt;code> &lt;/code>if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>printf( &amp;quot;Could not initialize SDL - %s\n&amp;quot;, SDL_GetError());&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//结构体，包含PCM数据的相关信息&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_AudioSpec wanted_spec;&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.freq = pCodecCtx-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.format = AUDIO_S16SYS;&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.channels = pCodecCtx-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.silence = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.samples = 1024; //播放AAC，M4a，缓冲区的大小&lt;/p>
&lt;p>&lt;code> &lt;/code>//wanted_spec.samples = 1152; //播放MP3，WMA时候用&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.callback = fill_audio;&lt;/p>
&lt;p>&lt;code> &lt;/code>wanted_spec.userdata = pCodecCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (SDL_OpenAudio(&amp;amp;wanted_spec, NULL)&amp;lt;0)//步骤（2）打开音频设备&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;can't open audio.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//-----------------------------------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;比特率 %3d\n&amp;quot;, pFormatCtx-&amp;gt;bit_rate);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;解码器名称 %s\n&amp;quot;, pCodecCtx-&amp;gt;codec-&amp;gt;long_name);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;time_base %d \n&amp;quot;, pCodecCtx-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;声道数 %d \n&amp;quot;, pCodecCtx-&amp;gt;channels);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;sample per second %d \n&amp;quot;, pCodecCtx-&amp;gt;sample_rate);&lt;/p>
&lt;p>&lt;code> &lt;/code>//新版不再需要&lt;/p>
&lt;p>// short decompressed_audio_buf[(AVCODEC_MAX_AUDIO_FRAME_SIZE * 3) / 2];&lt;/p>
&lt;p>// int decompressed_audio_buf_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t ret,len = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>int got_picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>int index = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>while(av_read_frame(pFormatCtx, packet)&amp;gt;=0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if(packet-&amp;gt;stream_index==audioStream)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//decompressed_audio_buf_size = (AVCODEC_MAX_AUDIO_FRAME_SIZE * 3) / 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>//原为avcodec_decode_audio2&lt;/p>
&lt;p>&lt;code> &lt;/code>//ret = avcodec_decode_audio4( pCodecCtx, decompressed_audio_buf,&lt;/p>
&lt;p>&lt;code> &lt;/code>//&amp;amp;decompressed_audio_buf_size, packet.data, packet.size );&lt;/p>
&lt;p>&lt;code> &lt;/code>//改为&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = avcodec_decode_audio4( pCodecCtx, pFrame,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;got_picture, packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>if ( ret &amp;lt; 0 ) // if error len = -1&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Error in decoding audio frame.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(0);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if ( got_picture &amp;gt; 0 )&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>#if 1&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;index %3d\n&amp;quot;, index);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;pts %5d\n&amp;quot;, packet-&amp;gt;pts);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;dts %5d\n&amp;quot;, packet-&amp;gt;dts);&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;packet_size %5d\n&amp;quot;, packet-&amp;gt;size);&lt;/p>
&lt;p>&lt;code> &lt;/code>//printf(&amp;quot;test %s\n&amp;quot;, rtmp-&amp;gt;m_inChunkSize);&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>//直接写入&lt;/p>
&lt;p>&lt;code> &lt;/code>//注意：数据是data【0】，长度是linesize【0】&lt;/p>
&lt;p>#if 1&lt;/p>
&lt;p>&lt;code> &lt;/code>fwrite(pFrame-&amp;gt;data[0], 1, pFrame-&amp;gt;linesize[0], pFile);&lt;/p>
&lt;p>&lt;code> &lt;/code>//fwrite(pFrame, 1, got_picture, pFile);&lt;/p>
&lt;p>&lt;code> &lt;/code>//len+=got_picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>index++;&lt;/p>
&lt;p>&lt;code> &lt;/code>//fprintf(pTSFile, &amp;quot;%4d,%5d,%8d\n&amp;quot;, index, decompressed_audio_buf_size, packet.pts);&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>#if 1&lt;/p>
&lt;p>&lt;code> &lt;/code>//---------------------------------------&lt;/p>
&lt;p>&lt;code> &lt;/code>//printf(&amp;quot;begin....\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置音频数据缓冲,PCM数据&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_chunk = (Uint8*) pFrame-&amp;gt;data[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置音频数据长度&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_len = pFrame-&amp;gt;linesize[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>//audio_len = 4096;&lt;/p>
&lt;p>&lt;code> &lt;/code>//播放mp3的时候改为audio_len = 4096&lt;/p>
&lt;p>&lt;code> &lt;/code>//则会比较流畅，但是声音会变调！MP3一帧长度4608&lt;/p>
&lt;p>&lt;code> &lt;/code>//使用一次回调函数（4096字节缓冲）播放不完，所以还要使用一次回调函数，导致播放缓慢。。。&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置初始播放位置&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_pos = audio_chunk;&lt;/p>
&lt;p>&lt;code> &lt;/code>//回放音频数据&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_PauseAudio(0);&lt;/p>
&lt;p>&lt;code> &lt;/code>//printf(&amp;quot;don't close, audio playing...\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>while(audio_len&amp;gt;0)//等待直到音频数据播放完毕!&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_Delay(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>//---------------------------------------&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Free the packet that was allocated by av_read_frame&lt;/p>
&lt;p>&lt;code> &lt;/code>//已改&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free_packet(packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//printf(&amp;quot;The length of PCM data is %d bytes.\n&amp;quot;, len);&lt;/p>
&lt;p>#ifdef _WAVE_&lt;/p>
&lt;p>&lt;code> &lt;/code>fseek(pFile, 0, SEEK_SET);&lt;/p>
&lt;p>&lt;code> &lt;/code>struct WAVE_HEADER wh;&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(wh.header.RiffID, &amp;quot;RIFF&amp;quot;, 4);&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.header.RiffSize = 36 + len;&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(wh.header.RiffFormat, &amp;quot;WAVE&amp;quot;, 4);&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(wh.format.FmtID, &amp;quot;fmt &amp;quot;, 4);&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.format.FmtSize = 16;&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.format.wavFormat.FormatTag = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.format.wavFormat.Channels = pCodecCtx-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.format.wavFormat.SamplesRate = pCodecCtx-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.format.wavFormat.BitsPerSample = 16;&lt;/p>
&lt;p>&lt;code> &lt;/code>calformat(wh.format.wavFormat); //Calculate AvgBytesRate and BlockAlign&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(wh.data.DataID, &amp;quot;data&amp;quot;, 4);&lt;/p>
&lt;p>&lt;code> &lt;/code>wh.data.DataSize = len;&lt;/p>
&lt;p>&lt;code> &lt;/code>fwrite(&amp;amp;wh, 1, sizeof(wh), pFile);&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_CloseAudio();//关闭音频设备&lt;/p>
&lt;p>&lt;code> &lt;/code>// Close file&lt;/p>
&lt;p>&lt;code> &lt;/code>fclose(pFile);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Close the codec&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(pCodecCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Close the video file&lt;/p>
&lt;p>&lt;code> &lt;/code>av_close_input_file(pFormatCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;h2 id="63-一个完整的播放器--ffplay">&lt;strong>6.3 一个完整的播放器--ffplay&lt;/strong>&lt;/h2>
&lt;h3 id="631-ffplay流程图">&lt;strong>6.3.1 ffplay流程图&lt;/strong>&lt;/h3>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.122.jpeg" alt="">&lt;/p>
&lt;h3 id="632-ffplay源码剖析">&lt;strong>6.3.2 ffplay源码剖析&lt;/strong>&lt;/h3>
&lt;p>ffplay.c 文件&lt;/p>
&lt;p>1 功能描述&lt;/p>
&lt;p>主控文件，初始化运行环境，把各个数据结构和功能函数有机组织起来，协调数据流和功能函数，响应用户 操作，启动并控制程序运行。&lt;/p>
&lt;p>2 文件注释&lt;/p>
&lt;p>1 #include &amp;quot;./libavformat/avformat.h&amp;quot;&lt;/p>
&lt;p>2&lt;/p>
&lt;p>3 #if defined(CONFIG_WIN32)&lt;/p>
&lt;p>4 #include &amp;lt;sys/types.h&amp;gt;&lt;/p>
&lt;p>5 #include &amp;lt;sys/timeb.h&amp;gt;&lt;/p>
&lt;p>6 #include &amp;lt;windows.h&amp;gt;&lt;/p>
&lt;p>7 #else&lt;/p>
&lt;p>8 #include &amp;lt;fcntl.h&amp;gt;&lt;/p>
&lt;p>9 #include &amp;lt;sys/time.h&amp;gt;&lt;/p>
&lt;p>10 #endif&lt;/p>
&lt;p>11&lt;/p>
&lt;p>12 #include &amp;lt;time.h&amp;gt;&lt;/p>
&lt;p>13&lt;/p>
&lt;p>14 #include &amp;lt;math.h&amp;gt;&lt;/p>
&lt;p>15 #include &amp;lt;SDL.h&amp;gt;&lt;/p>
&lt;p>16 #include &amp;lt;SDL_thread.h&amp;gt;&lt;/p>
&lt;p>17&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.123.png" alt="">SDL 里面定义了 main 函数，所以在这里取消 sdl 中的 main 定义，避免重复定义。&lt;/p>
&lt;p>18 #ifdef CONFIG_WIN32&lt;/p>
&lt;p>19 #undef main // We don't want SDL to override our main()&lt;/p>
&lt;p>20 #endif&lt;/p>
&lt;p>21&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.123.png" alt="">导入 SDL 库。&lt;/p>
&lt;p>22 #pragma comment(lib, &amp;quot;SDL.lib&amp;quot;)&lt;/p>
&lt;p>23&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.123.png" alt="">简单的几个常数定义。&lt;/p>
&lt;p>24 #define FF_QUIT_EVENT (SDL_USEREVENT + 2)&lt;/p>
&lt;p>25&lt;/p>
&lt;p>26 #define MAX_VIDEOQ_SIZE (5 * 256 * 1024)&lt;/p>
&lt;p>27 #define MAX_AUDIOQ_SIZE (5 * 16 * 1024)&lt;/p>
&lt;p>28&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">29 #define VIDEO_PICTURE_QUEUE_SIZE 1&lt;/p>
&lt;p>30&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.123.png" alt="">音视频数据包/数据帧队列数据结构定义，几个数据成员一看就明白，不详述。&lt;/p>
&lt;p>31 typedef struct PacketQueue&lt;/p>
&lt;p>32 {&lt;/p>
&lt;p>33 AVPacketList *first_pkt, *last_pkt;&lt;/p>
&lt;p>34 int size;&lt;/p>
&lt;p>35 int abort_request;&lt;/p>
&lt;p>36 SDL_mutex *mutex;&lt;/p>
&lt;p>37 SDL_cond *cond;&lt;/p>
&lt;p>38 } PacketQueue;&lt;/p>
&lt;p>39&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.123.png" alt="">视频图像数据结构定义，几个数据成员一看就明白，不详述。&lt;/p>
&lt;p>40 typedef struct VideoPicture&lt;/p>
&lt;p>41 {&lt;/p>
&lt;p>42 SDL_Overlay *bmp;&lt;/p>
&lt;p>43 int width, height; // source height &amp;amp; width&lt;/p>
&lt;p>44 } VideoPicture;&lt;/p>
&lt;p>45&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.123.png" alt="">总控数据结构，把其他核心数据结构整合在一起，起一个中转的作用，便于在各个子结构之间跳转。&lt;/p>
&lt;p>46 typedef struct VideoState&lt;/p>
&lt;p>47 {&lt;/p>
&lt;p>48 SDL_Thread *parse_tid; // Demux 解复用线程指针&lt;/p>
&lt;p>49 SDL_Thread *video_tid; // video 解码线程指针&lt;/p>
&lt;p>50&lt;/p>
&lt;p>51 int abort_request; // 异常退出请求标记&lt;/p>
&lt;p>52&lt;/p>
&lt;p>53 AVFormatContext *ic; // 输入文件格式上下文指针，和 iformat 配套使用&lt;/p>
&lt;p>54&lt;/p>
&lt;p>55 int audio_stream; // 音频流索引，表示 AVFormatContext 中 AVStream *streams[] 数组索引&lt;/p>
&lt;p>56 int video_stream; // 视频流索引，表示 AVFormatContext 中 AVStream *streams[] 数组索引&lt;/p>
&lt;p>57&lt;/p>
&lt;p>58 AVStream *audio_st; // 音频流指针&lt;/p>
&lt;p>59 AVStream *video_st; // 视频流指针&lt;/p>
&lt;p>60&lt;/p>
&lt;p>61 PacketQueue audioq; // 音频数据帧/数据包队列&lt;/p>
&lt;p>62 PacketQueue videoq; // 视频数据帧/数据包队列&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">63&lt;/p>
&lt;p>64 VideoPicture pictq[VIDEO_PICTURE_QUEUE_SIZE]; // 解码后视频图像队列数组&lt;/p>
&lt;p>65 double frame_last_delay; // 视频帧延迟，可简单认为是显示间隔时间&lt;/p>
&lt;p>66&lt;/p>
&lt;p>67 uint8_t audio_buf[(AVCODEC_MAX_AUDIO_FRAME_SIZE *3) / 2]; // 输出音频缓存&lt;/p>
&lt;p>68 unsigned int audio_buf_size; // 解码后音频数据大小&lt;/p>
&lt;p>69 int audio_buf_index; // 已输出音频数据大小&lt;/p>
&lt;p>70 AVPacket audio_pkt; // 如果一个音频包中有多个帧，用于保存中间状态&lt;/p>
&lt;p>71 uint8_t *audio_pkt_data; // 音频包数据首地址，配合 audio_pkt 保存中间状态&lt;/p>
&lt;p>72 int audio_pkt_size; // 音频包数据大小，配合 audio_pkt 保存中间状态&lt;/p>
&lt;p>73&lt;/p>
&lt;p>74 SDL_mutex *video_decoder_mutex; // 视频数据包队列同步操作而定义的互斥量指针&lt;/p>
&lt;p>75 SDL_mutex *audio_decoder_mutex; // 音频数据包队列同步操作而定义的互斥量指针&lt;/p>
&lt;p>76&lt;/p>
&lt;p>77 char filename[240]; // 媒体文件名&lt;/p>
&lt;p>78&lt;/p>
&lt;p>79 } VideoState;&lt;/p>
&lt;p>80&lt;/p>
&lt;p>81 static AVInputFormat *file_iformat;&lt;/p>
&lt;p>82 static const char *input_filename;&lt;/p>
&lt;p>83 static VideoState *cur_stream;&lt;/p>
&lt;p>84&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>SDL 库需要的显示表面。&lt;/p>
&lt;p>85 static SDL_Surface *screen;&lt;/p>
&lt;p>86&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>取得当前时间，以 1/1000000 秒为单位，为便于在各个平台上移植，由宏开关控制编译的代码。&lt;/p>
&lt;p>87 int64_t av_gettime(void)&lt;/p>
&lt;p>88 {&lt;/p>
&lt;p>89 #if defined(CONFIG_WINCE)&lt;/p>
&lt;p>90 return timeGetTime() *int64_t_C(1000);&lt;/p>
&lt;p>91 #elif defined(CONFIG_WIN32)&lt;/p>
&lt;p>92 struct _timeb tb;&lt;/p>
&lt;p>93 _ftime(&amp;amp;tb);&lt;/p>
&lt;p>94 return ((int64_t)tb.time *int64_t_C(1000) + (int64_t)tb.millitm) *int64_t_C(1000);&lt;/p>
&lt;p>95 #else&lt;/p>
&lt;p>96 struct timeval tv;&lt;/p>
&lt;p>97 gettimeofday(&amp;amp;tv, NULL);&lt;/p>
&lt;p>98 return (int64_t)tv.tv_sec *1000000+tv.tv_usec;&lt;/p>
&lt;p>99 #endif&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>100 }&lt;/p>
&lt;p>101&lt;/p>
&lt;p>数据帧/数据包生命周期：&lt;/p>
&lt;p>1：在 av_get_packet()函数中调用 av_malloc()函数分配内存，并调用 url_fread()填充媒体数据。&lt;/p>
&lt;p>2：如果是视频包调用 packet_queue_put()进 is-&amp;gt;videoq 队列，如果是音频包进 is-&amp;gt;audioq 队列， 如果是其他包，就调用 av_free_packet()函数直接释放内存。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.126.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.125.png" alt="">3：进入队列的包，用 packet_queue_get()取出队列，用 av_free_packet()释放内存。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">初始化队列，初始化为 0 后再创建线程同步使用的互斥和条件。&lt;/p>
&lt;p>102 static void packet_queue_init(PacketQueue *q) // packet queue handling&lt;/p>
&lt;p>103 {&lt;/p>
&lt;p>104 memset(q, 0, sizeof(PacketQueue));&lt;/p>
&lt;p>105 q-&amp;gt;mutex = SDL_CreateMutex();&lt;/p>
&lt;p>106 q-&amp;gt;cond = SDL_CreateCond();&lt;/p>
&lt;p>107 }&lt;/p>
&lt;p>108&lt;/p>
&lt;p>刷新队列，释放掉队列中所有动态分配的内存，包括音视频裸数据占用的内存和 AVPacketList 结构占&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.127.png" alt="">用的内存，参考上面示意图。&lt;/p>
&lt;p>109 static void packet_queue_flush(PacketQueue *q)&lt;/p>
&lt;p>110 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>111 AVPacketList *pkt, *pkt1;&lt;/p>
&lt;p>112&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>由于是多线程程序，需要同步，所以在遍历队列释放所有动态分配内存前，加锁。&lt;/p>
&lt;p>113 SDL_LockMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>114 for (pkt = q-&amp;gt;first_pkt; pkt != NULL; pkt = pkt1)&lt;/p>
&lt;p>115 {&lt;/p>
&lt;p>116 pkt1 = pkt-&amp;gt;next;&lt;/p>
&lt;p>117 av_free_packet(&amp;amp;pkt-&amp;gt;pkt); // 释放音视频数据内存&lt;/p>
&lt;p>118 av_freep(&amp;amp;pkt); // 释放 AVPacketList 结构&lt;/p>
&lt;p>119 }&lt;/p>
&lt;p>120 q-&amp;gt;last_pkt = NULL;&lt;/p>
&lt;p>121 q-&amp;gt;first_pkt = NULL;&lt;/p>
&lt;p>122 q-&amp;gt;size = 0;&lt;/p>
&lt;p>123 SDL_UnlockMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>124 }&lt;/p>
&lt;p>125&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>释放队列占用所有资源，首先释放掉所有动态分配的内存，接着释放申请的互斥量和条件量。&lt;/p>
&lt;p>126 static void packet_queue_end(PacketQueue *q)&lt;/p>
&lt;p>127 {&lt;/p>
&lt;p>128 packet_queue_flush(q);&lt;/p>
&lt;p>129 SDL_DestroyMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>130 SDL_DestroyCond(q-&amp;gt;cond);&lt;/p>
&lt;p>131 }&lt;/p>
&lt;p>132&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>往音视频队列中挂接音视频数据帧/数据包。&lt;/p>
&lt;p>133 static int packet_queue_put(PacketQueue *q, AVPacket *pkt)&lt;/p>
&lt;p>134 {&lt;/p>
&lt;p>135 AVPacketList *pkt1;&lt;/p>
&lt;p>136&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>先分配一个 AVPacketList 结构内存，接着，140 行从 AVPacket 浅复制数据，141 行链表尾置空。&lt;/p>
&lt;p>137 pkt1 = av_malloc(sizeof(AVPacketList));&lt;/p>
&lt;p>138 if (!pkt1)&lt;/p>
&lt;p>139 return - 1;&lt;/p>
&lt;p>140 pkt1-&amp;gt;pkt = *pkt;&lt;/p>
&lt;p>141 pkt1-&amp;gt;next = NULL;&lt;/p>
&lt;p>142&lt;/p>
&lt;p>143 SDL_LockMutex(q-&amp;gt;mutex);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>144&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>往队列中挂接 AVPacketList，并且在 150 行统计缓存的媒体数据大小。&lt;/p>
&lt;p>145 if (!q-&amp;gt;last_pkt)&lt;/p>
&lt;p>146 q-&amp;gt;first_pkt = pkt1;&lt;/p>
&lt;p>147 else&lt;/p>
&lt;p>148 q-&amp;gt;last_pkt-&amp;gt;next = pkt1;&lt;/p>
&lt;p>149 q-&amp;gt;last_pkt = pkt1;&lt;/p>
&lt;p>150 q-&amp;gt;size += pkt1-&amp;gt;pkt.size;&lt;/p>
&lt;p>151&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>设置条件量为有信号状态，如果解码线程因等待而睡眠就及时唤醒。&lt;/p>
&lt;p>152 SDL_CondSignal(q-&amp;gt;cond);&lt;/p>
&lt;p>153&lt;/p>
&lt;p>154 SDL_UnlockMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>155 return 0;&lt;/p>
&lt;p>156 }&lt;/p>
&lt;p>157&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>设置 异常请求退出 状态。&lt;/p>
&lt;p>158 static void packet_queue_abort(PacketQueue *q)&lt;/p>
&lt;p>159 {&lt;/p>
&lt;p>160 SDL_LockMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>161&lt;/p>
&lt;p>162 q-&amp;gt;abort_request = 1; // 请求异常退出&lt;/p>
&lt;p>163&lt;/p>
&lt;p>164 SDL_CondSignal(q-&amp;gt;cond);&lt;/p>
&lt;p>165&lt;/p>
&lt;p>166 SDL_UnlockMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>167 }&lt;/p>
&lt;p>168&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>从队列中取出一帧/包数据。&lt;/p>
&lt;p>169 /* return &amp;lt; 0 if aborted, 0 if no packet and &amp;gt; 0 if packet. */&lt;/p>
&lt;p>170 static int packet_queue_get(PacketQueue *q, AVPacket *pkt, int block)&lt;/p>
&lt;p>171 {&lt;/p>
&lt;p>172 AVPacketList *pkt1;&lt;/p>
&lt;p>173 int ret;&lt;/p>
&lt;p>174&lt;/p>
&lt;p>175 SDL_LockMutex(q-&amp;gt;mutex);&lt;/p>
&lt;p>176&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>177 for (;;)&lt;/p>
&lt;p>178 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>如果异常请求退出标记置位，就带错误码返回。&lt;/p>
&lt;p>179 if (q-&amp;gt;abort_request)&lt;/p>
&lt;p>180 {&lt;/p>
&lt;p>181 ret = - 1;&lt;/p>
&lt;p>182 break;&lt;/p>
&lt;p>183 }&lt;/p>
&lt;p>184&lt;/p>
&lt;p>185 pkt1 = q-&amp;gt;first_pkt;&lt;/p>
&lt;p>186 if (pkt1)&lt;/p>
&lt;p>187 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>如果队列中有数据，就取第一个数据包，在 191 行修正缓存的媒体大小，在 192 行浅复制帧/包数据&lt;/p>
&lt;p>188 q-&amp;gt;first_pkt = pkt1-&amp;gt;next;&lt;/p>
&lt;p>189 if (!q-&amp;gt;first_pkt)&lt;/p>
&lt;p>190 q-&amp;gt;last_pkt = NULL;&lt;/p>
&lt;p>191 q-&amp;gt;size -= pkt1-&amp;gt;pkt.size;&lt;/p>
&lt;p>192 *pkt = pkt1-&amp;gt;pkt;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>释放掉 AVPacketList 结构，此结构在 packet_queue_put()函数中动态分配(137 行代码处)。&lt;/p>
&lt;p>193 av_free(pkt1);&lt;/p>
&lt;p>194 ret = 1;&lt;/p>
&lt;p>195 break;&lt;/p>
&lt;p>196 }&lt;/p>
&lt;p>197 else if (!block)&lt;/p>
&lt;p>198 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>如果是非阻塞模式，没数据就直接返回 0。&lt;/p>
&lt;p>199 ret = 0;&lt;/p>
&lt;p>200 break;&lt;/p>
&lt;p>201 }&lt;/p>
&lt;p>202 else&lt;/p>
&lt;p>203 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>如果是阻塞模式，没数据就进入睡眠状态等待，packet_queue_put()中唤醒(152 行代码处)。&lt;/p>
&lt;p>204 SDL_CondWait(q-&amp;gt;cond, q-&amp;gt;mutex);&lt;/p>
&lt;p>205 }&lt;/p>
&lt;p>206 }&lt;/p>
&lt;p>207 SDL_UnlockMutex(q-&amp;gt;mutex);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>208 return ret;&lt;/p>
&lt;p>209 }&lt;/p>
&lt;p>210&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.124.png" alt="">&lt;/p>
&lt;p>分配 SDL 库需要的 Overlay 显示表面，并设置长宽属性。&lt;/p>
&lt;p>211 static void alloc_picture(void *opaque)&lt;/p>
&lt;p>212 {&lt;/p>
&lt;p>213 VideoState *is = opaque;&lt;/p>
&lt;p>214 VideoPicture *vp;&lt;/p>
&lt;p>215&lt;/p>
&lt;p>216 vp = &amp;amp;is-&amp;gt;pictq[0];&lt;/p>
&lt;p>217&lt;/p>
&lt;p>218 if (vp-&amp;gt;bmp)&lt;/p>
&lt;p>219 SDL_FreeYUVOverlay(vp-&amp;gt;bmp);&lt;/p>
&lt;p>220&lt;/p>
&lt;p>221 vp-&amp;gt;bmp = SDL_CreateYUVOverlay(is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;width,&lt;/p>
&lt;p>222 is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;height,&lt;/p>
&lt;p>223 SDL_YV12_OVERLAY,&lt;/p>
&lt;p>224 screen);&lt;/p>
&lt;p>225&lt;/p>
&lt;p>226 vp-&amp;gt;width = is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;width;&lt;/p>
&lt;p>227 vp-&amp;gt;height = is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;height;&lt;/p>
&lt;p>228 }&lt;/p>
&lt;p>229&lt;/p>
&lt;p>解码后的视频图像在等待显示间隔时间后，做颜色空间转换，调用 SDL 库显示。简单认为 cpu 耗在&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.128.png" alt="">前面读文件，解复用，解码的时间为 0，做简单的同步处理逻辑。&lt;/p>
&lt;p>230 static int queue_picture(VideoState *is, AVFrame *src_frame, double pts)&lt;/p>
&lt;p>231 {&lt;/p>
&lt;p>232 VideoPicture *vp;&lt;/p>
&lt;p>233 int dst_pix_fmt;&lt;/p>
&lt;p>234 AVPicture pict;&lt;/p>
&lt;p>235&lt;/p>
&lt;p>236 if (is-&amp;gt;videoq.abort_request)&lt;/p>
&lt;p>237 return - 1;&lt;/p>
&lt;p>238&lt;/p>
&lt;p>239 vp = &amp;amp;is-&amp;gt;pictq[0];&lt;/p>
&lt;p>240&lt;/p>
&lt;p>241 /* if the frame is not skipped, then display it */&lt;/p>
&lt;p>242 if (vp-&amp;gt;bmp)&lt;/p>
&lt;p>243 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>244 SDL_Rect rect;&lt;/p>
&lt;p>245&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>等待显示间隔时间，调用 Sleep() 函数简单实现。&lt;/p>
&lt;p>246 if (pts)&lt;/p>
&lt;p>247 Sleep((int)(is-&amp;gt;frame_last_delay *1000));&lt;/p>
&lt;p>248&lt;/p>
&lt;p>249 /* get a pointer on the bitmap */&lt;/p>
&lt;p>250 SDL_LockYUVOverlay(vp-&amp;gt;bmp);&lt;/p>
&lt;p>251&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>设置显示图像的属性。&lt;/p>
&lt;p>252 dst_pix_fmt = PIX_FMT_YUV420P;&lt;/p>
&lt;p>253 pict.data[0] = vp-&amp;gt;bmp-&amp;gt;pixels[0];&lt;/p>
&lt;p>254 pict.data[1] = vp-&amp;gt;bmp-&amp;gt;pixels[2];&lt;/p>
&lt;p>255 pict.data[2] = vp-&amp;gt;bmp-&amp;gt;pixels[1];&lt;/p>
&lt;p>256&lt;/p>
&lt;p>257 pict.linesize[0] = vp-&amp;gt;bmp-&amp;gt;pitches[0];&lt;/p>
&lt;p>258 pict.linesize[1] = vp-&amp;gt;bmp-&amp;gt;pitches[2];&lt;/p>
&lt;p>259 pict.linesize[2] = vp-&amp;gt;bmp-&amp;gt;pitches[1];&lt;/p>
&lt;p>260&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>把解码后的颜色空间转换为显示颜色空间。&lt;/p>
&lt;p>261 img_convert(&amp;amp;pict,&lt;/p>
&lt;p>262 dst_pix_fmt,&lt;/p>
&lt;p>263 (AVPicture*)src_frame,&lt;/p>
&lt;p>264 is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;pix_fmt,&lt;/p>
&lt;p>265 is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;width,&lt;/p>
&lt;p>266 is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;height);&lt;/p>
&lt;p>267&lt;/p>
&lt;p>268 SDL_UnlockYUVOverlay(vp-&amp;gt;bmp); /* update the bitmap content */&lt;/p>
&lt;p>269&lt;/p>
&lt;p>270 rect.x = 0;&lt;/p>
&lt;p>271 rect.y = 0;&lt;/p>
&lt;p>272 rect.w = is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;width;&lt;/p>
&lt;p>273 rect.h = is-&amp;gt;video_st-&amp;gt;actx-&amp;gt;height;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>实质性显示，刷屏操作。&lt;/p>
&lt;p>274 SDL_DisplayYUVOverlay(vp-&amp;gt;bmp, &amp;amp;rect);&lt;/p>
&lt;p>275 }&lt;/p>
&lt;p>276 return 0;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>277 }&lt;/p>
&lt;p>278&lt;/p>
&lt;p>视频解码线程，主要功能是分配解码帧缓存和 SDL 显示缓存后进入解码循环(从队列中取数据帧，解&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.131.png" alt="">码，计算时钟，显示)，释放视频数据帧/数据包缓存。&lt;/p>
&lt;p>279 static int video_thread(void *arg)&lt;/p>
&lt;p>280 {&lt;/p>
&lt;p>281 VideoState *is = arg;&lt;/p>
&lt;p>282 AVPacket pkt1, *pkt = &amp;amp;pkt1;&lt;/p>
&lt;p>283 int len1, got_picture;&lt;/p>
&lt;p>284 double pts = 0;&lt;/p>
&lt;p>285&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>分配解码帧缓存&lt;/p>
&lt;p>286 AVFrame *frame = av_malloc(sizeof(AVFrame));&lt;/p>
&lt;p>287 memset(frame, 0, sizeof(AVFrame));&lt;/p>
&lt;p>288&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>分配 SDL 显示缓存&lt;/p>
&lt;p>289 alloc_picture(is);&lt;/p>
&lt;p>290&lt;/p>
&lt;p>291 for (;;)&lt;/p>
&lt;p>292 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>从队列中取数据帧/数据包&lt;/p>
&lt;p>293 if (packet_queue_get(&amp;amp;is-&amp;gt;videoq, pkt, 1) &amp;lt; 0)&lt;/p>
&lt;p>294 break;&lt;/p>
&lt;p>295&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>实质性解码&lt;/p>
&lt;p>296 SDL_LockMutex(is-&amp;gt;video_decoder_mutex);&lt;/p>
&lt;p>297 len1 = avcodec_decode_video(is-&amp;gt;video_st-&amp;gt;actx, frame, &amp;amp;got_picture, pkt-&amp;gt;data, pkt-&amp;gt;size);&lt;/p>
&lt;p>298 SDL_UnlockMutex(is-&amp;gt;video_decoder_mutex);&lt;/p>
&lt;p>299&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>计算同步时钟&lt;/p>
&lt;p>300 if (pkt-&amp;gt;dts != AV_NOPTS_VALUE)&lt;/p>
&lt;p>301 pts = av_q2d(is-&amp;gt;video_st-&amp;gt;time_base) *pkt-&amp;gt;dts;&lt;/p>
&lt;p>302&lt;/p>
&lt;p>303 if (got_picture)&lt;/p>
&lt;p>304 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.132.png" alt="">&lt;/p>
&lt;p>判断得到图像，调用显示函数同步显示视频图像。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>305&lt;/th>
&lt;th>&lt;/th>
&lt;th>if (queue_picture(is, frame, pts) &amp;lt; 0)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>306&lt;/td>
&lt;td>&lt;/td>
&lt;td>goto the_end;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>307&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">释放视频数据帧/数据包内存，此数据包内存是在 av_get_packet()函数中调用 av_malloc()分配的。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>308 av_free_packet(pkt);&lt;/p>
&lt;p>309 }&lt;/p>
&lt;p>310&lt;/p>
&lt;p>311 the_end:&lt;/p>
&lt;p>312 av_free(frame);&lt;/p>
&lt;p>313 return 0;&lt;/p>
&lt;p>314 }&lt;/p>
&lt;p>315&lt;/p>
&lt;p>解码一个音频帧，返回解压的数据大小。特别注意一个音频包可能包含多个音频帧，但一次只解码一&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.133.png" alt="">个音频帧，所以一包可能要多次才能解码完。程序首先用 w hile 语句判断包数据是否全部解完，如果没 有就解码当前包中的帧，修改状态参数；否则，释放数据包，再从队列中取，记录初始值，再进循环。&lt;/p>
&lt;p>316 /* decode one audio frame and returns its uncompressed size */&lt;/p>
&lt;p>317 static int audio_decode_frame(VideoState *is, uint8_t *audio_buf, double *pts_ptr)&lt;/p>
&lt;p>318 {&lt;/p>
&lt;p>319 AVPacket *pkt = &amp;amp;is-&amp;gt;audio_pkt;&lt;/p>
&lt;p>320 int len1, data_size;&lt;/p>
&lt;p>321&lt;/p>
&lt;p>322 for (;;)&lt;/p>
&lt;p>323 {&lt;/p>
&lt;p>324&lt;/p>
&lt;p>特别注意，一个音频包可能包含多个音频帧，可能需多次解码，VideoState 用一个 AVPacket 型变量&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.131.png" alt="">保存多次解码的中间状态。如果多次解码但不是最后次解码，audio_decode_frame 直接进 while 循环。&lt;/p>
&lt;p>325 while (is-&amp;gt;audio_pkt_size &amp;gt; 0)&lt;/p>
&lt;p>326 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>调用解码函数解码，avcodec_decode_audio()函数返回解码用掉的字节数。&lt;/p>
&lt;p>327 SDL_LockMutex(is-&amp;gt;audio_decoder_mutex);&lt;/p>
&lt;p>328 len1 = avcodec_decode_audio(is-&amp;gt;audio_st-&amp;gt;actx, (int16_t*)audio_buf,&lt;/p>
&lt;p>329 &amp;amp;data_size, is-&amp;gt;audio_pkt_data, is-&amp;gt;audio_pkt_size);&lt;/p>
&lt;p>330&lt;/p>
&lt;p>331 SDL_UnlockMutex(is-&amp;gt;audio_decoder_mutex);&lt;/p>
&lt;p>332 if (len1 &amp;lt; 0)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>333 {&lt;/p>
&lt;p>334&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>如果发生错误，跳过当前帧，跳出底层循环。&lt;/p>
&lt;p>335 is-&amp;gt;audio_pkt_size = 0;&lt;/p>
&lt;p>336 break;&lt;/p>
&lt;p>337 }&lt;/p>
&lt;p>338&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>修正解码后的音频帧缓存首地址和大小。&lt;/p>
&lt;p>339 is-&amp;gt;audio_pkt_data += len1;&lt;/p>
&lt;p>340 is-&amp;gt;audio_pkt_size -= len1;&lt;/p>
&lt;p>341 if (data_size &amp;lt;= 0)&lt;/p>
&lt;p>如果没有得到解码后的数据，继续解码。可能有些帧第一次解码时只解一个帧头就返回，此时需要继&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.131.png" alt="">续解码数据帧。&lt;/p>
&lt;p>342 continue;&lt;/p>
&lt;p>343&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>返回解码后的数据大小。&lt;/p>
&lt;p>344 return data_size;&lt;/p>
&lt;p>345 }&lt;/p>
&lt;p>346&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>程序到这里，可能是初始时 audio_pkt 没有赋值；或者一包已经解码完，此时需要释放包数据内存。&lt;/p>
&lt;p>347 /* free the current packet */&lt;/p>
&lt;p>348 if (pkt-&amp;gt;data)&lt;/p>
&lt;p>349 av_free_packet(pkt);&lt;/p>
&lt;p>350&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>读取下一个数据包。&lt;/p>
&lt;p>351 /* read next packet */&lt;/p>
&lt;p>352 if (packet_queue_get(&amp;amp;is-&amp;gt;audioq, pkt, 1) &amp;lt; 0)&lt;/p>
&lt;p>353 return - 1;&lt;/p>
&lt;p>354&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.134.png" alt="">初始化数据包首地址和大小，用于一包中包含多个音频帧需多次解码的情况。&lt;/p>
&lt;p>355 is-&amp;gt;audio_pkt_data = pkt-&amp;gt;data;&lt;/p>
&lt;p>356 is-&amp;gt;audio_pkt_size = pkt-&amp;gt;size;&lt;/p>
&lt;p>357 }&lt;/p>
&lt;p>358 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>359&lt;/p>
&lt;p>音频输出回调函数，每次音频输出缓存为空时，系统就调用此函数填充音频输出缓存。目前采用比较&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.135.png" alt="">简单的同步方式，音频按照自己的节拍往前走即可，不需要 synchronize_audio()函数同步处理。&lt;/p>
&lt;p>360 /* prepare a new audio buffer */&lt;/p>
&lt;p>361 void sdl_audio_callback(void *opaque, Uint8 *stream, int len)&lt;/p>
&lt;p>362 {&lt;/p>
&lt;p>363 VideoState *is = opaque;&lt;/p>
&lt;p>364 int audio_size, len1;&lt;/p>
&lt;p>365 double pts = 0;&lt;/p>
&lt;p>366&lt;/p>
&lt;p>367 while (len &amp;gt; 0)&lt;/p>
&lt;p>368 {&lt;/p>
&lt;p>369 if (is-&amp;gt;audio_buf_index &amp;gt;= is-&amp;gt;audio_buf_size)&lt;/p>
&lt;p>370 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>如果解码后的数据已全部输出，就进行音频解码，并在 381 行保存解码数据大小，在383 行读索引置0。&lt;/p>
&lt;p>371 audio_size = audio_decode_frame(is, is-&amp;gt;audio_buf, &amp;amp;pts);&lt;/p>
&lt;p>372 if (audio_size &amp;lt; 0)&lt;/p>
&lt;p>373 {&lt;/p>
&lt;p>374 /* if error, just output silence */&lt;/p>
&lt;p>375 is-&amp;gt;audio_buf_size = 1024;&lt;/p>
&lt;p>376 memset(is-&amp;gt;audio_buf, 0, is-&amp;gt;audio_buf_size);&lt;/p>
&lt;p>377 }&lt;/p>
&lt;p>378 else&lt;/p>
&lt;p>379 {&lt;/p>
&lt;p>380 // audio_size = synchronize_audio(is, (int16_t*)is-&amp;gt;audio_buf, audio_size, pts);&lt;/p>
&lt;p>381 is-&amp;gt;audio_buf_size = audio_size;&lt;/p>
&lt;p>382 }&lt;/p>
&lt;p>383 is-&amp;gt;audio_buf_index = 0;&lt;/p>
&lt;p>384 }&lt;/p>
&lt;p>385 到 391 行，拷贝适当的数据到输出缓存，并修改解码缓存的参数，进下一轮循环。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.136.png" alt="">特别注意：由进下一轮循环可知，程序应填满 SDL 库给出的输出缓存。&lt;/p>
&lt;p>385 len1 = is-&amp;gt;audio_buf_size - is-&amp;gt;audio_buf_index;&lt;/p>
&lt;p>386 if (len1 &amp;gt; len)&lt;/p>
&lt;p>387 len1 = len;&lt;/p>
&lt;p>388 memcpy(stream, (uint8_t*)is-&amp;gt;audio_buf + is-&amp;gt;audio_buf_index, len1);&lt;/p>
&lt;p>389 len -= len1;&lt;/p>
&lt;p>390 stream += len1;&lt;/p>
&lt;p>391 is-&amp;gt;audio_buf_index += len1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>392 }&lt;/p>
&lt;p>393 }&lt;/p>
&lt;p>394&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.134.png" alt="">打开流模块，核心功能是打开相应 codec，启动解码线程(我们把音频回调函数看做一个广义的线程)。&lt;/p>
&lt;p>395 /* open a given stream. Return 0 if OK */&lt;/p>
&lt;p>396 static int stream_component_open(VideoState *is, int stream_index) // 核心功能 open codec&lt;/p>
&lt;p>397 {&lt;/p>
&lt;p>398 AVFormatContext *ic = is-&amp;gt;ic;&lt;/p>
&lt;p>399 AVCodecContext *enc;&lt;/p>
&lt;p>400 AVCodec *codec;&lt;/p>
&lt;p>401 SDL_AudioSpec wanted_spec, spec;&lt;/p>
&lt;p>402&lt;/p>
&lt;p>403 if (stream_index &amp;lt; 0 || stream_index &amp;gt;= ic-&amp;gt;nb_streams)&lt;/p>
&lt;p>404 return - 1;&lt;/p>
&lt;p>405&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>找到从文件格式分析中得到的解码器上下文指针，便于引用其中的参数。&lt;/p>
&lt;p>406 enc = ic-&amp;gt;streams[stream_index]-&amp;gt;actx;&lt;/p>
&lt;p>407&lt;/p>
&lt;p>408 /* prepare audio output */&lt;/p>
&lt;p>409 if (enc-&amp;gt;codec_type == CODEC_TYPE_AUDIO)&lt;/p>
&lt;p>410 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>初始化音频输出参数，并调用 SDL_OpenAudio()设置到 SDL 库。&lt;/p>
&lt;p>411 wanted_spec.freq = enc-&amp;gt;sample_rate;&lt;/p>
&lt;p>412 wanted_spec.format = AUDIO_S16SYS;&lt;/p>
&lt;p>413 /* hack for AC3. XXX: suppress that */&lt;/p>
&lt;p>414 if (enc-&amp;gt;channels &amp;gt; 2)&lt;/p>
&lt;p>415 enc-&amp;gt;channels = 2;&lt;/p>
&lt;p>416 wanted_spec.channels = enc-&amp;gt;channels;&lt;/p>
&lt;p>417 wanted_spec.silence = 0;&lt;/p>
&lt;p>418 wanted_spec.samples = 1024; //SDL_AUDIO_BUFFER_SIZE;&lt;/p>
&lt;p>419 wanted_spec.callback = sdl_audio_callback; // 此处设定回调函数&lt;/p>
&lt;p>420 wanted_spec.userdata = is;&lt;/p>
&lt;p>421 if (SDL_OpenAudio(&amp;amp;wanted_spec, &amp;amp;spec) &amp;lt; 0)&lt;/p>
&lt;p>422 {&lt;/p>
&lt;p>wanted_spec 是应用程序设定给 SDL 库的音频参数，spec 是 SDL 库返回给应用程序它能支持的音频&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.137.png" alt="">参数，通常是一致的。如果超过 SDL 支持的参数范围，会返回最相近的参数。&lt;/p>
&lt;p>423 fprintf(stderr, &amp;quot;SDL_OpenAudio: %s\n&amp;quot;, SDL_GetError());&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">424 return - 1;&lt;/p>
&lt;p>425 }&lt;/p>
&lt;p>426 }&lt;/p>
&lt;p>427&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>依照编解码上下文的 codec_id，遍历编解码器链表，找到相应的功能函数。&lt;/p>
&lt;p>428 codec = avcodec_find_decoder(enc-&amp;gt;codec_id);&lt;/p>
&lt;p>429&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.134.png" alt="">核心功能之一,打开编解码器，初始化具体编解码器的运行环境。&lt;/p>
&lt;p>430 if (!codec || avcodec_open(enc, codec) &amp;lt; 0)&lt;/p>
&lt;p>431 return - 1;&lt;/p>
&lt;p>432&lt;/p>
&lt;p>433 switch (enc-&amp;gt;codec_type)&lt;/p>
&lt;p>434 {&lt;/p>
&lt;p>435 case CODEC_TYPE_AUDIO:&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>在 VideoState 中记录音频流参数。&lt;/p>
&lt;p>436 is-&amp;gt;audio_stream = stream_index;&lt;/p>
&lt;p>437 is-&amp;gt;audio_st = ic-&amp;gt;streams[stream_index];&lt;/p>
&lt;p>438 is-&amp;gt;audio_buf_size = 0;&lt;/p>
&lt;p>439 is-&amp;gt;audio_buf_index = 0;&lt;/p>
&lt;p>440&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>初始化音频队列，并在 443 行启动广义的音频解码线程。&lt;/p>
&lt;p>441 memset(&amp;amp;is-&amp;gt;audio_pkt, 0, sizeof(is-&amp;gt;audio_pkt));&lt;/p>
&lt;p>442 packet_queue_init(&amp;amp;is-&amp;gt;audioq);&lt;/p>
&lt;p>443 SDL_PauseAudio(0);&lt;/p>
&lt;p>444 break;&lt;/p>
&lt;p>445 case CODEC_TYPE_VIDEO:&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>在 VideoState 中记录视频流参数。&lt;/p>
&lt;p>446 is-&amp;gt;video_stream = stream_index;&lt;/p>
&lt;p>447 is-&amp;gt;video_st = ic-&amp;gt;streams[stream_index];&lt;/p>
&lt;p>448&lt;/p>
&lt;p>449 is-&amp;gt;frame_last_delay = is-&amp;gt;video_st-&amp;gt;frame_last_delay;&lt;/p>
&lt;p>450&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>初始化视频队列，并在 452 行直接启动视频解码线程。&lt;/p>
&lt;p>451 packet_queue_init(&amp;amp;is-&amp;gt;videoq);&lt;/p>
&lt;p>452 is-&amp;gt;video_tid = SDL_CreateThread(video_thread, is);&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>453 break;&lt;/p>
&lt;p>454 default:&lt;/p>
&lt;p>455 break;&lt;/p>
&lt;p>456 }&lt;/p>
&lt;p>457 return 0;&lt;/p>
&lt;p>458 }&lt;/p>
&lt;p>459&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.131.png" alt="">&lt;/p>
&lt;p>关闭流模块，停止解码线程，释放队列资源。&lt;/p>
&lt;p>通过 packet_queue_abort()函数置 abort_request 标志位，解码线程判别此标志位并安全退出线程。&lt;/p>
&lt;p>460 static void stream_component_close(VideoState *is, int stream_index)&lt;/p>
&lt;p>461 {&lt;/p>
&lt;p>462 AVFormatContext *ic = is-&amp;gt;ic;&lt;/p>
&lt;p>463 AVCodecContext *enc;&lt;/p>
&lt;p>464&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.138.png" alt="">&lt;/p>
&lt;p>简单的流索引参数校验。&lt;/p>
&lt;p>465 if (stream_index &amp;lt; 0 || stream_index &amp;gt;= ic-&amp;gt;nb_streams)&lt;/p>
&lt;p>466 return ;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.129.png" alt="">&lt;/p>
&lt;p>找到从文件格式分析中得到的解码器上下文指针，便于引用其中的参数。&lt;/p>
&lt;p>467 enc = ic-&amp;gt;streams[stream_index]-&amp;gt;actx;&lt;/p>
&lt;p>468&lt;/p>
&lt;p>469 switch (enc-&amp;gt;codec_type)&lt;/p>
&lt;p>470 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>停止解码线程，释放队列资源。&lt;/p>
&lt;p>471 case CODEC_TYPE_AUDIO:&lt;/p>
&lt;p>472 packet_queue_abort(&amp;amp;is-&amp;gt;audioq);&lt;/p>
&lt;p>473 SDL_CloseAudio();&lt;/p>
&lt;p>474 packet_queue_end(&amp;amp;is-&amp;gt;audioq);&lt;/p>
&lt;p>475 break;&lt;/p>
&lt;p>476 case CODEC_TYPE_VIDEO:&lt;/p>
&lt;p>477 packet_queue_abort(&amp;amp;is-&amp;gt;videoq);&lt;/p>
&lt;p>478 SDL_WaitThread(is-&amp;gt;video_tid, NULL);&lt;/p>
&lt;p>479 packet_queue_end(&amp;amp;is-&amp;gt;videoq);&lt;/p>
&lt;p>480 break;&lt;/p>
&lt;p>481 default:&lt;/p>
&lt;p>482 break;&lt;/p>
&lt;p>483 }&lt;/p>
&lt;p>484&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.139.png" alt="">&lt;/p>
&lt;p>释放编解码器上下文资源&lt;/p>
&lt;p>485 avcodec_close(enc);&lt;/p>
&lt;p>486 }&lt;/p>
&lt;p>487&lt;/p>
&lt;p>文件解析线程，函数名有点不名副其实。完成三大功能，直接识别文件格式和间接识别媒体格式，&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.140.png" alt="">打开具体的编解码器并启动解码线程，分离音视频媒体包并挂接到相应队列。&lt;/p>
&lt;p>488 static int decode_thread(void *arg)&lt;/p>
&lt;p>489 {&lt;/p>
&lt;p>490 VideoState *is = arg;&lt;/p>
&lt;p>491 AVFormatContext *ic;&lt;/p>
&lt;p>492 int err, i, ret, video_index, audio_index;&lt;/p>
&lt;p>493 AVPacket pkt1, *pkt = &amp;amp;pkt1;&lt;/p>
&lt;p>494 AVFormatParameters params, *ap = &amp;amp;params;&lt;/p>
&lt;p>495&lt;/p>
&lt;p>496 int flags = SDL_HWSURFACE | SDL_ASYNCBLIT | SDL_HWACCEL | SDL_RESIZABLE;&lt;/p>
&lt;p>497&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>498 到 502 行，初始化基本变量指示没有相应的流。&lt;/p>
&lt;p>498 video_index = - 1;&lt;/p>
&lt;p>499 audio_index = - 1;&lt;/p>
&lt;p>500&lt;/p>
&lt;p>501 is-&amp;gt;video_stream = - 1;&lt;/p>
&lt;p>502 is-&amp;gt;audio_stream = - 1;&lt;/p>
&lt;p>503&lt;/p>
&lt;p>504 memset(ap, 0, sizeof(*ap));&lt;/p>
&lt;p>505&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>调用函数直接识别文件格式，在此函数中再调用其他函数间接识别媒体格式。&lt;/p>
&lt;p>506 err = av_open_input_file(&amp;amp;ic, is-&amp;gt;filename, NULL, 0, ap);&lt;/p>
&lt;p>507 if (err &amp;lt; 0)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>508&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>509&lt;/td>
&lt;td>&lt;/td>
&lt;td>ret = - 1;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>510&lt;/td>
&lt;td>&lt;/td>
&lt;td>goto fail;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>511&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">保存文件格式上下文，便于各数据结构间跳转。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>512 is-&amp;gt;ic = ic;&lt;/p>
&lt;p>513&lt;/p>
&lt;p>514 for (i = 0; i &amp;lt; ic-&amp;gt;nb_streams; i++)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>515&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>516&lt;/td>
&lt;td>&lt;/td>
&lt;td>AVCodecContext *enc = ic-&amp;gt;streams[i]-&amp;gt;actx;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>517&lt;/td>
&lt;td>&lt;/td>
&lt;td>switch (enc-&amp;gt;codec_type)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>518&lt;/td>
&lt;td>&lt;/td>
&lt;td>{&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">保存音视频流索引，并把显示视频参数设置到 SDL 库。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>519 case CODEC_TYPE_AUDIO:&lt;/p>
&lt;p>520 if (audio_index &amp;lt; 0)&lt;/p>
&lt;p>521 audio_index = i;&lt;/p>
&lt;p>522 break;&lt;/p>
&lt;p>523 case CODEC_TYPE_VIDEO:&lt;/p>
&lt;p>524 if (video_index &amp;lt; 0)&lt;/p>
&lt;p>525 video_index = i;&lt;/p>
&lt;p>526&lt;/p>
&lt;p>527 screen = SDL_SetVideoMode(enc-&amp;gt;width, enc-&amp;gt;height, 0, flags);&lt;/p>
&lt;p>528&lt;/p>
&lt;p>529 SDL_WM_SetCaption(&amp;quot;FFplay&amp;quot;, &amp;quot;FFplay&amp;quot;); // 修改是为了适配视频大小&lt;/p>
&lt;p>530&lt;/p>
&lt;p>531 // schedule_refresh(is, 40);&lt;/p>
&lt;p>532 break;&lt;/p>
&lt;p>533 default:&lt;/p>
&lt;p>534 break;&lt;/p>
&lt;p>535 }&lt;/p>
&lt;p>536 }&lt;/p>
&lt;p>537&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>如果有音频流，就调用函数打开音频编解码器并启动音频广义解码线程。&lt;/p>
&lt;p>538 if (audio_index &amp;gt;= 0)&lt;/p>
&lt;p>539 stream_component_open(is, audio_index);&lt;/p>
&lt;p>540&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>如果有视频流，就调用函数打开视频编解码器并启动视频解码线程。&lt;/p>
&lt;p>541 if (video_index &amp;gt;= 0)&lt;/p>
&lt;p>542 stream_component_open(is, video_index);&lt;/p>
&lt;p>543&lt;/p>
&lt;p>544 if (is-&amp;gt;video_stream &amp;lt; 0 &amp;amp;&amp;amp; is-&amp;gt;audio_stream &amp;lt; 0)&lt;/p>
&lt;p>545 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>如果既没有音频流，又没有视频流，就设置错误码返回。&lt;/p>
&lt;p>546 fprintf(stderr, &amp;quot;%s: could not open codecs\n&amp;quot;, is-&amp;gt;filename);&lt;/p>
&lt;p>547 ret = - 1;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>548 goto fail;&lt;/p>
&lt;p>549 }&lt;/p>
&lt;p>550&lt;/p>
&lt;p>551 for (;;)&lt;/p>
&lt;p>552 {&lt;/p>
&lt;p>553 if (is-&amp;gt;abort_request)&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>如果异常退出请求置位，就退出文件解析线程。&lt;/p>
&lt;p>554 break;&lt;/p>
&lt;p>555&lt;/p>
&lt;p>556 if (is-&amp;gt;audioq.size &amp;gt; MAX_AUDIOQ_SIZE || is-&amp;gt;videoq.size &amp;gt; MAX_VIDEOQ_SIZE || url_feof(&amp;amp;ic-&amp;gt;pb))&lt;/p>
&lt;p>557 {&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>如果队列满，就稍微延时一下。&lt;/p>
&lt;p>558 SDL_Delay(10); // if the queue are full, no need to read more,wait 10 ms&lt;/p>
&lt;p>559 continue;&lt;/p>
&lt;p>560 }&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>从媒体文件中完整的读取一包音视频数据。&lt;/p>
&lt;p>561 ret = av_read_packet(ic, pkt); //av_read_frame(ic, pkt);&lt;/p>
&lt;p>562 if (ret &amp;lt; 0)&lt;/p>
&lt;p>563 {&lt;/p>
&lt;p>564 if (url_ferror(&amp;amp;ic-&amp;gt;pb) == 0)&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>565&lt;/th>
&lt;th>&lt;/th>
&lt;th>{&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>566&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>SDL_Delay(100); // wait for user event&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>567&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>continue;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>568&lt;/td>
&lt;td>&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>569&lt;/td>
&lt;td>&lt;/td>
&lt;td>else&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>570&lt;/td>
&lt;td>&lt;/td>
&lt;td>break;&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>571&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">判断包数据的类型，分别挂接到相应队列，如果是不识别的类型，就直接释放丢弃掉。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>572 if (pkt-&amp;gt;stream_index == is-&amp;gt;audio_stream)&lt;/p>
&lt;p>573 {&lt;/p>
&lt;p>574 packet_queue_put(&amp;amp;is-&amp;gt;audioq, pkt);&lt;/p>
&lt;p>575 }&lt;/p>
&lt;p>576 else if (pkt-&amp;gt;stream_index == is-&amp;gt;video_stream)&lt;/p>
&lt;p>577 {&lt;/p>
&lt;p>578 packet_queue_put(&amp;amp;is-&amp;gt;videoq, pkt);&lt;/p>
&lt;p>579 }&lt;/p>
&lt;p>580 else&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>581 {&lt;/p>
&lt;p>582 av_free_packet(pkt);&lt;/p>
&lt;p>583 }&lt;/p>
&lt;p>584 }&lt;/p>
&lt;p>585&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>简单的延时，让后面的线程有机会把数据解码显示完。当然丢弃掉最后的一点点数据也可以。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>586&lt;/th>
&lt;th>while (!is-&amp;gt;abort_request)&lt;/th>
&lt;th>// wait until the end&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>587&lt;/td>
&lt;td>{&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>588&lt;/td>
&lt;td>SDL_Delay(100);&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>589&lt;/td>
&lt;td>}&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>590&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>591&lt;/td>
&lt;td>ret = 0;&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>592&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">释放掉在本线程中分配的各种资源，体现了谁申请谁释放的程序自封闭性。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>593 fail:&lt;/p>
&lt;p>594 if (is-&amp;gt;audio_stream &amp;gt;= 0)&lt;/p>
&lt;p>595 stream_component_close(is, is-&amp;gt;audio_stream);&lt;/p>
&lt;p>596&lt;/p>
&lt;p>597 if (is-&amp;gt;video_stream &amp;gt;= 0)&lt;/p>
&lt;p>598 stream_component_close(is, is-&amp;gt;video_stream);&lt;/p>
&lt;p>599&lt;/p>
&lt;p>600 if (is-&amp;gt;ic)&lt;/p>
&lt;p>601 {&lt;/p>
&lt;p>602 av_close_input_file(is-&amp;gt;ic);&lt;/p>
&lt;p>603 is-&amp;gt;ic = NULL;&lt;/p>
&lt;p>604 }&lt;/p>
&lt;p>605&lt;/p>
&lt;p>606 if (ret != 0)&lt;/p>
&lt;p>607 {&lt;/p>
&lt;p>608 SDL_Event event;&lt;/p>
&lt;p>609&lt;/p>
&lt;p>610 event.type = FF_QUIT_EVENT;&lt;/p>
&lt;p>611 event.user.data1 = is;&lt;/p>
&lt;p>612 SDL_PushEvent(&amp;amp;event);&lt;/p>
&lt;p>613 }&lt;/p>
&lt;p>614 return 0;&lt;/p>
&lt;p>615 }&lt;/p>
&lt;p>616&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>打开流，这个名字也有点名不符实。主要功能是分配全局总控数据结构，初始化相关参数，启动文&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.141.png" alt="">件解析线程。&lt;/p>
&lt;p>617 static VideoState *stream_open(const char *filename, AVInputFormat *iformat)&lt;/p>
&lt;p>618 {&lt;/p>
&lt;p>619 VideoState *is;&lt;/p>
&lt;p>620&lt;/p>
&lt;p>621 is = av_mallocz(sizeof(VideoState));&lt;/p>
&lt;p>622 if (!is)&lt;/p>
&lt;p>623 return NULL;&lt;/p>
&lt;p>624 pstrcpy(is-&amp;gt;filename, sizeof(is-&amp;gt;filename), filename);&lt;/p>
&lt;p>625&lt;/p>
&lt;p>626 is-&amp;gt;audio_decoder_mutex = SDL_CreateMutex();&lt;/p>
&lt;p>627 is-&amp;gt;video_decoder_mutex = SDL_CreateMutex();&lt;/p>
&lt;p>628&lt;/p>
&lt;p>629 is-&amp;gt;parse_tid = SDL_CreateThread(decode_thread, is);&lt;/p>
&lt;p>630 if (!is-&amp;gt;parse_tid)&lt;/p>
&lt;p>631 {&lt;/p>
&lt;p>632 av_free(is);&lt;/p>
&lt;p>633 return NULL;&lt;/p>
&lt;p>634 }&lt;/p>
&lt;p>635 return is;&lt;/p>
&lt;p>636 }&lt;/p>
&lt;p>637&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>关闭流，这个名字也有点名不符实。主要功能是释放资源。&lt;/p>
&lt;p>639 static void stream_close(VideoState *is)&lt;/p>
&lt;p>640 {&lt;/p>
&lt;p>641 VideoPicture *vp;&lt;/p>
&lt;p>642 int i;&lt;/p>
&lt;p>643&lt;/p>
&lt;p>644 is-&amp;gt;abort_request = 1;&lt;/p>
&lt;p>645 SDL_WaitThread(is-&amp;gt;parse_tid, NULL);&lt;/p>
&lt;p>646&lt;/p>
&lt;p>647 for (i = 0; i &amp;lt; VIDEO_PICTURE_QUEUE_SIZE; i++)&lt;/p>
&lt;p>648 {&lt;/p>
&lt;p>649 vp = &amp;amp;is-&amp;gt;pictq[i];&lt;/p>
&lt;p>650 if (vp-&amp;gt;bmp)&lt;/p>
&lt;p>651 {&lt;/p>
&lt;p>652 SDL_FreeYUVOverlay(vp-&amp;gt;bmp);&lt;/p>
&lt;p>653 vp-&amp;gt;bmp = NULL;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>654 }&lt;/p>
&lt;p>655 }&lt;/p>
&lt;p>656&lt;/p>
&lt;p>657 SDL_DestroyMutex(is-&amp;gt;audio_decoder_mutex);&lt;/p>
&lt;p>658 SDL_DestroyMutex(is-&amp;gt;video_decoder_mutex);&lt;/p>
&lt;p>659 }&lt;/p>
&lt;p>660&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>程序退出时调用的函数，关闭释放一些资源。&lt;/p>
&lt;p>661 void do_exit(void)&lt;/p>
&lt;p>662 {&lt;/p>
&lt;p>663 if (cur_stream)&lt;/p>
&lt;p>664 {&lt;/p>
&lt;p>665 stream_close(cur_stream);&lt;/p>
&lt;p>666 cur_stream = NULL;&lt;/p>
&lt;p>667 }&lt;/p>
&lt;p>668&lt;/p>
&lt;p>669 SDL_Quit();&lt;/p>
&lt;p>670 exit(0);&lt;/p>
&lt;p>671 }&lt;/p>
&lt;p>672&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>SDL 库的消息事件循环。&lt;/p>
&lt;p>673 void event_loop(void) // handle an event sent by the GUI&lt;/p>
&lt;p>674 {&lt;/p>
&lt;p>675 SDL_Event event;&lt;/p>
&lt;p>676&lt;/p>
&lt;p>677 for (;;)&lt;/p>
&lt;p>678 {&lt;/p>
&lt;p>679 SDL_WaitEvent(&amp;amp;event);&lt;/p>
&lt;p>680 switch (event.type)&lt;/p>
&lt;p>681 {&lt;/p>
&lt;p>682 case SDL_KEYDOWN:&lt;/p>
&lt;p>683 switch (event.key.keysym.sym)&lt;/p>
&lt;p>684 {&lt;/p>
&lt;p>685 case SDLK_ESCAPE:&lt;/p>
&lt;p>686 case SDLK_q:&lt;/p>
&lt;p>687 do_exit();&lt;/p>
&lt;p>688 break;&lt;/p>
&lt;p>689 default:&lt;/p>
&lt;p>690 break;&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.020.png" alt="">&lt;/p>
&lt;p>691 }&lt;/p>
&lt;p>692 break;&lt;/p>
&lt;p>693 case SDL_QUIT:&lt;/p>
&lt;p>694 case FF_QUIT_EVENT:&lt;/p>
&lt;p>695 do_exit();&lt;/p>
&lt;p>696 break;&lt;/p>
&lt;p>697 default:&lt;/p>
&lt;p>698 break;&lt;/p>
&lt;p>699 }&lt;/p>
&lt;p>700 }&lt;/p>
&lt;p>701 }&lt;/p>
&lt;p>702&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.130.png" alt="">&lt;/p>
&lt;p>入口函数，初始化 SDL 库，注册 SDL 消息事件，启动文件解析线程，进入消息循环。&lt;/p>
&lt;p>703 int main(int argc, char **argv)&lt;/p>
&lt;p>704 {&lt;/p>
&lt;p>705 int flags = SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER;&lt;/p>
&lt;p>706&lt;/p>
&lt;p>707 av_register_all();&lt;/p>
&lt;p>708&lt;/p>
&lt;p>709 input_filename = &amp;quot;d:/yuv/clocktxt_320.avi&amp;quot;;&lt;/p>
&lt;p>710&lt;/p>
&lt;p>711 if (SDL_Init(flags))&lt;/p>
&lt;p>712 exit(1);&lt;/p>
&lt;p>713&lt;/p>
&lt;p>714 SDL_EventState(SDL_ACTIVEEVENT, SDL_IGNORE);&lt;/p>
&lt;p>715 SDL_EventState(SDL_MOUSEMOTION, SDL_IGNORE);&lt;/p>
&lt;p>716 SDL_EventState(SDL_SYSWMEVENT, SDL_IGNORE);&lt;/p>
&lt;p>717 SDL_EventState(SDL_USEREVENT, SDL_IGNORE);&lt;/p>
&lt;p>718&lt;/p>
&lt;p>719 cur_stream = stream_open(input_filename, file_iformat);&lt;/p>
&lt;p>720&lt;/p>
&lt;p>721 event_loop();&lt;/p>
&lt;p>722&lt;/p>
&lt;p>723 return 0;&lt;/p>
&lt;p>724 }&lt;/p>
&lt;p>725&lt;/p>
&lt;h1 id="第七章-应用开发">&lt;strong>第七章 应用开发&lt;/strong>&lt;/h1>
&lt;h2 id="71-ffmpeg库的使用编码">&lt;strong>7.1 ffmpeg库的使用：编码&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>YUV编码为视频&lt;/strong>：&lt;/p>
&lt;p>搞视频处理的朋友肯定比较熟悉YUV视频序列，很多测试库提供的视频数据都是YUV视频序列，我们这里就用用YUV视频序列来做视频。关于YUV视频序列，我就不多讲了，可以看书学习，通常的视频序列都是YUV420格式的。&lt;/p>
&lt;p>步骤也就那几步，添加视频流，打开编码器，开辟相应的内存空间，然后就可以打开YUV序列逐帧写入数据了，so easy！记得最后要做好文件的关闭和内存的释放，因为FFmpeg是c风格的（不知道新版本是否是c++风格的），这些工作都需要自己做好啊。过多的说明是没用的，直接上代码：&lt;/p>
&lt;p>这里我补充一下，大多数的视频格式好像只支持YUV格式的视频帧AVFrame，我试图直接把RGB的视频序列直接编码到视频这条路好像走不通，都需要把RGB的视频帧再转成YUV视频帧才行，不知道高手有没有其他高见。&lt;/p>
&lt;p>#include &amp;lt;stdio.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;string.h&amp;gt;&lt;/p>
&lt;p>extern &amp;quot;C&amp;quot;&lt;/p>
&lt;p>{&lt;/p>
&lt;p>#include &amp;lt;libavcodec\avcodec.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;libavformat\avformat.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;libswscale\swscale.h&amp;gt;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>void main(int argc, char ** argv)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext* oc;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVOutputFormat* fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVStream* video_st;&lt;/p>
&lt;p>&lt;code> &lt;/code>double video_pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t* video_outbuf;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t* picture_buf;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame* picture;&lt;/p>
&lt;p>// AVFrame* pictureRGB;&lt;/p>
&lt;p>&lt;code> &lt;/code>int size;&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret;&lt;/p>
&lt;p>&lt;code> &lt;/code>int video_outbuf_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>FILE *fin = fopen(&amp;quot;akiyo_qcif.yuv&amp;quot;, &amp;quot;rb&amp;quot;); //视频源文件&lt;/p>
&lt;p>&lt;code> &lt;/code>const char* filename = &amp;quot;test.mpg&amp;quot;;&lt;/p>
&lt;p>// const char* filename;&lt;/p>
&lt;p>// filename = argv[1];&lt;/p>
&lt;p>&lt;code> &lt;/code>av_register_all();&lt;/p>
&lt;p>// avcodec_init(); // 初始化codec库&lt;/p>
&lt;p>// avcodec_register_all(); // 注册编码器&lt;/p>
&lt;p>&lt;code> &lt;/code>fmt = guess_format(NULL, filename, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>oc = av_alloc_format_context();&lt;/p>
&lt;p>&lt;code> &lt;/code>oc-&amp;gt;oformat = fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>snprintf(oc-&amp;gt;filename, sizeof(oc-&amp;gt;filename), &amp;quot;%s&amp;quot;, filename);&lt;/p>
&lt;p>&lt;code> &lt;/code>video_st = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fmt-&amp;gt;video_codec != CODEC_ID_NONE)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext* c;&lt;/p>
&lt;p>&lt;code> &lt;/code>video_st = av_new_stream(oc, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>c = video_st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;codec_id = fmt-&amp;gt;video_codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;codec_type = CODEC_TYPE_VIDEO;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;bit_rate = 400000;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;width = 176;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;height = 144;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;time_base.num = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;time_base.den = 25;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;gop_size = 12;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;pix_fmt = PIX_FMT_YUV420P;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;codec_id == CODEC_ID_MPEG2VIDEO)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;max_b_frames = 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;codec_id == CODEC_ID_MPEG1VIDEO)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;mb_decision = 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;mp4&amp;quot;) || !strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;mov&amp;quot;) || !strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;3gp&amp;quot;))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;flags |= CODEC_FLAG_GLOBAL_HEADER;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (av_set_parameters(oc, NULL)&amp;lt;0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>dump_format(oc, 0, filename, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (video_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext* c;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec* codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>c = video_st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec = avcodec_find_encoder(c-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (avcodec_open(c, codec) &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_RAWPICTURE))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>video_outbuf_size = 200000;&lt;/p>
&lt;p>&lt;code> &lt;/code>video_outbuf = (uint8_t*)av_malloc(video_outbuf_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>picture = avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>size = avpicture_get_size(c-&amp;gt;pix_fmt, c-&amp;gt;width, c-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>picture_buf = (uint8_t*)av_malloc(size);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!picture_buf)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>avpicture_fill((AVPicture*)picture, picture_buf, c-&amp;gt;pix_fmt, c-&amp;gt;width, c-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(fmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (url_fopen(&amp;amp;oc-&amp;gt;pb, filename, URL_WRONLY) &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_write_header(oc);&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i=0; i&amp;lt;300; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (video_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>video_pts = (double)(video_st-&amp;gt;pts.val * video_st-&amp;gt;time_base.num / video_st-&amp;gt;time_base.den);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>video_pts = 0.0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!video_st/* || video_pts &amp;gt;= 5.0*/)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext* c;&lt;/p>
&lt;p>&lt;code> &lt;/code>c = video_st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>size = c-&amp;gt;width * c-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fread(picture_buf, 1, size*3/2, fin) &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>picture-&amp;gt;data[0] = picture_buf; // 亮度&lt;/p>
&lt;p>&lt;code> &lt;/code>picture-&amp;gt;data[1] = picture_buf+ size; // 色度&lt;/p>
&lt;p>&lt;code> &lt;/code>picture-&amp;gt;data[2] = picture_buf+ size*5/4; // 色度&lt;/p>
&lt;p>&lt;code> &lt;/code>// 如果是rgb序列，可能需要如下代码&lt;/p>
&lt;p>// SwsContext* img_convert_ctx;&lt;/p>
&lt;p>// img_convert_ctx = sws_getContext(c-&amp;gt;width, c-&amp;gt;height, PIX_FMT_RGB24, c-&amp;gt;width, c-&amp;gt;height, c-&amp;gt;pix_fmt, SWS_BICUBIC, NULL, NULL, NULL);&lt;/p>
&lt;p>// sws_scale(img_convert_ctx, pictureRGB-&amp;gt;data, pictureRGB-&amp;gt;linesize, 0, c-&amp;gt;height, picture-&amp;gt;data, picture-&amp;gt;linesize);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_RAWPICTURE)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket pkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.stream_index = video_st-&amp;gt;index;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.data = (uint8_t*)picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.size = sizeof(AVPicture);&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = av_write_frame(oc, &amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int out_size = avcodec_encode_video(c, video_outbuf, video_outbuf_size, picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (out_size &amp;gt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket pkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.pts = av_rescale_q(c-&amp;gt;coded_frame-&amp;gt;pts, c-&amp;gt;time_base, video_st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;coded_frame-&amp;gt;key_frame)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.stream_index = video_st-&amp;gt;index;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.data = video_outbuf;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.size = out_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = av_write_frame(oc, &amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (video_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(video_st-&amp;gt;codec);&lt;/p>
&lt;p>// av_free(picture-&amp;gt;data[0]);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(video_outbuf);&lt;/p>
&lt;p>// av_free(picture_buf);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_write_trailer(oc);&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i=0; i&lt;oc->nb_streams; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;oc-&amp;gt;streams[i]-&amp;gt;codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;oc-&amp;gt;streams[i]);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(fmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>url_fclose(oc-&amp;gt;pb);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>av_free(oc);&lt;/p>
&lt;p>}
8. # &lt;strong>关键函数介绍&lt;/strong>
此章有必要，因为调取的函数都是最新版的（有些函数第五章已经提及，读者可以对比）。&lt;/p>
&lt;h2 id="81-avformat_open_input">&lt;strong>8.1 avformat_open_input&lt;/strong>&lt;/h2>
&lt;p>FFMPEG打开媒体的的过程开始于avformat_open_input，因此该函数的重要性不可忽视。&lt;/p>
&lt;p>在该函数中，FFMPEG完成了：&lt;/p>
&lt;p>输入输出结构体AVIOContext的初始化；&lt;/p>
&lt;p>输入数据的协议（例如RTMP，或者file）的识别（通过一套评分机制）:1判断文件名的后缀 2读取文件头的数据进行比对；&lt;/p>
&lt;p>使用获得最高分的文件协议对应的URLProtocol，通过函数指针的方式，与FFMPEG连接（非专业用词）；&lt;/p>
&lt;p>剩下的就是调用该URLProtocol的函数进行open,read等操作了&lt;/p>
&lt;p>以下是通过eclipse+MinGW调试FFMPEG源代码获得的函数调用关系图&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.142.jpeg" alt="">&lt;/p>
&lt;p>可见最终都调用了URLProtocol结构体中的函数指针。&lt;/p>
&lt;p>URLProtocol结构是一大堆函数指针的集合（avio.h文件）参见第四章数据结构&lt;/p>
&lt;p>URLProtocol功能就是完成各种输入协议的读写等操作&lt;/p>
&lt;p>但输入协议种类繁多，它是怎样做到“大一统”的呢？&lt;/p>
&lt;p>原来，每个具体的输入协议都有自己对应的URLProtocol。&lt;/p>
&lt;p>比如file协议（FFMPEG把文件也当做一种特殊的协议）（*file.c文件）&lt;/p>
&lt;p>URLProtocol ff_pipe_protocol = {&lt;/p>
&lt;p>&lt;code> &lt;/code>.name = &amp;quot;pipe&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_open = pipe_open,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_read = file_read,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_write = file_write,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_get_file_handle = file_get_handle,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_check = file_check,&lt;/p>
&lt;p>};&lt;/p>
&lt;p>或者rtmp协议（此处使用了librtmp）（librtmp.c文件）&lt;/p>
&lt;p>URLProtocol ff_rtmp_protocol = {&lt;/p>
&lt;p>&lt;code> &lt;/code>.name = &amp;quot;rtmp&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_open = rtmp_open,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_read = rtmp_read,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_write = rtmp_write,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_close = rtmp_close,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_read_pause = rtmp_read_pause,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_read_seek = rtmp_read_seek,&lt;/p>
&lt;p>&lt;code> &lt;/code>.url_get_file_handle = rtmp_get_file_handle,&lt;/p>
&lt;p>&lt;code> &lt;/code>.priv_data_size = sizeof(RTMP),&lt;/p>
&lt;p>&lt;code> &lt;/code>.flags = URL_PROTOCOL_FLAG_NETWORK,&lt;/p>
&lt;p>};&lt;/p>
&lt;p>可见它们把各自的函数指针都赋值给了URLProtocol结构体的函数指针&lt;/p>
&lt;p>因此avformat_open_input只需调用url_open,url_read这些函数就可以完成各种具体输入协议的open,read等操作了&lt;/p>
&lt;h2 id="82-avcodec_register_all">&lt;strong>8.2 avcodec_register_all()&lt;/strong>&lt;/h2>
&lt;p>ffmpeg注册复用器，编码器等的函数av_register_all()。该函数在所有基于ffmpeg的应用程序中几乎都是第一个被调用的。只有调用了该函数，才能使用复用器，编码器等。&lt;/p>
&lt;p>可见解复用器注册都是用&lt;/p>
&lt;p>REGISTER_DEMUXER (X,x)&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>REGISTER_DEMUXER (AAC, aac)&lt;/p>
&lt;p>可见复用器注册都是用&lt;/p>
&lt;p>REGISTER_MUXER (X,x))&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>REGISTER_MUXER (ADTS, adts)&lt;/p>
&lt;p>既有解复用器又有复用器的话，可以用&lt;/p>
&lt;p>REGISTER_MUXDEMUX (X,x));&lt;/p>
&lt;p>例如：&lt;/p>
&lt;p>REGISTER_MUXDEMUX (AC3, ac3);&lt;/p>
&lt;p>我们来看一下宏的定义，这里以解复用器为例：&lt;/p>
&lt;p>py&lt;/p>
&lt;p>#define REGISTER_DEMUXER(X,x) { \&lt;/p>
&lt;p>&lt;code> &lt;/code>extern AVInputFormat ff_##x##_demuxer; \&lt;/p>
&lt;p>&lt;code> &lt;/code>if(CONFIG_##X##_DEMUXER) av_register_input_format(&amp;amp;ff_##x##_demuxer); }&lt;/p>
&lt;p>注意：define里面的##可能不太常见，它的含义就是拼接两个字符串，比如&lt;/p>
&lt;p>#define Conn(x,y) x##y&lt;/p>
&lt;p>那么&lt;/p>
&lt;p>int n = Conn(123,456); 结果就是n=123456;&lt;/p>
&lt;p>我们以REGISTER_DEMUXER (AAC, aac)为例，则它等效于&lt;/p>
&lt;p>py&lt;/p>
&lt;p>extern AVInputFormat ff_aac_demuxer;&lt;/p>
&lt;p>if(CONFIG_AAC_DEMUXER) av_register_input_format(&amp;amp;ff_aac_demuxer);&lt;/p>
&lt;p>从上面这段代码我们可以看出，真正注册的函数是av_register_input_format(&amp;amp;ff_aac_demuxer)，那我就看看这个和函数的作用，查看一下av_register_input_format()的代码：&lt;/p>
&lt;p>py&lt;/p>
&lt;p>void av_register_input_format(AVInputFormat *format)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVInputFormat **p;&lt;/p>
&lt;p>&lt;code> &lt;/code>p = &amp;amp;first_iformat;&lt;/p>
&lt;p>&lt;code> &lt;/code>while (*p != NULL) p = &amp;amp;(*p)-&amp;gt;next;&lt;/p>
&lt;p>&lt;code> &lt;/code>*p = format;&lt;/p>
&lt;p>&lt;code> &lt;/code>format-&amp;gt;next = NULL;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>这段代码是比较容易理解的，首先先提一点，first_iformat是个什么东东呢？其实它是Input Format链表的头部地址，是一个全局静态变量，定义如下：&lt;/p>
&lt;p>py&lt;/p>
&lt;p>/** head of registered input format linked list */&lt;/p>
&lt;p>static AVInputFormat *first_iformat = NULL;&lt;/p>
&lt;p>由此我们可以分析出av_register_input_format()的含义，一句话概括就是：遍历链表并把当前的Input Format加到链表的尾部。&lt;/p>
&lt;p>至此REGISTER_DEMUXER (X, x)分析完毕。&lt;/p>
&lt;p>同理，复用器道理是一样的，只是注册函数改为av_register_output_format()；&lt;/p>
&lt;p>既有解复用器又有复用器的话，有一个宏定义：&lt;/p>
&lt;p>py&lt;/p>
&lt;p>#define REGISTER_MUXDEMUX(X,x) REGISTER_MUXER(X,x); REGISTER_DEMUXER(X,x)&lt;/p>
&lt;p>可见是分别注册了复用器和解复用器。&lt;/p>
&lt;p>此外还有网络协议的注册，注册函数为ffurl_register_protocol()，在此不再详述。&lt;/p>
&lt;p>整个代码没太多可说的，首先确定是不是已经初始化过了（initialized），如果没有，就调用avcodec_register_all()注册编解码器（这个先不分析），然后就是注册，注册，注册...直到完成所有注册。&lt;/p>
&lt;h2 id="83-av_read_frame">&lt;strong>8.3 av_read_frame()&lt;/strong>&lt;/h2>
&lt;p>ffmpeg中的av_read_frame()的作用是读取码流中的音频若干帧或者视频一帧。例如，解码视频的时候，每解码一个视频帧，需要先调用 av_read_frame()获得一帧视频的压缩数据，然后才能对该数据进行解码（例如H.264中一帧压缩数据通常对应一个NAL）。&lt;/p>
&lt;p>通过av_read_packet(***)，读取一个包，需要说明的是此函数必须是包含整数帧的，不存在半帧的情况，以ts流为例，是读取一个完整的PES包（一个完整pes包包含若干视频或音频es包），读取完毕后，通过av_parser_parse2(***)分析出视频一帧（或音频若干帧），返回，下次进入循环的时候，如果上次的数据没有完全取完，则st = s-&amp;gt;cur_st;不会是NULL，即再此进入av_parser_parse2(***)流程，而不是下面的av_read_packet（**）流程，这样就保证了，如果读取一次包含了N帧视频数据（以视频为例），则调用av_read_frame（***）N次都不会去读数据，而是返回第一次读取的数据，直到全部解析完毕。&lt;/p>
&lt;h2 id="84-avcodec_decode_video2">&lt;strong>8.4 avcodec_decode_video2()&lt;/strong>&lt;/h2>
&lt;p>ffmpeg中的avcodec_decode_video2()的作用是解码一帧视频数据。输入一个压缩编码的结构体AVPacket，输出一个解码后的结构体AVFrame。&lt;/p>
&lt;h2 id="85-transcode_init">&lt;strong>8.5 transcode_init()&lt;/strong>&lt;/h2>
&lt;p>transcode_init()函数是在转换前做准备工作的.此处看一下它的真面目,不废话,看注释吧:&lt;/p>
&lt;p>//为转换过程做准备&lt;/p>
&lt;p>static int transcode_init(OutputFile *output_files,&lt;/p>
&lt;p>&lt;code> &lt;/code>int nb_output_files,&lt;/p>
&lt;p>&lt;code> &lt;/code>InputFile *input_files,&lt;/p>
&lt;p>&lt;code> &lt;/code>int nb_input_files)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret = 0, i, j, k;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *oc;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *codec, *icodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>OutputStream *ost;&lt;/p>
&lt;p>&lt;code> &lt;/code>InputStream *ist;&lt;/p>
&lt;p>&lt;code> &lt;/code>char error[1024];&lt;/p>
&lt;p>&lt;code> &lt;/code>int want_sdp = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* init framerate emulation */&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化帧率仿真(转换时是不按帧率来的,但如果要求帧率仿真,就可以做到)&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_input_files; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>InputFile *ifile = &amp;amp;input_files[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果一个输入文件被要求帧率仿真(指的是即使是转换也像播放那样按照帧率来进行),&lt;/p>
&lt;p>&lt;code> &lt;/code>//则为这个文件中所有流记录下开始时间&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ifile-&amp;gt;rate_emu)&lt;/p>
&lt;p>&lt;code> &lt;/code>for (j = 0; j &amp;lt; ifile-&amp;gt;nb_streams; j++)&lt;/p>
&lt;p>&lt;code> &lt;/code>input_streams[j + ifile-&amp;gt;ist_index].start = av_gettime();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* output stream init */&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_files; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//什么也没做,只是做了个判断而已&lt;/p>
&lt;p>&lt;code> &lt;/code>oc = output_files[i].ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!oc-&amp;gt;nb_streams &amp;amp;&amp;amp; !(oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_NOSTREAMS))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>av_dump_format(oc, i, oc-&amp;gt;filename, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_ERROR,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Output file #%d does not contain any stream\n&amp;quot;, i);&lt;/p>
&lt;p>&lt;code> &lt;/code>return AVERROR(EINVAL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//轮循所有的输出流,跟据对应的输入流,设置其编解码器的参数&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_streams; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//轮循所有的输出流&lt;/p>
&lt;p>&lt;code> &lt;/code>ost = &amp;amp;output_streams[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>//输出流对应的FormatContext&lt;/p>
&lt;p>&lt;code> &lt;/code>oc = output_files[ost-&amp;gt;file_index].ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>//取得输出流对应的输入流&lt;/p>
&lt;p>&lt;code> &lt;/code>ist = &amp;amp;input_streams[ost-&amp;gt;source_index];&lt;/p>
&lt;p>&lt;code> &lt;/code>//attachment_filename是不是这样的东西:一个文件,它单独容纳一个输出流?此处不懂&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;attachment_filename)&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec = ost-&amp;gt;st-&amp;gt;codec;//输出流的编解码器结构&lt;/p>
&lt;p>&lt;code> &lt;/code>icodec = ist-&amp;gt;st-&amp;gt;codec;//输入流的编解码器结构&lt;/p>
&lt;p>&lt;code> &lt;/code>//先把能复制的复制一下&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;st-&amp;gt;disposition = ist-&amp;gt;st-&amp;gt;disposition;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;bits_per_raw_sample = icodec-&amp;gt;bits_per_raw_sample;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;chroma_sample_location = icodec-&amp;gt;chroma_sample_location;&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果只是复制一个流(不用解码后再编码),则把输入流的编码参数直接复制给输出流&lt;/p>
&lt;p>&lt;code> &lt;/code>//此时是不需要解码也不需要编码的，所以不需打开解码器和编码器&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;stream_copy)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//计算输出流的编解码器的extradata的大小,然后分配容纳extradata的缓冲&lt;/p>
&lt;p>&lt;code> &lt;/code>//然后把输入流的编解码器的extradata复制到输出流的编解码器中&lt;/p>
&lt;p>&lt;code> &lt;/code>uint64_t extra_size = (uint64_t) icodec-&amp;gt;extradata_size&lt;/p>
&lt;p>&lt;code> &lt;/code>+ FF_INPUT_BUFFER_PADDING_SIZE;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (extra_size &amp;gt; INT_MAX) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return AVERROR(EINVAL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* if stream_copy is selected, no need to decode or encode */&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;codec_id = icodec-&amp;gt;codec_id;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;codec_type = icodec-&amp;gt;codec_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;codec_tag){&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!oc-&amp;gt;oformat-&amp;gt;codec_tag&lt;/p>
&lt;p>&lt;code> &lt;/code>||av_codec_get_id(oc-&amp;gt;oformat-&amp;gt;codec_tag,icodec-&amp;gt;codec_tag) == codec-&amp;gt;codec_id&lt;/p>
&lt;p>&lt;code> &lt;/code>||av_codec_get_tag(oc-&amp;gt;oformat-&amp;gt;codec_tag,icodec-&amp;gt;codec_id) &amp;lt;= 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;codec_tag = icodec-&amp;gt;codec_tag;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;bit_rate = icodec-&amp;gt;bit_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;rc_max_rate = icodec-&amp;gt;rc_max_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;rc_buffer_size = icodec-&amp;gt;rc_buffer_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;extradata = av_mallocz(extra_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;extradata){&lt;/p>
&lt;p>&lt;code> &lt;/code>return AVERROR(ENOMEM);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(codec-&amp;gt;extradata, icodec-&amp;gt;extradata, icodec-&amp;gt;extradata_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;extradata_size = icodec-&amp;gt;extradata_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>//重新鼓捣一下time base(这家伙就是帧率)&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base = ist-&amp;gt;st-&amp;gt;time_base;&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果输出文件是avi,做一点特殊处理&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;avi&amp;quot;)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (copy_tb &amp;lt; 0&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; av_q2d(icodec-&amp;gt;time_base) * icodec-&amp;gt;ticks_per_frame &amp;gt;&lt;/p>
&lt;p>&lt;code> &lt;/code>2 * av_q2d(ist-&amp;gt;st-&amp;gt;time_base)&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; av_q2d(ist-&amp;gt;st-&amp;gt;time_base) &amp;lt; 1.0 / 500&lt;/p>
&lt;p>&lt;code> &lt;/code>|| copy_tb == 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base = icodec-&amp;gt;time_base;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base.num *= icodec-&amp;gt;ticks_per_frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base.den *= 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>else if (!(oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_VARIABLE_FPS))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (copy_tb &amp;lt; 0&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; av_q2d(icodec-&amp;gt;time_base) * icodec-&amp;gt;ticks_per_frame&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;gt; av_q2d(ist-&amp;gt;st-&amp;gt;time_base)&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; av_q2d(ist-&amp;gt;st-&amp;gt;time_base) &amp;lt; 1.0 / 500&lt;/p>
&lt;p>&lt;code> &lt;/code>|| copy_tb == 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base = icodec-&amp;gt;time_base;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base.num *= icodec-&amp;gt;ticks_per_frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//再修正一下帧率&lt;/p>
&lt;p>&lt;code> &lt;/code>av_reduce(&amp;amp;codec-&amp;gt;time_base.num, &amp;amp;codec-&amp;gt;time_base.den,&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base.num, codec-&amp;gt;time_base.den, INT_MAX);&lt;/p>
&lt;p>&lt;code> &lt;/code>//单独复制各不同媒体自己的编码参数&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (codec-&amp;gt;codec_type)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_AUDIO:&lt;/p>
&lt;p>&lt;code> &lt;/code>//音频的&lt;/p>
&lt;p>&lt;code> &lt;/code>if (audio_volume != 256){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log( NULL,AV_LOG_FATAL,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;-acodec copy and -vol are incompatible (frames are not decoded)\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channel_layout = icodec-&amp;gt;channel_layout;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;sample_rate = icodec-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channels = icodec-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;frame_size = icodec-&amp;gt;frame_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;audio_service_type = icodec-&amp;gt;audio_service_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;block_align = icodec-&amp;gt;block_align;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_VIDEO:&lt;/p>
&lt;p>&lt;code> &lt;/code>//视频的&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;pix_fmt = icodec-&amp;gt;pix_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;width = icodec-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;height = icodec-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;has_b_frames = icodec-&amp;gt;has_b_frames;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;sample_aspect_ratio.num){&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;sample_aspect_ratio = ost-&amp;gt;st-&amp;gt;sample_aspect_ratio =&lt;/p>
&lt;p>&lt;code> &lt;/code>ist-&amp;gt;st-&amp;gt;sample_aspect_ratio.num ?ist-&amp;gt;st-&amp;gt;sample_aspect_ratio :&lt;/p>
&lt;p>&lt;code> &lt;/code>ist-&amp;gt;st-&amp;gt;codec-&amp;gt;sample_aspect_ratio.num ?ist-&amp;gt;st-&amp;gt;codec-&amp;gt;sample_aspect_ratio :(AVRational){0, 1};&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;st-&amp;gt;avg_frame_rate = ist-&amp;gt;st-&amp;gt;avg_frame_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_SUBTITLE:&lt;/p>
&lt;p>&lt;code> &lt;/code>//字幕的&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;width = icodec-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;height = icodec-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_DATA:&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_ATTACHMENT:&lt;/p>
&lt;p>&lt;code> &lt;/code>//??的&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>abort();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果不是复制,就麻烦多了&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取编码器&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!ost-&amp;gt;enc)&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;enc = avcodec_find_encoder(ost-&amp;gt;st-&amp;gt;codec-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>//因为需要转换,所以既需解码又需编码&lt;/p>
&lt;p>&lt;code> &lt;/code>ist-&amp;gt;decoding_needed = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;encoding_needed = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>switch(codec-&amp;gt;codec_type)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_AUDIO:&lt;/p>
&lt;p>&lt;code> &lt;/code>//鼓捣音频编码器的参数,基本上是把一些不合适的参数替换掉&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;fifo = av_fifo_alloc(1024);//音频数据所在的缓冲&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!ost-&amp;gt;fifo) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return AVERROR(ENOMEM);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//采样率&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;sample_rate)&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;sample_rate = icodec-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>choose_sample_rate(ost-&amp;gt;st, ost-&amp;gt;enc);&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base = (AVRational){1, codec-&amp;gt;sample_rate};&lt;/p>
&lt;p>&lt;code> &lt;/code>//样点格式&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec-&amp;gt;sample_fmt == AV_SAMPLE_FMT_NONE)&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;sample_fmt = icodec-&amp;gt;sample_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>choose_sample_fmt(ost-&amp;gt;st, ost-&amp;gt;enc);&lt;/p>
&lt;p>&lt;code> &lt;/code>//声道&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;audio_channels_mapped) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* the requested output channel is set to the number of&lt;/p>
&lt;p>&lt;code> &lt;/code>* -map_channel only if no -ac are specified */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;channels) {&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channels = ost-&amp;gt;audio_channels_mapped;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channel_layout = av_get_default_channel_layout(codec-&amp;gt;channels);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;channel_layout) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_FATAL, &amp;quot;Unable to find an appropriate channel layout for requested number of channel\n);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* fill unused channel mapping with -1 (which means a muted&lt;/p>
&lt;p>&lt;code> &lt;/code>* channel in case the number of output channels is bigger&lt;/p>
&lt;p>&lt;code> &lt;/code>* than the number of mapped channel) */&lt;/p>
&lt;p>&lt;code> &lt;/code>for (j = ost-&amp;gt;audio_channels_mapped; j &amp;lt; FF_ARRAY_ELEMS(ost-&amp;gt;audio_channels_map); j++)&lt;/p>
&lt;p>&lt;code> &lt;/code>&lt;span> &lt;/span>ost-&amp;gt;audio_channels_map[j] = -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}else if (!codec-&amp;gt;channels){&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channels = icodec-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channel_layout = icodec-&amp;gt;channel_layout;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (av_get_channel_layout_nb_channels(codec-&amp;gt;channel_layout) != codec-&amp;gt;channels)&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channel_layout = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>//是否需要重采样&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;audio_resample = codec-&amp;gt;sample_rate != icodec-&amp;gt;sample_rate || audio_sync_method &amp;gt; 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;audio_resample |= codec-&amp;gt;sample_fmt != icodec-&amp;gt;sample_fmt ||&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;channel_layout != icodec-&amp;gt;channel_layout;&lt;/p>
&lt;p>&lt;code> &lt;/code>icodec-&amp;gt;request_channels = codec-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;resample_sample_fmt = icodec-&amp;gt;sample_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;resample_sample_rate = icodec-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;resample_channels = icodec-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_VIDEO:&lt;/p>
&lt;p>&lt;code> &lt;/code>//鼓捣视频编码器的参数,基本上是把一些不合适的参数替换掉&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec-&amp;gt;pix_fmt == PIX_FMT_NONE)&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;pix_fmt = icodec-&amp;gt;pix_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>choose_pixel_fmt(ost-&amp;gt;st, ost-&amp;gt;enc);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;st-&amp;gt;codec-&amp;gt;pix_fmt == PIX_FMT_NONE){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_FATAL, &amp;quot;Video pixel format is unknown, stream cannot be encoded\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//宽高&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec-&amp;gt;width || !codec-&amp;gt;height){&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;width = icodec-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;height = icodec-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//视频是否需要重采样&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;video_resample = codec-&amp;gt;width != icodec-&amp;gt;width ||&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;height != icodec-&amp;gt;height ||&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;pix_fmt != icodec-&amp;gt;pix_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;video_resample){&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;bits_per_raw_sample= frame_bits_per_raw_sample;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;resample_height = icodec-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;resample_width = icodec-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;resample_pix_fmt = icodec-&amp;gt;pix_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>//计算帧率&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!ost-&amp;gt;frame_rate.num)&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;frame_rate = ist-&amp;gt;st-&amp;gt;r_frame_rate.num ?&lt;/p>
&lt;p>&lt;code> &lt;/code>ist-&amp;gt;st-&amp;gt;r_frame_rate : (AVRational){25,1};&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;enc &amp;amp;&amp;amp; ost-&amp;gt;enc-&amp;gt;supported_framerates &amp;amp;&amp;amp; !ost-&amp;gt;force_fps) {&lt;/p>
&lt;p>&lt;code> &lt;/code>int idx = av_find_nearest_q_idx(ost-&amp;gt;frame_rate,ost-&amp;gt;enc-&amp;gt;supported_framerates);&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;frame_rate = ost-&amp;gt;enc-&amp;gt;supported_framerates[idx];&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;time_base = (AVRational) {ost-&amp;gt;frame_rate.den, ost-&amp;gt;frame_rate.num};&lt;/p>
&lt;p>&lt;code> &lt;/code>if( av_q2d(codec-&amp;gt;time_base) &amp;lt; 0.001 &amp;amp;&amp;amp;&lt;/p>
&lt;p>&lt;code> &lt;/code>video_sync_method &amp;amp;&amp;amp;&lt;/p>
&lt;p>&lt;code> &lt;/code>(video_sync_method==1 ||&lt;/p>
&lt;p>&lt;code> &lt;/code>(video_sync_method&amp;lt;0 &amp;amp;&amp;amp; !&lt;/p>
&lt;p>&lt;code> &lt;/code>(oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_VARIABLE_FPS))))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(oc, AV_LOG_WARNING, &amp;quot;Frame rate very high for a muxer not effciciently supporting it.\n&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Please consider specifiying a lower framerate, a different muxer or -vsync 2\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>&lt;span> &lt;/span>for (j = 0; j &amp;lt; ost-&amp;gt;forced_kf_count; j++)&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;forced_kf_pts[j] = av_rescale_q(ost-&amp;gt;forced_kf_pts[j],&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_TIME_BASE_Q, codec-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case AVMEDIA_TYPE_SUBTITLE:&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>abort();&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* two pass mode */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec-&amp;gt;codec_id != CODEC_ID_H264 &amp;amp;&amp;amp;&lt;/p>
&lt;p>&lt;code> &lt;/code>(codec-&amp;gt;flags &amp;amp; (CODEC_FLAG_PASS1 | CODEC_FLAG_PASS2)))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>char logfilename[1024];&lt;/p>
&lt;p>&lt;code> &lt;/code>FILE *f;&lt;/p>
&lt;p>&lt;code> &lt;/code>snprintf(logfilename, sizeof(logfilename), &amp;quot;%s-%d.log&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>pass_logfilename_prefix ? pass_logfilename_prefix : DEFAULT_PASS_LOGFILENAME_PREFIX,&lt;/p>
&lt;p>&lt;code> &lt;/code>i);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec-&amp;gt;flags &amp;amp; CODEC_FLAG_PASS2){&lt;/p>
&lt;p>&lt;code> &lt;/code>char *logbuffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>size_t logbuffer_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (cmdutils_read_file(logfilename, &amp;amp;logbuffer, &amp;amp;logbuffer_size) &amp;lt; 0){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_FATAL,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Error reading log file '%s' for pass-2 encoding\n&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>logfilename);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>codec-&amp;gt;stats_in = logbuffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec-&amp;gt;flags &amp;amp; CODEC_FLAG_PASS1){&lt;/p>
&lt;p>&lt;code> &lt;/code>f = fopen(logfilename, &amp;quot;wb&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!f) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_FATAL, &amp;quot;Cannot write log file '%s' for pass-1 encoding: %s\n&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>logfilename, strerror(errno));&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;logfile = f;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec-&amp;gt;codec_type == AVMEDIA_TYPE_VIDEO){&lt;/p>
&lt;p>&lt;code> &lt;/code>/* maximum video buffer size is 6-bytes per pixel, plus DPX header size (1664)*/&lt;/p>
&lt;p>&lt;code> &lt;/code>//计算编码输出缓冲的大小,计算一个最大值&lt;/p>
&lt;p>&lt;code> &lt;/code>int size = codec-&amp;gt;width * codec-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>bit_buffer_size = FFMAX(bit_buffer_size, 7 * size + 10000);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//分配编码后数据所在的缓冲&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bit_buffer)&lt;/p>
&lt;p>&lt;code> &lt;/code>bit_buffer = av_malloc(bit_buffer_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bit_buffer){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_ERROR,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Cannot allocate %d bytes output buffer\n&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>bit_buffer_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>return AVERROR(ENOMEM);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//轮循所有输出流,打开每个输出流的编码器&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_streams; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>ost = &amp;amp;output_streams[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;encoding_needed){&lt;/p>
&lt;p>&lt;code> &lt;/code>//当然,只有在需要编码时才打开编码器&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *codec = ost-&amp;gt;enc;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *dec = input_streams[ost-&amp;gt;source_index].st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec) {&lt;/p>
&lt;p>&lt;code> &lt;/code>snprintf(error, sizeof(error),&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Encoder (codec %s) not found for output stream #%d:%d&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_get_name(ost-&amp;gt;st-&amp;gt;codec-&amp;gt;codec_id),&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;file_index, ost-&amp;gt;index);&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = AVERROR(EINVAL);&lt;/p>
&lt;p>&lt;code> &lt;/code>goto dump_format;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (dec-&amp;gt;subtitle_header){&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;st-&amp;gt;codec-&amp;gt;subtitle_header = av_malloc(dec-&amp;gt;subtitle_header_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!ost-&amp;gt;st-&amp;gt;codec-&amp;gt;subtitle_header){&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = AVERROR(ENOMEM);&lt;/p>
&lt;p>&lt;code> &lt;/code>goto dump_format;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(ost-&amp;gt;st-&amp;gt;codec-&amp;gt;subtitle_header,&lt;/p>
&lt;p>&lt;code> &lt;/code>dec-&amp;gt;subtitle_header,dec-&amp;gt;subtitle_header_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;st-&amp;gt;codec-&amp;gt;subtitle_header_size = dec-&amp;gt;subtitle_header_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//打开啦&lt;/p>
&lt;p>&lt;code> &lt;/code>if (avcodec_open2(ost-&amp;gt;st-&amp;gt;codec, codec, &amp;amp;ost-&amp;gt;opts) &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>snprintf(error, sizeof(error),&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Error while opening encoder for output stream #%d:%d - maybe incorrect parameters such as bit_rate, rate, width or height&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;file_index, ost-&amp;gt;index);&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = AVERROR(EINVAL);&lt;/p>
&lt;p>&lt;code> &lt;/code>goto dump_format;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>assert_codec_experimental(ost-&amp;gt;st-&amp;gt;codec, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>assert_avoptions(ost-&amp;gt;opts);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;st-&amp;gt;codec-&amp;gt;bit_rate &amp;amp;&amp;amp; ost-&amp;gt;st-&amp;gt;codec-&amp;gt;bit_rate &amp;lt; 1000)&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_WARNING,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;The bitrate parameter is set too low.&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot; It takes bits/s as argument, not kbits/s\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>extra_size += ost-&amp;gt;st-&amp;gt;codec-&amp;gt;extradata_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;st-&amp;gt;codec-&amp;gt;me_threshold)&lt;/p>
&lt;p>&lt;code> &lt;/code>input_streams[ost-&amp;gt;source_index].st-&amp;gt;codec-&amp;gt;debug |= FF_DEBUG_MV;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化所有的输入流(主要做的就是在需要时打开解码器)&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_input_streams; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((ret = init_input_stream(i, output_streams, nb_output_streams,&lt;/p>
&lt;p>&lt;code> &lt;/code>error, sizeof(error))) &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>goto dump_format;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* discard unused programs */&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_input_files; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>InputFile *ifile = &amp;amp;input_files[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>for (j = 0; j &amp;lt; ifile-&amp;gt;ctx-&amp;gt;nb_programs; j++){&lt;/p>
&lt;p>&lt;code> &lt;/code>AVProgram *p = ifile-&amp;gt;ctx-&amp;gt;programs[j];&lt;/p>
&lt;p>&lt;code> &lt;/code>int discard = AVDISCARD_ALL;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (k = 0; k &amp;lt; p-&amp;gt;nb_stream_indexes; k++){&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!input_streams[ifile-&amp;gt;ist_index + p-&amp;gt;stream_index[k]].discard){&lt;/p>
&lt;p>&lt;code> &lt;/code>discard = AVDISCARD_DEFAULT;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>p-&amp;gt;discard = discard;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//打开所有输出文件，写入媒体文件头&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_files; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>oc = output_files[i].ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>oc-&amp;gt;interrupt_callback = int_cb;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (avformat_write_header(oc, &amp;amp;output_files[i].opts) &amp;lt; 0){&lt;/p>
&lt;p>&lt;code> &lt;/code>snprintf(error, sizeof(error),&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Could not write header for output file #%d (incorrect codec parameters ?)&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>i);&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = AVERROR(EINVAL);&lt;/p>
&lt;p>&lt;code> &lt;/code>goto dump_format;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>// assert_avoptions(output_files[i].opts);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;rtp&amp;quot;)){&lt;/p>
&lt;p>&lt;code> &lt;/code>want_sdp = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;h2 id="86-transcode">&lt;strong>8.6 transcode()&lt;/strong>&lt;/h2>
&lt;p>&lt;strong>[cpp]&lt;/strong> &lt;a href="http://blog.csdn.net/niu_gao/article/details/7175421#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/niu_gao/article/details/7175421#">copy&lt;/a>&lt;/p>
&lt;p>直接从主函数进行分析&lt;/p>
&lt;p>int main(int argc, char **argv)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>OptionsContext o = { 0 };&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t ti;&lt;/p>
&lt;p>&lt;code> &lt;/code>//与命令行分析有关的结构的初始化,下面不再罗嗦&lt;/p>
&lt;p>&lt;code> &lt;/code>reset_options(&amp;amp;o, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置日志级别&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log_set_flags(AV_LOG_SKIP_REPEATED);&lt;/p>
&lt;p>&lt;code> &lt;/code>parse_loglevel(argc, argv, options);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (argc &amp;gt; 1 &amp;amp;&amp;amp; !strcmp(argv[1], &amp;quot;-d&amp;quot;)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>run_as_daemon = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log_set_callback(log_callback_null);&lt;/p>
&lt;p>&lt;code> &lt;/code>argc--;&lt;/p>
&lt;p>&lt;code> &lt;/code>argv++;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//注册组件们&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_register_all();&lt;/p>
&lt;p>#if CONFIG_AVDEVICE&lt;/p>
&lt;p>&lt;code> &lt;/code>avdevice_register_all();&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>#if CONFIG_AVFILTER&lt;/p>
&lt;p>&lt;code> &lt;/code>avfilter_register_all();&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>av_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化网络,windows下需要&lt;/p>
&lt;p>&lt;code> &lt;/code>avformat_network_init();&lt;/p>
&lt;p>&lt;code> &lt;/code>show_banner();&lt;/p>
&lt;p>&lt;code> &lt;/code>term_init();&lt;/p>
&lt;p>&lt;code> &lt;/code>//分析命令行输入的参数们&lt;/p>
&lt;p>&lt;code> &lt;/code>parse_options(&amp;amp;o, argc, argv, options, opt_output_file);&lt;/p>
&lt;p>&lt;code> &lt;/code>//文件的转换就在此函数中发生&lt;/p>
&lt;p>&lt;code> &lt;/code>if (transcode(output_files, nb_output_files, input_files, nb_input_files)&amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(0);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>下面是transcode()函数,转换就发生在它里面.不废话,看注释吧,应很详细了&lt;/p>
&lt;p>static int transcode(&lt;/p>
&lt;p>&lt;code> &lt;/code>OutputFile *output_files,//输出文件数组&lt;/p>
&lt;p>&lt;code> &lt;/code>int nb_output_files,//输出文件的数量&lt;/p>
&lt;p>&lt;code> &lt;/code>InputFile *input_files,//输入文件数组&lt;/p>
&lt;p>&lt;code> &lt;/code>int nb_input_files)//输入文件的数量&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret, i;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *is, *os;&lt;/p>
&lt;p>&lt;code> &lt;/code>OutputStream *ost;&lt;/p>
&lt;p>&lt;code> &lt;/code>InputStream *ist;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *no_packet;&lt;/p>
&lt;p>&lt;code> &lt;/code>int no_packet_count = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t timer_start;&lt;/p>
&lt;p>&lt;code> &lt;/code>int key;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(no_packet = av_mallocz(nb_input_files)))&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置编码参数,打开所有输出流的编码器,打开所有输入流的解码器,写入所有输出文件的文件头,于是准备好了&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = transcode_init(output_files, nb_output_files, input_files,nb_input_files);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>goto fail;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!using_stdin){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_INFO, &amp;quot;Press [q] to stop, [?] for help\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>timer_start = av_gettime();&lt;/p>
&lt;p>&lt;code> &lt;/code>//循环,直到收到系统信号才退出&lt;/p>
&lt;p>&lt;code> &lt;/code>for (; received_sigterm == 0;)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int file_index, ist_index;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket pkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t ipts_min;&lt;/p>
&lt;p>&lt;code> &lt;/code>double opts_min;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t cur_time = av_gettime();&lt;/p>
&lt;p>&lt;code> &lt;/code>ipts_min = INT64_MAX;&lt;/p>
&lt;p>&lt;code> &lt;/code>opts_min = 1e100;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* if 'q' pressed, exits */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!using_stdin)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//先查看用户按下了什么键,跟据键做出相应的反应&lt;/p>
&lt;p>&lt;code> &lt;/code>static int64_t last_time;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (received_nb_signals)&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* read_key() returns 0 on EOF */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (cur_time - last_time &amp;gt;= 100000 &amp;amp;&amp;amp; !run_as_daemon){&lt;/p>
&lt;p>&lt;code> &lt;/code>key = read_key();&lt;/p>
&lt;p>&lt;code> &lt;/code>last_time = cur_time;&lt;/p>
&lt;p>&lt;code> &lt;/code>}else{&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* select the stream that we must read now by looking at the&lt;/p>
&lt;p>&lt;code> &lt;/code>smallest output pts */&lt;/p>
&lt;p>&lt;code> &lt;/code>//下面这个循环的目的是找一个最小的输出pts(也就是离当前最近的)的输出流&lt;/p>
&lt;p>&lt;code> &lt;/code>file_index = -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_streams; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>OutputFile *of;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t ipts;&lt;/p>
&lt;p>&lt;code> &lt;/code>double opts;&lt;/p>
&lt;p>&lt;code> &lt;/code>ost = &amp;amp;output_streams[i];//循环每一个输出流&lt;/p>
&lt;p>&lt;code> &lt;/code>of = &amp;amp;output_files[ost-&amp;gt;file_index];//输出流对应的输出文件&lt;/p>
&lt;p>&lt;code> &lt;/code>os = output_files[ost-&amp;gt;file_index].ctx;//输出流对应的FormatContext&lt;/p>
&lt;p>&lt;code> &lt;/code>ist = &amp;amp;input_streams[ost-&amp;gt;source_index];//输出流对应的输入流&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;is_past_recording_time || //是否过了录制时间?(可能用户指定了一个录制时间段)&lt;/p>
&lt;p>&lt;code> &lt;/code>no_packet[ist-&amp;gt;file_index]|| //对应的输入流这个时间内没有数据?&lt;/p>
&lt;p>&lt;code> &lt;/code>(os-&amp;gt;pb &amp;amp;&amp;amp; avio_tell(os-&amp;gt;pb) &amp;gt;= of-&amp;gt;limit_filesize))//是否超出了录制范围(也是用户指定的)&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;//是的,符合上面某一条,那么再看下一个输出流吧&lt;/p>
&lt;p>&lt;code> &lt;/code>//判断当前输入流所在的文件是否可以使用(我也不很明白)&lt;/p>
&lt;p>&lt;code> &lt;/code>opts = ost-&amp;gt;st-&amp;gt;pts.val * av_q2d(ost-&amp;gt;st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>ipts = ist-&amp;gt;pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!input_files[ist-&amp;gt;file_index].eof_reached) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ipts &amp;lt; ipts_min){&lt;/p>
&lt;p>&lt;code> &lt;/code>//每找到一个pts更小的输入流就记录下来,这样循环完所有的输出流时就找到了&lt;/p>
&lt;p>&lt;code> &lt;/code>//pts最小的输入流,及输入文件的序号&lt;/p>
&lt;p>&lt;code> &lt;/code>ipts_min = ipts;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (input_sync)&lt;/p>
&lt;p>&lt;code> &lt;/code>file_index = ist-&amp;gt;file_index;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (opts &amp;lt; opts_min){&lt;/p>
&lt;p>&lt;code> &lt;/code>opts_min = opts;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!input_sync)&lt;/p>
&lt;p>&lt;code> &lt;/code>file_index = ist-&amp;gt;file_index;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//难道下面这句话的意思是:如果当前的输出流已接收的帧数,超出用户指定的输出最大帧数时,&lt;/p>
&lt;p>&lt;code> &lt;/code>//则当前输出流所属的输出文件对应的所有输出流,都算超过了录像时间?&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;frame_number &amp;gt;= ost-&amp;gt;max_frames){&lt;/p>
&lt;p>&lt;code> &lt;/code>int j;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (j = 0; j &amp;lt; of-&amp;gt;ctx-&amp;gt;nb_streams; j++)&lt;/p>
&lt;p>&lt;code> &lt;/code>output_streams[of-&amp;gt;ost_index + j].is_past_recording_time = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* if none, if is finished */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (file_index &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果没有找到合适的输入文件&lt;/p>
&lt;p>&lt;code> &lt;/code>if (no_packet_count){&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果是因为有的输入文件暂时得不到数据,则还不算是结束&lt;/p>
&lt;p>&lt;code> &lt;/code>no_packet_count = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>memset(no_packet, 0, nb_input_files);&lt;/p>
&lt;p>&lt;code> &lt;/code>usleep(10000);&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//全部转换完成了,跳出大循环&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//从找到的输入文件中读出一帧(可能是音频也可能是视频),并放到fifo队列中&lt;/p>
&lt;p>&lt;code> &lt;/code>is = input_files[file_index].ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = av_read_frame(is, &amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret == AVERROR(EAGAIN)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//此时发生了暂时没数据的情况&lt;/p>
&lt;p>&lt;code> &lt;/code>no_packet[file_index] = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>no_packet_count++;&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//下文判断是否有输入文件到最后了&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret &amp;lt; 0){&lt;/p>
&lt;p>&lt;code> &lt;/code>input_files[file_index].eof_reached = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (opt_shortest)&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>no_packet_count = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>memset(no_packet, 0, nb_input_files);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (do_pkt_dump){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_pkt_dump_log2(NULL, AV_LOG_DEBUG, &amp;amp;pkt, do_hex_dump,&lt;/p>
&lt;p>&lt;code> &lt;/code>is-&amp;gt;streams[pkt.stream_index]);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* the following test is needed in case new streams appear&lt;/p>
&lt;p>&lt;code> &lt;/code>dynamically in stream : we ignore them */&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果在输入文件中遇到一个忽然冒出的流,那么我们不鸟它&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.stream_index &amp;gt;= input_files[file_index].nb_streams)&lt;/p>
&lt;p>&lt;code> &lt;/code>goto discard_packet;&lt;/p>
&lt;p>&lt;code> &lt;/code>//取得当前获得的帧对应的输入流&lt;/p>
&lt;p>&lt;code> &lt;/code>ist_index = input_files[file_index].ist_index + pkt.stream_index;&lt;/p>
&lt;p>&lt;code> &lt;/code>ist = &amp;amp;input_streams[ist_index];&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ist-&amp;gt;discard)&lt;/p>
&lt;p>&lt;code> &lt;/code>goto discard_packet;&lt;/p>
&lt;p>&lt;code> &lt;/code>//重新鼓捣一下帧的时间戳&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.dts != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.dts += av_rescale_q(input_files[ist-&amp;gt;file_index].ts_offset,&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_TIME_BASE_Q, ist-&amp;gt;st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.pts != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.pts += av_rescale_q(input_files[ist-&amp;gt;file_index].ts_offset,&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_TIME_BASE_Q, ist-&amp;gt;st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.pts != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.pts *= ist-&amp;gt;ts_scale;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.dts != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.dts *= ist-&amp;gt;ts_scale;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.dts != AV_NOPTS_VALUE &amp;amp;&amp;amp; ist-&amp;gt;next_pts != AV_NOPTS_VALUE&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; (is-&amp;gt;iformat-&amp;gt;flags &amp;amp; AVFMT_TS_DISCONT))&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t pkt_dts = av_rescale_q(pkt.dts, ist-&amp;gt;st-&amp;gt;time_base,&lt;/p>
&lt;p>&lt;code> &lt;/code>AV_TIME_BASE_Q);&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t delta = pkt_dts - ist-&amp;gt;next_pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((delta &amp;lt; -1LL * dts_delta_threshold * AV_TIME_BASE&lt;/p>
&lt;p>&lt;code> &lt;/code>|| (delta &amp;gt; 1LL * dts_delta_threshold * AV_TIME_BASE&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; ist-&amp;gt;st-&amp;gt;codec-&amp;gt;codec_type&lt;/p>
&lt;p>&lt;code> &lt;/code>!= AVMEDIA_TYPE_SUBTITLE)&lt;/p>
&lt;p>&lt;code> &lt;/code>|| pkt_dts + 1 &amp;lt; ist-&amp;gt;pts) &amp;amp;&amp;amp; !copy_ts)&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>input_files[ist-&amp;gt;file_index].ts_offset -= delta;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log( NULL, AV_LOG_DEBUG,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;timestamp discontinuity %&amp;quot;PRId64&amp;quot;, new offset= %&amp;quot;PRId64&amp;quot;\n&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>delta, input_files[ist-&amp;gt;file_index].ts_offset);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.dts -= av_rescale_q(delta, AV_TIME_BASE_Q, ist-&amp;gt;st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pkt.pts != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.pts -= av_rescale_q(delta, AV_TIME_BASE_Q, ist-&amp;gt;st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//把这一帧转换并写入到输出文件中&lt;/p>
&lt;p>&lt;code> &lt;/code>if (output_packet(ist, output_streams, nb_output_streams, &amp;amp;pkt) &amp;lt; 0){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log(NULL, AV_LOG_ERROR,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Error while decoding stream #%d:%d\n&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>ist-&amp;gt;file_index, ist-&amp;gt;st-&amp;gt;index);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (exit_on_error)&lt;/p>
&lt;p>&lt;code> &lt;/code>exit_program(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>discard_packet:&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* dump report by using the output first video and audio streams */&lt;/p>
&lt;p>&lt;code> &lt;/code>print_report(output_files, output_streams, nb_output_streams, 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>timer_start, cur_time);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//文件处理完了,把缓冲中剩余的数据写到输出文件中&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_input_streams; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>ist = &amp;amp;input_streams[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ist-&amp;gt;decoding_needed){&lt;/p>
&lt;p>&lt;code> &lt;/code>output_packet(ist, output_streams, nb_output_streams, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>flush_encoders(output_streams, nb_output_streams);&lt;/p>
&lt;p>&lt;code> &lt;/code>term_exit();&lt;/p>
&lt;p>&lt;code> &lt;/code>//为输出文件写文件尾(有的不需要).&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_files; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>os = output_files[i].ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_write_trailer(os);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* dump report by using the first video and audio streams */&lt;/p>
&lt;p>&lt;code> &lt;/code>print_report(output_files, output_streams, nb_output_streams, 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>timer_start, av_gettime());&lt;/p>
&lt;p>&lt;code> &lt;/code>//关闭所有的编码器&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_streams; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>ost = &amp;amp;output_streams[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;encoding_needed){&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;ost-&amp;gt;st-&amp;gt;codec-&amp;gt;stats_in);&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(ost-&amp;gt;st-&amp;gt;codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>#if CONFIG_AVFILTER&lt;/p>
&lt;p>&lt;code> &lt;/code>avfilter_graph_free(&amp;amp;ost-&amp;gt;graph);&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//关闭所有的解码器&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_input_streams; i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>ist = &amp;amp;input_streams[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ist-&amp;gt;decoding_needed){&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(ist-&amp;gt;st-&amp;gt;codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* finished ! */&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>fail: av_freep(&amp;amp;bit_buffer);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;no_packet);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (output_streams) {&lt;/p>
&lt;p>&lt;code> &lt;/code>for (i = 0; i &amp;lt; nb_output_streams; i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>ost = &amp;amp;output_streams[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;stream_copy)&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;ost-&amp;gt;st-&amp;gt;codec-&amp;gt;extradata);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;logfile){&lt;/p>
&lt;p>&lt;code> &lt;/code>fclose(ost-&amp;gt;logfile);&lt;/p>
&lt;p>&lt;code> &lt;/code>ost-&amp;gt;logfile = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_fifo_free(ost-&amp;gt;fifo); /* works even if fifo is not&lt;/p>
&lt;p>&lt;code> &lt;/code>initialized but set to zero */&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;ost-&amp;gt;st-&amp;gt;codec-&amp;gt;subtitle_header);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(ost-&amp;gt;resample_frame.data[0]);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(ost-&amp;gt;forced_kf_pts);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ost-&amp;gt;video_resample)&lt;/p>
&lt;p>&lt;code> &lt;/code>sws_freeContext(ost-&amp;gt;img_resample_ctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>swr_free(&amp;amp;ost-&amp;gt;swr);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_dict_free(&amp;amp;ost-&amp;gt;opts);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return ret;&lt;/p>
&lt;p>}&lt;/p>
&lt;h1 id="第九章-ffmpeg相关工程">&lt;strong>第九章 ffmpeg相关工程&lt;/strong>&lt;/h1>
&lt;h2 id="91-ffdshow">&lt;strong>9.1 ffdshow&lt;/strong>&lt;/h2>
&lt;p>ffdshow是基于ffmpeg的解码器类库libavcodec的DirectShow Filter。广泛安装在PC上&lt;/p>
&lt;h3 id="ffdshow-源代码分析1--整体结构httpblogcsdnnetleixiaohua1020articledetails12013619">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12013619">&lt;strong>ffdshow 源代码分析1 ： 整体结构&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>ffdshow是一个非常强大的DirectShow解码器，封装了ffmpeg，libmpeg2等解码库。它也提供了丰富的加工处理选项，可以锐化画面，调节画面的亮度等等。不止是视频，FFDShow现在同样可以解码音频，AC3、MP3等音频格式都可支持。并且可以外挂winamp 的DSP插件，来改善听觉效果。一个词形容：强大。&lt;/p>
&lt;p>因为项目的要求，需要对ffdshow进行二次开发，正好有这个机会，分析研究一下ffdshow的源代码。&lt;/p>
&lt;p>ffdshow项目的资源可以从sourceforge下载。包括编译好的程序，以及原代码等，下载地址：&lt;a href="http://sourceforge.net/projects/ffdshow-tryout/">http://sourceforge.net/projects/ffdshow-tryout/&lt;/a>&lt;/p>
&lt;p>注意：sourceforge上有两个版本的ffdshow：ffdshow以及ffdshow-tryout。其中前一个版本很早之前已经停止开发了，因此我们需要选择后一个（ffdshow-tryout）。&lt;/p>
&lt;p>下载源代码的方法不再赘述，下面直接进入正题。源代码下载后，需要进行编译，推荐使用源代码根目录下的bat脚本一次性完成所有的资源编译。&lt;/p>
&lt;p>编译完成后我们就可以打开源代码根目录里的工程了。我自己的开发环境是VC2010，打开后工程如下图所示（解决方案的名字被我修改了= =）：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.143.jpeg" alt="">&lt;/p>
&lt;p>由图可见，ffdshow由一大堆工程组成，乍一看给人一种杂论无章的感觉，其实大部分工程我们不用去理会，我们重点研究最重要的工程就是那个名字叫“ffdshow”的工程。&lt;/p>
&lt;p>下面我介绍几个最重要的文件夹里包含的代码的功能：&lt;/p>
&lt;p>audiofilters：音频滤镜都在这里面（例如EQ，调节高低频等）&lt;/p>
&lt;p>baseclasses：微软自带directshow的sdk里面就有，主要是微软为了方便DirectShow开发而提供的一些基本的类&lt;/p>
&lt;p>codecs：支持的解码器都在这里（例如libavcodec，libmpeg2等）&lt;/p>
&lt;p>convert：色彩转换的一些功能（没太用过）&lt;/p>
&lt;p>decss：解除版权加密的一些功能（没太用过）&lt;/p>
&lt;p>dialog：音频视频滤镜的配置页面&lt;/p>
&lt;p>doc：文档，不是程序&lt;/p>
&lt;p>ffvfw：VFW相关（目前没太用过）&lt;/p>
&lt;p>Header Files：核心代码的头文件&lt;/p>
&lt;p>imgfilters：视频滤镜都在这里（显示QP/MV，加LOGO，显示视频信息等）&lt;/p>
&lt;p>Resource Files：资源文件&lt;/p>
&lt;p>settings：音频视频滤镜的配置信息&lt;/p>
&lt;p>Source Files：核心代码的源文件&lt;/p>
&lt;p>subtitles：字幕相关的功能&lt;/p>
&lt;p>以上用红色标出的，是我们二次开发中最有可能会涉及到的三个部分。掌握了这三个部分，就可以往ffdhow中添加自己写的滤镜（注意：这里说的是视频滤镜，音频的方法是一样的）&lt;/p>
&lt;p>黄色背景标出的部分，虽然我们可能不需要做出什么改变，但是为了了解ffdshow的架构，我们需要分析其中的代码。&lt;/p>
&lt;h3 id="ffdshow-源代码分析-2-位图覆盖滤镜对话框部分dialoghttpblogcsdnnetleixiaohua1020articledetails12981725">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12981725">&lt;strong>ffdshow 源代码分析 2： 位图覆盖滤镜（对话框部分Dialog）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>本文我们介绍ffdshow的滤镜功能。ffdshow支持很多种滤镜，可以支持多种视频和音频的后期效果。例如OSD滤镜支持在视频的左上角显示视频相关的信息。而可视化滤镜则支持显示视频每一帧的运动矢量以及量化参数。在这里我们介绍一种位图覆盖（Bitmap）滤镜（Filter）。&lt;/p>
&lt;p>效果&lt;/p>
&lt;p>编译完ffdshow之后，在“项目属性-&amp;gt;调试-&amp;gt;命令”里面将GraphEdit.exe所在位置设置为调试程序，例如在这里我设置了《终极解码》里面自带GraphEdit.exe，路径为“C:\Program Files\Final Codecs\Codecs\GraphEdit.exe”。这样就可以使用GraphEdit.exe调试ffdshow了。&lt;/p>
&lt;p>向GraphEdit.exe里面拖入一个文件“五月天 咸鱼.mp4”，结果如下图所示：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.144.jpeg" alt="">&lt;/p>
&lt;p>注：有的时候默认的视频解码器可能不是ffdshow，可能是CoreAVC等，可以先删除视频解码器然后添加ffdshow。&lt;/p>
&lt;p>点击绿色三角形按钮就可以开始播放视频。&lt;/p>
&lt;p>右键点击ffdshow组件，打开属性对话框之后，可以看见右边栏中有很多的滤镜。&lt;/p>
&lt;p>勾选“位图覆盖”滤镜，然后选择一张用于覆盖的图片（在这里我选择了一张bmp格式的专辑封面）。&lt;/p>
&lt;p>注：可以调整位图所在的水平位置，垂直位置，不透明度，并且可以修改位图叠加模式（在这里用混合）。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.145.jpeg" alt="">&lt;/p>
&lt;p>添加了该滤镜之后，播放窗口的显示内容为：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.146.jpeg" alt="">&lt;/p>
&lt;p>可见在右上角显示出了叠加的位图。&lt;/p>
&lt;p>源代码分析&lt;/p>
&lt;p>1.对话框部分&lt;/p>
&lt;p>与位图覆盖（Bitmap）滤镜的对话框有关的类位于dialog目录下的Cbitmap.cpp和Cbitmap.h文件中。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.147.jpeg" alt="">&lt;/p>
&lt;p>先来看看Cbitmap.h中类的声明：&lt;/p>
&lt;p>需要注意的是，里面类的名字居然叫TbitmapPage，而没有和头文件名字一致。= =&lt;/p>
&lt;p>#ifndef _CBITMAPPAGE_H_&lt;/p>
&lt;p>#define _CBITMAPPAGE_H_&lt;/p>
&lt;p>#include &amp;quot;TconfPageDecVideo.h&amp;quot;&lt;/p>
&lt;p>//Bitmap配置页面&lt;/p>
&lt;p>class TbitmapPage : public TconfPageDecVideo&lt;/p>
&lt;p>{&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>void pos2dlg(void), opacity2dlg(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置文件路径&lt;/p>
&lt;p>&lt;code> &lt;/code>void onFlnm(void);&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual INT_PTR msgProc(UINT uMsg, WPARAM wParam, LPARAM lParam);&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>//构造函数&lt;/p>
&lt;p>&lt;code> &lt;/code>TbitmapPage(TffdshowPageDec *Iparent, const TfilterIDFF *idff);&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void init(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>//配置数据传入到对话框界面&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void cfg2dlg(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void translate(void);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>再看看Cbitmap.cpp文件吧。关键的代码都已经加上了注释。&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Copyright (c) 2004-2006 Milan Cutka&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is free software; you can redistribute it and/or modify&lt;/p>
&lt;p>&lt;code> &lt;/code>* it under the terms of the GNU General Public License as published by&lt;/p>
&lt;p>&lt;code> &lt;/code>* the Free Software Foundation; either version 2 of the License, or&lt;/p>
&lt;p>&lt;code> &lt;/code>* (at your option) any later version.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is distributed in the hope that it will be useful,&lt;/p>
&lt;p>&lt;code> &lt;/code>* but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p>
&lt;p>&lt;code> &lt;/code>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;/p>
&lt;p>&lt;code> &lt;/code>* GNU General Public License for more details.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* You should have received a copy of the GNU General Public License&lt;/p>
&lt;p>&lt;code> &lt;/code>* along with this program; if not, write to the Free Software&lt;/p>
&lt;p>&lt;code> &lt;/code>* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>//Bitmap配置页面&lt;/p>
&lt;p>#include &amp;quot;stdafx.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;TsubtitlesSettings.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;TbitmapSettings.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;Cbitmap.h&amp;quot;&lt;/p>
&lt;p>//初始化&lt;/p>
&lt;p>void TbitmapPage::init(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置滑动条范围&lt;/p>
&lt;p>&lt;code> &lt;/code>edLimitText(IDC_ED_BITMAP_FLNM, MAX_PATH);&lt;/p>
&lt;p>&lt;code> &lt;/code>tbrSetRange(IDC_TBR_BITMAP_POSX, 0, 100, 10);&lt;/p>
&lt;p>&lt;code> &lt;/code>tbrSetRange(IDC_TBR_BITMAP_POSY, 0, 100, 10);&lt;/p>
&lt;p>&lt;code> &lt;/code>tbrSetRange(IDC_TBR_BITMAP_OPACITY, 0, 256);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//配置数据传入到对话框界面&lt;/p>
&lt;p>void TbitmapPage::cfg2dlg(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//各种设置&lt;/p>
&lt;p>&lt;code> &lt;/code>//EditControl设置&lt;/p>
&lt;p>&lt;code> &lt;/code>setDlgItemText(m_hwnd, IDC_ED_BITMAP_FLNM, cfgGetStr(IDFF_bitmapFlnm));&lt;/p>
&lt;p>&lt;code> &lt;/code>pos2dlg();&lt;/p>
&lt;p>&lt;code> &lt;/code>cbxSetCurSel(IDC_CBX_BITMAP_ALIGN, cfgGet(IDFF_bitmapAlign));&lt;/p>
&lt;p>&lt;code> &lt;/code>cbxSetCurSel(IDC_CBX_BITMAP_MODE, cfgGet(IDFF_bitmapMode));&lt;/p>
&lt;p>&lt;code> &lt;/code>opacity2dlg();&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//Bitmap位置信息&lt;/p>
&lt;p>void TbitmapPage::pos2dlg(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t s[260];&lt;/p>
&lt;p>&lt;code> &lt;/code>int x;&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取&lt;/p>
&lt;p>&lt;code> &lt;/code>x = cfgGet(IDFF_bitmapPosx);&lt;/p>
&lt;p>&lt;code> &lt;/code>TsubtitlesSettings::getPosHoriz(x, s, this, IDC_LBL_BITMAP_POSX, countof(s));&lt;/p>
&lt;p>&lt;code> &lt;/code>setDlgItemText(m_hwnd, IDC_LBL_BITMAP_POSX, s);&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置&lt;/p>
&lt;p>&lt;code> &lt;/code>tbrSet(IDC_TBR_BITMAP_POSX, x);&lt;/p>
&lt;p>&lt;code> &lt;/code>x = cfgGet(IDFF_bitmapPosy);&lt;/p>
&lt;p>&lt;code> &lt;/code>TsubtitlesSettings::getPosVert(x, s, this, IDC_LBL_BITMAP_POSY, countof(s));&lt;/p>
&lt;p>&lt;code> &lt;/code>setDlgItemText(m_hwnd, IDC_LBL_BITMAP_POSY, s);&lt;/p>
&lt;p>&lt;code> &lt;/code>tbrSet(IDC_TBR_BITMAP_POSY, x);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>void TbitmapPage::opacity2dlg(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int o = cfgGet(IDFF_bitmapStrength);&lt;/p>
&lt;p>&lt;code> &lt;/code>tbrSet(IDC_TBR_BITMAP_OPACITY, o);&lt;/p>
&lt;p>&lt;code> &lt;/code>setText(IDC_LBL_BITMAP_OPACITY, _l(&amp;quot;%s %i%%&amp;quot;), _(IDC_LBL_BITMAP_OPACITY), 100 * o / 256);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>INT_PTR TbitmapPage::msgProc(UINT uMsg, WPARAM wParam, LPARAM lParam)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (uMsg) {&lt;/p>
&lt;p>&lt;code> &lt;/code>case WM_COMMAND:&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (LOWORD(wParam)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>case IDC_ED_BITMAP_FLNM:&lt;/p>
&lt;p>&lt;code> &lt;/code>if (HIWORD(wParam) == EN_CHANGE &amp;amp;&amp;amp; !isSetWindowText) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t flnm[MAX_PATH];&lt;/p>
&lt;p>&lt;code> &lt;/code>GetDlgItemText(m_hwnd, IDC_ED_BITMAP_FLNM, flnm, MAX_PATH);&lt;/p>
&lt;p>&lt;code> &lt;/code>cfgSet(IDFF_bitmapFlnm, flnm);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return TconfPageDecVideo::msgProc(uMsg, wParam, lParam);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//设置文件路径&lt;/p>
&lt;p>void TbitmapPage::onFlnm(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t flnm[MAX_PATH];&lt;/p>
&lt;p>&lt;code> &lt;/code>cfgGet(IDFF_bitmapFlnm, flnm, MAX_PATH);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (dlgGetFile(false, m_hwnd, _(-IDD_BITMAP, _l(&amp;quot;Load image file&amp;quot;)), _l(&amp;quot;All supported (*.jpg,*.bmp,*.gif,*.png)\0*.bmp;*.jpg;*.jpeg;*.gif;*.png\0Windows Bitmap (*.bmp)\0*.bmp\0JPEG (*.jpg)\0*.jpg\0Compuserve Graphics Interchange (*.gif)\0*.gif\0Portable Network Graphics (*.png)\0*.png&amp;quot;), _l(&amp;quot;bmp&amp;quot;), flnm, _l(&amp;quot;.&amp;quot;), 0)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>setDlgItemText(m_hwnd, IDC_ED_BITMAP_FLNM, flnm);&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置&lt;/p>
&lt;p>&lt;code> &lt;/code>cfgSet(IDFF_bitmapFlnm, flnm);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>void TbitmapPage::translate(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>TconfPageBase::translate();&lt;/p>
&lt;p>&lt;code> &lt;/code>cbxTranslate(IDC_CBX_BITMAP_ALIGN, TsubtitlesSettings::alignments);&lt;/p>
&lt;p>&lt;code> &lt;/code>cbxTranslate(IDC_CBX_BITMAP_MODE, TbitmapSettings::modes);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//构造函数&lt;/p>
&lt;p>TbitmapPage::TbitmapPage(TffdshowPageDec *Iparent, const TfilterIDFF *idff): TconfPageDecVideo(Iparent, idff)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//各种绑定&lt;/p>
&lt;p>&lt;code> &lt;/code>resInter = IDC_CHB_BITMAP;&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TbindTrackbar&lt;TbitmapPage> htbr[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>IDC_TBR_BITMAP_POSX, IDFF_bitmapPosx, &amp;amp;TbitmapPage::pos2dlg,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDC_TBR_BITMAP_POSY, IDFF_bitmapPosy, &amp;amp;TbitmapPage::pos2dlg,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDC_TBR_BITMAP_OPACITY, IDFF_bitmapStrength, &amp;amp;TbitmapPage::opacity2dlg,&lt;/p>
&lt;p>&lt;code> &lt;/code>0, 0, NULL&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>bindHtracks(htbr);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TbindCombobox&lt;TbitmapPage> cbx[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>IDC_CBX_BITMAP_ALIGN, IDFF_bitmapAlign, BINDCBX_SEL, NULL,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDC_CBX_BITMAP_MODE, IDFF_bitmapMode, BINDCBX_SEL, NULL,&lt;/p>
&lt;p>&lt;code> &lt;/code>0&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>bindComboboxes(cbx);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TbindButton&lt;TbitmapPage> bt[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>IDC_BT_BITMAP_FLNM, &amp;amp;TbitmapPage::onFlnm,&lt;/p>
&lt;p>&lt;code> &lt;/code>0, NULL&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>bindButtons(bt);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>看ffdshow源代码的时候，开始会比较费劲。为什么？因为它使用了大量自己写的API函数，以及自己定义的结构体。这些API函数的种类繁多，如果一个一个都看完，估计就精疲力竭了。经过一段时间的学习之后，我发现最方便的方法还是根据函数名字推测其用法。因此我就不深入剖析ffdshow的API函数了。&lt;/p>
&lt;p>以上源代码中包含以下API（大致按出现先后次序，可能没有例举全，在这里只是举例子）：&lt;/p>
&lt;p>edLimitText();//限制输入字符串长度&lt;/p>
&lt;p>tbrSetRange();//设置滑动条范围&lt;/p>
&lt;p>setDlgItemText();//设置组件名称&lt;/p>
&lt;p>cbxSetCurSel();//设置下拉框当前选项&lt;/p>
&lt;p>cfgGet();//从注册表中读取变量的值&lt;/p>
&lt;p>tbrSet();//设置滑动条的值&lt;/p>
&lt;p>bindHtracks();//绑定注册表变量和滑动条&lt;/p>
&lt;p>bindComboboxes();//绑定注册表变量和下拉框&lt;/p>
&lt;p>bindButtons();//绑定函数和按钮&lt;/p>
&lt;p>从以上函数大致可以看出tbr***()基本上都是操作滑动条的，cbx***()基本上都是操作下拉框的，函数基本上可以从名称上理解其的意思。bind***()就是绑定注册表变量和控件的。注意ffdshow里面有注册表变量这么一个概念。这些变量的值存在系统的注册表里面，不会因为程序结束运行而消失。就目前我的观察来看，绝大部分注册表变量存的是一个整数值。这些注册表变量都以IDFF_xxx的名称预编译定义在ffdshow_constants.h头文件中。与MFC控件可以直接与CString，int等变量绑定不同，ffdshow控件只可以和注册表变量绑定。即每次运行的时候都从注册表加载变量的值到界面上。存储的时候把界面上的值存储到注册表中。&lt;/p>
&lt;p>注：注册表变量如下所示（截取了一小段）&lt;/p>
&lt;p>#define IDFF_filterBitmap 1650&lt;/p>
&lt;p>#define IDFF_isBitmap 1651&lt;/p>
&lt;p>#define IDFF_showBitmap 1652&lt;/p>
&lt;p>#define IDFF_orderBitmap 1653&lt;/p>
&lt;p>#define IDFF_fullBitmap 1654&lt;/p>
&lt;p>#define IDFF_bitmapFlnm 1655&lt;/p>
&lt;p>#define IDFF_bitmapPosx 1656&lt;/p>
&lt;p>#define IDFF_bitmapPosy 1657&lt;/p>
&lt;p>#define IDFF_bitmapPosmode 1658&lt;/p>
&lt;p>#define IDFF_bitmapAlign 1659&lt;/p>
&lt;p>#define IDFF_bitmapMode 1660&lt;/p>
&lt;p>#define IDFF_bitmapStrength 1661&lt;/p>
&lt;p>此外需要注意的是，ffdshow尽管包含了图形化的属性界面，却没有使用MFC类库，因而MFC的很多函数都不能使用，对此我还不甚了解为什么要这样，以后有机会要探究探究。&lt;/p>
&lt;h3 id="ffdshow-源代码分析-3-位图覆盖滤镜设置部分settingshttpblogcsdnnetleixiaohua1020articledetails13004051">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13004051">&lt;strong>ffdshow 源代码分析 3： 位图覆盖滤镜（设置部分Settings）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>在这里再介绍一下设置部分（Settings），此外还有一个滤镜部分（Filter）。这三个部分就可以组成一个ffdshow的滤镜功能了。&lt;/p>
&lt;p>设置部分（Settings）&lt;/p>
&lt;p>在ffdshow中滤镜的设置部分（Settings）主要用于存储滤镜运行过程中需要用到的各种变量。一般情况下通过读取注册表变量并赋值给该类当中的变量从而达到操作相应滤镜的功能。&lt;/p>
&lt;p>与位图覆盖（Bitmap）滤镜的设置有关的类位于settings-&amp;gt;filters-&amp;gt;video目录下（隐藏的很深啊）的TbitmapSettings.cpp和TbitmapSettings.h文件中。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.148.jpeg" alt="">&lt;/p>
&lt;p>先来看看TbitmapSettings.h&lt;/p>
&lt;p>该类的名字叫TbitmapSettings，从类的定义我们可以看出，&lt;/p>
&lt;p>flnm[]存储了打开的位图的路径&lt;/p>
&lt;p>posx，posy存储了位图在屏幕上显示的位置&lt;/p>
&lt;p>mode存储了显示的方式&lt;/p>
&lt;p>等等，所有跟该滤镜（Filter）相关的数据都存储在该类之中。&lt;/p>
&lt;p>该类包含一个TfilterIDFF类型的结构体idffs，用于存储该滤镜的一些属性信息（名称，ID，属性对话框ID等等）&lt;/p>
&lt;p>此外，有两个函数至关重要。createFilters()用于创建滤镜（Filter）。 createPages()用于创建滤镜的配置对话框（Dialog）。&lt;/p>
&lt;p>#ifndef _TBITMAPSETTINGS_H_&lt;/p>
&lt;p>#define _TBITMAPSETTINGS_H_&lt;/p>
&lt;p>//各个Filter预设值&lt;/p>
&lt;p>#include &amp;quot;TfilterSettings.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;Tfont.h&amp;quot;&lt;/p>
&lt;p>//Bitmap的配置信息&lt;/p>
&lt;p>struct TbitmapSettings : TfilterSettingsVideo {&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TfilterIDFF idffs;&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual const int *getResets(unsigned int pageId);&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TbitmapSettings(TintStrColl *Icoll = NULL, TfilterIDFFs *filters = NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>//Bitmap文件路径&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t flnm[MAX_PATH];&lt;/p>
&lt;p>&lt;code> &lt;/code>//x,y坐标，以及坐标的模式&lt;/p>
&lt;p>&lt;code> &lt;/code>int posx, posy, posmode;&lt;/p>
&lt;p>&lt;code> &lt;/code>int align;&lt;/p>
&lt;p>&lt;code> &lt;/code>//叠加方式&lt;/p>
&lt;p>&lt;code> &lt;/code>enum {&lt;/p>
&lt;p>&lt;code> &lt;/code>MODE_BLEND = 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>MODE_DARKEN = 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>MODE_LIGHTEN = 2,&lt;/p>
&lt;p>&lt;code> &lt;/code>MODE_ADD = 3,&lt;/p>
&lt;p>&lt;code> &lt;/code>MODE_SOFTLIGHT = 4,&lt;/p>
&lt;p>&lt;code> &lt;/code>MODE_EXCLUSION = 5&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>int mode;&lt;/p>
&lt;p>&lt;code> &lt;/code>static const char_t *modes[];&lt;/p>
&lt;p>&lt;code> &lt;/code>int strength;&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建Filter&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void createFilters(size_t filtersorder, Tfilters *filters, TfilterQueue &amp;amp;queue) const;&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建属性页面&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void createPages(TffdshowPageDec *parent) const;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool getTip(unsigned int pageId, char_t *buf, size_t buflen);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>再来看看TbitmapSettings.cpp&lt;/p>
&lt;p>该类包含了TbitmapSettings类中函数方法的具体实现。首先看一下构造函数TbitmapSettings()。从构造函数中可以看出，绑定了类中的变量和注册表变量，使它们形成一一对应的关系。其他的函数就不再细说了，比较简单，理解起来比较容易。&lt;/p>
&lt;p>#include &amp;quot;stdafx.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;TbitmapSettings.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;TimgFilterBitmap.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;Cbitmap.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;TffdshowPageDec.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;TsubtitlesSettings.h&amp;quot;&lt;/p>
&lt;p>//几种叠加方式&lt;/p>
&lt;p>const char_t* TbitmapSettings::modes[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;blend&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;darken&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;lighten&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;add&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;softlight&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;exclusion&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL&lt;/p>
&lt;p>};&lt;/p>
&lt;p>//Filter属性&lt;/p>
&lt;p>const TfilterIDFF TbitmapSettings::idffs = {&lt;/p>
&lt;p>&lt;code> &lt;/code>/*name*/ _l(&amp;quot;Bitmap overlay&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>/*id*/ IDFF_filterBitmap,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*is*/ IDFF_isBitmap,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*order*/ IDFF_orderBitmap,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*show*/ IDFF_showBitmap,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*full*/ IDFF_fullBitmap,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*half*/ 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*dlgId*/ IDD_BITMAP,&lt;/p>
&lt;p>};&lt;/p>
&lt;p>//构造函数&lt;/p>
&lt;p>TbitmapSettings::TbitmapSettings(TintStrColl *Icoll, TfilterIDFFs *filters): TfilterSettingsVideo(sizeof(*this), Icoll, filters, &amp;amp;idffs)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>half = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>memset(flnm, 0, sizeof(flnm));&lt;/p>
&lt;p>&lt;code> &lt;/code>//绑定变量&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TintOptionT&lt;TbitmapSettings> iopts[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_isBitmap , &amp;amp;TbitmapSettings::is , 0, 0, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;isBitmap&amp;quot;), 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_showBitmap , &amp;amp;TbitmapSettings::show , 0, 0, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;showBitmap&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_orderBitmap , &amp;amp;TbitmapSettings::order , 1, 1, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;orderBitmap&amp;quot;), 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_fullBitmap , &amp;amp;TbitmapSettings::full , 0, 0, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;fullBitmap&amp;quot;), 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapPosx , &amp;amp;TbitmapSettings::posx , -4096, 4096, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapPosX&amp;quot;), 50,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapPosy , &amp;amp;TbitmapSettings::posy , -4096, 4096, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapPosY&amp;quot;), 50,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapPosmode , &amp;amp;TbitmapSettings::posmode , 0, 1, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapPosMode&amp;quot;), 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapAlign , &amp;amp;TbitmapSettings::align , 0, 3, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapAlign&amp;quot;), ALIGN_CENTER,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapMode , &amp;amp;TbitmapSettings::mode , 0, 5, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapMode&amp;quot;), 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapStrength , &amp;amp;TbitmapSettings::strength , 0, 256, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapStrength&amp;quot;), 128,&lt;/p>
&lt;p>&lt;code> &lt;/code>0&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>addOptions(iopts);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TstrOption sopts[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapFlnm , (TstrVal)&amp;amp;TbitmapSettings::flnm , MAX_PATH, 0, _l(&amp;quot;&amp;quot;), 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>_l(&amp;quot;bitmapFlnm&amp;quot;), _l(&amp;quot;&amp;quot;),&lt;/p>
&lt;p>&lt;code> &lt;/code>0&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>addOptions(sopts);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TcreateParamList1 listMode(modes);&lt;/p>
&lt;p>&lt;code> &lt;/code>setParamList(IDFF_bitmapMode, &amp;amp;listMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const TcreateParamList1 listAlign(TsubtitlesSettings::alignments);&lt;/p>
&lt;p>&lt;code> &lt;/code>setParamList(IDFF_bitmapAlign, &amp;amp;listAlign);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//创建Filter&lt;/p>
&lt;p>void TbitmapSettings::createFilters(size_t filtersorder, Tfilters *filters, TfilterQueue &amp;amp;queue) const&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>idffOnChange(idffs, filters, queue.temporary);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (is &amp;amp;&amp;amp; show) {&lt;/p>
&lt;p>&lt;code> &lt;/code>queueFilter&lt;TimgFilterBitmap>(filtersorder, filters, queue);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>//创建属性页面&lt;/p>
&lt;p>void TbitmapSettings::createPages(TffdshowPageDec *parent) const&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>parent-&amp;gt;addFilterPage&lt;TbitmapPage>(&amp;amp;idffs);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>const int* TbitmapSettings::getResets(unsigned int pageId)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>static const int idResets[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>IDFF_bitmapPosx, IDFF_bitmapPosy, IDFF_bitmapPosmode, IDFF_bitmapAlign, IDFF_bitmapMode, IDFF_bitmapStrength,&lt;/p>
&lt;p>&lt;code> &lt;/code>0&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>return idResets;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>bool TbitmapSettings::getTip(unsigned int pageId, char_t *tipS, size_t len)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (flnm[0]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>tsnprintf_s(tipS, len, _TRUNCATE, _l(&amp;quot;%s %s&amp;quot;), modes[mode], flnm);&lt;/p>
&lt;p>&lt;code> &lt;/code>tipS[len - 1] = '\0';&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>tipS[0] = '\0';&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>}&lt;/p>
&lt;h3 id="ffdshow-源代码分析-4-位图覆盖滤镜滤镜部分filterhttpblogcsdnnetleixiaohua1020articledetails13006213">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13006213">&lt;strong>ffdshow 源代码分析 4： 位图覆盖滤镜（滤镜部分Filter）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>滤镜部分（Filter）&lt;/p>
&lt;p>ffdshow的滤镜的滤镜部分（怎么感觉名字有点重复 = =，算了先这么叫吧）的功能主要用于完成具体的图像处理功能。具体到位图覆盖滤镜的话，就是用于把图片覆盖到视频上面，他是ffdshow滤镜的核心。&lt;/p>
&lt;p>与位图覆盖（Bitmap）滤镜的滤镜处理有关的类位于imgFilters目录下的TimgFilterBitmap.h和TimgFilterBitmap.cpp文件中。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.149.jpeg" alt="">&lt;/p>
&lt;p>先来看看TimgFilterBitmap.h&lt;/p>
&lt;p>这里要注意一下，该类的名字叫TimgFilterBitmap。它的声明方式确实比较奇怪：DECLARE_FILTER(TimgFilterBitmap, public, TimgFilter)&lt;/p>
&lt;p>可以看出DECLARE_FILTER是一个宏，具体这个宏的内部代码就先不查看了，否则会感觉很混乱，暂且留下一个小小的谜团。在这里只要知道这是声明了一个滤镜类就可以了。&lt;/p>
&lt;p>其实TimgFilterBitmap的核心函数不多，就一个，那就是process()，具体的处理功能都是在这个函数里面实现的。&lt;/p>
&lt;p>#ifndef _TIMGFILTERBITMAP_H_&lt;/p>
&lt;p>#define _TIMGFILTERBITMAP_H_&lt;/p>
&lt;p>//叠加一张位图&lt;/p>
&lt;p>#include &amp;quot;TimgFilter.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;Tfont.h&amp;quot;&lt;/p>
&lt;p>struct TffPict;&lt;/p>
&lt;p>struct TbitmapSettings;&lt;/p>
&lt;p>//特别的声明方式 = =&lt;/p>
&lt;p>DECLARE_FILTER(TimgFilterBitmap, public, TimgFilter)&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>//图像&lt;/p>
&lt;p>TffPict *bitmap;&lt;/p>
&lt;p>//内存&lt;/p>
&lt;p>Tbuffer bitmapbuf;&lt;/p>
&lt;p>char_t oldflnm[MAX_PATH];&lt;/p>
&lt;p>typedef void (*Tblendplane)(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>//注意 这个类有一个实例，名字叫w&lt;/p>
&lt;p>class TrenderedSubtitleLineBitmap : public TrenderedSubtitleWordBase&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TrenderedSubtitleLineBitmap(void): TrenderedSubtitleWordBase(false) {}&lt;/p>
&lt;p>&lt;code> &lt;/code>TffPict *pict;&lt;/p>
&lt;p>&lt;code> &lt;/code>const TbitmapSettings *cfg;&lt;/p>
&lt;p>&lt;code> &lt;/code>//叠加&lt;/p>
&lt;p>&lt;code> &lt;/code>Tblendplane blend;&lt;/p>
&lt;p>&lt;code> &lt;/code>//打印&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void print(int startx, int starty /* not used */, unsigned int dx[3], int dy1[3], unsigned char *dstLn[3], const stride_t stride[3], const unsigned char *bmp[3], const unsigned char *msk[3], REFERENCE_TIME rtStart = REFTIME_INVALID) const;&lt;/p>
&lt;p>} w;&lt;/p>
&lt;p>TrenderedSubtitleLine l;&lt;/p>
&lt;p>//是TrenderedSubtitleLine的一个vector&lt;/p>
&lt;p>TrenderedSubtitleLines ls;&lt;/p>
&lt;p>int oldmode;&lt;/p>
&lt;p>//几种叠加方式&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static void blend(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static void add(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static void darken(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static void lighten(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static void softlight(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static void exclusion(const TcspInfo &amp;amp;cspInfo, const unsigned int dx[3], const unsigned int dy[3], unsigned char *dst[3], const stride_t dststride[3], const unsigned char *src[3], const stride_t srcstride[3], int strength, int invstrength);&lt;/p>
&lt;p>//获取叠加方式&lt;/p>
&lt;p>template&amp;lt;class _mm&amp;gt; static Tblendplane getBlend(int mode);&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>virtual bool is(const TffPictBase &amp;amp;pict, const TfilterSettingsVideo *cfg);&lt;/p>
&lt;p>virtual uint64_t getSupportedInputColorspaces(const TfilterSettingsVideo *cfg) const&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return FF_CSPS_MASK_YUV_PLANAR;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>TimgFilterBitmap(IffdshowBase *Ideci, Tfilters *Iparent);&lt;/p>
&lt;p>virtual ~TimgFilterBitmap();&lt;/p>
&lt;p>//核心函数（Filter配置信息队列，图像，配置信息）&lt;/p>
&lt;p>virtual HRESULT process(TfilterQueue::iterator it, TffPict &amp;amp;pict, const TfilterSettingsVideo *cfg0);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>再来看看TimgFilterBitmap.cpp&lt;/p>
&lt;p>这个文件本身代码量是比较大的，只是其他部分我都还没有仔细分析，确实没那没多时间。。。在这里仅简要分析一下最核心的函数process()。正是这个函数真正实现了滤镜的功能。在这个位图叠加滤镜中，process()实现了位图在视频上面的叠加功能。&lt;/p>
&lt;p>//核心函数（Filter配置信息队列，图像，配置信息）&lt;/p>
&lt;p>HRESULT TimgFilterBitmap::process(TfilterQueue::iterator it, TffPict &amp;amp;pict, const TfilterSettingsVideo *cfg0)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//都有这一句= =&lt;/p>
&lt;p>&lt;code> &lt;/code>if (is(pict, cfg0)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//Bitmap的配置信息&lt;/p>
&lt;p>&lt;code> &lt;/code>const TbitmapSettings *cfg = (const TbitmapSettings*)cfg0;&lt;/p>
&lt;p>&lt;code> &lt;/code>init(pict, cfg-&amp;gt;full, cfg-&amp;gt;half);&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned char *dst[4];&lt;/p>
&lt;p>&lt;code> &lt;/code>bool cspChanged = getCurNext(FF_CSPS_MASK_YUV_PLANAR, pict, cfg-&amp;gt;full, COPYMODE_DEF, dst);&lt;/p>
&lt;p>&lt;code> &lt;/code>//处理&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bitmap || cspChanged || stricmp(oldflnm, cfg-&amp;gt;flnm) != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>ff_strncpy(oldflnm, cfg-&amp;gt;flnm, countof(oldflnm));&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bitmap) {&lt;/p>
&lt;p>&lt;code> &lt;/code>delete bitmap;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//新建一张图&lt;/p>
&lt;p>&lt;code> &lt;/code>//通过cfg-&amp;gt;flnm路径&lt;/p>
&lt;p>&lt;code> &lt;/code>//载入bitmapbuf&lt;/p>
&lt;p>&lt;code> &lt;/code>bitmap = new TffPict(csp2, cfg-&amp;gt;flnm, bitmapbuf, deci);&lt;/p>
&lt;p>&lt;code> &lt;/code>//3个颜色分量？&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; 3; i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>w.dx[i] = bitmap-&amp;gt;rectFull.dx &amp;gt;&amp;gt; bitmap-&amp;gt;cspInfo.shiftX[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>w.dy[i] = bitmap-&amp;gt;rectFull.dy &amp;gt;&amp;gt; bitmap-&amp;gt;cspInfo.shiftY[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>w.bmp[i] = bitmap-&amp;gt;data[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>w.bmpmskstride[i] = bitmap-&amp;gt;stride[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>w.dxChar = w.dx[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>w.dyChar = w.dy[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bitmap-&amp;gt;rectFull.dx != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (oldmode != cfg-&amp;gt;mode)&lt;/p>
&lt;p>&lt;code> &lt;/code>if (Tconfig::cpu_flags &amp;amp; FF_CPU_SSE2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取叠加方式（SSE2）&lt;/p>
&lt;p>&lt;code> &lt;/code>//在cfg的mode里&lt;/p>
&lt;p>&lt;code> &lt;/code>w.blend = getBlend&lt;Tsse2>(oldmode = cfg-&amp;gt;mode);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取叠加方式（MMX）&lt;/p>
&lt;p>&lt;code> &lt;/code>w.blend = getBlend&lt;Tmmx>(oldmode = cfg-&amp;gt;mode);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//输出到屏幕上的设置&lt;/p>
&lt;p>&lt;code> &lt;/code>TprintPrefs prefs(deci, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>//各种参数&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.dx = dx2[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.dy = dy2[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.xpos = cfg-&amp;gt;posx;&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.ypos = cfg-&amp;gt;posy;&lt;/p>
&lt;p>&lt;code> &lt;/code>//模式不同的话&lt;/p>
&lt;p>&lt;code> &lt;/code>if (cfg-&amp;gt;posmode == 1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.xpos *= -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.ypos *= -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.align = cfg-&amp;gt;align;&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.linespacing = 100;&lt;/p>
&lt;p>&lt;code> &lt;/code>prefs.csp = pict.csp;&lt;/p>
&lt;p>&lt;code> &lt;/code>w.pict = &amp;amp;pict;&lt;/p>
&lt;p>&lt;code> &lt;/code>w.cfg = cfg;&lt;/p>
&lt;p>&lt;code> &lt;/code>//打印，需要用到TprintPrefs&lt;/p>
&lt;p>&lt;code> &lt;/code>ls.print(prefs, dst, stride2);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//最后都是这一句？&lt;/p>
&lt;p>&lt;code> &lt;/code>return parent-&amp;gt;processSample(++it, pict);&lt;/p>
&lt;p>}&lt;/p>
&lt;h3 id="ffdshow-源代码分析-5-位图覆盖滤镜总结httpblogcsdnnetleixiaohua1020articledetails13660583">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13660583">&lt;strong>ffdshow 源代码分析 5： 位图覆盖滤镜（总结）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>用一张图总结他们之间的关系：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.150.jpeg" alt="">&lt;/p>
&lt;p>如图中所示，设置（Settings）部分是直接和系统上层关联的，它包含两个接口函数：createPages()和createFilters()。分别用于创建对话框（Dialog）和滤镜（Filter）。其中在TbitmapPage中对话框直接和注册表变量关联。而在TbitmapSettings中注册表变量和系统中的变量关联。TimgFilterBitmap最终读取TbitmapSettings中的变量完成相应的操作。&lt;/p>
&lt;p>目前来开TimgFilterBitmap是不会直接读取TbitmapPage类中的值的。&lt;/p>
&lt;h3 id="ffdshow-源代码分析-6-对解码器的dll的封装libavcodechttpblogcsdnnetleixiaohua1020articledetails15493329">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493329">&lt;strong>ffdshow 源代码分析 6： 对解码器的dll的封装（libavcodec）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>ffdshow封装了多个视音频解码器，比如libmpeg2，libavcodec，xvid等等。其中最重要的是libavcodec，这个是ffmpeg提供的解码器，在ffdshow中起到了“挑大梁”的作用。本文分析ffdshow对解码器的封装方式，就以libavcodec为例。&lt;/p>
&lt;p>在ffdshow中，libavcodec的被封装在ffmpeg.dll文件中，通过加载该dll中的函数，就可以使用libavcodec的各种方法。&lt;/p>
&lt;p>Ffmpeg对libavcodec的封装类的定义位于codecs-&amp;gt;libavcodec-&amp;gt;Tlibavcodec.h。实现则位于codecs-&amp;gt;libavcodec-&amp;gt;Tlibavcodec.cpp。&lt;/p>
&lt;p>先来看一看Tlibavcodec.h：&lt;/p>
&lt;p>#ifndef _TLIBAVCODEC_H_&lt;/p>
&lt;p>#define _TLIBAVCODEC_H_&lt;/p>
&lt;p>//将FFmpeg的Dll中的方法封装到一个类中，以供使用&lt;/p>
&lt;p>#include &amp;quot;../codecs/ffcodecs.h&amp;quot;&lt;/p>
&lt;p>#include &amp;lt;dxva.h&amp;gt;&lt;/p>
&lt;p>#include &amp;quot;TpostprocSettings.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;ffImgfmt.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libavfilter/vf_yadif.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libavfilter/gradfun.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libswscale/swscale.h&amp;quot;&lt;/p>
&lt;p>struct AVCodecContext;&lt;/p>
&lt;p>struct AVCodec;&lt;/p>
&lt;p>struct AVFrame;&lt;/p>
&lt;p>struct AVPacket;&lt;/p>
&lt;p>struct AVCodecParserContext;&lt;/p>
&lt;p>struct SwsContext;&lt;/p>
&lt;p>struct SwsParams;&lt;/p>
&lt;p>struct PPMode;&lt;/p>
&lt;p>struct AVDictionary;&lt;/p>
&lt;p>struct Tconfig;&lt;/p>
&lt;p>class Tdll;&lt;/p>
&lt;p>struct DSPContext;&lt;/p>
&lt;p>struct TlibavcodecExt;&lt;/p>
&lt;p>//封装FFMPEG&lt;/p>
&lt;p>//里面的函数基本上是FFMPEG的API&lt;/p>
&lt;p>struct Tlibavcodec {&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*libswscale_sws_scale)(struct SwsContext *context, const uint8_t* const srcSlice[], const int srcStride[],&lt;/p>
&lt;p>&lt;code> &lt;/code>int srcSliceY, int srcSliceH, uint8_t* const dst[], const int dstStride[]);&lt;/p>
&lt;p>&lt;code> &lt;/code>//加载DLL的类&lt;/p>
&lt;p>&lt;code> &lt;/code>Tdll *dll;&lt;/p>
&lt;p>&lt;code> &lt;/code>int refcount;&lt;/p>
&lt;p>&lt;code> &lt;/code>static int get_buffer(AVCodecContext *c, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>CCritSec csOpenClose;&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>Tlibavcodec(const Tconfig *config);&lt;/p>
&lt;p>&lt;code> &lt;/code>~Tlibavcodec();&lt;/p>
&lt;p>&lt;code> &lt;/code>static void avlog(AVCodecContext*, int, const char*, va_list);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void avlogMsgBox(AVCodecContext*, int, const char*, va_list);&lt;/p>
&lt;p>&lt;code> &lt;/code>void AddRef(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>refcount++;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>void Release(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (--refcount &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>delete this;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>static bool getVersion(const Tconfig *config, ffstring &amp;amp;vers, ffstring &amp;amp;license);&lt;/p>
&lt;p>&lt;code> &lt;/code>static bool check(const Tconfig *config);&lt;/p>
&lt;p>&lt;code> &lt;/code>static int ppCpuCaps(uint64_t csp);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void pp_mode_defaults(PPMode &amp;amp;ppMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>static int getPPmode(const TpostprocSettings *cfg, int currentq);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void swsInitParams(SwsParams *params, int resizeMethod);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void swsInitParams(SwsParams *params, int resizeMethod, int flags);&lt;/p>
&lt;p>&lt;code> &lt;/code>bool ok;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext* avcodec_alloc_context(AVCodec *codec, TlibavcodecExt *ext = NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*avcodec_register_all)(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext* (*avcodec_alloc_context0)(AVCodec *codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec* (*avcodec_find_decoder)(AVCodecID codecId);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec* (*avcodec_find_encoder)(AVCodecID id);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_open0)(AVCodecContext *avctx, AVCodec *codec, AVDictionary **options);&lt;/p>
&lt;p>&lt;code> &lt;/code>int avcodec_open(AVCodecContext *avctx, AVCodec *codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame* (*avcodec_alloc_frame)(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_decode_video2)(AVCodecContext *avctx, AVFrame *picture,&lt;/p>
&lt;p>&lt;code> &lt;/code>int *got_picture_ptr,&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket *avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_decode_audio3)(AVCodecContext *avctx, int16_t *samples,&lt;/p>
&lt;p>&lt;code> &lt;/code>int *frame_size_ptr,&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket *avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_encode_video)(AVCodecContext *avctx, uint8_t *buf, int buf_size, const AVFrame *pict);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_encode_audio)(AVCodecContext *avctx, uint8_t *buf, int buf_size, const short *samples);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*avcodec_flush_buffers)(AVCodecContext *avctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_close0)(AVCodecContext *avctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>int avcodec_close(AVCodecContext *avctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_log_set_callback)(void (*)(AVCodecContext*, int, const char*, va_list));&lt;/p>
&lt;p>&lt;code> &lt;/code>void* (*av_log_get_callback)(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*av_log_get_level)(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_log_set_level)(int);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_set_cpu_flags_mask)(int mask);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_default_get_buffer)(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*avcodec_default_release_buffer)(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_default_reget_buffer)(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>const char* (*avcodec_get_current_idct)(AVCodecContext *avctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*avcodec_get_encoder_info)(AVCodecContext *avctx, int *xvid_build, int *divx_version, int *divx_build, int *lavc_build);&lt;/p>
&lt;p>&lt;code> &lt;/code>void* (*av_mallocz)(size_t size);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_free)(void *ptr);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecParserContext* (*av_parser_init)(int codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*av_parser_parse2)(AVCodecParserContext *s, AVCodecContext *avctx, uint8_t **poutbuf, int *poutbuf_size, const uint8_t *buf, int buf_size, int64_t pts, int64_t dts, int64_t pos);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_parser_close)(AVCodecParserContext *s);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_init_packet)(AVPacket *pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t* (*av_packet_new_side_data)(AVPacket *pkt, enum AVPacketSideDataType type, int size);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*avcodec_h264_search_recovery_point)(AVCodecContext *avctx,&lt;/p>
&lt;p>&lt;code> &lt;/code>const uint8_t *buf, int buf_size, int *recovery_frame_cnt);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const char_t *idctNames[], *errorRecognitions[], *errorConcealments[];&lt;/p>
&lt;p>&lt;code> &lt;/code>struct Tdia_size {&lt;/p>
&lt;p>&lt;code> &lt;/code>int size;&lt;/p>
&lt;p>&lt;code> &lt;/code>const char_t *descr;&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>static const Tdia_size dia_sizes[];&lt;/p>
&lt;p>&lt;code> &lt;/code>//libswscale imports&lt;/p>
&lt;p>&lt;code> &lt;/code>SwsContext* (*sws_getCachedContext)(struct SwsContext *context, int srcW, int srcH, enum PixelFormat srcFormat,&lt;/p>
&lt;p>&lt;code> &lt;/code>int dstW, int dstH, enum PixelFormat dstFormat, int flags,&lt;/p>
&lt;p>&lt;code> &lt;/code>SwsFilter *srcFilter, SwsFilter *dstFilter, const double *param, SwsParams *ffdshow_params);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*sws_freeContext)(SwsContext *c);&lt;/p>
&lt;p>&lt;code> &lt;/code>SwsFilter* (*sws_getDefaultFilter)(float lumaGBlur, float chromaGBlur,&lt;/p>
&lt;p>&lt;code> &lt;/code>float lumaSharpen, float chromaSharpen,&lt;/p>
&lt;p>&lt;code> &lt;/code>float chromaHShift, float chromaVShift,&lt;/p>
&lt;p>&lt;code> &lt;/code>int verbose);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*sws_freeFilter)(SwsFilter *filter);&lt;/p>
&lt;p>&lt;code> &lt;/code>int sws_scale(struct SwsContext *context, const uint8_t* const srcSlice[], const stride_t srcStride[],&lt;/p>
&lt;p>&lt;code> &lt;/code>int srcSliceY, int srcSliceH, uint8_t* const dst[], const stride_t dstStride[]);&lt;/p>
&lt;p>&lt;code> &lt;/code>SwsVector *(*sws_getConstVec)(double c, int length);&lt;/p>
&lt;p>&lt;code> &lt;/code>SwsVector *(*sws_getGaussianVec)(double variance, double quality);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*sws_normalizeVec)(SwsVector *a, double height);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*sws_freeVec)(SwsVector *a);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*sws_setColorspaceDetails)(struct SwsContext *c, const int inv_table[4],&lt;/p>
&lt;p>&lt;code> &lt;/code>int srcRange, const int table[4], int dstRange,&lt;/p>
&lt;p>&lt;code> &lt;/code>int brightness, int contrast, int saturation);&lt;/p>
&lt;p>&lt;code> &lt;/code>const int* (*sws_getCoefficients)(int colorspace);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*GetCPUCount)(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>//libpostproc imports&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*pp_postprocess)(const uint8_t * src[3], const stride_t srcStride[3],&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t * dst[3], const stride_t dstStride[3],&lt;/p>
&lt;p>&lt;code> &lt;/code>int horizontalSize, int verticalSize,&lt;/p>
&lt;p>&lt;code> &lt;/code>const /*QP_STORE_T*/int8_t *QP_store, int QP_stride,&lt;/p>
&lt;p>&lt;code> &lt;/code>/*pp_mode*/void *mode, /*pp_context*/void *ppContext, int pict_type);&lt;/p>
&lt;p>&lt;code> &lt;/code>/*pp_context*/&lt;/p>
&lt;p>&lt;code> &lt;/code>void *(*pp_get_context)(int width, int height, int flags);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*pp_free_context)(/*pp_context*/void *ppContext);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*ff_simple_idct_mmx)(int16_t *block);&lt;/p>
&lt;p>&lt;code> &lt;/code>// DXVA imports&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*av_h264_decode_frame)(struct AVCodecContext* avctx, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*av_vc1_decode_frame)(struct AVCodecContext* avctx, uint8_t *buf, int buf_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>// === H264 functions&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*FFH264CheckCompatibility)(int nWidth, int nHeight, struct AVCodecContext* pAVCtx, BYTE* pBuffer, UINT nSize, int nPCIVendor, int nPCIDevice, LARGE_INTEGER VideoDriverVersion);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*FFH264DecodeBuffer)(struct AVCodecContext* pAVCtx, BYTE* pBuffer, UINT nSize, int* pFramePOC, int* pOutPOC, REFERENCE_TIME* pOutrtStart);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT(*FFH264BuildPicParams)(DXVA_PicParams_H264* pDXVAPicParams, DXVA_Qmatrix_H264* pDXVAScalingMatrix, int* nFieldType, int* nSliceType, struct AVCodecContext* pAVCtx, int nPCIVendor);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*FFH264SetCurrentPicture)(int nIndex, DXVA_PicParams_H264* pDXVAPicParams, struct AVCodecContext* pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*FFH264UpdateRefFramesList)(DXVA_PicParams_H264* pDXVAPicParams, struct AVCodecContext* pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL (*FFH264IsRefFrameInUse)(int nFrameNum, struct AVCodecContext* pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*FF264UpdateRefFrameSliceLong)(DXVA_PicParams_H264* pDXVAPicParams, DXVA_Slice_H264_Long* pSlice, struct AVCodecContext* pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*FFH264SetDxvaSliceLong)(struct AVCodecContext* pAVCtx, void* pSliceLong);&lt;/p>
&lt;p>&lt;code> &lt;/code>// === VC1 functions&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT(*FFVC1UpdatePictureParam)(DXVA_PictureParameters* pPicParams, struct AVCodecContext* pAVCtx, int* nFieldType, int* nSliceType, BYTE* pBuffer, UINT nSize, UINT* nFrameSize, BOOL b_SecondField, BOOL* b_repeat_pict);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*FFIsSkipped)(struct AVCodecContext* pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>// === Common functions&lt;/p>
&lt;p>&lt;code> &lt;/code>char* (*GetFFMpegPictureType)(int nType);&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned long(*FFGetMBNumber)(struct AVCodecContext* pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>// yadif&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*yadif_init)(YADIFContext *yadctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*yadif_uninit)(YADIFContext *yadctx);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*yadif_filter)(YADIFContext *yadctx, uint8_t *dst[3], stride_t dst_stride[3], int width, int height, int parity, int tff);&lt;/p>
&lt;p>&lt;code> &lt;/code>// gradfun&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*gradfunInit)(GradFunContext *ctx, const char *args, void *opaque);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*gradfunFilter)(GradFunContext *ctx, uint8_t *dst, uint8_t *src, int width, int height, int dst_linesize, int src_linesize, int r);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>从Tlibavcodec定义可以看出，里面包含了大量的ffmpeg中的API，占据了很大的篇幅。通过调用这些API，就可以使用livavcodec的各种功能。&lt;/p>
&lt;p>在Tlibavcodec的定义中，有一个变量：Tdll *dll，通过该变量，就可以加载ffmpeg.dll中的方法。&lt;/p>
&lt;p>先来看一下Tdll的定义：&lt;/p>
&lt;p>&lt;code> &lt;/code>#ifndef _TDLL_H_&lt;/p>
&lt;p>#define _TDLL_H_&lt;/p>
&lt;p>#include &amp;quot;Tconfig.h&amp;quot;&lt;/p>
&lt;p>//操作Dll的类&lt;/p>
&lt;p>class Tdll&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>bool ok;&lt;/p>
&lt;p>&lt;code> &lt;/code>Tdll(const char_t *dllName1, const Tconfig *config, bool explicitFullPath = false) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t name[MAX_PATH], ext[MAX_PATH];&lt;/p>
&lt;p>&lt;code> &lt;/code>_splitpath_s(dllName1, NULL, 0, NULL, 0, name, countof(name), ext, countof(ext));&lt;/p>
&lt;p>&lt;code> &lt;/code>if (config &amp;amp;&amp;amp; !explicitFullPath) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dllName2[MAX_PATH]; //installdir+filename+ext&lt;/p>
&lt;p>&lt;code> &lt;/code>_makepath_s(dllName2, countof(dllName2), NULL, config-&amp;gt;pth, name, ext);&lt;/p>
&lt;p>&lt;code> &lt;/code>hdll = LoadLibrary(dllName2);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>hdll = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!hdll) {&lt;/p>
&lt;p>&lt;code> &lt;/code>hdll = LoadLibrary(dllName1);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!hdll &amp;amp;&amp;amp; !explicitFullPath) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (config) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dllName3[MAX_PATH]; //ffdshow.ax_path+filename+ext&lt;/p>
&lt;p>&lt;code> &lt;/code>_makepath_s(dllName3, countof(dllName3), NULL, config-&amp;gt;epth, name, ext);&lt;/p>
&lt;p>&lt;code> &lt;/code>hdll = LoadLibrary(dllName3);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!hdll) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dllName0[MAX_PATH]; //only filename+ext - let Windows find it&lt;/p>
&lt;p>&lt;code> &lt;/code>_makepath_s(dllName0, countof(dllName0), NULL, NULL, name, ext);&lt;/p>
&lt;p>&lt;code> &lt;/code>hdll = LoadLibrary(dllName0);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>ok = (hdll != NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>~Tdll() {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (hdll) {&lt;/p>
&lt;p>&lt;code> &lt;/code>FreeLibrary(hdll);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>HMODULE hdll;&lt;/p>
&lt;p>&lt;code> &lt;/code>//封装一下直接加载Dll的GetProcAddress&lt;/p>
&lt;p>&lt;code> &lt;/code>template&lt;class T> __forceinline void loadFunction(T &amp;amp;fnc, const char *name) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fnc = hdll ? (T)GetProcAddress(hdll, name) : NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>ok &amp;amp;= (fnc != NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>template&lt;class T> __forceinline void loadFunctionByIndex(T &amp;amp;fnc, uint16_t id) {&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t id32 = uint32_t(id);&lt;/p>
&lt;p>&lt;code> &lt;/code>fnc = hdll ?&lt;/p>
&lt;p>&lt;code> &lt;/code>(T) GetProcAddress(hdll, (LPCSTR)id32) :&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>ok &amp;amp;= (fnc != NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//检查Dll的状态是否正常&lt;/p>
&lt;p>&lt;code> &lt;/code>static bool check(const char_t *dllName1, const Tconfig *config) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t name[MAX_PATH], ext[MAX_PATH];&lt;/p>
&lt;p>&lt;code> &lt;/code>_splitpath_s(dllName1, NULL, 0, NULL, 0, name, countof(name), ext, countof(ext));&lt;/p>
&lt;p>&lt;code> &lt;/code>if (config) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dllName2[MAX_PATH]; //installdir+filename+ext&lt;/p>
&lt;p>&lt;code> &lt;/code>_makepath_s(dllName2, countof(dllName2), NULL, config-&amp;gt;pth, name, ext);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fileexists(dllName2)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fileexists(dllName1)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (config) {&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dllName3[MAX_PATH]; //ffdshow.ax_path+filename+ext&lt;/p>
&lt;p>&lt;code> &lt;/code>_makepath_s(dllName3, MAX_PATH, NULL, config-&amp;gt;epth, name, ext);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fileexists(dllName3)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dllName0[MAX_PATH]; //only filename+ext - let Windows find it&lt;/p>
&lt;p>&lt;code> &lt;/code>_makepath_s(dllName0, countof(dllName0), NULL, NULL, name, ext);&lt;/p>
&lt;p>&lt;code> &lt;/code>char_t dir0[MAX_PATH], *dir0flnm;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (SearchPath(NULL, dllName0, NULL, MAX_PATH, dir0, &amp;amp;dir0flnm)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>从Tdll的定义可以看出，该类的loadFunction()函数封装了系统使用Dll功能的函数GetProcAddress()。&lt;/p>
&lt;p>该类的构造函数Tdll()封装了系统加载Dll的函数LoadLibrary()。&lt;/p>
&lt;p>此外该类还提供了check()用于检查Dll。&lt;/p>
&lt;p>对于Tdll的分析先告一段落，现在我们回到Tlibavcodec，来看看它是如何加载libavcodec的函数的。查看一下Tlibavcodec的类的实现，位于codecs-&amp;gt;libavcodec-&amp;gt;Tlibavcodec.cpp。&lt;/p>
&lt;p>该类的实现代码比较长，因此只能选择重要的函数查看一下。首先来看一下构造函数：&lt;/p>
&lt;p>//===================================== Tlibavcodec ====================================&lt;/p>
&lt;p>//FFMPEG封装类的构造函数&lt;/p>
&lt;p>Tlibavcodec::Tlibavcodec(const Tconfig *config): refcount(0)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//加载FFMPEG的Dll&lt;/p>
&lt;p>&lt;code> &lt;/code>dll = new Tdll(_l(&amp;quot;ffmpeg.dll&amp;quot;), config);&lt;/p>
&lt;p>&lt;code> &lt;/code>//加载各个函数&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_register_all, &amp;quot;avcodec_register_all&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_find_decoder, &amp;quot;avcodec_find_decoder&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_open0, &amp;quot;avcodec_open2&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_alloc_context0, &amp;quot;avcodec_alloc_context3&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_alloc_frame, &amp;quot;avcodec_alloc_frame&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_decode_video2, &amp;quot;avcodec_decode_video2&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_flush_buffers, &amp;quot;avcodec_flush_buffers&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_close0, &amp;quot;avcodec_close&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_log_set_callback, &amp;quot;av_log_set_callback&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_log_get_callback, &amp;quot;av_log_get_callback&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_log_get_level, &amp;quot;av_log_get_level&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_log_set_level, &amp;quot;av_log_set_level&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_set_cpu_flags_mask, &amp;quot;av_set_cpu_flags_mask&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_mallocz, &amp;quot;av_mallocz&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_free, &amp;quot;av_free&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_default_get_buffer, &amp;quot;avcodec_default_get_buffer&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_default_release_buffer, &amp;quot;avcodec_default_release_buffer&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_default_reget_buffer, &amp;quot;avcodec_default_reget_buffer&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_get_current_idct, &amp;quot;avcodec_get_current_idct&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_get_encoder_info, &amp;quot;avcodec_get_encoder_info&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_init_packet, &amp;quot;av_init_packet&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_packet_new_side_data, &amp;quot;av_packet_new_side_data&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_h264_search_recovery_point, &amp;quot;avcodec_h264_search_recovery_point&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_decode_audio3, &amp;quot;avcodec_decode_audio3&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_find_encoder, &amp;quot;avcodec_find_encoder&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_encode_video, &amp;quot;avcodec_encode_video&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(avcodec_encode_audio, &amp;quot;avcodec_encode_audio&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_parser_init, &amp;quot;av_parser_init&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_parser_parse2, &amp;quot;av_parser_parse2&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_parser_close, &amp;quot;av_parser_close&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//libswscale methods&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_getCachedContext, &amp;quot;sws_getCachedContext&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_freeContext, &amp;quot;sws_freeContext&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_getDefaultFilter, &amp;quot;sws_getDefaultFilter&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_freeFilter, &amp;quot;sws_freeFilter&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(libswscale_sws_scale, &amp;quot;sws_scale&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(GetCPUCount, &amp;quot;GetCPUCount&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_getConstVec, &amp;quot;sws_getConstVec&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_getGaussianVec, &amp;quot;sws_getGaussianVec&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_normalizeVec, &amp;quot;sws_normalizeVec&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_freeVec, &amp;quot;sws_freeVec&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_setColorspaceDetails, &amp;quot;sws_setColorspaceDetails&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(sws_getCoefficients, &amp;quot;sws_getCoefficients&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//libpostproc methods&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(pp_postprocess, &amp;quot;pp_postprocess&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(pp_get_context, &amp;quot;pp_get_context&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(pp_free_context, &amp;quot;pp_free_context&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(ff_simple_idct_mmx, &amp;quot;ff_simple_idct_mmx&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//DXVA methods&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_h264_decode_frame, &amp;quot;av_h264_decode_frame&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(av_vc1_decode_frame, &amp;quot;av_vc1_decode_frame&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264CheckCompatibility, &amp;quot;FFH264CheckCompatibility&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264DecodeBuffer, &amp;quot;FFH264DecodeBuffer&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264BuildPicParams, &amp;quot;FFH264BuildPicParams&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264SetCurrentPicture, &amp;quot;FFH264SetCurrentPicture&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264UpdateRefFramesList, &amp;quot;FFH264UpdateRefFramesList&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264IsRefFrameInUse, &amp;quot;FFH264IsRefFrameInUse&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FF264UpdateRefFrameSliceLong, &amp;quot;FF264UpdateRefFrameSliceLong&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFH264SetDxvaSliceLong, &amp;quot;FFH264SetDxvaSliceLong&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFVC1UpdatePictureParam, &amp;quot;FFVC1UpdatePictureParam&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFIsSkipped, &amp;quot;FFIsSkipped&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(GetFFMpegPictureType, &amp;quot;GetFFMpegPictureType&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(FFGetMBNumber, &amp;quot;FFGetMBNumber&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//yadif methods&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(yadif_init, &amp;quot;yadif_init&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(yadif_uninit, &amp;quot;yadif_uninit&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(yadif_filter, &amp;quot;yadif_filter&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>//gradfun&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(gradfunInit, &amp;quot;gradfunInit&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>dll-&amp;gt;loadFunction(gradfunFilter, &amp;quot;gradfunFilter&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>ok = dll-&amp;gt;ok;&lt;/p>
&lt;p>&lt;code> &lt;/code>//加载完毕后，进行注册&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ok) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log_set_callback(avlog);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>该构造函数尽管篇幅比较长，但是还是比较好理解的，主要完成了3步：&lt;/p>
&lt;p>\1. 创建一个Tdll类的对象，加载“ffmpeg.dll”。&lt;/p>
&lt;p>\2. 使用loadFunction()加载各种函数。&lt;/p>
&lt;p>\3. 最后调用avcodec_register_all()注册各种解码器。&lt;/p>
&lt;p>Tlibavcodec的析构函数则比较简单：&lt;/p>
&lt;p>Tlibavcodec::~Tlibavcodec()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>delete dll;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>检查Dll的函数也比较简单：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493329#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493329#">copy&lt;/a>&lt;img src="https://code.csdn.net/assets/CODE_ico.png" alt="">&lt;img src="https://code.csdn.net/assets/ico_fork.svg" alt="">&lt;/p>
&lt;p>bool Tlibavcodec::check(const Tconfig *config)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return Tdll::check(_l(&amp;quot;ffmpeg.dll&amp;quot;), config);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>此外，可能是出于某些功能的考虑，ffdshow还自己写了几个函数，但是限于篇幅不能一一介绍，在这里只介绍一个：&lt;/p>
&lt;p>获取libavcodec版本：&lt;/p>
&lt;p>bool Tlibavcodec::getVersion(const Tconfig *config, ffstring &amp;amp;vers, ffstring &amp;amp;license)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>Tdll *dl = new Tdll(_l(&amp;quot;ffmpeg.dll&amp;quot;), config);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*av_getVersion)(char **version, char **build, char **datetime, const char* *license);&lt;/p>
&lt;p>&lt;code> &lt;/code>dl-&amp;gt;loadFunction(av_getVersion, &amp;quot;getVersion&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>bool res;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (av_getVersion) {&lt;/p>
&lt;p>&lt;code> &lt;/code>res = true;&lt;/p>
&lt;p>&lt;code> &lt;/code>char *version, *build, *datetime;&lt;/p>
&lt;p>&lt;code> &lt;/code>const char *lic;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_getVersion(&amp;amp;version, &amp;amp;build, &amp;amp;datetime, &amp;amp;lic);&lt;/p>
&lt;p>&lt;code> &lt;/code>vers = (const char_t*)text&amp;lt;char_t&amp;gt;(version) + ffstring(_l(&amp;quot; (&amp;quot;)) + (const char_t*)text&amp;lt;char_t&amp;gt;(datetime) + _l(&amp;quot;)&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>license = text&amp;lt;char_t&amp;gt;(lic);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>res = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>vers.clear();&lt;/p>
&lt;p>&lt;code> &lt;/code>license.clear();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>delete dl;&lt;/p>
&lt;p>&lt;code> &lt;/code>return res;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493521">ffdshow 源代码分析 7： libavcodec视频解码器类（TvideoCodecLibavcodec）&lt;/a>&lt;/p>
&lt;p>在这里我们进一步介绍一下其libavcodec解码器类。注意前一篇文章介绍的类Tlibavcodec仅仅是对libavcodec所在的“ffmpeg.dll”的函数进行封装的类。但Tlibavcodec并不是一个解码器类，其没有继承任何类，还不能为ffdshow所用。本文介绍的TvideoCodecLibavcodec才是libavcodec解码器类，其继承了TvideoCodecDec。&lt;/p>
&lt;p>先来看一看TvideoCodecLibavcodec的定义吧，位于codecs-&amp;gt; TvideoCodecLibavcodec.h中。&lt;/p>
&lt;p>#ifndef _TVIDEOCODECLIBAVCODEC_H_&lt;/p>
&lt;p>#define _TVIDEOCODECLIBAVCODEC_H_&lt;/p>
&lt;p>#include &amp;quot;TvideoCodec.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;ffmpeg/Tlibavcodec.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;ffmpeg/libavcodec/avcodec.h&amp;quot;&lt;/p>
&lt;p>#define MAX_THREADS 8 // FIXME: This is defined in mpegvideo.h.&lt;/p>
&lt;p>struct Textradata;&lt;/p>
&lt;p>class TccDecoder;&lt;/p>
&lt;p>//libavcodec解码器（视频）&lt;/p>
&lt;p>struct TlibavcodecExt {&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>static int get_buffer(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*default_get_buffer)(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void release_buffer(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*default_release_buffer)(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>static int reget_buffer(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*default_reget_buffer)(AVCodecContext *s, AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void handle_user_data0(AVCodecContext *c, const uint8_t *buf, int buf_len);&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TlibavcodecExt() {}&lt;/p>
&lt;p>&lt;code> &lt;/code>void connectTo(AVCodecContext *ctx, Tlibavcodec *libavcodec);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void onGetBuffer(AVFrame *pic) {}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void onRegetBuffer(AVFrame *pic) {}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void onReleaseBuffer(AVFrame *pic) {}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void handle_user_data(const uint8_t *buf, int buf_len) {}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>//libavcodec解码，不算是Filter？&lt;/p>
&lt;p>class TvideoCodecLibavcodec : public TvideoCodecDec, public TvideoCodecEnc, public TlibavcodecExt&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class TDXVADecoderVC1;&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class TDXVADecoderH264;&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>//各种信息（源自AVCodecContext中）&lt;/p>
&lt;p>&lt;code> &lt;/code>Tlibavcodec *libavcodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>void create(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *avcodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>mutable char_t codecName[100];&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *avctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t palette[AVPALETTE_COUNT];&lt;/p>
&lt;p>&lt;code> &lt;/code>int palette_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>FOURCC fcc;&lt;/p>
&lt;p>&lt;code> &lt;/code>FILE *statsfile;&lt;/p>
&lt;p>&lt;code> &lt;/code>int cfgcomode;&lt;/p>
&lt;p>&lt;code> &lt;/code>int psnr;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool isAdaptive;&lt;/p>
&lt;p>&lt;code> &lt;/code>int threadcount;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool dont_use_rtStop_from_upper_stream; // and reordering of timpestams is justified.&lt;/p>
&lt;p>&lt;code> &lt;/code>bool theorart;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool codecinited, ownmatrices;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart, rtStop, avgTimePerFrame, segmentTimeStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME prior_in_rtStart, prior_in_rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME prior_out_rtStart, prior_out_rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>struct {&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart, rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned int srcSize;&lt;/p>
&lt;p>&lt;code> &lt;/code>} b[MAX_THREADS + 1];&lt;/p>
&lt;p>&lt;code> &lt;/code>int inPosB;&lt;/p>
&lt;p>&lt;code> &lt;/code>Textradata *extradata;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool sendextradata;&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned int mb_width, mb_height, mb_count;&lt;/p>
&lt;p>&lt;code> &lt;/code>static void line(unsigned char *dst, unsigned int _x0, unsigned int _y0, unsigned int _x1, unsigned int _y1, stride_t strideY);&lt;/p>
&lt;p>&lt;code> &lt;/code>static void draw_arrow(uint8_t *buf, int sx, int sy, int ex, int ey, stride_t stride, int mulx, int muly, int dstdx, int dstdy);&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned char *ffbuf;&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned int ffbuflen;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool wasKey;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void handle_user_data(const uint8_t *buf, int buf_len);&lt;/p>
&lt;p>&lt;code> &lt;/code>TccDecoder *ccDecoder;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool autoSkipingLoopFilter;&lt;/p>
&lt;p>&lt;code> &lt;/code>enum AVDiscard initialSkipLoopFilter;&lt;/p>
&lt;p>&lt;code> &lt;/code>int got_picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool firstSeek; // firstSeek means start of palyback.&lt;/p>
&lt;p>&lt;code> &lt;/code>bool mpeg2_in_doubt;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool mpeg2_new_sequence;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool bReorderBFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>//时长（AVCodecContext中）&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME getDuration();&lt;/p>
&lt;p>&lt;code> &lt;/code>int isReallyMPEG2(const unsigned char *src, size_t srcLen);&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual LRESULT beginCompress(int cfgcomode, uint64_t csp, const Trect &amp;amp;r);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool beginDecompress(TffPictBase &amp;amp;pict, FOURCC infcc, const CMediaType &amp;amp;mt, int sourceFlags);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT flushDec(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecParserContext *parser;&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecLibavcodec(IffdshowBase *Ideci, IdecVideoSink *IsinkD);&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecLibavcodec(IffdshowBase *Ideci, IencVideoSink *IsinkE);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TvideoCodecLibavcodec();&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int getType(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return IDFF_MOVIE_LAVC;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual const char_t* getName(void) const;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int caps(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return CAPS::VIS_MV | CAPS::VIS_QUANTS;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void end(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void getCompressColorspaces(Tcsps &amp;amp;csps, unsigned int outDx, unsigned int outDy);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool supExtradata(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>//获得ExtraData（AVCodecContext中）&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool getExtradata(const void* *ptr, size_t *len);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT compress(const TffPict &amp;amp;pict, TencFrameParams ¶ms);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT flushEnc(const TffPict &amp;amp;pict, TencFrameParams ¶ms) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return compress(pict, params);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT decompress(const unsigned char *src, size_t srcLen, IMediaSample *pIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void onGetBuffer(AVFrame *pic);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool onSeek(REFERENCE_TIME segmentStart);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool onDiscontinuity(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>//画出运动矢量（AVCodecContext中）&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool drawMV(unsigned char *dst, unsigned int dx, stride_t stride, unsigned int dy) const;&lt;/p>
&lt;p>&lt;code> &lt;/code>//编码器信息（AVCodecContext中）&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void getEncoderInfo(char_t *buf, size_t buflen) const;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual const char* get_current_idct(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT BeginFlush();&lt;/p>
&lt;p>&lt;code> &lt;/code>bool isReorderBFrame() {&lt;/p>
&lt;p>&lt;code> &lt;/code>return bReorderBFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void reorderBFrames(REFERENCE_TIME&amp;amp; rtStart, REFERENCE_TIME&amp;amp; rtStop);&lt;/p>
&lt;p>&lt;code> &lt;/code>class Th264RandomAccess&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class TvideoCodecLibavcodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecLibavcodec* parent;&lt;/p>
&lt;p>&lt;code> &lt;/code>int recovery_mode; // 0:OK, 1:searching 2: found, 3:waiting for frame_num decoded, 4:waiting for POC outputed&lt;/p>
&lt;p>&lt;code> &lt;/code>int recovery_frame_cnt;&lt;/p>
&lt;p>&lt;code> &lt;/code>int recovery_poc;&lt;/p>
&lt;p>&lt;code> &lt;/code>int thread_delay;&lt;/p>
&lt;p>&lt;code> &lt;/code>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>Th264RandomAccess(TvideoCodecLibavcodec* Iparent);&lt;/p>
&lt;p>&lt;code> &lt;/code>int search(uint8_t* buf, int buf_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>void onSeek(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>void judgeUsability(int *got_picture_ptr);&lt;/p>
&lt;p>&lt;code> &lt;/code>} h264RandomAccess;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>这里有一个类TlibavcodecExt，我觉得应该是扩展了Tlibavcodec的一些功能，在这里我们先不管它，直接看看TvideoCodecLibavcodec都包含了什么变量：&lt;/p>
&lt;p>Tlibavcodec *libavcodec：该类封装了libavcodec的各种函数，在前一篇文章中已经做过介绍，在此不再重复叙述了。可以认为该变量是TvideoCodecLibavcodec类的灵魂，所有libavcodec中的函数都是通过该类调用的。&lt;/p>
&lt;p>AVCodec *avcodec：FFMPEG中的结构体，解码器&lt;/p>
&lt;p>AVCodecContext *avctx：FFMPEG中的结构体，解码器上下文&lt;/p>
&lt;p>AVFrame *frame FFMPEG中的结构体，视频帧&lt;/p>
&lt;p>mutable char_t codecName[100]：解码器名称&lt;/p>
&lt;p>FOURCC fcc：FourCC&lt;/p>
&lt;p>Textradata *extradata：附加数据&lt;/p>
&lt;p>…&lt;/p>
&lt;p>再来看一下TvideoCodecLibavcodec都包含什么方法：&lt;/p>
&lt;p>create()：创建解码器的时候调用&lt;/p>
&lt;p>getDuration()：获得时长&lt;/p>
&lt;p>getExtradata()：获得附加数据&lt;/p>
&lt;p>drawMV()：画运动矢量&lt;/p>
&lt;p>getEncoderInfo()：获得编码器信息&lt;/p>
&lt;p>此外还包括一些有关解码的方法【这个是最关键的】：&lt;/p>
&lt;p>beginDecompress()：解码初始化&lt;/p>
&lt;p>decompress()：解码&lt;/p>
&lt;p>下面我们来详细看看这些函数的实现吧：&lt;/p>
&lt;p>先来看一下TvideoCodecLibavcodec的构造函数：&lt;/p>
&lt;p>//libavcodec解码器（视频）&lt;/p>
&lt;p>//内容大部分都很熟悉，因为是FFmpeg的API&lt;/p>
&lt;p>TvideoCodecLibavcodec::TvideoCodecLibavcodec(IffdshowBase *Ideci, IdecVideoSink *IsinkD):&lt;/p>
&lt;p>&lt;code> &lt;/code>Tcodec(Ideci), TcodecDec(Ideci, IsinkD),&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodec(Ideci),&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecDec(Ideci, IsinkD),&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecEnc(Ideci, NULL),&lt;/p>
&lt;p>&lt;code> &lt;/code>h264RandomAccess(this),&lt;/p>
&lt;p>&lt;code> &lt;/code>bReorderBFrame(true)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>create();&lt;/p>
&lt;p>}&lt;/p>
&lt;p>可见构造函数调用了Create()，我们再来看看Create()：&lt;/p>
&lt;p>void TvideoCodecLibavcodec::create(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>ownmatrices = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>deci-&amp;gt;getLibavcodec(&amp;amp;libavcodec);&lt;/p>
&lt;p>&lt;code> &lt;/code>ok = libavcodec ? libavcodec-&amp;gt;ok : false;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>frame = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>quantBytes = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>statsfile = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>threadcount = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>codecinited = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>extradata = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>theorart = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>ffbuf = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>ffbuflen = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>codecName[0] = '\0';&lt;/p>
&lt;p>&lt;code> &lt;/code>ccDecoder = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>autoSkipingLoopFilter = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>inPosB = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>firstSeek = true;&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg2_new_sequence = true;&lt;/p>
&lt;p>&lt;code> &lt;/code>parser = NULL;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>从Create()函数我们可以看出，其完成了各种变量的初始化工作。其中有一行代码：&lt;/p>
&lt;p>deci-&amp;gt;getLibavcodec(&amp;amp;libavcodec);&lt;/p>
&lt;p>完成了Tlibavcodec*libavcodec的初始化工作。&lt;/p>
&lt;p>再来看几个函数。&lt;/p>
&lt;p>getDuration()，用于从AVCodecContext中获取时长：&lt;/p>
&lt;p>REFERENCE_TIME TvideoCodecLibavcodec::getDuration()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME duration = REF_SECOND_MULT / 100;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (avctx &amp;amp;&amp;amp; avctx-&amp;gt;time_base.num &amp;amp;&amp;amp; avctx-&amp;gt;time_base.den) {&lt;/p>
&lt;p>&lt;code> &lt;/code>duration = REF_SECOND_MULT * avctx-&amp;gt;time_base.num / avctx-&amp;gt;time_base.den;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codecId == AV_CODEC_ID_H264) {&lt;/p>
&lt;p>&lt;code> &lt;/code>duration *= 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (duration == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return REF_SECOND_MULT / 100;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return duration;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>getExtradata()用于从AVCodecContext中获取附加信息：&lt;/p>
&lt;p>bool TvideoCodecLibavcodec::getExtradata(const void* *ptr, size_t *len)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!avctx || !len) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>*len = avctx-&amp;gt;extradata_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ptr) {&lt;/p>
&lt;p>&lt;code> &lt;/code>*ptr = avctx-&amp;gt;extradata;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>drawMV()用于从AVFrame中获取运动矢量信息，并画出来（这个函数用于一个名为“可视化”的滤镜里面，用于显示视频的运动矢量信息）。&lt;/p>
&lt;p>//画出运动矢量&lt;/p>
&lt;p>bool TvideoCodecLibavcodec::drawMV(unsigned char *dst, unsigned int dstdx, stride_t stride, unsigned int dstdy) const&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!frame-&amp;gt;motion_val || !frame-&amp;gt;mb_type || !frame-&amp;gt;motion_val[0]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>#define IS_8X8(a) ((a)&amp;amp;MB_TYPE_8x8)&lt;/p>
&lt;p>#define IS_16X8(a) ((a)&amp;amp;MB_TYPE_16x8)&lt;/p>
&lt;p>#define IS_8X16(a) ((a)&amp;amp;MB_TYPE_8x16)&lt;/p>
&lt;p>#define IS_INTERLACED(a) ((a)&amp;amp;MB_TYPE_INTERLACED)&lt;/p>
&lt;p>#define USES_LIST(a, list) ((a) &amp;amp; ((MB_TYPE_P0L0|MB_TYPE_P1L0)&amp;lt;&amp;lt;(2*(list))))&lt;/p>
&lt;p>&lt;code> &lt;/code>const int shift = 1 + ((frame-&amp;gt;play_flags &amp;amp; CODEC_FLAG_QPEL) ? 1 : 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>const int mv_sample_log2 = 4 - frame-&amp;gt;motion_subsample_log2;&lt;/p>
&lt;p>&lt;code> &lt;/code>const int mv_stride = (frame-&amp;gt;mb_width &amp;lt;&amp;lt; mv_sample_log2) + (avctx-&amp;gt;codec_id == AV_CODEC_ID_H264 ? 0 : 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>int direction = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>int mulx = (dstdx &amp;lt;&amp;lt; 12) / avctx-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>int muly = (dstdy &amp;lt;&amp;lt; 12) / avctx-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>//提取两个方向上的运动矢量信息（根据不同的宏块划分，可以分成几种情况）&lt;/p>
&lt;p>&lt;code> &lt;/code>//在AVCodecContext的motion_val中&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int mb_y = 0; mb_y &amp;lt; frame-&amp;gt;mb_height; mb_y++)&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int mb_x = 0; mb_x &amp;lt; frame-&amp;gt;mb_width; mb_x++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>const int mb_index = mb_x + mb_y * frame-&amp;gt;mb_stride;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!USES_LIST(frame-&amp;gt;mb_type[mb_index], direction)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>…此处代码太长，略&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>#undef IS_8X8&lt;/p>
&lt;p>#undef IS_16X8&lt;/p>
&lt;p>#undef IS_8X16&lt;/p>
&lt;p>#undef IS_INTERLACED&lt;/p>
&lt;p>#undef USES_LIST&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>下面来看几个很重要的函数，这几个函数继承自TvideoCodecDec类。&lt;/p>
&lt;p>beginDecompress()用于解码器的初始化。注：这个函数的代码太长了，因此只选择一点关键的代码。&lt;/p>
&lt;p>//----------------------------- decompression -----------------------------&lt;/p>
&lt;p>bool TvideoCodecLibavcodec::beginDecompress(TffPictBase &amp;amp;pict, FOURCC fcc, const CMediaType &amp;amp;mt, int sourceFlags)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>palette_size = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_out_rtStart = REFTIME_INVALID;&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_out_rtStop = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStart = rtStop = REFTIME_INVALID;&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_in_rtStart = prior_in_rtStop = REFTIME_INVALID;&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg2_in_doubt = codecId == AV_CODEC_ID_MPEG2VIDEO;&lt;/p>
&lt;p>&lt;code> &lt;/code>int using_dxva = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>int numthreads = deci-&amp;gt;getParam2(IDFF_numLAVCdecThreads);&lt;/p>
&lt;p>&lt;code> &lt;/code>int thread_type = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (numthreads &amp;gt; 1 &amp;amp;&amp;amp; sup_threads_dec_frame(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>thread_type = FF_THREAD_FRAME;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (numthreads &amp;gt; 1 &amp;amp;&amp;amp; sup_threads_dec_slice(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>thread_type = FF_THREAD_SLICE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (numthreads &amp;gt; 1 &amp;amp;&amp;amp; thread_type != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>threadcount = numthreads;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>threadcount = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codecId == CODEC_ID_H264_DXVA) {&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = AV_CODEC_ID_H264;&lt;/p>
&lt;p>&lt;code> &lt;/code>using_dxva = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codecId == CODEC_ID_VC1_DXVA) {&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = AV_CODEC_ID_VC1;&lt;/p>
&lt;p>&lt;code> &lt;/code>using_dxva = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec = libavcodec-&amp;gt;avcodec_find_decoder(codecId);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!avcodec) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx = libavcodec-&amp;gt;avcodec_alloc_context(avcodec, this);&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;thread_type = thread_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;thread_count = threadcount;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;h264_using_dxva = using_dxva;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codecId == AV_CODEC_ID_H264) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// If we do not set this, first B-frames before the IDR pictures are dropped.&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;has_b_frames = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>frame = libavcodec-&amp;gt;avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;width = pict.rectFull.dx;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;height = pict.rectFull.dy;&lt;/p>
&lt;p>&lt;code> &lt;/code>intra_matrix = avctx-&amp;gt;intra_matrix = (uint16_t*)calloc(sizeof(uint16_t), 64);&lt;/p>
&lt;p>&lt;code> &lt;/code>inter_matrix = avctx-&amp;gt;inter_matrix = (uint16_t*)calloc(sizeof(uint16_t), 64);&lt;/p>
&lt;p>&lt;code> &lt;/code>ownmatrices = true;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Fix for new Haali custom media type and fourcc. ffmpeg does not understand it, we have to change it to FOURCC_AVC1&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fcc == FOURCC_CCV1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fcc = FOURCC_AVC1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;codec_tag = fcc;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;workaround_bugs = deci-&amp;gt;getParam2(IDFF_workaroundBugs);&lt;/p>
&lt;p>#if 0&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;error_concealment = FF_EC_GUESS_MVS | FF_EC_DEBLOCK;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;err_recognition = AV_EF_CRCCHECK | AV_EF_BITSTREAM | AV_EF_BUFFER | AV_EF_COMPLIANT | AV_EF_AGGRESSIVE;&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codecId == AV_CODEC_ID_MJPEG) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;flags |= CODEC_FLAG_TRUNCATED;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (mpeg12_codec(codecId) &amp;amp;&amp;amp; deci-&amp;gt;getParam2(IDFF_fastMpeg2)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;flags2 = CODEC_FLAG2_FAST;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codecId == AV_CODEC_ID_H264)&lt;/p>
&lt;p>&lt;code> &lt;/code>if (int skip = deci-&amp;gt;getParam2(IDFF_fastH264)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;skip_loop_filter = skip &amp;amp; 2 ? AVDISCARD_ALL : AVDISCARD_NONREF;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>initialSkipLoopFilter = avctx-&amp;gt;skip_loop_filter;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;debug_mv = !using_dxva; //(deci-&amp;gt;getParam2(IDFF_isVis) &amp;amp; deci-&amp;gt;getParam2(IDFF_visMV));&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;idct_algo = limit(deci-&amp;gt;getParam2(IDFF_idct), 0, 6);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (extradata) {&lt;/p>
&lt;p>&lt;code> &lt;/code>delete extradata;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>extradata = new Textradata(mt, FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>此处代码太长，略…&lt;/p>
&lt;p>}&lt;/p>
&lt;p>从代码中可以看出这个函数的流程是：&lt;/p>
&lt;p>1.avcodec_find_decoder();&lt;/p>
&lt;p>2.avcodec_alloc_context();&lt;/p>
&lt;p>3.avcodec_alloc_frame();&lt;/p>
&lt;p>4.avcodec_open();&lt;/p>
&lt;p>主要做了libavcodec初始化工作。&lt;/p>
&lt;p>begin decompress()用于解码器的初始化。 注：这个函数的代码太长了，因此只选择一点关键的代码。&lt;/p>
&lt;p>HRESULT TvideoCodecLibavcodec::decompress(const unsigned char *src, size_t srcLen0, IMediaSample *pIn)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>代码太长，略…&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket avpkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>libavcodec-&amp;gt;av_init_packet(&amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (palette_size) {&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t *pal = (uint32_t *)libavcodec-&amp;gt;av_packet_new_side_data(&amp;amp;avpkt, AV_PKT_DATA_PALETTE, AVPALETTE_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; palette_size / 4; i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>pal[i] = 0xFF &amp;lt;&amp;lt; 24 | AV_RL32(palette + i);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>while (!src || size &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>int used_bytes;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque = rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque2 = rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque3 = size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (sendextradata &amp;amp;&amp;amp; extradata-&amp;gt;data &amp;amp;&amp;amp; extradata-&amp;gt;size &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = (uint8_t *)extradata-&amp;gt;data;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = (int)extradata-&amp;gt;size;&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = libavcodec-&amp;gt;avcodec_decode_video2(avctx, frame, &amp;amp;got_picture, &amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>sendextradata = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (used_bytes &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (mpeg12_codec(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;extradata = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;extradata_size = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned int neededsize = size + FF_INPUT_BUFFER_PADDING_SIZE;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ffbuflen &amp;lt; neededsize) {&lt;/p>
&lt;p>&lt;code> &lt;/code>ffbuf = (unsigned char*)realloc(ffbuf, ffbuflen = neededsize);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (src) {&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(ffbuf, src, size);&lt;/p>
&lt;p>&lt;code> &lt;/code>memset(ffbuf + size, 0, FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (parser) {&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *outBuf = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>int out_size = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = libavcodec-&amp;gt;av_parser_parse2(parser, avctx, &amp;amp;outBuf, &amp;amp;out_size, src ? ffbuf : NULL, size, AV_NOPTS_VALUE, AV_NOPTS_VALUE, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (prior_in_rtStart == REFTIME_INVALID) {&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_in_rtStart = rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_in_rtStop = rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (out_size &amp;gt; 0 || !src) {&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg2_in_doubt = false;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = out_size &amp;gt; 0 ? outBuf : NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = out_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (out_size &amp;gt; used_bytes) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque = prior_in_rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque2 = prior_in_rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque = rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque2 = rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_in_rtStart = rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>prior_in_rtStop = rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>avctx-&amp;gt;reordered_opaque3 = out_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (h264RandomAccess.search(avpkt.data, avpkt.size)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>libavcodec-&amp;gt;avcodec_decode_video2(avctx, frame, &amp;amp;got_picture, &amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>h264RandomAccess.judgeUsability(&amp;amp;got_picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = src ? ffbuf : NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = size;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codecId == AV_CODEC_ID_H264) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (h264RandomAccess.search(avpkt.data, avpkt.size)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = libavcodec-&amp;gt;avcodec_decode_video2(avctx, frame, &amp;amp;got_picture, &amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (used_bytes &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>h264RandomAccess.judgeUsability(&amp;amp;got_picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = libavcodec-&amp;gt;avcodec_decode_video2(avctx, frame, &amp;amp;got_picture, &amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>代码太长，略…&lt;/p>
&lt;p>}&lt;/p>
&lt;p>从代码中可以看出这个函数的流程是：&lt;/p>
&lt;p>1.AVPacket avpkt;&lt;/p>
&lt;p>2.av_init_packet();&lt;/p>
&lt;p>3.avcodec_decode_video2();&lt;/p>
&lt;p>和ffmpeg的解码流程相差不大。&lt;/p>
&lt;h3 id="ffdshow-源代码分析-8-视频解码器类tvideocodecdechttpblogcsdnnetleixiaohua1020articledetails15493743">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493743">&lt;strong>ffdshow 源代码分析 8： 视频解码器类（TvideoCodecDec）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>其中libavcodec的解码器类TvideoCodecLibavcodec通过调用Tlibavcodec中的方法实现了libavcodec的dll中方法的调用；而它继承了TvideoCodecDec，本文正是要分析它继承的这个类。&lt;/p>
&lt;p>TvideoCodecDec是所有视频解码器共有的父类。可以看一下它的继承关系：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.151.jpeg" alt="">&lt;/p>
&lt;p>可见，除了TvideoCodecLibavcodec继承了TvideoCodecDec之外，还有好几个类继承了TvideoCodecDec，比如说：TvideoCodecLibmpeg2，TvideoCodecXviD4等等…。突然来了兴趣，我们可以看一下其他的解码器类的定义是什么样的。&lt;/p>
&lt;p>TvideoCodecLibmpeg2定义如下：&lt;/p>
&lt;p>#ifndef _TVIDEOCODECLIBMPEG2_H_&lt;/p>
&lt;p>#define _TVIDEOCODECLIBMPEG2_H_&lt;/p>
&lt;p>#include &amp;quot;TvideoCodec.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libmpeg2/include/mpeg2.h&amp;quot;&lt;/p>
&lt;p>class Tdll;&lt;/p>
&lt;p>struct Textradata;&lt;/p>
&lt;p>class TccDecoder;&lt;/p>
&lt;p>//libmpeg2解码器&lt;/p>
&lt;p>class TvideoCodecLibmpeg2 : public TvideoCodecDec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>Tdll *dll;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t (*mpeg2_set_accel)(uint32_t accel);&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg2dec_t* (*mpeg2_init)(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>const mpeg2_info_t* (*mpeg2_info)(mpeg2dec_t *mpeg2dec);&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg2_state_t (*mpeg2_parse)(mpeg2dec_t *mpeg2dec);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*mpeg2_buffer)(mpeg2dec_t *mpeg2dec, const uint8_t *start, const uint8_t *end);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*mpeg2_close)(mpeg2dec_t *mpeg2dec);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*mpeg2_reset)(mpeg2dec_t *mpeg2dec, int full_reset);&lt;/p>
&lt;p>&lt;code> &lt;/code>void (*mpeg2_set_rtStart)(mpeg2dec_t *mpeg2dec, int64_t rtStart);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*mpeg2_guess_aspect)(const mpeg2_sequence_t * sequence, unsigned int * pixel_width, unsigned int * pixel_height);&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg2dec_t *mpeg2dec;&lt;/p>
&lt;p>&lt;code> &lt;/code>const mpeg2_info_t *info;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool wait4Iframe;&lt;/p>
&lt;p>&lt;code> &lt;/code>int sequenceFlag;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME avgTimePerFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>TffPict oldpict;&lt;/p>
&lt;p>&lt;code> &lt;/code>Textradata *extradata;&lt;/p>
&lt;p>&lt;code> &lt;/code>TccDecoder *ccDecoder;&lt;/p>
&lt;p>&lt;code> &lt;/code>Tbuffer *buffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t oldflags;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool m_fFilm;&lt;/p>
&lt;p>&lt;code> &lt;/code>int SetDeinterlaceMethod(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>void init(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT decompressI(const unsigned char *src, size_t srcLen, IMediaSample *pIn);&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool beginDecompress(TffPictBase &amp;amp;pict, FOURCC infcc, const CMediaType &amp;amp;mt, int sourceFlags);&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecLibmpeg2(IffdshowBase *Ideci, IdecVideoSink *Isink);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TvideoCodecLibmpeg2();&lt;/p>
&lt;p>&lt;code> &lt;/code>static const char_t *dllname;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int getType(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return IDFF_MOVIE_LIBMPEG2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int caps(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return CAPS::VIS_QUANTS;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void end(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT decompress(const unsigned char *src, size_t srcLen, IMediaSample *pIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool onSeek(REFERENCE_TIME segmentStart);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT BeginFlush();&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>TvideoCodecXviD4定义如下：&lt;/p>
&lt;p>#ifndef _TVIDEOCODECXVID4_H_&lt;/p>
&lt;p>#define _TVIDEOCODECXVID4_H_&lt;/p>
&lt;p>#include &amp;quot;TvideoCodec.h&amp;quot;&lt;/p>
&lt;p>class Tdll;&lt;/p>
&lt;p>struct Textradata;&lt;/p>
&lt;p>//xvid解码器&lt;/p>
&lt;p>class TvideoCodecXviD4 : public TvideoCodecDec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>void create(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>Tdll *dll;&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecXviD4(IffdshowBase *Ideci, IdecVideoSink *IsinkD);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TvideoCodecXviD4();&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*xvid_global)(void *handle, int opt, void *param1, void *param2);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*xvid_decore)(void *handle, int opt, void *param1, void *param2);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*xvid_plugin_single)(void *handle, int opt, void *param1, void *param2);&lt;/p>
&lt;p>&lt;code> &lt;/code>int (*xvid_plugin_lumimasking)(void *handle, int opt, void *param1, void *param2);&lt;/p>
&lt;p>&lt;code> &lt;/code>static const char_t *dllname;&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>void *enchandle, *dechandle;&lt;/p>
&lt;p>&lt;code> &lt;/code>int psnr;&lt;/p>
&lt;p>&lt;code> &lt;/code>TffPict pict;&lt;/p>
&lt;p>&lt;code> &lt;/code>Tbuffer pictbuf;&lt;/p>
&lt;p>&lt;code> &lt;/code>static int me_hq(int rd3), me_(int me3);&lt;/p>
&lt;p>&lt;code> &lt;/code>Textradata *extradata;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart, rtStop;&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool beginDecompress(TffPictBase &amp;amp;pict, FOURCC infcc, const CMediaType &amp;amp;mt, int sourceFlags);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT flushDec(void);&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int getType(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return IDFF_MOVIE_XVID4;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int caps(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return CAPS::VIS_QUANTS;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT decompress(const unsigned char *src, size_t srcLen, IMediaSample *pIn);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>从以上这2种解码器类的定义，我们可以看出一些规律，比如说：&lt;/p>
&lt;p>\1. 都有Tdll *dll这个变量，用于加载视频解码器的dll&lt;/p>
&lt;p>\2. 都有beginDecompress()函数，用于初始化解码器&lt;/p>
&lt;p>\3. 都有decompress()函数，用于解码&lt;/p>
&lt;p>好了，闲话不说，回归正题，来看一下这些解码器共有的父类：TvideoCodecDec&lt;/p>
&lt;p>//具体 视频 解码器的父类，存一些公共信息&lt;/p>
&lt;p>class TvideoCodecDec : virtual public TvideoCodec, virtual public TcodecDec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>bool isdvdproc;&lt;/p>
&lt;p>&lt;code> &lt;/code>comptrQ&lt;IffdshowDecVideo> deciV;&lt;/p>
&lt;p>&lt;code> &lt;/code>IdecVideoSink *sinkD;&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecDec(IffdshowBase *Ideci, IdecVideoSink *Isink);&lt;/p>
&lt;p>&lt;code> &lt;/code>Rational guessMPEG2sar(const Trect &amp;amp;r, const Rational &amp;amp;sar2, const Rational &amp;amp;containerSar);&lt;/p>
&lt;p>&lt;code> &lt;/code>class TtelecineManager&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecDec* parent;&lt;/p>
&lt;p>&lt;code> &lt;/code>int segment_count;&lt;/p>
&lt;p>&lt;code> &lt;/code>int pos_in_group;&lt;/p>
&lt;p>&lt;code> &lt;/code>struct {&lt;/p>
&lt;p>&lt;code> &lt;/code>int fieldtype;&lt;/p>
&lt;p>&lt;code> &lt;/code>int repeat_pict;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>} group[2]; // store information about 2 recent frames.&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME group_rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool film;&lt;/p>
&lt;p>&lt;code> &lt;/code>int cfg_softTelecine;&lt;/p>
&lt;p>&lt;code> &lt;/code>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TtelecineManager(TvideoCodecDec* Iparent);&lt;/p>
&lt;p>&lt;code> &lt;/code>void get_timestamps(TffPict &amp;amp;pict);&lt;/p>
&lt;p>&lt;code> &lt;/code>void get_fieldtype(TffPict &amp;amp;pict);&lt;/p>
&lt;p>&lt;code> &lt;/code>void new_frame(int top_field_first, int repeat_pict, const REFERENCE_TIME &amp;amp;rtStart, const REFERENCE_TIME &amp;amp;rtStop);&lt;/p>
&lt;p>&lt;code> &lt;/code>void onSeek(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>} telecineManager;&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>static TvideoCodecDec* initDec(IffdshowBase *deci, IdecVideoSink *Isink, AVCodecID codecId, FOURCC fcc, const CMediaType &amp;amp;mt);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TvideoCodecDec();&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int caps(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return CAPS::NONE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool testMediaType(FOURCC fcc, const CMediaType &amp;amp;mt) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return true;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void forceOutputColorspace(const BITMAPINFOHEADER *hdr, int *ilace, TcspInfos &amp;amp;forcedCsps) {&lt;/p>
&lt;p>&lt;code> &lt;/code>*ilace = 0; //cspInfos of forced output colorspace, empty when entering function&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>enum {SOURCE_REORDER = 1};&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool beginDecompress(TffPictBase &amp;amp;pict, FOURCC infcc, const CMediaType &amp;amp;mt, int sourceFlags) = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT decompress(const unsigned char *src, size_t srcLen, IMediaSample *pIn) = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool onDiscontinuity(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT onEndOfStream(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned int quantsDx, quantsStride, quantsDy, quantBytes, quantType;&lt;/p>
&lt;p>&lt;code> &lt;/code>//QP表&lt;/p>
&lt;p>&lt;code> &lt;/code>void *quants;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint16_t *intra_matrix, *inter_matrix;&lt;/p>
&lt;p>&lt;code> &lt;/code>//计算平均QP&lt;/p>
&lt;p>&lt;code> &lt;/code>float calcMeanQuant(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>//画运动矢量&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool drawMV(unsigned char *dst, unsigned int dx, stride_t stride, unsigned int dy) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual const char* get_current_idct(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int useDXVA(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void setOutputPin(IPin * /*pPin*/) {}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>TvideoCodecDec这个类中，还定义了一个类TtelecineManager。这种在类里面再定义一个类的方式还是不太多见的。TtelecineManager这个类的作用还没有研究，先不管它。&lt;/p>
&lt;p>可以看出，TvideoCodecDec类的定义并不复杂，最主要的变量有如下几个，这几个变量都是子类中会用到的：&lt;/p>
&lt;p>comptrQ&lt;IffdshowDecVideo>deciV：重要性不言而喻，回头介绍&lt;/p>
&lt;p>IdecVideoSink *sinkD：重要性不言而喻，回头介绍&lt;/p>
&lt;p>void *quants：QP表（为什么要存在这里还没搞清）&lt;/p>
&lt;p>TvideoCodecDec类定义了几个函数：&lt;/p>
&lt;p>initDec()：初始化解码器（重要）&lt;/p>
&lt;p>calcMeanQuant()：计算平均QP（为什么要在这里计算还没搞清）&lt;/p>
&lt;p>TvideoCodecDec类还定义了一些纯虚函数，作为接口，这些函数的实现都在TvideoCodecDec的子类中完成【这几个函数是最重要的】：&lt;/p>
&lt;p>beginDecompress();&lt;/p>
&lt;p>decompress();&lt;/p>
&lt;p>TvideoCodecDec类中最重要的函数只有一个，就是initDec()，作用主要是初始化解码器。其他的很多函数大多只是定义了一个名称，并没有实现，因为都是打算在具体各种解码器类中再进行实现的。&lt;/p>
&lt;p>看一下initDec()的代码：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493743#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493743#">copy&lt;/a>&lt;img src="https://code.csdn.net/assets/CODE_ico.png" alt="">&lt;img src="https://code.csdn.net/assets/ico_fork.svg" alt="">&lt;/p>
&lt;p>TvideoCodecDec* TvideoCodecDec::initDec(IffdshowBase *deci, IdecVideoSink *sink, AVCodecID codecId, FOURCC fcc, const CMediaType &amp;amp;mt)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>// DXVA mode is a preset setting&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (codecId) {&lt;/p>
&lt;p>&lt;code> &lt;/code>case AV_CODEC_ID_H264:&lt;/p>
&lt;p>&lt;code> &lt;/code>if (deci-&amp;gt;getParam2(IDFF_filterMode) &amp;amp; IDFF_FILTERMODE_VIDEODXVA) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (deci-&amp;gt;getParam2(IDFF_dec_DXVA_H264)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = CODEC_ID_H264_DXVA;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case AV_CODEC_ID_VC1:&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_WMV9_LIB:&lt;/p>
&lt;p>&lt;code> &lt;/code>if (deci-&amp;gt;getParam2(IDFF_filterMode) &amp;amp; IDFF_FILTERMODE_VIDEODXVA) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (deci-&amp;gt;getParam2(IDFF_dec_DXVA_VC1)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = CODEC_ID_VC1_DXVA;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodecDec *movie = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (is_quicksync_codec(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecQuickSync(deci, sink, codecId);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (lavc_codec(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecLibavcodec(deci, sink);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (raw_codec(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecUncompressed(deci, sink);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (wmv9_codec(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecWmv9(deci, sink);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codecId == CODEC_ID_XVID4) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecXviD4(deci, sink);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codecId == CODEC_ID_LIBMPEG2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecLibmpeg2(deci, sink);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codecId == CODEC_ID_AVISYNTH) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecAvisynth(deci, sink);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codecId == CODEC_ID_H264_DXVA || codecId == CODEC_ID_VC1_DXVA) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie = new TvideoCodecLibavcodecDxva(deci, sink, codecId);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!movie) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (movie-&amp;gt;ok &amp;amp;&amp;amp; movie-&amp;gt;testMediaType(fcc, mt)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>movie-&amp;gt;codecId = codecId;&lt;/p>
&lt;p>&lt;code> &lt;/code>return movie;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (is_quicksync_codec(codecId)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// QuickSync decoder init failed, revert to internal decoder.&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (codecId) {&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_H264_QUICK_SYNC:&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = AV_CODEC_ID_H264;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_MPEG2_QUICK_SYNC:&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = CODEC_ID_LIBMPEG2;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_VC1_QUICK_SYNC:&lt;/p>
&lt;p>&lt;code> &lt;/code>codecId = CODEC_ID_WMV9_LIB;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>ASSERT(FALSE); // this shouldn't happen!&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>delete movie;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Call this function again with the new codecId.&lt;/p>
&lt;p>&lt;code> &lt;/code>return initDec(deci, sink, codecId, fcc, mt);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>delete movie;&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>这个函数的功能还是比较好理解的，根据CodecID的不同，创建不同的解码器（从TvideoCodecLibavcodec，TvideoCodecXviD4，TvideoCodecLibmpeg2这些里面选择）。&lt;/p>
&lt;p>虽然不知道用途是什么，但是我们可以顺便看一下计算平均QP的函数，就是把quants1指向的QP表里面的数据求了一个平均值：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493743#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493743#">copy&lt;/a>&lt;img src="https://code.csdn.net/assets/CODE_ico.png" alt="">&lt;img src="https://code.csdn.net/assets/ico_fork.svg" alt="">&lt;/p>
&lt;p>//计算平均QP&lt;/p>
&lt;p>float TvideoCodecDec::calcMeanQuant(void)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!quants || !quantsDx || !quantsDy) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned int sum = 0, num = quantsDx * quantsDy;&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned char *quants1 = (unsigned char*)quants;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (unsigned int y = 0; y &amp;lt; quantsDy; y++)&lt;/p>
&lt;p>&lt;code> &lt;/code>for (unsigned int x = 0; x &amp;lt; quantsDx; x++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>sum += quants1[(y * quantsStride + x) * quantBytes];&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return float(sum) / num;&lt;/p>
&lt;p>}&lt;/p>
&lt;h3 id="ffdshow-源代码分析-9-编解码器有关类的总结httpblogcsdnnetleixiaohua1020articledetails15493961">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961">&lt;strong>ffdshow 源代码分析 9： 编解码器有关类的总结&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>本文再做最后一点的分析。在ffdshow中有如下继承关系：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.152.jpeg" alt="">&lt;/p>
&lt;p>前文已经分析过TvideoCodecLibavcodec，TvideoCodecDec，在这里我们看一下他们的父类：TvideoCodec，TcodecDec，以及前两个类的父类Tcodec。&lt;/p>
&lt;p>其实本文介绍的这3个类充当了接口的作用，TvideoCodecDec继承TvideoCodec，TcodecDec，以及这两个类继承Tcodec，都使用了virtual的方式。&lt;/p>
&lt;p>先来看看TvideoCodec。注意这个类强调的是【视频】：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961#">copy&lt;/a>&lt;img src="https://code.csdn.net/assets/CODE_ico.png" alt="">&lt;img src="https://code.csdn.net/assets/ico_fork.svg" alt="">&lt;/p>
&lt;p>//编解码器的父类&lt;/p>
&lt;p>class TvideoCodec : virtual public Tcodec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>TvideoCodec(IffdshowBase *Ideci);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TvideoCodec();&lt;/p>
&lt;p>&lt;code> &lt;/code>bool ok;&lt;/p>
&lt;p>&lt;code> &lt;/code>int connectedSplitter;&lt;/p>
&lt;p>&lt;code> &lt;/code>bool isInterlacedRawVideo;&lt;/p>
&lt;p>&lt;code> &lt;/code>Rational containerSar;&lt;/p>
&lt;p>&lt;code> &lt;/code>struct CAPS {&lt;/p>
&lt;p>&lt;code> &lt;/code>enum {&lt;/p>
&lt;p>&lt;code> &lt;/code>NONE = 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>VIS_MV = 1,&lt;/p>
&lt;p>&lt;code> &lt;/code>VIS_QUANTS = 2&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>};&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void end(void) {}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>可以看出TvideoCodec定义非常的简单，只包含了视频编解码器会用到的一些变量。注意，是编解码器，不仅仅是解码器。&lt;/p>
&lt;p>再来看看TcodecDec。注意这个类强调的是【解码】：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961#">copy&lt;/a>&lt;img src="https://code.csdn.net/assets/CODE_ico.png" alt="">&lt;img src="https://code.csdn.net/assets/ico_fork.svg" alt="">&lt;/p>
&lt;p>//实现了解码器的祖父类&lt;/p>
&lt;p>class TcodecDec : virtual public Tcodec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>IdecSink *sink;&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>comptrQ&lt;IffdshowDec> deciD;&lt;/p>
&lt;p>&lt;code> &lt;/code>TcodecDec(IffdshowBase *Ideci, IdecSink *Isink);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~TcodecDec();&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT flushDec(void) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT flush(void);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>可以看出TcodecDec定义非常简单，只包含了解码器需要的一些变量，注意不限于视频解码器，还包含音频解码器。有两个变量比较重要：&lt;/p>
&lt;p>IdecSink *sink;&lt;/p>
&lt;p>comptrQ&lt;IffdshowDec> deciD;&lt;/p>
&lt;p>最后来看一下Tcodec。这个类不再继承任何类：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15493961#">copy&lt;/a>&lt;img src="https://code.csdn.net/assets/CODE_ico.png" alt="">&lt;img src="https://code.csdn.net/assets/ico_fork.svg" alt="">&lt;/p>
&lt;p>//编解码器的祖父类，都是虚函数&lt;/p>
&lt;p>class Tcodec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>const Tconfig *config;&lt;/p>
&lt;p>&lt;code> &lt;/code>comptr&lt;IffdshowBase> deci;&lt;/p>
&lt;p>&lt;code> &lt;/code>Tcodec(IffdshowBase *Ideci);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~Tcodec();&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecID codecId;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual int getType(void) const = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual const char_t* getName(void) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>return getMovieSourceName(getType());&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual void getEncoderInfo(char_t *buf, size_t buflen) const {&lt;/p>
&lt;p>&lt;code> &lt;/code>ff_strncpy(buf, _l(&amp;quot;unknown&amp;quot;), buflen);&lt;/p>
&lt;p>&lt;code> &lt;/code>buf[buflen - 1] = '\0';&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>static const char_t* getMovieSourceName(int source);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT flush() {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT BeginFlush() {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT EndFlush() {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual bool onSeek(REFERENCE_TIME segmentStart) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return false;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>可以看出，该类定义了一些编解码器会用到的公共函数。有几个变量还是比较重要的：&lt;/p>
&lt;p>const Tconfig *config;&lt;/p>
&lt;p>comptr&lt;IffdshowBase> deci;&lt;/p>
&lt;p>Tcodec(IffdshowBase *Ideci);&lt;/p>
&lt;p>AVCodecID codecId&lt;/p>
&lt;p>自此，我们可以总结出ffdshow编解码器这部分继承关系如下（图太大了，截成两张）：&lt;/p>
&lt;p>从TcodecDec继承下来的如下图所示。包含视频解码器以及音频解码器。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.153.jpeg" alt="">&lt;/p>
&lt;p>从TvideoCodec继承下来的如下图所示。包含了解码器类和编码器类。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.154.jpeg" alt="">&lt;/p>
&lt;p>总算大体上完成了，关于ffdshow解码器封装的内容就先告一段落吧。&lt;/p>
&lt;h2 id="92-lav-filters">&lt;strong>9.2 LAV filters&lt;/strong>&lt;/h2>
&lt;p>LAV Filter是基于ffmpeg的解码器类库libavcodec，以及解封装器类库libavformat的DirectShow Filter。广泛安装在PC上。&lt;/p>
&lt;h3 id="lav-filter-源代码分析-1-总体结构httpblogcsdnnetleixiaohua1020articledetails12711379">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711379">&lt;strong>LAV Filter 源代码分析 1： 总体结构&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>LAV Filter 是一款视频分离和解码软件，他的分离器封装了FFMPEG中的libavformat，解码器则封装了FFMPEG中的libavcodec。它支持十分广泛的视音频格式。&lt;/p>
&lt;p>源代码位于GitHub或Google Code：&lt;/p>
&lt;p>&lt;a href="https://github.com/Nevcairiel/LAVFilters">https://github.com/Nevcairiel/LAVFilters&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://code.google.com/p/lavfilters/">http://code.google.com/p/lavfilters/&lt;/a>&lt;/p>
&lt;p>本文分析了LAV Filter源代码的总体架构。&lt;/p>
&lt;p>使用git获取LAV filter源代码之后，使用VC 2010 打开源代码，发现代码目录结构如图所示：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.155.jpeg" alt="">&lt;/p>
&lt;p>整个解决方案由8个工程组成，介绍一下我目前所知的几个工程：&lt;/p>
&lt;p>baseclasses：DirectShow基类，在DirectShow的SDK中也有，是微软为了简化DirectShow开发而提供的。&lt;/p>
&lt;p>Demuxers：解封装的基类，LAVSplitter需要调用其中的方法完成解封装操作。&lt;/p>
&lt;p>LAVAudio：音频解码Filter。封装了libavcodec。&lt;/p>
&lt;p>LAVSplitter：解封装Filter。封装了libavformat。&lt;/p>
&lt;p>LAVVideo：视频解码Filter。封装了libavcodec。&lt;/p>
&lt;p>libbluray：蓝光的支持。&lt;/p>
&lt;p>以上标为咖啡色字体的是要重点分析的，也是最重要的工程。&lt;/p>
&lt;h3 id="lav-filter-源代码分析-2-lav-splitterhttpblogcsdnnetleixiaohua1020articledetails12711723">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723">&lt;strong>LAV Filter 源代码分析 2： LAV Splitter&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>LAV Filter 中最著名的就是 LAV Splitter，支持Matroska /WebM，MPEG-TS/PS，MP4/MOV，FLV，OGM / OGG，AVI等其他格式，广泛存在于各种视频播放器（暴风影音这类的）之中。&lt;/p>
&lt;p>本文分析一下它的源代码。在分析之前，先看看它是什么样的。&lt;/p>
&lt;p>使用GraphEdit随便打开一个视频文件，就可以看见LAV Filter：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.156.jpeg" alt="">&lt;/p>
&lt;p>可以右键点击这个Filter看一下它的属性页面，如图所示：&lt;/p>
&lt;p>属性设置页面：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.157.jpeg" alt="">&lt;/p>
&lt;p>支持输入格式：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.158.jpeg" alt="">&lt;/p>
&lt;p>下面我们在 VC 2010 中看一下它的源代码：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.159.jpeg" alt="">&lt;/p>
&lt;p>从何看起呢？就先从directshow的注册函数看起吧，位于dllmain.cpp之中。部分代码的含义已经用注释标注上了。从代码可以看出，和普通的DirectShow Filter没什么区别。&lt;/p>
&lt;p>dllmain.cpp&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Copyright (C) 2010-2013 Hendrik Leppkes&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="http://www.1f0.de">http://www.1f0.de&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is free software; you can redistribute it and/or modify&lt;/p>
&lt;p>&lt;code> &lt;/code>* it under the terms of the GNU General Public License as published by&lt;/p>
&lt;p>&lt;code> &lt;/code>* the Free Software Foundation; either version 2 of the License, or&lt;/p>
&lt;p>&lt;code> &lt;/code>* (at your option) any later version.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is distributed in the hope that it will be useful,&lt;/p>
&lt;p>&lt;code> &lt;/code>* but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p>
&lt;p>&lt;code> &lt;/code>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;/p>
&lt;p>&lt;code> &lt;/code>* GNU General Public License for more details.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* You should have received a copy of the GNU General Public License along&lt;/p>
&lt;p>&lt;code> &lt;/code>* with this program; if not, write to the Free Software Foundation, Inc.,&lt;/p>
&lt;p>&lt;code> &lt;/code>* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>// Based on the SampleParser Template by GDCL&lt;/p>
&lt;p>// --------------------------------------------------------------------------------&lt;/p>
&lt;p>// Copyright (c) GDCL 2004. All Rights Reserved.&lt;/p>
&lt;p>// You are free to re-use this as the basis for your own filter development,&lt;/p>
&lt;p>// provided you retain this copyright notice in the source.&lt;/p>
&lt;p>// &lt;a href="http://www.gdcl.co.uk">http://www.gdcl.co.uk&lt;/a>&lt;/p>
&lt;p>// --------------------------------------------------------------------------------&lt;/p>
&lt;p>//各种定义。。。&lt;/p>
&lt;p>#include &amp;quot;stdafx.h&amp;quot;&lt;/p>
&lt;p>// Initialize the GUIDs&lt;/p>
&lt;p>#include &amp;lt;InitGuid.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;qnetwork.h&amp;gt;&lt;/p>
&lt;p>#include &amp;quot;LAVSplitter.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;moreuuids.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;registry.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;IGraphRebuildDelegate.h&amp;quot;&lt;/p>
&lt;p>// The GUID we use to register the splitter media types&lt;/p>
&lt;p>DEFINE_GUID(MEDIATYPE_LAVSplitter,&lt;/p>
&lt;p>&lt;code> &lt;/code>0x9c53931c, 0x7d5a, 0x4a75, 0xb2, 0x6f, 0x4e, 0x51, 0x65, 0x4d, 0xb2, 0xc0);&lt;/p>
&lt;p>// --- COM factory table and registration code --------------&lt;/p>
&lt;p>//注册时候的信息&lt;/p>
&lt;p>const AMOVIESETUP_MEDIATYPE&lt;/p>
&lt;p>&lt;code> &lt;/code>sudMediaTypes[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>{ &amp;amp;MEDIATYPE_Stream, &amp;amp;MEDIASUBTYPE_NULL },&lt;/p>
&lt;p>};&lt;/p>
&lt;p>//注册时候的信息（PIN）&lt;/p>
&lt;p>const AMOVIESETUP_PIN sudOutputPins[] =&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>L&amp;quot;Output&amp;quot;, // pin name&lt;/p>
&lt;p>&lt;code> &lt;/code>FALSE, // is rendered?&lt;/p>
&lt;p>&lt;code> &lt;/code>TRUE, // is output?&lt;/p>
&lt;p>&lt;code> &lt;/code>FALSE, // zero instances allowed?&lt;/p>
&lt;p>&lt;code> &lt;/code>TRUE, // many instances allowed?&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;CLSID_NULL, // connects to filter (for bridge pins)&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL, // connects to pin (for bridge pins)&lt;/p>
&lt;p>&lt;code> &lt;/code>0, // count of registered media types&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL // list of registered media types&lt;/p>
&lt;p>&lt;code> &lt;/code>},&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>L&amp;quot;Input&amp;quot;, // pin name&lt;/p>
&lt;p>&lt;code> &lt;/code>FALSE, // is rendered?&lt;/p>
&lt;p>&lt;code> &lt;/code>FALSE, // is output?&lt;/p>
&lt;p>&lt;code> &lt;/code>FALSE, // zero instances allowed?&lt;/p>
&lt;p>&lt;code> &lt;/code>FALSE, // many instances allowed?&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;CLSID_NULL, // connects to filter (for bridge pins)&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL, // connects to pin (for bridge pins)&lt;/p>
&lt;p>&lt;code> &lt;/code>1, // count of registered media types&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;sudMediaTypes[0] // list of registered media types&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>//注册时候的信息（名称等）&lt;/p>
&lt;p>//CLAVSplitter&lt;/p>
&lt;p>const AMOVIESETUP_FILTER sudFilterReg =&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;__uuidof(CLAVSplitter), // filter clsid&lt;/p>
&lt;p>&lt;code> &lt;/code>L&amp;quot;LAV Splitter&amp;quot;, // filter name&lt;/p>
&lt;p>&lt;code> &lt;/code>MERIT_PREFERRED + 4, // merit&lt;/p>
&lt;p>&lt;code> &lt;/code>2, // count of registered pins&lt;/p>
&lt;p>&lt;code> &lt;/code>sudOutputPins, // list of pins to register&lt;/p>
&lt;p>&lt;code> &lt;/code>CLSID_LegacyAmFilterCategory&lt;/p>
&lt;p>};&lt;/p>
&lt;p>//注册时候的信息（名称等）&lt;/p>
&lt;p>//CLAVSplitterSource&lt;/p>
&lt;p>const AMOVIESETUP_FILTER sudFilterRegSource =&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;__uuidof(CLAVSplitterSource), // filter clsid&lt;/p>
&lt;p>&lt;code> &lt;/code>L&amp;quot;LAV Splitter Source&amp;quot;, // filter name&lt;/p>
&lt;p>&lt;code> &lt;/code>MERIT_PREFERRED + 4, // merit&lt;/p>
&lt;p>&lt;code> &lt;/code>1, // count of registered pins&lt;/p>
&lt;p>&lt;code> &lt;/code>sudOutputPins, // list of pins to register&lt;/p>
&lt;p>&lt;code> &lt;/code>CLSID_LegacyAmFilterCategory&lt;/p>
&lt;p>};&lt;/p>
&lt;p>// --- COM factory table and registration code --------------&lt;/p>
&lt;p>// DirectShow base class COM factory requires this table,&lt;/p>
&lt;p>// declaring all the COM objects in this DLL&lt;/p>
&lt;p>// 注意g_Templates名称是固定的&lt;/p>
&lt;p>CFactoryTemplate g_Templates[] = {&lt;/p>
&lt;p>&lt;code> &lt;/code>// one entry for each CoCreate-able object&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>sudFilterReg.strName,&lt;/p>
&lt;p>&lt;code> &lt;/code>sudFilterReg.clsID,&lt;/p>
&lt;p>&lt;code> &lt;/code>CreateInstance&lt;CLAVSplitter>,&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVSplitter::StaticInit,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;sudFilterReg&lt;/p>
&lt;p>&lt;code> &lt;/code>},&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>sudFilterRegSource.strName,&lt;/p>
&lt;p>&lt;code> &lt;/code>sudFilterRegSource.clsID,&lt;/p>
&lt;p>&lt;code> &lt;/code>CreateInstance&lt;CLAVSplitterSource>,&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;sudFilterRegSource&lt;/p>
&lt;p>&lt;code> &lt;/code>},&lt;/p>
&lt;p>&lt;code> &lt;/code>// This entry is for the property page.&lt;/p>
&lt;p>&lt;code> &lt;/code>// 属性页&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>L&amp;quot;LAV Splitter Properties&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;CLSID_LAVSplitterSettingsProp,&lt;/p>
&lt;p>&lt;code> &lt;/code>CreateInstance&lt;CLAVSplitterSettingsProp>,&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL, NULL&lt;/p>
&lt;p>&lt;code> &lt;/code>},&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>L&amp;quot;LAV Splitter Input Formats&amp;quot;,&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;CLSID_LAVSplitterFormatsProp,&lt;/p>
&lt;p>&lt;code> &lt;/code>CreateInstance&lt;CLAVSplitterFormatsProp>,&lt;/p>
&lt;p>&lt;code> &lt;/code>NULL, NULL&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>};&lt;/p>
&lt;p>int g_cTemplates = sizeof(g_Templates) / sizeof(g_Templates[0]);&lt;/p>
&lt;p>// self-registration entrypoint&lt;/p>
&lt;p>STDAPI DllRegisterServer()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>std::list&lt;LPCWSTR> chkbytes;&lt;/p>
&lt;p>&lt;code> &lt;/code>// BluRay&lt;/p>
&lt;p>&lt;code> &lt;/code>chkbytes.clear();&lt;/p>
&lt;p>&lt;code> &lt;/code>chkbytes.push_back(L&amp;quot;0,4,,494E4458&amp;quot;); // INDX (index.bdmv)&lt;/p>
&lt;p>&lt;code> &lt;/code>chkbytes.push_back(L&amp;quot;0,4,,4D4F424A&amp;quot;); // MOBJ (MovieObject.bdmv)&lt;/p>
&lt;p>&lt;code> &lt;/code>chkbytes.push_back(L&amp;quot;0,4,,4D504C53&amp;quot;); // MPLS&lt;/p>
&lt;p>&lt;code> &lt;/code>RegisterSourceFilter(__uuidof(CLAVSplitterSource),&lt;/p>
&lt;p>&lt;code> &lt;/code>MEDIASUBTYPE_LAVBluRay, chkbytes, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>// base classes will handle registration using the factory template table&lt;/p>
&lt;p>&lt;code> &lt;/code>return AMovieDllRegisterServer2(true);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>STDAPI DllUnregisterServer()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>UnRegisterSourceFilter(MEDIASUBTYPE_LAVBluRay);&lt;/p>
&lt;p>&lt;code> &lt;/code>// base classes will handle de-registration using the factory template table&lt;/p>
&lt;p>&lt;code> &lt;/code>return AMovieDllRegisterServer2(false);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>// if we declare the correct C runtime entrypoint and then forward it to the DShow base&lt;/p>
&lt;p>// classes we will be sure that both the C/C++ runtimes and the base classes are initialized&lt;/p>
&lt;p>// correctly&lt;/p>
&lt;p>extern &amp;quot;C&amp;quot; BOOL WINAPI DllEntryPoint(HINSTANCE, ULONG, LPVOID);&lt;/p>
&lt;p>BOOL WINAPI DllMain(HANDLE hDllHandle, DWORD dwReason, LPVOID lpReserved)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return DllEntryPoint(reinterpret_cast&lt;HINSTANCE>(hDllHandle), dwReason, lpReserved);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>void CALLBACK OpenConfiguration(HWND hwnd, HINSTANCE hinst, LPSTR lpszCmdLine, int nCmdShow)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>CUnknown *pInstance = CreateInstance&lt;CLAVSplitter>(NULL, &amp;amp;hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>IBaseFilter *pFilter = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>pInstance-&amp;gt;NonDelegatingQueryInterface(IID_IBaseFilter, (void **)&amp;amp;pFilter);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pFilter) {&lt;/p>
&lt;p>&lt;code> &lt;/code>pFilter-&amp;gt;AddRef();&lt;/p>
&lt;p>&lt;code> &lt;/code>CBaseDSPropPage::ShowPropPageDialog(pFilter);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>delete pInstance;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>接下来就要进入正题了，看一看核心的分离器（解封装器）的类CLAVSplitter的定义文件LAVSplitter.h。乍一看这个类确实了得，居然继承了那么多的父类，实在是碉堡了。先不管那么多，看看里面都有什么函数吧。主要的函数上面都加了注释。注意还有一个类CLAVSplitterSource继承了CLAVSplitter。&lt;/p>
&lt;p>LAVSplitter.h&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Copyright (C) 2010-2013 Hendrik Leppkes&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="http://www.1f0.de">http://www.1f0.de&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is free software; you can redistribute it and/or modify&lt;/p>
&lt;p>&lt;code> &lt;/code>* it under the terms of the GNU General Public License as published by&lt;/p>
&lt;p>&lt;code> &lt;/code>* the Free Software Foundation; either version 2 of the License, or&lt;/p>
&lt;p>&lt;code> &lt;/code>* (at your option) any later version.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is distributed in the hope that it will be useful,&lt;/p>
&lt;p>&lt;code> &lt;/code>* but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p>
&lt;p>&lt;code> &lt;/code>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;/p>
&lt;p>&lt;code> &lt;/code>* GNU General Public License for more details.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* You should have received a copy of the GNU General Public License along&lt;/p>
&lt;p>&lt;code> &lt;/code>* with this program; if not, write to the Free Software Foundation, Inc.,&lt;/p>
&lt;p>&lt;code> &lt;/code>* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Initial design and concept by Gabest and the MPC-HC Team, copyright under GPLv2&lt;/p>
&lt;p>&lt;code> &lt;/code>* Contributions by Ti-BEN from the XBMC DSPlayer Project, also under GPLv2&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>#pragma once&lt;/p>
&lt;p>#include &lt;string>&lt;/p>
&lt;p>#include &lt;list>&lt;/p>
&lt;p>#include &lt;set>&lt;/p>
&lt;p>#include &lt;vector>&lt;/p>
&lt;p>#include &lt;map>&lt;/p>
&lt;p>#include &amp;quot;PacketQueue.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;BaseDemuxer.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;LAVSplitterSettingsInternal.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;SettingsProp.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;IBufferInfo.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;ISpecifyPropertyPages2.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;LAVSplitterTrayIcon.h&amp;quot;&lt;/p>
&lt;p>#define LAVF_REGISTRY_KEY L&amp;quot;Software\LAV\Splitter&amp;quot;&lt;/p>
&lt;p>#define LAVF_REGISTRY_KEY_FORMATS LAVF_REGISTRY_KEY L&amp;quot;\Formats&amp;quot;&lt;/p>
&lt;p>#define LAVF_LOG_FILE L&amp;quot;LAVSplitter.txt&amp;quot;&lt;/p>
&lt;p>#define MAX_PTS_SHIFT 50000000i64&lt;/p>
&lt;p>class CLAVOutputPin;&lt;/p>
&lt;p>class CLAVInputPin;&lt;/p>
&lt;p>#ifdef _MSC_VER&lt;/p>
&lt;p>#pragma warning(disable: 4355)&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>//核心解复用（分离器）&lt;/p>
&lt;p>//暴漏的接口在ILAVFSettings中&lt;/p>
&lt;p>[uuid(&amp;quot;171252A0-8820-4AFE-9DF8-5C92B2D66B04&amp;quot;)]&lt;/p>
&lt;p>class CLAVSplitter&lt;/p>
&lt;p>&lt;code> &lt;/code>: public CBaseFilter&lt;/p>
&lt;p>&lt;code> &lt;/code>, public CCritSec&lt;/p>
&lt;p>&lt;code> &lt;/code>, protected CAMThread&lt;/p>
&lt;p>&lt;code> &lt;/code>, public IFileSourceFilter&lt;/p>
&lt;p>&lt;code> &lt;/code>, public IMediaSeeking&lt;/p>
&lt;p>&lt;code> &lt;/code>, public IAMStreamSelect&lt;/p>
&lt;p>&lt;code> &lt;/code>, public IAMOpenProgress&lt;/p>
&lt;p>&lt;code> &lt;/code>, public ILAVFSettingsInternal&lt;/p>
&lt;p>&lt;code> &lt;/code>, public ISpecifyPropertyPages2&lt;/p>
&lt;p>&lt;code> &lt;/code>, public IObjectWithSite&lt;/p>
&lt;p>&lt;code> &lt;/code>, public IBufferInfo&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVSplitter(LPUNKNOWN pUnk, HRESULT* phr);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~CLAVSplitter();&lt;/p>
&lt;p>&lt;code> &lt;/code>static void CALLBACK StaticInit(BOOL bLoading, const CLSID *clsid);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IUnknown&lt;/p>
&lt;p>&lt;code> &lt;/code>//&lt;/p>
&lt;p>&lt;code> &lt;/code>DECLARE_IUNKNOWN;&lt;/p>
&lt;p>&lt;code> &lt;/code>//暴露接口，使外部程序可以QueryInterface，关键！&lt;/p>
&lt;p>&lt;code> &lt;/code>//翻译（“没有代表的方式查询接口”）&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void** ppv);&lt;/p>
&lt;p>&lt;code> &lt;/code>// CBaseFilter methods&lt;/p>
&lt;p>&lt;code> &lt;/code>//输入是一个，输出就不一定了！&lt;/p>
&lt;p>&lt;code> &lt;/code>int GetPinCount();&lt;/p>
&lt;p>&lt;code> &lt;/code>CBasePin *GetPin(int n);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetClassID(CLSID* pClsID);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Stop();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Pause();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Run(REFERENCE_TIME tStart);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP JoinFilterGraph(IFilterGraph * pGraph, LPCWSTR pName);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IFileSourceFilter&lt;/p>
&lt;p>&lt;code> &lt;/code>// 源Filter的接口方法&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Load(LPCOLESTR pszFileName, const AM_MEDIA_TYPE * pmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetCurFile(LPOLESTR *ppszFileName, AM_MEDIA_TYPE *pmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IMediaSeeking&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetCapabilities(DWORD* pCapabilities);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CheckCapabilities(DWORD* pCapabilities);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP IsFormatSupported(const GUID* pFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP QueryPreferredFormat(GUID* pFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetTimeFormat(GUID* pFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP IsUsingTimeFormat(const GUID* pFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetTimeFormat(const GUID* pFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetDuration(LONGLONG* pDuration);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetStopPosition(LONGLONG* pStop);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetCurrentPosition(LONGLONG* pCurrent);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ConvertTimeFormat(LONGLONG* pTarget, const GUID* pTargetFormat, LONGLONG Source, const GUID* pSourceFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPositions(LONGLONG* pCurrent, DWORD dwCurrentFlags, LONGLONG* pStop, DWORD dwStopFlags);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPositions(LONGLONG* pCurrent, LONGLONG* pStop);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetAvailable(LONGLONG* pEarliest, LONGLONG* pLatest);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetRate(double dRate);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetRate(double* pdRate);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPreroll(LONGLONG* pllPreroll);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IAMStreamSelect&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Count(DWORD *pcStreams);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Enable(long lIndex, DWORD dwFlags);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Info(long lIndex, AM_MEDIA_TYPE **ppmt, DWORD *pdwFlags, LCID *plcid, DWORD *pdwGroup, WCHAR **ppszName, IUnknown **ppObject, IUnknown **ppUnk);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IAMOpenProgress&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP QueryProgress(LONGLONG *pllTotal, LONGLONG *pllCurrent);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP AbortOperation();&lt;/p>
&lt;p>&lt;code> &lt;/code>// ISpecifyPropertyPages2&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPages(CAUUID *pPages);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CreatePage(const GUID&amp;amp; guid, IPropertyPage** ppPage);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IObjectWithSite&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetSite(IUnknown *pUnkSite);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetSite(REFIID riid, void **ppvSite);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IBufferInfo&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(int) GetCount();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetStatus(int i, int&amp;amp; samples, int&amp;amp; size);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetPriority();&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVFSettings&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetRuntimeConfig(BOOL bRuntimeConfig);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPreferredLanguages(LPWSTR *ppLanguages);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPreferredLanguages(LPCWSTR pLanguages);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPreferredSubtitleLanguages(LPWSTR *ppLanguages);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPreferredSubtitleLanguages(LPCWSTR pLanguages);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVSubtitleMode) GetSubtitleMode();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetSubtitleMode(LAVSubtitleMode mode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetSubtitleMatchingLanguage();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetSubtitleMatchingLanguage(BOOL dwMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetPGSForcedStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPGSForcedStream(BOOL bFlag);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetPGSOnlyForced();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPGSOnlyForced(BOOL bForced);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(int) GetVC1TimestampMode();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetVC1TimestampMode(int iMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetSubstreamsEnabled(BOOL bSubStreams);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetSubstreamsEnabled();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetVideoParsingEnabled(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetVideoParsingEnabled();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetFixBrokenHDPVR(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetFixBrokenHDPVR();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(HRESULT) SetFormatEnabled(LPCSTR strFormat, BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) IsFormatEnabled(LPCSTR strFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetStreamSwitchRemoveAudio(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetStreamSwitchRemoveAudio();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetAdvancedSubtitleConfig(LPWSTR *ppAdvancedConfig);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetAdvancedSubtitleConfig(LPCWSTR pAdvancedConfig);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetUseAudioForHearingVisuallyImpaired(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetUseAudioForHearingVisuallyImpaired();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetMaxQueueMemSize(DWORD dwMaxSize);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetMaxQueueMemSize();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetTrayIcon(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetTrayIcon();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPreferHighQualityAudioStreams(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetPreferHighQualityAudioStreams();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetLoadMatroskaExternalSegments(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetLoadMatroskaExternalSegments();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetFormats(LPSTR** formats, UINT* nFormats);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetNetworkStreamAnalysisDuration(DWORD dwDuration);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetNetworkStreamAnalysisDuration();&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVSplitterSettingsInternal&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LPCSTR) GetInputFormat() { if (m_pDemuxer) return m_pDemuxer-&amp;gt;GetContainerFormat(); return NULL; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(std::set&lt;FormatInfo>&amp;amp;) GetInputFormats();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) IsVC1CorrectionRequired();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CMediaType *) GetOutputMediatype(int stream);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(IFilterGraph *) GetFilterGraph() { if (m_pGraph) { m_pGraph-&amp;gt;AddRef(); return m_pGraph; } return NULL; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetStreamFlags(DWORD dwStream) { if (m_pDemuxer) return m_pDemuxer-&amp;gt;GetStreamFlags(dwStream); return 0; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(int) GetPixelFormat(DWORD dwStream) { if (m_pDemuxer) return m_pDemuxer-&amp;gt;GetPixelFormat(dwStream); return AV_PIX_FMT_NONE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(int) GetHasBFrames(DWORD dwStream){ if (m_pDemuxer) return m_pDemuxer-&amp;gt;GetHasBFrames(dwStream); return -1; }&lt;/p>
&lt;p>&lt;code> &lt;/code>// Settings helper&lt;/p>
&lt;p>&lt;code> &lt;/code>std::list&lt;a href="std::string">std::string&lt;/a> GetPreferredAudioLanguageList();&lt;/p>
&lt;p>&lt;code> &lt;/code>std::list&lt;CSubtitleSelector> GetSubtitleSelectors();&lt;/p>
&lt;p>&lt;code> &lt;/code>bool IsAnyPinDrying();&lt;/p>
&lt;p>&lt;code> &lt;/code>void SetFakeASFReader(BOOL bFlag) { m_bFakeASFReader = bFlag; }&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>// CAMThread&lt;/p>
&lt;p>&lt;code> &lt;/code>enum {CMD_EXIT, CMD_SEEK};&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD ThreadProc();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT DemuxSeek(REFERENCE_TIME rtStart);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT DemuxNextPacket();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT DeliverPacket(Packet *pPacket);&lt;/p>
&lt;p>&lt;code> &lt;/code>void DeliverBeginFlush();&lt;/p>
&lt;p>&lt;code> &lt;/code>void DeliverEndFlush();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Close();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP DeleteOutputs();&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化解复用器&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP InitDemuxer();&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class CLAVOutputPin;&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPositionsInternal(void *caller, LONGLONG* pCurrent, DWORD dwCurrentFlags, LONGLONG* pStop, DWORD dwStopFlags);&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVOutputPin *GetOutputPin(DWORD streamId, BOOL bActiveOnly = FALSE);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP RenameOutputPin(DWORD TrackNumSrc, DWORD TrackNumDst, std::vector&lt;CMediaType> pmts);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP UpdateForcedSubtitleMediaType();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CompleteInputConnection();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP BreakInputConnection();&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>//相关的参数设置&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP LoadDefaults();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ReadSettings(HKEY rootKey);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP LoadSettings();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SaveSettings();&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建图标&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CreateTrayIcon();&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVInputPin *m_pInput;&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>CCritSec m_csPins;&lt;/p>
&lt;p>&lt;code> &lt;/code>//用vector存储输出PIN（解复用的时候是不确定的）&lt;/p>
&lt;p>&lt;code> &lt;/code>std::vector&amp;lt;CLAVOutputPin *&amp;gt; m_pPins;&lt;/p>
&lt;p>&lt;code> &lt;/code>//活动的&lt;/p>
&lt;p>&lt;code> &lt;/code>std::vector&amp;lt;CLAVOutputPin *&amp;gt; m_pActivePins;&lt;/p>
&lt;p>&lt;code> &lt;/code>//不用的&lt;/p>
&lt;p>&lt;code> &lt;/code>std::vector&amp;lt;CLAVOutputPin *&amp;gt; m_pRetiredPins;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::set&lt;DWORD> m_bDiscontinuitySent;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring m_fileName;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring m_processName;&lt;/p>
&lt;p>&lt;code> &lt;/code>//有很多纯虚函数的基本解复用类&lt;/p>
&lt;p>&lt;code> &lt;/code>//注意：绝大部分信息都是从这获得的&lt;/p>
&lt;p>&lt;code> &lt;/code>//这里的信息是由其派生类从FFMPEG中获取到的&lt;/p>
&lt;p>&lt;code> &lt;/code>CBaseDemuxer *m_pDemuxer;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bPlaybackStarted;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bFakeASFReader;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Times&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME m_rtStart, m_rtStop, m_rtCurrent, m_rtNewStart, m_rtNewStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME m_rtOffset;&lt;/p>
&lt;p>&lt;code> &lt;/code>double m_dRate;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bStopValid;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Seeking&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME m_rtLastStart, m_rtLastStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::set&amp;lt;void *&amp;gt; m_LastSeekers;&lt;/p>
&lt;p>&lt;code> &lt;/code>// flushing&lt;/p>
&lt;p>&lt;code> &lt;/code>bool m_fFlushing;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMEvent m_eEndFlush;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::set&lt;FormatInfo> m_InputFormats;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Settings&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置&lt;/p>
&lt;p>&lt;code> &lt;/code>struct Settings {&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL TrayIcon;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring prefAudioLangs;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring prefSubLangs;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring subtitleAdvanced;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVSubtitleMode subtitleMode;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL PGSForcedStream;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL PGSOnlyForced;&lt;/p>
&lt;p>&lt;code> &lt;/code>int vc1Mode;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL substreams;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL MatroskaExternalSegments;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL StreamSwitchRemoveAudio;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL ImpairedAudio;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL PreferHighQualityAudio;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD QueueMaxSize;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD NetworkAnalysisDuration;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::map&amp;lt;std::string, BOOL&amp;gt; formats;&lt;/p>
&lt;p>&lt;code> &lt;/code>} m_settings;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bRuntimeConfig;&lt;/p>
&lt;p>&lt;code> &lt;/code>IUnknown *m_pSite;&lt;/p>
&lt;p>&lt;code> &lt;/code>CBaseTrayIcon *m_pTrayIcon;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>[uuid(&amp;quot;B98D13E7-55DB-4385-A33D-09FD1BA26338&amp;quot;)]&lt;/p>
&lt;p>class CLAVSplitterSource : public CLAVSplitter&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>// construct only via class factory&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVSplitterSource(LPUNKNOWN pUnk, HRESULT* phr);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~CLAVSplitterSource();&lt;/p>
&lt;p>&lt;code> &lt;/code>// IUnknown&lt;/p>
&lt;p>&lt;code> &lt;/code>DECLARE_IUNKNOWN;&lt;/p>
&lt;p>&lt;code> &lt;/code>//暴露接口，使外部程序可以QueryInterface，关键！&lt;/p>
&lt;p>&lt;code> &lt;/code>//翻译（“没有代表的方式查询接口”）&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void** ppv);&lt;/p>
&lt;p>};&lt;/p>
&lt;p>先来看一下查询接口的函数NonDelegatingQueryInterface()吧&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>//暴露接口，使外部程序可以QueryInterface，关键！&lt;/p>
&lt;p>STDMETHODIMP CLAVSplitter::NonDelegatingQueryInterface(REFIID riid, void** ppv)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CheckPointer(ppv, E_POINTER);&lt;/p>
&lt;p>&lt;code> &lt;/code>*ppv = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pDemuxer &amp;amp;&amp;amp; (riid == __uuidof(IKeyFrameInfo) || riid == __uuidof(ITrackInfo) || riid == IID_IAMExtendedSeeking || riid == IID_IAMMediaContent)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return m_pDemuxer-&amp;gt;QueryInterface(riid, ppv);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//写法好特别啊，意思是一样的&lt;/p>
&lt;p>&lt;code> &lt;/code>return&lt;/p>
&lt;p>&lt;code> &lt;/code>QI(IMediaSeeking)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI(IAMStreamSelect)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI(ISpecifyPropertyPages)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI(ISpecifyPropertyPages2)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI2(ILAVFSettings)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI2(ILAVFSettingsInternal)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI(IObjectWithSite)&lt;/p>
&lt;p>&lt;code> &lt;/code>QI(IBufferInfo)&lt;/p>
&lt;p>&lt;code> &lt;/code>__super::NonDelegatingQueryInterface(riid, ppv);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>这个NonDelegatingQueryInterface()的写法确实够特别的，不过其作用还是一样的：根据不同的REFIID，获得不同的接口指针。在这里就不多说了。&lt;/p>
&lt;p>再看一下Load()函数&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>// IFileSourceFilter&lt;/p>
&lt;p>// 打开&lt;/p>
&lt;p>STDMETHODIMP CLAVSplitter::Load(LPCOLESTR pszFileName, const AM_MEDIA_TYPE * pmt)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CheckPointer(pszFileName, E_POINTER);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bPlaybackStarted = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_fileName = std::wstring(pszFileName);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>SAFE_DELETE(m_pDemuxer);&lt;/p>
&lt;p>&lt;code> &lt;/code>LPWSTR extension = PathFindExtensionW(pszFileName);&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;::Load(): Opening file '%s' (extension: %s)&amp;quot;, pszFileName, extension));&lt;/p>
&lt;p>&lt;code> &lt;/code>// BDMV uses the BD demuxer, everything else LAVF&lt;/p>
&lt;p>&lt;code> &lt;/code>if (_wcsicmp(extension, L&amp;quot;.bdmv&amp;quot;) == 0 || _wcsicmp(extension, L&amp;quot;.mpls&amp;quot;) == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDemuxer = new CBDDemuxer(this, this);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDemuxer = new CLAVFDemuxer(this, this);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//打开&lt;/p>
&lt;p>&lt;code> &lt;/code>if(FAILED(hr = m_pDemuxer-&amp;gt;Open(pszFileName))) {&lt;/p>
&lt;p>&lt;code> &lt;/code>SAFE_DELETE(m_pDemuxer);&lt;/p>
&lt;p>&lt;code> &lt;/code>return hr;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDemuxer-&amp;gt;AddRef();&lt;/p>
&lt;p>&lt;code> &lt;/code>return InitDemuxer();&lt;/p>
&lt;p>}&lt;/p>
&lt;p>在这里我们要注意CLAVSplitter的一个变量：m_pDemuxer。这是一个指向 CBaseDemuxer的指针。因此在这里CLAVSplitter实际上调用了 CBaseDemuxer中的方法。&lt;/p>
&lt;p>从代码中的逻辑我们可以看出：&lt;/p>
&lt;p>1.寻找文件后缀&lt;/p>
&lt;p>2.当文件后缀是：&amp;quot;.bdmv&amp;quot;或者&amp;quot;.mpls&amp;quot;的时候，m_pDemuxer指向一个CBDDemuxer（我推测这代表目标文件是蓝光文件什么的），其他情况下m_pDemuxer指向一个CLAVFDemuxer。&lt;/p>
&lt;p>3.然后m_pDemuxer会调用Open()方法。&lt;/p>
&lt;p>4.最后会调用一个InitDemuxer()方法。&lt;/p>
&lt;p>在这里我们应该看看m_pDemuxer-&amp;gt;Open()这个方法里面有什么。我们先考虑m_pDemuxer指向CLAVFDemuxer的情况。&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>// Demuxer Functions&lt;/p>
&lt;p>// 打开（就是一个封装）&lt;/p>
&lt;p>STDMETHODIMP CLAVFDemuxer::Open(LPCOLESTR pszFileName)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>return OpenInputStream(NULL, pszFileName, NULL, TRUE);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>发现是一层封装，于是果断决定层层深入。&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>//实际的打开,使用FFMPEG&lt;/p>
&lt;p>STDMETHODIMP CLAVFDemuxer::OpenInputStream(AVIOContext *byteContext, LPCOLESTR pszFileName, const char *format, BOOL bForce)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(m_pLock);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret; // return code from avformat functions&lt;/p>
&lt;p>&lt;code> &lt;/code>// Convert the filename from wchar to char for avformat&lt;/p>
&lt;p>&lt;code> &lt;/code>char fileName[4100] = {0};&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pszFileName) {&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = WideCharToMultiByte(CP_UTF8, 0, pszFileName, -1, fileName, 4096, NULL, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (_strnicmp(&amp;quot;mms:&amp;quot;, fileName, 4) == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>memmove(fileName+1, fileName, strlen(fileName));&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(fileName, &amp;quot;mmsh&amp;quot;, 4);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>AVIOInterruptCB cb = {avio_interrupt_cb, this};&lt;/p>
&lt;p>trynoformat:&lt;/p>
&lt;p>&lt;code> &lt;/code>// Create the avformat_context&lt;/p>
&lt;p>&lt;code> &lt;/code>// FFMPEG中的函数&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat = avformat_alloc_context();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;pb = byteContext;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;interrupt_callback = cb;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_avFormat-&amp;gt;pb)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;flags |= AVFMT_FLAG_CUSTOM_IO;&lt;/p>
&lt;p>&lt;code> &lt;/code>LPWSTR extension = pszFileName ? PathFindExtensionW(pszFileName) : NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVInputFormat *inputFormat = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>//如果指定了格式&lt;/p>
&lt;p>&lt;code> &lt;/code>if (format) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//查查有木有&lt;/p>
&lt;p>&lt;code> &lt;/code>inputFormat = av_find_input_format(format);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (pszFileName) {&lt;/p>
&lt;p>&lt;code> &lt;/code>LPWSTR extension = PathFindExtensionW(pszFileName);&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; countof(wszImageExtensions); i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (_wcsicmp(extension, wszImageExtensions[i]) == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (byteContext) {&lt;/p>
&lt;p>&lt;code> &lt;/code>inputFormat = av_find_input_format(&amp;quot;image2pipe&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>inputFormat = av_find_input_format(&amp;quot;image2&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; countof(wszBlockedExtensions); i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (_wcsicmp(extension, wszBlockedExtensions[i]) == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>goto done;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Disable loading of external mkv segments, if required&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_pSettings-&amp;gt;GetLoadMatroskaExternalSegments())&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;flags |= AVFMT_FLAG_NOEXTERNAL;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_timeOpening = time(NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>//实际的打开&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = avformat_open_input(&amp;amp;m_avFormat, fileName, inputFormat, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>//出错了&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_ERROR, 0, TEXT(&amp;quot;::OpenInputStream(): avformat_open_input failed (%d)&amp;quot;), ret));&lt;/p>
&lt;p>&lt;code> &lt;/code>if (format) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_ERROR, 0, TEXT(&amp;quot; -&amp;gt; trying again without specific format&amp;quot;)));&lt;/p>
&lt;p>&lt;code> &lt;/code>format = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>//实际的关闭&lt;/p>
&lt;p>&lt;code> &lt;/code>avformat_close_input(&amp;amp;m_avFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>goto trynoformat;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>goto done;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, TEXT(&amp;quot;::OpenInputStream(): avformat_open_input opened file of type '%S' (took %I64d seconds)&amp;quot;), m_avFormat-&amp;gt;iformat-&amp;gt;name, time(NULL) - m_timeOpening));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_timeOpening = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化AVFormat&lt;/p>
&lt;p>&lt;code> &lt;/code>CHECK_HR(hr = InitAVFormat(pszFileName, bForce));&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>done:&lt;/p>
&lt;p>&lt;code> &lt;/code>CleanupAVFormat();&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_FAIL;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>看到这个函数，立马感受到了一种“拨云见日”的感觉。看到了很多FFMPEG的API函数。最重要的依据当属avformat_open_input()了，通过这个函数，打开了实际的文件。如果出现错误，则调用avformat_close_input()进行清理。&lt;/p>
&lt;p>最后，还调用了InitAVFormat()函数：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12711723#">copy&lt;/a>&lt;/p>
&lt;p>//初始化AVFormat&lt;/p>
&lt;p>STDMETHODIMP CLAVFDemuxer::InitAVFormat(LPCOLESTR pszFileName, BOOL bForce)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>const char *format = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取InputFormat信息（，短名称，长名称）&lt;/p>
&lt;p>&lt;code> &lt;/code>lavf_get_iformat_infos(m_avFormat-&amp;gt;iformat, &amp;amp;format, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bForce &amp;amp;&amp;amp; (!format || !m_pSettings-&amp;gt;IsFormatEnabled(format))) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 20, L&amp;quot;::InitAVFormat() - format of type '%S' disabled, failing&amp;quot;, format ? format : m_avFormat-&amp;gt;iformat-&amp;gt;name));&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_FAIL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pszInputFormat = format ? format : m_avFormat-&amp;gt;iformat-&amp;gt;name;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bVC1SeenTimestamp = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>LPWSTR extension = pszFileName ? PathFindExtensionW(pszFileName) : NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bMatroska = (_strnicmp(m_pszInputFormat, &amp;quot;matroska&amp;quot;, 8) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bOgg = (_strnicmp(m_pszInputFormat, &amp;quot;ogg&amp;quot;, 3) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bAVI = (_strnicmp(m_pszInputFormat, &amp;quot;avi&amp;quot;, 3) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bMPEGTS = (_strnicmp(m_pszInputFormat, &amp;quot;mpegts&amp;quot;, 6) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bMPEGPS = (_stricmp(m_pszInputFormat, &amp;quot;mpeg&amp;quot;) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bRM = (_stricmp(m_pszInputFormat, &amp;quot;rm&amp;quot;) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bPMP = (_stricmp(m_pszInputFormat, &amp;quot;pmp&amp;quot;) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bMP4 = (_stricmp(m_pszInputFormat, &amp;quot;mp4&amp;quot;) == 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bTSDiscont = m_avFormat-&amp;gt;iformat-&amp;gt;flags &amp;amp; AVFMT_TS_DISCONT;&lt;/p>
&lt;p>&lt;code> &lt;/code>WCHAR szProt[24] = L&amp;quot;file&amp;quot;;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pszFileName) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD dwNumChars = 24;&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = UrlGetPart(pszFileName, szProt, &amp;amp;dwNumChars, URL_PART_SCHEME, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (SUCCEEDED(hr) &amp;amp;&amp;amp; dwNumChars &amp;amp;&amp;amp; (_wcsicmp(szProt, L&amp;quot;file&amp;quot;) != 0)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;flags |= AVFMT_FLAG_NETWORK;&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, TEXT(&amp;quot;::InitAVFormat(): detected network protocol: %s&amp;quot;), szProt));&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// TODO: make both durations below configurable&lt;/p>
&lt;p>&lt;code> &lt;/code>// decrease analyze duration for network streams&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_avFormat-&amp;gt;flags &amp;amp; AVFMT_FLAG_NETWORK || (m_avFormat-&amp;gt;flags &amp;amp; AVFMT_FLAG_CUSTOM_IO &amp;amp;&amp;amp; !m_avFormat-&amp;gt;pb-&amp;gt;seekable)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// require at least 0.2 seconds&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;max_analyze_duration = max(m_pSettings-&amp;gt;GetNetworkStreamAnalysisDuration() * 1000, 200000);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>// And increase it for mpeg-ts/ps files&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bMPEGTS || m_bMPEGPS)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;max_analyze_duration = 10000000;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_opt_set_int(m_avFormat, &amp;quot;correct_ts_overflow&amp;quot;, !m_pBluRay, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bMatroska)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_avFormat-&amp;gt;flags |= AVFMT_FLAG_KEEP_SIDE_DATA;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_timeOpening = time(NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取媒体流信息&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret = avformat_find_stream_info(m_avFormat, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_ERROR, 0, TEXT(&amp;quot;::InitAVFormat(): av_find_stream_info failed (%d)&amp;quot;), ret));&lt;/p>
&lt;p>&lt;code> &lt;/code>goto done;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, TEXT(&amp;quot;::InitAVFormat(): avformat_find_stream_info finished, took %I64d seconds&amp;quot;), time(NULL) - m_timeOpening));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_timeOpening = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Check if this is a m2ts in a BD structure, and if it is, read some extra stream properties out of the CLPI files&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pBluRay) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pBluRay-&amp;gt;ProcessClipLanguages();&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (pszFileName &amp;amp;&amp;amp; m_bMPEGTS) {&lt;/p>
&lt;p>&lt;code> &lt;/code>CheckBDM2TSCPLI(pszFileName);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>SAFE_CO_FREE(m_stOrigParser);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_stOrigParser = (enum AVStreamParseType *)CoTaskMemAlloc(m_avFormat-&amp;gt;nb_streams * sizeof(enum AVStreamParseType));&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_stOrigParser)&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_OUTOFMEMORY;&lt;/p>
&lt;p>&lt;code> &lt;/code>for(unsigned int idx = 0; idx &amp;lt; m_avFormat-&amp;gt;nb_streams; ++idx) {&lt;/p>
&lt;p>&lt;code> &lt;/code>AVStream *st = m_avFormat-&amp;gt;streams[idx];&lt;/p>
&lt;p>&lt;code> &lt;/code>// Disable full stream parsing for these formats&lt;/p>
&lt;p>&lt;code> &lt;/code>if (st-&amp;gt;need_parsing == AVSTREAM_PARSE_FULL) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (st-&amp;gt;codec-&amp;gt;codec_id == AV_CODEC_ID_DVB_SUBTITLE) {&lt;/p>
&lt;p>&lt;code> &lt;/code>st-&amp;gt;need_parsing = AVSTREAM_PARSE_NONE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bOgg &amp;amp;&amp;amp; st-&amp;gt;codec-&amp;gt;codec_id == AV_CODEC_ID_H264) {&lt;/p>
&lt;p>&lt;code> &lt;/code>st-&amp;gt;need_parsing = AVSTREAM_PARSE_FULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Create the parsers with the appropriate flags&lt;/p>
&lt;p>&lt;code> &lt;/code>init_parser(m_avFormat, st);&lt;/p>
&lt;p>&lt;code> &lt;/code>UpdateParserFlags(st);&lt;/p>
&lt;p>#ifdef DEBUG&lt;/p>
&lt;p>&lt;code> &lt;/code>AVProgram *streamProg = av_find_program_from_stream(m_avFormat, NULL, idx);&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 30, L&amp;quot;Stream %d (pid %d) - program: %d, codec: %S; parsing: %S;&amp;quot;, idx, st-&amp;gt;id, streamProg ? streamProg-&amp;gt;pmt_pid : -1, avcodec_get_name(st-&amp;gt;codec-&amp;gt;codec_id), lavf_get_parsing_string(st-&amp;gt;need_parsing)));&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>m_stOrigParser[idx] = st-&amp;gt;need_parsing;&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((st-&amp;gt;codec-&amp;gt;codec_id == AV_CODEC_ID_DTS &amp;amp;&amp;amp; st-&amp;gt;codec-&amp;gt;codec_tag == 0xA2)&lt;/p>
&lt;p>&lt;code> &lt;/code>|| (st-&amp;gt;codec-&amp;gt;codec_id == AV_CODEC_ID_EAC3 &amp;amp;&amp;amp; st-&amp;gt;codec-&amp;gt;codec_tag == 0xA1))&lt;/p>
&lt;p>&lt;code> &lt;/code>st-&amp;gt;disposition |= LAVF_DISPOSITION_SECONDARY_AUDIO;&lt;/p>
&lt;p>&lt;code> &lt;/code>UpdateSubStreams();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (st-&amp;gt;codec-&amp;gt;codec_type == AVMEDIA_TYPE_ATTACHMENT &amp;amp;&amp;amp; (st-&amp;gt;codec-&amp;gt;codec_id == AV_CODEC_ID_TTF || st-&amp;gt;codec-&amp;gt;codec_id == AV_CODEC_ID_OTF)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_pFontInstaller) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pFontInstaller = new CFontInstaller();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pFontInstaller-&amp;gt;InstallFont(st-&amp;gt;codec-&amp;gt;extradata, st-&amp;gt;codec-&amp;gt;extradata_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>CHECK_HR(hr = CreateStreams());&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>done:&lt;/p>
&lt;p>&lt;code> &lt;/code>//关闭输入&lt;/p>
&lt;p>&lt;code> &lt;/code>CleanupAVFormat();&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_FAIL;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>该函数通过avformat_find_stream_info()等获取到流信息，这里就不多说了。&lt;/p>
&lt;h3 id="lav-filter-源代码分析-3-lav-video-1httpblogcsdnnetleixiaohua1020articledetails13022201">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201">&lt;strong>LAV Filter 源代码分析 3： LAV Video （1）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>LAV Video 是使用很广泛的DirectShow Filter。它封装了FFMPEG中的libavcodec，支持十分广泛的视频格式的解码。在这里对其源代码进行详细的分析。&lt;/p>
&lt;p>LAV Video 工程代码的结构如下图所示&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.160.jpeg" alt="">&lt;/p>
&lt;p>直接看LAV Video最主要的类CLAVVideo吧，它的定义位于LAVVideo.h中。&lt;/p>
&lt;p>LAVVideo.h&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">copy&lt;/a>&lt;/p>
&lt;p>/* 雷霄骅&lt;/p>
&lt;p>&lt;code> &lt;/code>* 中国传媒大学/数字电视技术&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="mailto:leixiaohua1020@126.com">leixiaohua1020@126.com&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Copyright (C) 2010-2013 Hendrik Leppkes&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="http://www.1f0.de">http://www.1f0.de&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is free software; you can redistribute it and/or modify&lt;/p>
&lt;p>&lt;code> &lt;/code>* it under the terms of the GNU General Public License as published by&lt;/p>
&lt;p>&lt;code> &lt;/code>* the Free Software Foundation; either version 2 of the License, or&lt;/p>
&lt;p>&lt;code> &lt;/code>* (at your option) any later version.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is distributed in the hope that it will be useful,&lt;/p>
&lt;p>&lt;code> &lt;/code>* but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p>
&lt;p>&lt;code> &lt;/code>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;/p>
&lt;p>&lt;code> &lt;/code>* GNU General Public License for more details.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* You should have received a copy of the GNU General Public License along&lt;/p>
&lt;p>&lt;code> &lt;/code>* with this program; if not, write to the Free Software Foundation, Inc.,&lt;/p>
&lt;p>&lt;code> &lt;/code>* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>#pragma once&lt;/p>
&lt;p>#include &amp;quot;decoders/ILAVDecoder.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;DecodeThread.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;ILAVPinInfo.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;LAVPixFmtConverter.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;LAVVideoSettings.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;H264RandomAccess.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;FloatingAverage.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;ISpecifyPropertyPages2.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;SynchronizedQueue.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;subtitles/LAVSubtitleConsumer.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;subtitles/LAVVideoSubtitleInputPin.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;BaseTrayIcon.h&amp;quot;&lt;/p>
&lt;p>#define LAVC_VIDEO_REGISTRY_KEY L&amp;quot;Software\LAV\Video&amp;quot;&lt;/p>
&lt;p>#define LAVC_VIDEO_REGISTRY_KEY_FORMATS L&amp;quot;Software\LAV\Video\Formats&amp;quot;&lt;/p>
&lt;p>#define LAVC_VIDEO_REGISTRY_KEY_OUTPUT L&amp;quot;Software\LAV\Video\Output&amp;quot;&lt;/p>
&lt;p>#define LAVC_VIDEO_REGISTRY_KEY_HWACCEL L&amp;quot;Software\LAV\Video\HWAccel&amp;quot;&lt;/p>
&lt;p>#define LAVC_VIDEO_LOG_FILE L&amp;quot;LAVVideo.txt&amp;quot;&lt;/p>
&lt;p>#define DEBUG_FRAME_TIMINGS 0&lt;/p>
&lt;p>#define DEBUG_PIXELCONV_TIMINGS 0&lt;/p>
&lt;p>#define LAV_MT_FILTER_QUEUE_SIZE 4&lt;/p>
&lt;p>typedef struct {&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStop;&lt;/p>
&lt;p>} TimingCache;&lt;/p>
&lt;p>//解码核心类&lt;/p>
&lt;p>//Transform Filter&lt;/p>
&lt;p>[uuid(&amp;quot;EE30215D-164F-4A92-A4EB-9D4C13390F9F&amp;quot;)]&lt;/p>
&lt;p>class CLAVVideo : public CTransformFilter, public ISpecifyPropertyPages2, public ILAVVideoSettings, public ILAVVideoStatus, public ILAVVideoCallback&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVVideo(LPUNKNOWN pUnk, HRESULT* phr);&lt;/p>
&lt;p>&lt;code> &lt;/code>~CLAVVideo();&lt;/p>
&lt;p>&lt;code> &lt;/code>static void CALLBACK StaticInit(BOOL bLoading, const CLSID *clsid);&lt;/p>
&lt;p>&lt;code> &lt;/code>// IUnknown&lt;/p>
&lt;p>&lt;code> &lt;/code>// 查找接口必须实现&lt;/p>
&lt;p>&lt;code> &lt;/code>DECLARE_IUNKNOWN;&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP NonDelegatingQueryInterface(REFIID riid, void** ppv);&lt;/p>
&lt;p>&lt;code> &lt;/code>// ISpecifyPropertyPages2&lt;/p>
&lt;p>&lt;code> &lt;/code>// 属性页&lt;/p>
&lt;p>&lt;code> &lt;/code>// 获取或者创建&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPages(CAUUID *pPages);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CreatePage(const GUID&amp;amp; guid, IPropertyPage** ppPage);&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVVideoSettings&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetRuntimeConfig(BOOL bRuntimeConfig);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetFormatConfiguration(LAVVideoCodec vCodec, BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetFormatConfiguration(LAVVideoCodec vCodec);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetNumThreads(DWORD dwNum);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetNumThreads();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetStreamAR(DWORD bStreamAR);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetStreamAR();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetPixelFormat(LAVOutPixFmts pixFmt, BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetPixelFormat(LAVOutPixFmts pixFmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetRGBOutputRange(DWORD dwRange);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetRGBOutputRange();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDeintFieldOrder(LAVDeintFieldOrder fieldOrder);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVDeintFieldOrder) GetDeintFieldOrder();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDeintForce(BOOL bForce);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetDeintForce();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDeintAggressive(BOOL bAggressive);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetDeintAggressive();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) CheckHWAccelSupport(LAVHWAccel hwAccel);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetHWAccel(LAVHWAccel hwAccel);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVHWAccel) GetHWAccel();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetHWAccelCodec(LAVVideoHWCodec hwAccelCodec, BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetHWAccelCodec(LAVVideoHWCodec hwAccelCodec);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetHWAccelDeintMode(LAVHWDeintModes deintMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVHWDeintModes) GetHWAccelDeintMode();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetHWAccelDeintOutput(LAVDeintOutput deintOutput);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVDeintOutput) GetHWAccelDeintOutput();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetHWAccelDeintHQ(BOOL bHQ);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetHWAccelDeintHQ();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetSWDeintMode(LAVSWDeintModes deintMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVSWDeintModes) GetSWDeintMode();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetSWDeintOutput(LAVDeintOutput deintOutput);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVDeintOutput) GetSWDeintOutput();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDeintTreatAsProgressive(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetDeintTreatAsProgressive();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDitherMode(LAVDitherMode ditherMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVDitherMode) GetDitherMode();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetUseMSWMV9Decoder(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetUseMSWMV9Decoder();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDVDVideoSupport(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetDVDVideoSupport();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetHWAccelResolutionFlags(DWORD dwResFlags);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetHWAccelResolutionFlags();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetTrayIcon(BOOL bEnabled);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) GetTrayIcon();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SetDeinterlacingMode(LAVDeintMode deintMode);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVDeintMode) GetDeinterlacingMode();&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVVideoStatus&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(const WCHAR *) GetActiveDecoderName() { return m_Decoder.GetDecoderName(); }&lt;/p>
&lt;p>&lt;code> &lt;/code>// CTransformFilter&lt;/p>
&lt;p>&lt;code> &lt;/code>// 核心的&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT CheckInputType(const CMediaType* mtIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT CheckTransform(const CMediaType* mtIn, const CMediaType* mtOut);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT DecideBufferSize(IMemAllocator * pAllocator, ALLOCATOR_PROPERTIES *pprop);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT GetMediaType(int iPosition, CMediaType *pMediaType);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT SetMediaType(PIN_DIRECTION dir, const CMediaType *pmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT EndOfStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT BeginFlush();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT EndFlush();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT NewSegment(REFERENCE_TIME tStart, REFERENCE_TIME tStop, double dRate);&lt;/p>
&lt;p>&lt;code> &lt;/code>//处理的核心&lt;/p>
&lt;p>&lt;code> &lt;/code>//核心一般才有IMediaSample&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT Receive(IMediaSample *pIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT CheckConnect(PIN_DIRECTION dir, IPin *pPin);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT BreakConnect(PIN_DIRECTION dir);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT CompleteConnect(PIN_DIRECTION dir, IPin *pReceivePin);&lt;/p>
&lt;p>&lt;code> &lt;/code>int GetPinCount();&lt;/p>
&lt;p>&lt;code> &lt;/code>CBasePin* GetPin(int n);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP JoinFilterGraph(IFilterGraph * pGraph, LPCWSTR pName);&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVVideoCallback&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP AllocateFrame(LAVFrame **ppFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ReleaseFrame(LAVFrame **ppFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Deliver(LAVFrame *pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LPWSTR) GetFileExtension();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) FilterInGraph(PIN_DIRECTION dir, const GUID &amp;amp;clsid) { if (dir == PINDIR_INPUT) return FilterInGraphSafe(m_pInput, clsid); else return FilterInGraphSafe(m_pOutput, clsid); }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetDecodeFlags() { return m_dwDecodeFlags; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CMediaType&amp;amp;) GetInputMediaType() { return m_pInput-&amp;gt;CurrentMediaType(); }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetLAVPinInfo(LAVPinInfo &amp;amp;info) { if (m_LAVPinInfoValid) { info = m_LAVPinInfo; return S_OK; } return E_FAIL; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CBasePin*) GetOutputPin() { return m_pOutput; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CMediaType&amp;amp;) GetOutputMediaType() { return m_pOutput-&amp;gt;CurrentMediaType(); }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP DVDStripPacket(BYTE*&amp;amp; p, long&amp;amp; len) { static_cast&amp;lt;CDeCSSTransformInputPin*&amp;gt;(m_pInput)-&amp;gt;StripPacket(p, len); return S_OK; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVFrame*) GetFlushFrame();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ReleaseAllDXVAResources() { ReleaseLastSequenceFrame(); return S_OK; }&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>// Pin Configuration&lt;/p>
&lt;p>&lt;code> &lt;/code>const static AMOVIESETUP_MEDIATYPE sudPinTypesIn[];&lt;/p>
&lt;p>&lt;code> &lt;/code>const static int sudPinTypesInCount;&lt;/p>
&lt;p>&lt;code> &lt;/code>const static AMOVIESETUP_MEDIATYPE sudPinTypesOut[];&lt;/p>
&lt;p>&lt;code> &lt;/code>const static int sudPinTypesOutCount;&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT LoadDefaults();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT ReadSettings(HKEY rootKey);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT LoadSettings();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT SaveSettings();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT CreateTrayIcon();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT CreateDecoder(const CMediaType *pmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT GetDeliveryBuffer(IMediaSample** ppOut, int width, int height, AVRational ar, DXVA2_ExtendedFormat dxvaExtFormat, REFERENCE_TIME avgFrameDuration);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT ReconnectOutput(int width, int height, AVRational ar, DXVA2_ExtendedFormat dxvaExtFlags, REFERENCE_TIME avgFrameDuration, BOOL bDXVA = FALSE);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT SetFrameFlags(IMediaSample* pMS, LAVFrame *pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT NegotiatePixelFormat(CMediaType &amp;amp;mt, int width, int height);&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL IsInterlaced();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT Filter(LAVFrame *pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT DeliverToRenderer(LAVFrame *pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT PerformFlush();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT ReleaseLastSequenceFrame();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT GetD3DBuffer(LAVFrame *pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT RedrawStillImage();&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT SetInDVDMenu(bool menu) { m_bInDVDMenu = menu; return S_OK; }&lt;/p>
&lt;p>&lt;code> &lt;/code>enum {CNTRL_EXIT, CNTRL_REDRAW};&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT ControlCmd(DWORD cmd) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return m_ControlThread-&amp;gt;CallWorker(cmd);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class CVideoOutputPin;&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class CDecodeThread;&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class CLAVControlThread;&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class CLAVSubtitleProvider;&lt;/p>
&lt;p>&lt;code> &lt;/code>friend class CLAVSubtitleConsumer;&lt;/p>
&lt;p>&lt;code> &lt;/code>//解码线程&lt;/p>
&lt;p>&lt;code> &lt;/code>CDecodeThread m_Decoder;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMThread *m_ControlThread;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME m_rtPrevStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME m_rtPrevStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bForceInputAR;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bSendMediaType;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bFlushing;&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT m_hrDeliver;&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVPixFmtConverter m_PixFmtConverter;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring m_strExtension;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD m_bDXVAExtFormatSupport;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD m_bMadVR;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD m_bOverlayMixer;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD m_dwDecodeFlags;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bInDVDMenu;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFilterGraph *m_pFilterGraph;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFilterContext *m_pFilterBufferSrc;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFilterContext *m_pFilterBufferSink;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVPixelFormat m_filterPixFmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_filterWidth;&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_filterHeight;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVFrame m_FilterPrevFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_LAVPinInfoValid;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVPinInfo m_LAVPinInfo;&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVVideoSubtitleInputPin *m_pSubtitleInput;&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVSubtitleConsumer *m_SubtitleConsumer;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVFrame *m_pLastSequenceFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>AM_SimpleRateChange m_DVDRate;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bRuntimeConfig;&lt;/p>
&lt;p>&lt;code> &lt;/code>struct VideoSettings {&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL TrayIcon;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD StreamAR;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD NumThreads;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bFormats[Codec_VideoNB];&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bMSWMV9DMO;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bPixFmts[LAVOutPixFmt_NB];&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD RGBRange;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD HWAccel;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bHWFormats[HWCodec_NB];&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD HWAccelResFlags;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD HWDeintMode;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD HWDeintOutput;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL HWDeintHQ;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD DeintFieldOrder;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVDeintMode DeintMode;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD SWDeintMode;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD SWDeintOutput;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD DitherMode;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bDVDVideo;&lt;/p>
&lt;p>&lt;code> &lt;/code>} m_settings;&lt;/p>
&lt;p>&lt;code> &lt;/code>CBaseTrayIcon *m_pTrayIcon;&lt;/p>
&lt;p>#ifdef DEBUG&lt;/p>
&lt;p>&lt;code> &lt;/code>FloatingAverage&lt;double> m_pixFmtTimingAvg;&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>};&lt;/p>
&lt;p>可见该类继承了CTransformFilter，其的功能真的是非常丰富的。在这里肯定无法对其进行一一分析，只能选择其中重点的函数进行一下分析。&lt;/p>
&lt;p>该类中包含了解码线程类：CDecodeThread m_Decoder;，这里封装了解码功能。&lt;/p>
&lt;p>同时该类中包含了函数Receive(IMediaSample *pIn);，是发挥解码功能的函数，其中pIn是输入的解码前的视频压缩编码数据。&lt;/p>
&lt;p>下面来看看Receive()函数：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">copy&lt;/a>&lt;/p>
&lt;p>//处理的核心&lt;/p>
&lt;p>//核心一般才有IMediaSample&lt;/p>
&lt;p>HRESULT CLAVVideo::Receive(IMediaSample *pIn)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock cAutoLock(&amp;amp;m_csReceive);&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>AM_SAMPLE2_PROPERTIES const *pProps = m_pInput-&amp;gt;SampleProps();&lt;/p>
&lt;p>&lt;code> &lt;/code>if(pProps-&amp;gt;dwStreamId != AM_STREAM_MEDIA) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return m_pOutput-&amp;gt;Deliver(pIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>AM_MEDIA_TYPE *pmt = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>//获取媒体类型等等&lt;/p>
&lt;p>&lt;code> &lt;/code>if (SUCCEEDED(pIn-&amp;gt;GetMediaType(&amp;amp;pmt)) &amp;amp;&amp;amp; pmt) {&lt;/p>
&lt;p>&lt;code> &lt;/code>CMediaType mt = *pmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>DeleteMediaType(pmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (mt != m_pInput-&amp;gt;CurrentMediaType() || !(m_dwDecodeFlags &amp;amp; LAV_VIDEO_DEC_FLAG_DVD)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;::Receive(): Input sample contained media type, dynamic format change...&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_Decoder.EndOfStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = m_pInput-&amp;gt;SetMediaType(&amp;amp;mt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (FAILED(hr)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_ERROR, 10, L&amp;quot;::Receive(): Setting new media type failed...&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>return hr;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_hrDeliver = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Skip over empty packets&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pIn-&amp;gt;GetActualDataLength() == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//解码&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = m_Decoder.Decode(pIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (FAILED(hr))&lt;/p>
&lt;p>&lt;code> &lt;/code>return hr;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (FAILED(m_hrDeliver))&lt;/p>
&lt;p>&lt;code> &lt;/code>return m_hrDeliver;&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>由代码我们可以看出，实际发挥出解码功能的函数是hr = m_Decoder.Decode(pIn);。&lt;/p>
&lt;p>下面我们来看看CDecodeThread类的Decode()方法：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">copy&lt;/a>&lt;/p>
&lt;p>//解码线程的解码函数&lt;/p>
&lt;p>STDMETHODIMP CDecodeThread::Decode(IMediaSample *pSample)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock decoderLock(this);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!CAMThread::ThreadExists())&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_UNEXPECTED;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Wait until the queue is empty&lt;/p>
&lt;p>&lt;code> &lt;/code>while(HasSample())&lt;/p>
&lt;p>&lt;code> &lt;/code>Sleep(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Re-init the decoder, if requested&lt;/p>
&lt;p>&lt;code> &lt;/code>// Doing this inside the worker thread alone causes problems&lt;/p>
&lt;p>&lt;code> &lt;/code>// when switching from non-sync to sync, so ensure we're in sync.&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bDecoderNeedsReInit) {&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMThread::CallWorker(CMD_REINIT);&lt;/p>
&lt;p>&lt;code> &lt;/code>while (!m_evEOSDone.Check()) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Wait();&lt;/p>
&lt;p>&lt;code> &lt;/code>ProcessOutput();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evDeliver.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evDecodeDone.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>pSample-&amp;gt;AddRef();&lt;/p>
&lt;p>&lt;code> &lt;/code>// Send data to worker thread, and wake it (if it was waiting)&lt;/p>
&lt;p>&lt;code> &lt;/code>PutSample(pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>// If we don't have thread safe buffers, we need to synchronize&lt;/p>
&lt;p>&lt;code> &lt;/code>// with the worker thread and deliver them when they are available&lt;/p>
&lt;p>&lt;code> &lt;/code>// and then let it know that we did so&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bSyncToProcess) {&lt;/p>
&lt;p>&lt;code> &lt;/code>while (!m_evDecodeDone.Check()) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Wait();&lt;/p>
&lt;p>&lt;code> &lt;/code>ProcessOutput();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>ProcessOutput();&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>这个方法乍一看感觉很抽象，好像没看见直接调用任何解码的函数。如果LAVVideo的封装的ffmpeg的libavcodec的话，应该是最终调用avcodec_decode_video2()才对啊。。。先来看看CDecodeThread这个类的定义吧！&lt;/p>
&lt;p>DecodeThread.h&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">copy&lt;/a>&lt;/p>
&lt;p>/* 雷霄骅&lt;/p>
&lt;p>&lt;code> &lt;/code>* 中国传媒大学/数字电视技术&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="mailto:leixiaohua1020@126.com">leixiaohua1020@126.com&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Copyright (C) 2010-2013 Hendrik Leppkes&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="http://www.1f0.de">http://www.1f0.de&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is free software; you can redistribute it and/or modify&lt;/p>
&lt;p>&lt;code> &lt;/code>* it under the terms of the GNU General Public License as published by&lt;/p>
&lt;p>&lt;code> &lt;/code>* the Free Software Foundation; either version 2 of the License, or&lt;/p>
&lt;p>&lt;code> &lt;/code>* (at your option) any later version.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is distributed in the hope that it will be useful,&lt;/p>
&lt;p>&lt;code> &lt;/code>* but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p>
&lt;p>&lt;code> &lt;/code>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;/p>
&lt;p>&lt;code> &lt;/code>* GNU General Public License for more details.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* You should have received a copy of the GNU General Public License along&lt;/p>
&lt;p>&lt;code> &lt;/code>* with this program; if not, write to the Free Software Foundation, Inc.,&lt;/p>
&lt;p>&lt;code> &lt;/code>* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>#pragma once&lt;/p>
&lt;p>#include &amp;quot;decoders/ILAVDecoder.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;SynchronizedQueue.h&amp;quot;&lt;/p>
&lt;p>class CLAVVideo;&lt;/p>
&lt;p>class CDecodeThread : public ILAVVideoCallback, protected CAMThread, protected CCritSec&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>CDecodeThread(CLAVVideo *pLAVVideo);&lt;/p>
&lt;p>&lt;code> &lt;/code>~CDecodeThread();&lt;/p>
&lt;p>&lt;code> &lt;/code>// Parts of ILAVDecoder&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(const WCHAR*) GetDecoderName() { return m_pDecoder ? m_pDecoder-&amp;gt;GetDecoderName() : NULL; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(long) GetBufferCount() { return m_pDecoder ? m_pDecoder-&amp;gt;GetBufferCount() : 4; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) IsInterlaced() { return m_pDecoder ? m_pDecoder-&amp;gt;IsInterlaced() : TRUE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPixelFormat(LAVPixelFormat *pPix, int *pBpp) { ASSERT(m_pDecoder); return m_pDecoder-&amp;gt;GetPixelFormat(pPix, pBpp); }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(REFERENCE_TIME) GetFrameDuration() { ASSERT(m_pDecoder); return m_pDecoder-&amp;gt;GetFrameDuration(); }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP HasThreadSafeBuffers() { return m_pDecoder ? m_pDecoder-&amp;gt;HasThreadSafeBuffers() : S_FALSE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CreateDecoder(const CMediaType *pmt, AVCodecID codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Close();&lt;/p>
&lt;p>&lt;code> &lt;/code>//解码线程的解码函数&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Decode(IMediaSample *pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Flush();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP EndOfStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP InitAllocator(IMemAllocator **ppAlloc);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP PostConnect(IPin *pPin);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) IsHWDecoderActive() { return m_bHWDecoder; }&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVVideoCallback&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP AllocateFrame(LAVFrame **ppFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ReleaseFrame(LAVFrame **ppFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Deliver(LAVFrame *pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LPWSTR) GetFileExtension();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) FilterInGraph(PIN_DIRECTION dir, const GUID &amp;amp;clsid);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(DWORD) GetDecodeFlags();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CMediaType&amp;amp;) GetInputMediaType();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetLAVPinInfo(LAVPinInfo &amp;amp;info);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CBasePin*) GetOutputPin();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(CMediaType&amp;amp;) GetOutputMediaType();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP DVDStripPacket(BYTE*&amp;amp; p, long&amp;amp; len);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(LAVFrame*) GetFlushFrame();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ReleaseAllDXVAResources();&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>//包含了对进程的各种操作，重要&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD ThreadProc();&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP CreateDecoderInternal(const CMediaType *pmt, AVCodecID codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP PostConnectInternal(IPin *pPin);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP DecodeInternal(IMediaSample *pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ClearQueues();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ProcessOutput();&lt;/p>
&lt;p>&lt;code> &lt;/code>bool HasSample();&lt;/p>
&lt;p>&lt;code> &lt;/code>void PutSample(IMediaSample *pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>IMediaSample* GetSample();&lt;/p>
&lt;p>&lt;code> &lt;/code>void ReleaseSample();&lt;/p>
&lt;p>&lt;code> &lt;/code>bool CheckForEndOfSequence(IMediaSample *pSample);&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>//各种对进程进行的操作&lt;/p>
&lt;p>&lt;code> &lt;/code>enum {CMD_CREATE_DECODER, CMD_CLOSE_DECODER, CMD_FLUSH, CMD_EOS, CMD_EXIT, CMD_INIT_ALLOCATOR, CMD_POST_CONNECT, CMD_REINIT};&lt;/p>
&lt;p>&lt;code> &lt;/code>//注意DecodeThread像是一个处于中间位置的东西&lt;/p>
&lt;p>&lt;code> &lt;/code>//连接了Filter核心类CLAVVideo和解码器的接口ILAVDecoder&lt;/p>
&lt;p>&lt;code> &lt;/code>CLAVVideo *m_pLAVVideo;&lt;/p>
&lt;p>&lt;code> &lt;/code>ILAVDecoder *m_pDecoder;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecID m_Codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bHWDecoder;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bHWDecoderFailed;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bSyncToProcess;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bDecoderNeedsReInit;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMEvent m_evInput;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMEvent m_evDeliver;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMEvent m_evSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMEvent m_evDecodeDone;&lt;/p>
&lt;p>&lt;code> &lt;/code>CAMEvent m_evEOSDone;&lt;/p>
&lt;p>&lt;code> &lt;/code>CCritSec m_ThreadCritSec;&lt;/p>
&lt;p>&lt;code> &lt;/code>struct {&lt;/p>
&lt;p>&lt;code> &lt;/code>const CMediaType *pmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecID codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>IMemAllocator **allocator;&lt;/p>
&lt;p>&lt;code> &lt;/code>IPin *pin;&lt;/p>
&lt;p>&lt;code> &lt;/code>} m_ThreadCallContext;&lt;/p>
&lt;p>&lt;code> &lt;/code>CSynchronizedQueue&amp;lt;LAVFrame *&amp;gt; m_Output;&lt;/p>
&lt;p>&lt;code> &lt;/code>CCritSec m_SampleCritSec;&lt;/p>
&lt;p>&lt;code> &lt;/code>IMediaSample *m_NextSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>IMediaSample *m_TempSample[2];&lt;/p>
&lt;p>&lt;code> &lt;/code>IMediaSample *m_FailedSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>std::wstring m_processName;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>从名字上我们可以判断，这个类用于管理解码的线程。在这里我们关注该类里面的两个指针变量： CLAVVideo *m_pLAVVideo;&lt;/p>
&lt;p>&lt;code> &lt;/code>ILAVDecoder *m_pDecoder;&lt;/p>
&lt;p>其中第一个指针变量就是这个工程中最核心的类CLAVVideo，而第二个指针变量则是解码器的接口。通过这个接口就可以调用具体解码器的相应方法了。（注：在源代码中发现，解码器不光包含libavcodec，也可以是wmv9等等，换句话说，是可以扩展其他种类的解码器的。不过就目前的情况来看，lavvideo似乎不如ffdshow支持的解码器种类多）&lt;/p>
&lt;p>该类里面还有一个函数：&lt;/p>
&lt;p>ThreadProc()&lt;/p>
&lt;p>该函数中包含了对线程的各种操作，其中包含调用了ILAVDecoder接口的各种方法：&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13022201#">copy&lt;/a>&lt;/p>
&lt;p>//包含了对进程的各种操作&lt;/p>
&lt;p>DWORD CDecodeThread::ThreadProc()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD cmd;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bEOS = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bReinit = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>SetThreadName(-1, &amp;quot;LAVVideo Decode Thread&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>HANDLE hWaitEvents[2] = { GetRequestHandle(), m_evInput };&lt;/p>
&lt;p>&lt;code> &lt;/code>//不停转圈，永不休止&lt;/p>
&lt;p>&lt;code> &lt;/code>while(1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bEOS &amp;amp;&amp;amp; !bReinit) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Wait for either an input sample, or an request&lt;/p>
&lt;p>&lt;code> &lt;/code>WaitForMultipleObjects(2, hWaitEvents, FALSE, INFINITE);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//根据操作命令的不同&lt;/p>
&lt;p>&lt;code> &lt;/code>if (CheckRequest(&amp;amp;cmd)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (cmd) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建解码器&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_CREATE_DECODER:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(&amp;amp;m_ThreadCritSec);&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = CreateDecoderInternal(m_ThreadCallContext.pmt, m_ThreadCallContext.codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_ThreadCallContext.pmt = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_CLOSE_DECODER:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//关闭&lt;/p>
&lt;p>&lt;code> &lt;/code>ClearQueues();&lt;/p>
&lt;p>&lt;code> &lt;/code>SAFE_DELETE(m_pDecoder);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_FLUSH:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//清楚&lt;/p>
&lt;p>&lt;code> &lt;/code>ClearQueues();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDecoder-&amp;gt;Flush();&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_EOS:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>bEOS = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_EXIT:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//退出&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_INIT_ALLOCATOR:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(&amp;amp;m_ThreadCritSec);&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = m_pDecoder-&amp;gt;InitAllocator(m_ThreadCallContext.allocator);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_ThreadCallContext.allocator = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_POST_CONNECT:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(&amp;amp;m_ThreadCritSec);&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = PostConnectInternal(m_ThreadCallContext.pin);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_ThreadCallContext.pin = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_REINIT:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//重启&lt;/p>
&lt;p>&lt;code> &lt;/code>CMediaType &amp;amp;mt = m_pLAVVideo-&amp;gt;GetInputMediaType();&lt;/p>
&lt;p>&lt;code> &lt;/code>CreateDecoderInternal(&amp;amp;mt, m_Codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[1] = m_NextSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_NextSample = m_FailedSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_FailedSample = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>bReinit = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bDecoderNeedsReInit = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>ASSERT(0);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bDecoderNeedsReInit) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evInput.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bReinit &amp;amp;&amp;amp; !m_NextSample) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_TempSample[0]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_NextSample = m_TempSample[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[0] = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_TempSample[1]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_NextSample = m_TempSample[1];&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[1] = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>bReinit = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//获得一份数据&lt;/p>
&lt;p>&lt;code> &lt;/code>IMediaSample *pSample = GetSample();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!pSample) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Process the EOS now that the sample queue is empty&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bEOS) {&lt;/p>
&lt;p>&lt;code> &lt;/code>bEOS = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDecoder-&amp;gt;EndOfStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//解码&lt;/p>
&lt;p>&lt;code> &lt;/code>DecodeInternal(pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Release the sample&lt;/p>
&lt;p>&lt;code> &lt;/code>//释放&lt;/p>
&lt;p>&lt;code> &lt;/code>SafeRelease(&amp;amp;pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Indicates we're done decoding this sample&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evDecodeDone.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>// Set the Sample Event to unblock any waiting threads&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>先分析到这里了，至于ILAVDecoder接口方面的东西下篇文章再写。&lt;/p>
&lt;h3 id="lav-filter-源代码分析-4-lav-video-2httpblogcsdnnetleixiaohua1020articledetails13272409">&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13272409">&lt;strong>LAV Filter 源代码分析 4： LAV Video （2）&lt;/strong>&lt;/a>&lt;/h3>
&lt;p>文章中提到LAVVideo主要通过CDecodeThread这个类进行解码线程的管理，其中有一个关键的管理函数：ThreadProc()，包含了对解码线程的各种操作。函数如下所示：&lt;/p>
&lt;p>//包含了对进程的各种操作&lt;/p>
&lt;p>DWORD CDecodeThread::ThreadProc()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr;&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD cmd;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bEOS = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bReinit = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>SetThreadName(-1, &amp;quot;LAVVideo Decode Thread&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>HANDLE hWaitEvents[2] = { GetRequestHandle(), m_evInput };&lt;/p>
&lt;p>&lt;code> &lt;/code>//不停转圈，永不休止&lt;/p>
&lt;p>&lt;code> &lt;/code>while(1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bEOS &amp;amp;&amp;amp; !bReinit) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Wait for either an input sample, or an request&lt;/p>
&lt;p>&lt;code> &lt;/code>WaitForMultipleObjects(2, hWaitEvents, FALSE, INFINITE);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//根据操作命令的不同&lt;/p>
&lt;p>&lt;code> &lt;/code>if (CheckRequest(&amp;amp;cmd)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>switch (cmd) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建解码器&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_CREATE_DECODER:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(&amp;amp;m_ThreadCritSec);&lt;/p>
&lt;p>&lt;code> &lt;/code>//创建&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = CreateDecoderInternal(m_ThreadCallContext.pmt, m_ThreadCallContext.codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_ThreadCallContext.pmt = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_CLOSE_DECODER:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//关闭&lt;/p>
&lt;p>&lt;code> &lt;/code>ClearQueues();&lt;/p>
&lt;p>&lt;code> &lt;/code>SAFE_DELETE(m_pDecoder);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_FLUSH:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//清楚&lt;/p>
&lt;p>&lt;code> &lt;/code>ClearQueues();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDecoder-&amp;gt;Flush();&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_EOS:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>bEOS = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_EXIT:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//退出&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_INIT_ALLOCATOR:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(&amp;amp;m_ThreadCritSec);&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = m_pDecoder-&amp;gt;InitAllocator(m_ThreadCallContext.allocator);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_ThreadCallContext.allocator = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_POST_CONNECT:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>CAutoLock lock(&amp;amp;m_ThreadCritSec);&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = PostConnectInternal(m_ThreadCallContext.pin);&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(hr);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_ThreadCallContext.pin = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>case CMD_REINIT:&lt;/p>
&lt;p>&lt;code> &lt;/code>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//重启&lt;/p>
&lt;p>&lt;code> &lt;/code>CMediaType &amp;amp;mt = m_pLAVVideo-&amp;gt;GetInputMediaType();&lt;/p>
&lt;p>&lt;code> &lt;/code>CreateDecoderInternal(&amp;amp;mt, m_Codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[1] = m_NextSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_NextSample = m_FailedSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_FailedSample = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>bReinit = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>Reply(S_OK);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bDecoderNeedsReInit = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>ASSERT(0);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bDecoderNeedsReInit) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evInput.Reset();&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bReinit &amp;amp;&amp;amp; !m_NextSample) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_TempSample[0]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_NextSample = m_TempSample[0];&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[0] = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_TempSample[1]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_NextSample = m_TempSample[1];&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[1] = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>bReinit = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//获得一份数据&lt;/p>
&lt;p>&lt;code> &lt;/code>IMediaSample *pSample = GetSample();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!pSample) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Process the EOS now that the sample queue is empty&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bEOS) {&lt;/p>
&lt;p>&lt;code> &lt;/code>bEOS = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pDecoder-&amp;gt;EndOfStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evEOSDone.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//解码&lt;/p>
&lt;p>&lt;code> &lt;/code>DecodeInternal(pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Release the sample&lt;/p>
&lt;p>&lt;code> &lt;/code>//释放&lt;/p>
&lt;p>&lt;code> &lt;/code>SafeRelease(&amp;amp;pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Indicates we're done decoding this sample&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evDecodeDone.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>// Set the Sample Event to unblock any waiting threads&lt;/p>
&lt;p>&lt;code> &lt;/code>m_evSample.Set();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>该函数中，DecodeInternal(pSample)为实际上真正具有解码功能的函数，来看看它的源代码吧：&lt;/p>
&lt;p>STDMETHODIMP CDecodeThread::DecodeInternal(IMediaSample *pSample)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>HRESULT hr = S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_pDecoder)&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_UNEXPECTED;&lt;/p>
&lt;p>&lt;code> &lt;/code>//调用接口进行解码&lt;/p>
&lt;p>&lt;code> &lt;/code>hr = m_pDecoder-&amp;gt;Decode(pSample);&lt;/p>
&lt;p>&lt;code> &lt;/code>// If a hardware decoder indicates a hard failure, we switch back to software&lt;/p>
&lt;p>&lt;code> &lt;/code>// This is used to indicate incompatible media&lt;/p>
&lt;p>&lt;code> &lt;/code>if (FAILED(hr) &amp;amp;&amp;amp; m_bHWDecoder) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;::Receive(): Hardware decoder indicates failure, switching back to software&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bHWDecoderFailed = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Store the failed sample for re-try in a moment&lt;/p>
&lt;p>&lt;code> &lt;/code>m_FailedSample = pSample;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_FailedSample-&amp;gt;AddRef();&lt;/p>
&lt;p>&lt;code> &lt;/code>// Schedule a re-init when the main thread goes there the next time&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bDecoderNeedsReInit = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Make room in the sample buffer, to ensure the main thread can get in&lt;/p>
&lt;p>&lt;code> &lt;/code>m_TempSample[0] = GetSample();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>该函数比较简短，从源代码中可以看出，调用了m_pDecoder的Decode()方法。其中m_pDecoder为ILAVDecoder类型的指针，而ILAVDecoder是一个接口，并不包含实际的方法，如下所示。注意，从程序注释中可以看出，每一个解码器都需要实现该接口规定的函数。&lt;/p>
&lt;p>//接口&lt;/p>
&lt;p>interface ILAVDecoder&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Virtual destructor&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~ILAVDecoder(void) {};&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Initialize interfaces with the LAV Video core&lt;/p>
&lt;p>&lt;code> &lt;/code>* This function should also be used to create all interfaces with external DLLs&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* @param pSettings reference to the settings interface&lt;/p>
&lt;p>&lt;code> &lt;/code>* @param pCallback reference to the callback interface&lt;/p>
&lt;p>&lt;code> &lt;/code>* @return S_OK on success, error code if this decoder is lacking an external support dll&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(InitInterfaces)(ILAVVideoSettings *pSettings, ILAVVideoCallback *pCallback) PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Check if the decoder is functional&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(Check)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Initialize the codec to decode a stream specified by codec and pmt.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* @param codec Codec Id&lt;/p>
&lt;p>&lt;code> &lt;/code>* @param pmt DirectShow Media Type&lt;/p>
&lt;p>&lt;code> &lt;/code>* @return S_OK on success, an error code otherwise&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(InitDecoder)(AVCodecID codec, const CMediaType *pmt) PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Decode a frame.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* @param pSample Media Sample to decode&lt;/p>
&lt;p>&lt;code> &lt;/code>* @return S_OK if decoding was successfull, S_FALSE if no frame could be extracted, an error code if the decoder is not compatible with the bitstream&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Note: When returning an actual error code, the filter will switch to the fallback software decoder! This should only be used for catastrophic failures,&lt;/p>
&lt;p>&lt;code> &lt;/code>* like trying to decode a unsupported format on a hardware decoder.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(Decode)(IMediaSample *pSample) PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Flush the decoder after a seek.&lt;/p>
&lt;p>&lt;code> &lt;/code>* The decoder should discard any remaining data.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* @return unused&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(Flush)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* End of Stream&lt;/p>
&lt;p>&lt;code> &lt;/code>* The decoder is asked to output any buffered frames for immediate delivery&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* @return unused&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(EndOfStream)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Query the decoder for the current pixel format&lt;/p>
&lt;p>&lt;code> &lt;/code>* Mostly used by the media type creation logic before playback starts&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* @return the pixel format used in the decoding process&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(GetPixelFormat)(LAVPixelFormat *pPix, int *pBpp) PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Get the frame duration.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This function is not mandatory, and if you cannot provide any specific duration, return 0.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD_(REFERENCE_TIME, GetFrameDuration)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Query whether the format can potentially be interlaced.&lt;/p>
&lt;p>&lt;code> &lt;/code>* This function should return false if the format can 100% not be interlaced, and true if it can be interlaced (but also progressive).&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD_(BOOL, IsInterlaced)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Allows the decoder to handle an allocator.&lt;/p>
&lt;p>&lt;code> &lt;/code>* Used by DXVA2 decoding&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(InitAllocator)(IMemAllocator **ppAlloc) PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Function called after connection is established, with the pin as argument&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(PostConnect)(IPin *pPin) PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Get the number of sample buffers optimal for this decoder&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD_(long, GetBufferCount)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Get the name of the decoder&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD_(const WCHAR*, GetDecoderName)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Get whether the decoder outputs thread-safe buffers&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(HasThreadSafeBuffers)() PURE;&lt;/p>
&lt;p>&lt;code> &lt;/code>/**&lt;/p>
&lt;p>&lt;code> &lt;/code>* Get whether the decoder should sync to the main thread&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHOD(SyncToProcessThread)() PURE;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>下面来看看封装libavcodec库的类吧，该类的定义位于decoders文件夹下，名为avcodec.h，如图所示：&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.161.jpeg" alt="">&lt;/p>
&lt;p>该类名字叫CDecAvcodec，其继承了CDecBase。而CDecBase继承了ILAVDecoder。&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* Copyright (C) 2010-2013 Hendrik Leppkes&lt;/p>
&lt;p>&lt;code> &lt;/code>* &lt;a href="http://www.1f0.de">http://www.1f0.de&lt;/a>&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is free software; you can redistribute it and/or modify&lt;/p>
&lt;p>&lt;code> &lt;/code>* it under the terms of the GNU General Public License as published by&lt;/p>
&lt;p>&lt;code> &lt;/code>* the Free Software Foundation; either version 2 of the License, or&lt;/p>
&lt;p>&lt;code> &lt;/code>* (at your option) any later version.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* This program is distributed in the hope that it will be useful,&lt;/p>
&lt;p>&lt;code> &lt;/code>* but WITHOUT ANY WARRANTY; without even the implied warranty of&lt;/p>
&lt;p>&lt;code> &lt;/code>* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the&lt;/p>
&lt;p>&lt;code> &lt;/code>* GNU General Public License for more details.&lt;/p>
&lt;p>&lt;code> &lt;/code>*&lt;/p>
&lt;p>&lt;code> &lt;/code>* You should have received a copy of the GNU General Public License along&lt;/p>
&lt;p>&lt;code> &lt;/code>* with this program; if not, write to the Free Software Foundation, Inc.,&lt;/p>
&lt;p>&lt;code> &lt;/code>* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>#pragma once&lt;/p>
&lt;p>#include &amp;quot;DecBase.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;H264RandomAccess.h&amp;quot;&lt;/p>
&lt;p>#include &lt;map>&lt;/p>
&lt;p>#define AVCODEC_MAX_THREADS 16&lt;/p>
&lt;p>typedef struct {&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStop;&lt;/p>
&lt;p>} TimingCache;&lt;/p>
&lt;p>//解码器（AVCODEC）（其实还有WMV9，CUVID等）&lt;/p>
&lt;p>class CDecAvcodec : public CDecBase&lt;/p>
&lt;p>{&lt;/p>
&lt;p>public:&lt;/p>
&lt;p>&lt;code> &lt;/code>CDecAvcodec(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual ~CDecAvcodec(void);&lt;/p>
&lt;p>&lt;code> &lt;/code>// ILAVDecoder&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP InitDecoder(AVCodecID codec, const CMediaType *pmt);&lt;/p>
&lt;p>&lt;code> &lt;/code>//解码&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Decode(const BYTE *buffer, int buflen, REFERENCE_TIME rtStart, REFERENCE_TIME rtStop, BOOL bSyncPoint, BOOL bDiscontinuity);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Flush();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP EndOfStream();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP GetPixelFormat(LAVPixelFormat *pPix, int *pBpp);&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(REFERENCE_TIME) GetFrameDuration();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(BOOL) IsInterlaced();&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP_(const WCHAR*) GetDecoderName() { return L&amp;quot;avcodec&amp;quot;; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP HasThreadSafeBuffers() { return S_OK; }&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP SyncToProcessThread() { return m_pAVCtx &amp;amp;&amp;amp; m_pAVCtx-&amp;gt;thread_count &amp;gt; 1 ? S_OK : S_FALSE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>// CDecBase&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP Init();&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT AdditionaDecoderInit() { return S_FALSE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT PostDecode() { return S_FALSE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>virtual HRESULT HandleDXVA2Frame(LAVFrame *pFrame) { return S_FALSE; }&lt;/p>
&lt;p>&lt;code> &lt;/code>//销毁解码器，各种Free&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP DestroyDecoder();&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>STDMETHODIMP ConvertPixFmt(AVFrame *pFrame, LAVFrame *pOutFrame);&lt;/p>
&lt;p>protected:&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *m_pAVCtx;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *m_pFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecID m_nCodecId;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bDXVA;&lt;/p>
&lt;p>private:&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *m_pAVCodec;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecParserContext *m_pParser;&lt;/p>
&lt;p>&lt;code> &lt;/code>BYTE *m_pFFBuffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>BYTE *m_pFFBuffer2;&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_nFFBufferSize;&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_nFFBufferSize2;&lt;/p>
&lt;p>&lt;code> &lt;/code>SwsContext *m_pSwsContext;&lt;/p>
&lt;p>&lt;code> &lt;/code>CH264RandomAccess m_h264RandomAccess;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bNoBufferConsumption;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bHasPalette;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Timing settings&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bFFReordering;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bCalculateStopTime;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bRVDropBFrameTimings;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bInputPadded;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bBFrameDelay;&lt;/p>
&lt;p>&lt;code> &lt;/code>TimingCache m_tcBFrameDelay[2];&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_nBFramePos;&lt;/p>
&lt;p>&lt;code> &lt;/code>TimingCache m_tcThreadBuffer[AVCODEC_MAX_THREADS];&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_CurrentThread;&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME m_rtStartCache;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bResumeAtKeyFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL m_bWaitingForKeyFrame;&lt;/p>
&lt;p>&lt;code> &lt;/code>int m_iInterlaced;&lt;/p>
&lt;p>};&lt;/p>
&lt;p>从CDecAvcodec类的定义可以看出，包含了各种功能的函数。首先我们看看初始化函数Init()&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13272409#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13272409#">copy&lt;/a>&lt;/p>
&lt;p>// ILAVDecoder&lt;/p>
&lt;p>STDMETHODIMP CDecAvcodec::Init()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>#ifdef DEBUG&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgSetModuleLevel (LOG_CUSTOM1, DWORD_MAX); // FFMPEG messages use custom1&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log_set_callback(lavf_log_callback);&lt;/p>
&lt;p>#else&lt;/p>
&lt;p>&lt;code> &lt;/code>av_log_set_callback(NULL);&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>//注册&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>可见其调用了ffmpeg的API函数avcodec_register_all()进行了解码器的注册。&lt;/p>
&lt;p>我们再来看看其解码函数Decode()：&lt;/p>
&lt;p>//解码&lt;/p>
&lt;p>STDMETHODIMP CDecAvcodec::Decode(const BYTE *buffer, int buflen, REFERENCE_TIME rtStartIn, REFERENCE_TIME rtStopIn, BOOL bSyncPoint, BOOL bDiscontinuity)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>int used_bytes = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bParserFrame = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bFlush = (buffer == NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bEndOfSequence = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化Packet&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket avpkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(&amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pAVCtx-&amp;gt;active_thread_type &amp;amp; FF_THREAD_FRAME) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_bFFReordering) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_tcThreadBuffer[m_CurrentThread].rtStart = rtStartIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_tcThreadBuffer[m_CurrentThread].rtStop = rtStopIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_CurrentThread = (m_CurrentThread + 1) % m_pAVCtx-&amp;gt;thread_count;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_bBFrameDelay) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_tcBFrameDelay[m_nBFramePos].rtStart = rtStartIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_tcBFrameDelay[m_nBFramePos].rtStop = rtStopIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nBFramePos = !m_nBFramePos;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *pDataBuffer = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bFlush &amp;amp;&amp;amp; buflen &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_bInputPadded &amp;amp;&amp;amp; (!(m_pAVCtx-&amp;gt;active_thread_type &amp;amp; FF_THREAD_FRAME) || m_pParser)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Copy bitstream into temporary buffer to ensure overread protection&lt;/p>
&lt;p>&lt;code> &lt;/code>// Verify buffer size&lt;/p>
&lt;p>&lt;code> &lt;/code>if (buflen &amp;gt; m_nFFBufferSize) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nFFBufferSize = buflen;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pFFBuffer = (BYTE *)av_realloc_f(m_pFFBuffer, m_nFFBufferSize + FF_INPUT_BUFFER_PADDING_SIZE, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_pFFBuffer) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nFFBufferSize = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_OUTOFMEMORY;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(m_pFFBuffer, buffer, buflen);&lt;/p>
&lt;p>&lt;code> &lt;/code>memset(m_pFFBuffer+buflen, 0, FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>pDataBuffer = m_pFFBuffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>pDataBuffer = (uint8_t *)buffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_nCodecId == AV_CODEC_ID_H264) {&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bRecovered = m_h264RandomAccess.searchRecoveryPoint(pDataBuffer, buflen);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bRecovered) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_nCodecId == AV_CODEC_ID_VP8 &amp;amp;&amp;amp; m_bWaitingForKeyFrame) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(pDataBuffer[0] &amp;amp; 1)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;::Decode(): Found VP8 key-frame, resuming decoding&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bWaitingForKeyFrame = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>while (buflen &amp;gt; 0 || bFlush) {&lt;/p>
&lt;p>&lt;code> &lt;/code>REFERENCE_TIME rtStart = rtStartIn, rtStop = rtStopIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!bFlush) {&lt;/p>
&lt;p>&lt;code> &lt;/code>//设置AVPacket中的数据&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = pDataBuffer;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = buflen;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.pts = rtStartIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (rtStartIn != AV_NOPTS_VALUE &amp;amp;&amp;amp; rtStopIn != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.duration = (int)(rtStopIn - rtStartIn);&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.duration = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.flags = AV_PKT_FLAG_KEY;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bHasPalette) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bHasPalette = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint32_t *pal = (uint32_t *)av_packet_new_side_data(&amp;amp;avpkt, AV_PKT_DATA_PALETTE, AVPALETTE_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>int pal_size = FFMIN((1 &amp;lt;&amp;lt; m_pAVCtx-&amp;gt;bits_per_coded_sample) &amp;lt;&amp;lt; 2, m_pAVCtx-&amp;gt;extradata_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *pal_src = m_pAVCtx-&amp;gt;extradata + m_pAVCtx-&amp;gt;extradata_size - pal_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; pal_size/4; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>pal[i] = 0xFF&amp;lt;&amp;lt;24 | AV_RL32(pal_src+4*i);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Parse the data if a parser is present&lt;/p>
&lt;p>&lt;code> &lt;/code>// This is mandatory for MPEG-1/2&lt;/p>
&lt;p>&lt;code> &lt;/code>// 不一定需要&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pParser) {&lt;/p>
&lt;p>&lt;code> &lt;/code>BYTE *pOut = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>int pOut_size = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = av_parser_parse2(m_pParser, m_pAVCtx, &amp;amp;pOut, &amp;amp;pOut_size, avpkt.data, avpkt.size, AV_NOPTS_VALUE, AV_NOPTS_VALUE, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (used_bytes == 0 &amp;amp;&amp;amp; pOut_size == 0 &amp;amp;&amp;amp; !bFlush) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 50, L&amp;quot;::Decode() - could not process buffer, starving?&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Update start time cache&lt;/p>
&lt;p>&lt;code> &lt;/code>// If more data was read then output, update the cache (incomplete frame)&lt;/p>
&lt;p>&lt;code> &lt;/code>// If output is bigger, a frame was completed, update the actual rtStart with the cached value, and then overwrite the cache&lt;/p>
&lt;p>&lt;code> &lt;/code>if (used_bytes &amp;gt; pOut_size) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (rtStartIn != AV_NOPTS_VALUE)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_rtStartCache = rtStartIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (used_bytes == pOut_size || ((used_bytes + 9) == pOut_size)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Why +9 above?&lt;/p>
&lt;p>&lt;code> &lt;/code>// Well, apparently there are some broken MKV muxers that like to mux the MPEG-2 PICTURE_START_CODE block (which is 9 bytes) in the package with the previous frame&lt;/p>
&lt;p>&lt;code> &lt;/code>// This would cause the frame timestamps to be delayed by one frame exactly, and cause timestamp reordering to go wrong.&lt;/p>
&lt;p>&lt;code> &lt;/code>// So instead of failing on those samples, lets just assume that 9 bytes are that case exactly.&lt;/p>
&lt;p>&lt;code> &lt;/code>m_rtStartCache = rtStartIn = AV_NOPTS_VALUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (pOut_size &amp;gt; used_bytes) {&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStart = m_rtStartCache;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_rtStartCache = rtStartIn;&lt;/p>
&lt;p>&lt;code> &lt;/code>// The value was used once, don't use it for multiple frames, that ends up in weird timings&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStartIn = AV_NOPTS_VALUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>bParserFrame = (pOut_size &amp;gt; 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pOut_size &amp;gt; 0 || bFlush) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pOut &amp;amp;&amp;amp; pOut_size &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pOut_size &amp;gt; m_nFFBufferSize2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nFFBufferSize2 = pOut_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pFFBuffer2 = (BYTE *)av_realloc_f(m_pFFBuffer2, m_nFFBufferSize2 + FF_INPUT_BUFFER_PADDING_SIZE, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!m_pFFBuffer2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nFFBufferSize2 = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_OUTOFMEMORY;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>memcpy(m_pFFBuffer2, pOut, pOut_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>memset(m_pFFBuffer2+pOut_size, 0, FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = m_pFFBuffer2;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = pOut_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.pts = rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.duration = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>const uint8_t *eosmarker = CheckForEndOfSequence(m_nCodecId, avpkt.data, avpkt.size, &amp;amp;m_MpegParserState);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (eosmarker) {&lt;/p>
&lt;p>&lt;code> &lt;/code>bEndOfSequence = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.data = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>avpkt.size = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//真正的解码&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret2 = avcodec_decode_video2 (m_pAVCtx, m_pFrame, &amp;amp;got_picture, &amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret2 &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 50, L&amp;quot;::Decode() - decoding failed despite successfull parsing&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>used_bytes = avcodec_decode_video2 (m_pAVCtx, m_pFrame, &amp;amp;got_picture, &amp;amp;avpkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (FAILED(PostDecode())) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_frame_unref(m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_FAIL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Decoding of this frame failed ... oh well!&lt;/p>
&lt;p>&lt;code> &lt;/code>if (used_bytes &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_frame_unref(m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// When Frame Threading, we won't know how much data has been consumed, so it by default eats everything.&lt;/p>
&lt;p>&lt;code> &lt;/code>// In addition, if no data got consumed, and no picture was extracted, the frame probably isn't all that useufl.&lt;/p>
&lt;p>&lt;code> &lt;/code>// The MJPEB decoder is somewhat buggy and doesn't let us know how much data was consumed really...&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((!m_pParser &amp;amp;&amp;amp; (m_pAVCtx-&amp;gt;active_thread_type &amp;amp; FF_THREAD_FRAME || (!got_picture &amp;amp;&amp;amp; used_bytes == 0))) || m_bNoBufferConsumption || bFlush) {&lt;/p>
&lt;p>&lt;code> &lt;/code>buflen = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>buflen -= used_bytes;&lt;/p>
&lt;p>&lt;code> &lt;/code>pDataBuffer += used_bytes;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Judge frame usability&lt;/p>
&lt;p>&lt;code> &lt;/code>// This determines if a frame is artifact free and can be delivered&lt;/p>
&lt;p>&lt;code> &lt;/code>// For H264 this does some wicked magic hidden away in the H264RandomAccess class&lt;/p>
&lt;p>&lt;code> &lt;/code>// MPEG-2 and VC-1 just wait for a keyframe..&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_nCodecId == AV_CODEC_ID_H264 &amp;amp;&amp;amp; (bParserFrame || !m_pParser || got_picture)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_h264RandomAccess.judgeFrameUsability(m_pFrame, &amp;amp;got_picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_bResumeAtKeyFrame) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bWaitingForKeyFrame &amp;amp;&amp;amp; got_picture) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pFrame-&amp;gt;key_frame) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 50, L&amp;quot;::Decode() - Found Key-Frame, resuming decoding at %I64d&amp;quot;, m_pFrame-&amp;gt;pkt_pts));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bWaitingForKeyFrame = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>got_picture = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Handle B-frame delay for frame threading codecs&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((m_pAVCtx-&amp;gt;active_thread_type &amp;amp; FF_THREAD_FRAME) &amp;amp;&amp;amp; m_bBFrameDelay) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_tcBFrameDelay[m_nBFramePos] = m_tcThreadBuffer[m_CurrentThread];&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nBFramePos = !m_nBFramePos;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!got_picture || !m_pFrame-&amp;gt;data[0]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!avpkt.size)&lt;/p>
&lt;p>&lt;code> &lt;/code>bFlush = FALSE; // End flushing, no more frames&lt;/p>
&lt;p>&lt;code> &lt;/code>av_frame_unref(m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>continue;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>///////////////////////////////////////////////////////////////////////////////////////////////&lt;/p>
&lt;p>&lt;code> &lt;/code>// Determine the proper timestamps for the frame, based on different possible flags.&lt;/p>
&lt;p>&lt;code> &lt;/code>///////////////////////////////////////////////////////////////////////////////////////////////&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bFFReordering) {&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStart = m_pFrame-&amp;gt;pkt_pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pFrame-&amp;gt;pkt_duration)&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStop = m_pFrame-&amp;gt;pkt_pts + m_pFrame-&amp;gt;pkt_duration;&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStop = AV_NOPTS_VALUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_bBFrameDelay &amp;amp;&amp;amp; m_pAVCtx-&amp;gt;has_b_frames) {&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStart = m_tcBFrameDelay[m_nBFramePos].rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStop = m_tcBFrameDelay[m_nBFramePos].rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (m_pAVCtx-&amp;gt;active_thread_type &amp;amp; FF_THREAD_FRAME) {&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned index = m_CurrentThread;&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStart = m_tcThreadBuffer[index].rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStop = m_tcThreadBuffer[index].rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bRVDropBFrameTimings &amp;amp;&amp;amp; m_pFrame-&amp;gt;pict_type == AV_PICTURE_TYPE_B) {&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStart = AV_NOPTS_VALUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_bCalculateStopTime)&lt;/p>
&lt;p>&lt;code> &lt;/code>rtStop = AV_NOPTS_VALUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>///////////////////////////////////////////////////////////////////////////////////////////////&lt;/p>
&lt;p>&lt;code> &lt;/code>// All required values collected, deliver the frame&lt;/p>
&lt;p>&lt;code> &lt;/code>///////////////////////////////////////////////////////////////////////////////////////////////&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVFrame *pOutFrame = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>AllocateFrame(&amp;amp;pOutFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>AVRational display_aspect_ratio;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t num = (int64_t)m_pFrame-&amp;gt;sample_aspect_ratio.num * m_pFrame-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>int64_t den = (int64_t)m_pFrame-&amp;gt;sample_aspect_ratio.den * m_pFrame-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_reduce(&amp;amp;display_aspect_ratio.num, &amp;amp;display_aspect_ratio.den, num, den, 1 &amp;lt;&amp;lt; 30);&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;width = m_pFrame-&amp;gt;width;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;height = m_pFrame-&amp;gt;height;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;aspect_ratio = display_aspect_ratio;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;repeat = m_pFrame-&amp;gt;repeat_pict;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;key_frame = m_pFrame-&amp;gt;key_frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;frame_type = av_get_picture_type_char(m_pFrame-&amp;gt;pict_type);&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;ext_format = GetDXVA2ExtendedFlags(m_pAVCtx, m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pFrame-&amp;gt;interlaced_frame || (!m_pAVCtx-&amp;gt;progressive_sequence &amp;amp;&amp;amp; (m_nCodecId == AV_CODEC_ID_H264 || m_nCodecId == AV_CODEC_ID_MPEG2VIDEO)))&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>else if (m_pAVCtx-&amp;gt;progressive_sequence)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;interlaced = (m_pFrame-&amp;gt;interlaced_frame || (m_iInterlaced == 1 &amp;amp;&amp;amp; m_pSettings-&amp;gt;GetDeinterlacingMode() == DeintMode_Aggressive) || m_pSettings-&amp;gt;GetDeinterlacingMode() == DeintMode_Force) &amp;amp;&amp;amp; !(m_pSettings-&amp;gt;GetDeinterlacingMode() == DeintMode_Disable);&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVDeintFieldOrder fo = m_pSettings-&amp;gt;GetDeintFieldOrder();&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;tff = (fo == DeintFieldOrder_Auto) ? m_pFrame-&amp;gt;top_field_first : (fo == DeintFieldOrder_TopFieldFirst);&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;rtStart = rtStart;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;rtStop = rtStop;&lt;/p>
&lt;p>&lt;code> &lt;/code>PixelFormatMapping map = getPixFmtMapping((AVPixelFormat)m_pFrame-&amp;gt;format);&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;format = map.lavpixfmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;bpp = map.bpp;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_nCodecId == AV_CODEC_ID_MPEG2VIDEO || m_nCodecId == AV_CODEC_ID_MPEG1VIDEO)&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;avgFrameDuration = GetFrameDuration();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (map.conversion) {&lt;/p>
&lt;p>&lt;code> &lt;/code>ConvertPixFmt(m_pFrame, pOutFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; 4; i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;data[i] = m_pFrame-&amp;gt;data[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;stride[i] = m_pFrame-&amp;gt;linesize[i];&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;priv_data = av_frame_alloc();&lt;/p>
&lt;p>&lt;code> &lt;/code>av_frame_ref((AVFrame *)pOutFrame-&amp;gt;priv_data, m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;destruct = lav_avframe_free;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bEndOfSequence)&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;flags |= LAV_FRAME_FLAG_END_OF_SEQUENCE;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pOutFrame-&amp;gt;format == LAVPixFmt_DXVA2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>pOutFrame-&amp;gt;data[0] = m_pFrame-&amp;gt;data[4];&lt;/p>
&lt;p>&lt;code> &lt;/code>HandleDXVA2Frame(pOutFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>Deliver(pOutFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bEndOfSequence) {&lt;/p>
&lt;p>&lt;code> &lt;/code>bEndOfSequence = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pOutFrame-&amp;gt;format == LAVPixFmt_DXVA2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>HandleDXVA2Frame(m_pCallback-&amp;gt;GetFlushFrame());&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>Deliver(m_pCallback-&amp;gt;GetFlushFrame());&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bFlush) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_CurrentThread = (m_CurrentThread + 1) % m_pAVCtx-&amp;gt;thread_count;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_frame_unref(m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>终于，我们从这个函数中看到了很多的ffmpeg的API，结构体，以及变量。比如解码视频的函数avcodec_decode_video2()。&lt;/p>
&lt;p>解码器初始化函数：InitDecoder()&lt;/p>
&lt;p>//创建解码器&lt;/p>
&lt;p>STDMETHODIMP CDecAvcodec::InitDecoder(AVCodecID codec, const CMediaType *pmt)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>//要是有，先销毁&lt;/p>
&lt;p>&lt;code> &lt;/code>DestroyDecoder();&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;Initializing ffmpeg for codec %S&amp;quot;, avcodec_get_name(codec)));&lt;/p>
&lt;p>&lt;code> &lt;/code>BITMAPINFOHEADER *pBMI = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>videoFormatTypeHandler((const BYTE *)pmt-&amp;gt;Format(), pmt-&amp;gt;FormatType(), &amp;amp;pBMI);&lt;/p>
&lt;p>&lt;code> &lt;/code>//查找解码器&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCodec = avcodec_find_decoder(codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>CheckPointer(m_pAVCodec, VFW_E_UNSUPPORTED_VIDEO);&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化上下文环境&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx = avcodec_alloc_context3(m_pAVCodec);&lt;/p>
&lt;p>&lt;code> &lt;/code>CheckPointer(m_pAVCtx, E_POINTER);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(codec == AV_CODEC_ID_MPEG1VIDEO || codec == AV_CODEC_ID_MPEG2VIDEO || pmt-&amp;gt;subtype == FOURCCMap(MKTAG('H','2','6','4')) || pmt-&amp;gt;subtype == FOURCCMap(MKTAG('h','2','6','4'))) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pParser = av_parser_init(codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>DWORD dwDecFlags = m_pCallback-&amp;gt;GetDecodeFlags();&lt;/p>
&lt;p>&lt;code> &lt;/code>LONG biRealWidth = pBMI-&amp;gt;biWidth, biRealHeight = pBMI-&amp;gt;biHeight;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pmt-&amp;gt;formattype == FORMAT_VideoInfo || pmt-&amp;gt;formattype == FORMAT_MPEGVideo) {&lt;/p>
&lt;p>&lt;code> &lt;/code>VIDEOINFOHEADER *vih = (VIDEOINFOHEADER *)pmt-&amp;gt;Format();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (vih-&amp;gt;rcTarget.right != 0 &amp;amp;&amp;amp; vih-&amp;gt;rcTarget.bottom != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>biRealWidth = vih-&amp;gt;rcTarget.right;&lt;/p>
&lt;p>&lt;code> &lt;/code>biRealHeight = vih-&amp;gt;rcTarget.bottom;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (pmt-&amp;gt;formattype == FORMAT_VideoInfo2 || pmt-&amp;gt;formattype == FORMAT_MPEG2Video) {&lt;/p>
&lt;p>&lt;code> &lt;/code>VIDEOINFOHEADER2 *vih2 = (VIDEOINFOHEADER2 *)pmt-&amp;gt;Format();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (vih2-&amp;gt;rcTarget.right != 0 &amp;amp;&amp;amp; vih2-&amp;gt;rcTarget.bottom != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>biRealWidth = vih2-&amp;gt;rcTarget.right;&lt;/p>
&lt;p>&lt;code> &lt;/code>biRealHeight = vih2-&amp;gt;rcTarget.bottom;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//各种赋值&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;codec_id = codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;codec_tag = pBMI-&amp;gt;biCompression;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;coded_width = pBMI-&amp;gt;biWidth;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;coded_height = abs(pBMI-&amp;gt;biHeight);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;bits_per_coded_sample = pBMI-&amp;gt;biBitCount;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;error_concealment = FF_EC_GUESS_MVS | FF_EC_DEBLOCK;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;err_recognition = AV_EF_CAREFUL;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;workaround_bugs = FF_BUG_AUTODETECT;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;refcounted_frames = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec == AV_CODEC_ID_H264)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;flags2 |= CODEC_FLAG2_SHOW_ALL;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Setup threading&lt;/p>
&lt;p>&lt;code> &lt;/code>int thread_type = getThreadFlags(codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (thread_type) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Thread Count. 0 = auto detect&lt;/p>
&lt;p>&lt;code> &lt;/code>int thread_count = m_pSettings-&amp;gt;GetNumThreads();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (thread_count == 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>thread_count = av_cpu_count() * 3 / 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;thread_count = max(1, min(thread_count, AVCODEC_MAX_THREADS));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;thread_type = thread_type;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;thread_count = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (dwDecFlags &amp;amp; LAV_VIDEO_DEC_FLAG_NO_MT) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;thread_count = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>//初始化AVFrame&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pFrame = av_frame_alloc();&lt;/p>
&lt;p>&lt;code> &lt;/code>CheckPointer(m_pFrame, E_POINTER);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_h264RandomAccess.SetAVCNALSize(0);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Process Extradata&lt;/p>
&lt;p>&lt;code> &lt;/code>//处理ExtraData&lt;/p>
&lt;p>&lt;code> &lt;/code>BYTE *extra = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>size_t extralen = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>getExtraData(*pmt, NULL, &amp;amp;extralen);&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bH264avc = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (extralen &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;-&amp;gt; Processing extradata of %d bytes&amp;quot;, extralen));&lt;/p>
&lt;p>&lt;code> &lt;/code>// Reconstruct AVC1 extradata format&lt;/p>
&lt;p>&lt;code> &lt;/code>if (pmt-&amp;gt;formattype == FORMAT_MPEG2Video &amp;amp;&amp;amp; (m_pAVCtx-&amp;gt;codec_tag == MAKEFOURCC('a','v','c','1') || m_pAVCtx-&amp;gt;codec_tag == MAKEFOURCC('A','V','C','1') || m_pAVCtx-&amp;gt;codec_tag == MAKEFOURCC('C','C','V','1'))) {&lt;/p>
&lt;p>&lt;code> &lt;/code>MPEG2VIDEOINFO *mp2vi = (MPEG2VIDEOINFO *)pmt-&amp;gt;Format();&lt;/p>
&lt;p>&lt;code> &lt;/code>extralen += 7;&lt;/p>
&lt;p>&lt;code> &lt;/code>extra = (uint8_t *)av_mallocz(extralen + FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[0] = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[1] = (BYTE)mp2vi-&amp;gt;dwProfile;&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[2] = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[3] = (BYTE)mp2vi-&amp;gt;dwLevel;&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[4] = (BYTE)(mp2vi-&amp;gt;dwFlags ? mp2vi-&amp;gt;dwFlags : 4) - 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Actually copy the metadata into our new buffer&lt;/p>
&lt;p>&lt;code> &lt;/code>size_t actual_len;&lt;/p>
&lt;p>&lt;code> &lt;/code>getExtraData(*pmt, extra+6, &amp;amp;actual_len);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Count the number of SPS/PPS in them and set the length&lt;/p>
&lt;p>&lt;code> &lt;/code>// We'll put them all into one block and add a second block with 0 elements afterwards&lt;/p>
&lt;p>&lt;code> &lt;/code>// The parsing logic does not care what type they are, it just expects 2 blocks.&lt;/p>
&lt;p>&lt;code> &lt;/code>BYTE *p = extra+6, *end = extra+6+actual_len;&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bSPS = FALSE, bPPS = FALSE;&lt;/p>
&lt;p>&lt;code> &lt;/code>int count = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>while (p+1 &amp;lt; end) {&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned len = (((unsigned)p[0] &amp;lt;&amp;lt; 8) | p[1]) + 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (p + len &amp;gt; end) {&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((p[2] &amp;amp; 0x1F) == 7)&lt;/p>
&lt;p>&lt;code> &lt;/code>bSPS = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((p[2] &amp;amp; 0x1F) == 8)&lt;/p>
&lt;p>&lt;code> &lt;/code>bPPS = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>count++;&lt;/p>
&lt;p>&lt;code> &lt;/code>p += len;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[5] = count;&lt;/p>
&lt;p>&lt;code> &lt;/code>extra[extralen-1] = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>bH264avc = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_h264RandomAccess.SetAVCNALSize(mp2vi-&amp;gt;dwFlags);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (pmt-&amp;gt;subtype == MEDIASUBTYPE_LAV_RAWVIDEO) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (extralen &amp;lt; sizeof(m_pAVCtx-&amp;gt;pix_fmt)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;-&amp;gt; LAV RAW Video extradata is missing..&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>extra = (uint8_t *)av_mallocz(extralen + FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>getExtraData(*pmt, extra, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;pix_fmt = *(AVPixelFormat *)extra;&lt;/p>
&lt;p>&lt;code> &lt;/code>extralen -= sizeof(AVPixelFormat);&lt;/p>
&lt;p>&lt;code> &lt;/code>memmove(extra, extra+sizeof(AVPixelFormat), extralen);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Just copy extradata for other formats&lt;/p>
&lt;p>&lt;code> &lt;/code>extra = (uint8_t *)av_mallocz(extralen + FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>getExtraData(*pmt, extra, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Hack to discard invalid MP4 metadata with AnnexB style video&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec == AV_CODEC_ID_H264 &amp;amp;&amp;amp; !bH264avc &amp;amp;&amp;amp; extra[0] == 1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;extra);&lt;/p>
&lt;p>&lt;code> &lt;/code>extralen = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;extradata = extra;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;extradata_size = (int)extralen;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec == AV_CODEC_ID_VP6 || codec == AV_CODEC_ID_VP6A || codec == AV_CODEC_ID_VP6F) {&lt;/p>
&lt;p>&lt;code> &lt;/code>int cropH = pBMI-&amp;gt;biWidth - biRealWidth;&lt;/p>
&lt;p>&lt;code> &lt;/code>int cropV = pBMI-&amp;gt;biHeight - biRealHeight;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (cropH &amp;gt;= 0 &amp;amp;&amp;amp; cropH &amp;lt;= 0x0f &amp;amp;&amp;amp; cropV &amp;gt;= 0 &amp;amp;&amp;amp; cropV &amp;lt;= 0x0f) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;extradata = (uint8_t *)av_mallocz(1 + FF_INPUT_BUFFER_PADDING_SIZE);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;extradata_size = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;extradata[0] = (cropH &amp;lt;&amp;lt; 4) | cropV;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_h264RandomAccess.flush(m_pAVCtx-&amp;gt;thread_count);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_CurrentThread = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_rtStartCache = AV_NOPTS_VALUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>LAVPinInfo lavPinInfo = {0};&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bLAVInfoValid = SUCCEEDED(m_pCallback-&amp;gt;GetLAVPinInfo(lavPinInfo));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bInputPadded = dwDecFlags &amp;amp; LAV_VIDEO_DEC_FLAG_LAVSPLITTER;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Setup codec-specific timing logic&lt;/p>
&lt;p>&lt;code> &lt;/code>BOOL bVC1IsPTS = (codec == AV_CODEC_ID_VC1 &amp;amp;&amp;amp; !(dwDecFlags &amp;amp; LAV_VIDEO_DEC_FLAG_VC1_DTS));&lt;/p>
&lt;p>&lt;code> &lt;/code>// Use ffmpegs logic to reorder timestamps&lt;/p>
&lt;p>&lt;code> &lt;/code>// This is required for H264 content (except AVI), and generally all codecs that use frame threading&lt;/p>
&lt;p>&lt;code> &lt;/code>// VC-1 is also a special case. Its required for splitters that deliver PTS timestamps (see bVC1IsPTS above)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bFFReordering = ( codec == AV_CODEC_ID_H264 &amp;amp;&amp;amp; !(dwDecFlags &amp;amp; LAV_VIDEO_DEC_FLAG_H264_AVI))&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_VP8&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_VP3&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_THEORA&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_HUFFYUV&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_FFVHUFF&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_MPEG2VIDEO&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_MPEG1VIDEO&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_DIRAC&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_UTVIDEO&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_DNXHD&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_JPEG2000&lt;/p>
&lt;p>&lt;code> &lt;/code>|| (codec == AV_CODEC_ID_MPEG4 &amp;amp;&amp;amp; pmt-&amp;gt;formattype == FORMAT_MPEG2Video)&lt;/p>
&lt;p>&lt;code> &lt;/code>|| bVC1IsPTS;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Stop time is unreliable, drop it and calculate it&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bCalculateStopTime = (codec == AV_CODEC_ID_H264 || codec == AV_CODEC_ID_DIRAC || (codec == AV_CODEC_ID_MPEG4 &amp;amp;&amp;amp; pmt-&amp;gt;formattype == FORMAT_MPEG2Video) || bVC1IsPTS);&lt;/p>
&lt;p>&lt;code> &lt;/code>// Real Video content has some odd timestamps&lt;/p>
&lt;p>&lt;code> &lt;/code>// LAV Splitter does them allright with RV30/RV40, everything else screws them up&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bRVDropBFrameTimings = (codec == AV_CODEC_ID_RV10 || codec == AV_CODEC_ID_RV20 || ((codec == AV_CODEC_ID_RV30 || codec == AV_CODEC_ID_RV40) &amp;amp;&amp;amp; (!(dwDecFlags &amp;amp; LAV_VIDEO_DEC_FLAG_LAVSPLITTER) || (bLAVInfoValid &amp;amp;&amp;amp; (lavPinInfo.flags &amp;amp; LAV_STREAM_FLAG_RV34_MKV)))));&lt;/p>
&lt;p>&lt;code> &lt;/code>// Enable B-Frame delay handling&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bBFrameDelay = !m_bFFReordering &amp;amp;&amp;amp; !m_bRVDropBFrameTimings;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bWaitingForKeyFrame = TRUE;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bResumeAtKeyFrame = codec == AV_CODEC_ID_MPEG2VIDEO&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_VC1&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_RV30&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_RV40&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_VP3&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_THEORA&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_MPEG4;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bNoBufferConsumption = codec == AV_CODEC_ID_MJPEGB&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_LOCO&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_JPEG2000;&lt;/p>
&lt;p>&lt;code> &lt;/code>m_bHasPalette = m_pAVCtx-&amp;gt;bits_per_coded_sample &amp;lt;= 8 &amp;amp;&amp;amp; m_pAVCtx-&amp;gt;extradata_size &amp;amp;&amp;amp; !(dwDecFlags &amp;amp; LAV_VIDEO_DEC_FLAG_LAVSPLITTER)&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;amp;&amp;amp; (codec == AV_CODEC_ID_MSVIDEO1&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_MSRLE&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_CINEPAK&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_8BPS&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_QPEG&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_QTRLE&lt;/p>
&lt;p>&lt;code> &lt;/code>|| codec == AV_CODEC_ID_TSCC);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (FAILED(AdditionaDecoderInit())) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return E_FAIL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bLAVInfoValid) {&lt;/p>
&lt;p>&lt;code> &lt;/code>// Setting has_b_frames to a proper value will ensure smoother decoding of H264&lt;/p>
&lt;p>&lt;code> &lt;/code>if (lavPinInfo.has_b_frames &amp;gt;= 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;-&amp;gt; Setting has_b_frames to %d&amp;quot;, lavPinInfo.has_b_frames));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;has_b_frames = lavPinInfo.has_b_frames;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Open the decoder&lt;/p>
&lt;p>&lt;code> &lt;/code>//打开解码器&lt;/p>
&lt;p>&lt;code> &lt;/code>int ret = avcodec_open2(m_pAVCtx, m_pAVCodec, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret &amp;gt;= 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;-&amp;gt; ffmpeg codec opened successfully (ret: %d)&amp;quot;, ret));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nCodecId = codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;-&amp;gt; ffmpeg codec failed to open (ret: %d)&amp;quot;, ret));&lt;/p>
&lt;p>&lt;code> &lt;/code>DestroyDecoder();&lt;/p>
&lt;p>&lt;code> &lt;/code>return VFW_E_UNSUPPORTED_VIDEO;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>for (int i = 0; i &amp;lt; countof(ff_interlace_capable); i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec == ff_interlace_capable[i]) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = -1;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// Detect chroma and interlaced&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pAVCtx-&amp;gt;extradata &amp;amp;&amp;amp; m_pAVCtx-&amp;gt;extradata_size) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec == AV_CODEC_ID_MPEG2VIDEO) {&lt;/p>
&lt;p>&lt;code> &lt;/code>CMPEG2HeaderParser mpeg2Parser(extra, extralen);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (mpeg2Parser.hdr.valid) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (mpeg2Parser.hdr.chroma &amp;lt; 2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;pix_fmt = AV_PIX_FMT_YUV420P;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (mpeg2Parser.hdr.chroma == 2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;pix_fmt = AV_PIX_FMT_YUV422P;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = mpeg2Parser.hdr.interlaced;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codec == AV_CODEC_ID_H264) {&lt;/p>
&lt;p>&lt;code> &lt;/code>CH264SequenceParser h264parser;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bH264avc)&lt;/p>
&lt;p>&lt;code> &lt;/code>h264parser.ParseNALs(extra+6, extralen-6, 2);&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>h264parser.ParseNALs(extra, extralen, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (h264parser.sps.valid)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = h264parser.sps.interlaced;&lt;/p>
&lt;p>&lt;code> &lt;/code>} else if (codec == AV_CODEC_ID_VC1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>CVC1HeaderParser vc1parser(extra, extralen);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (vc1parser.hdr.valid)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_iInterlaced = (vc1parser.hdr.interlaced ? -1 : 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (codec == AV_CODEC_ID_DNXHD)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;pix_fmt = AV_PIX_FMT_YUV422P10;&lt;/p>
&lt;p>&lt;code> &lt;/code>else if (codec == AV_CODEC_ID_FRAPS)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;pix_fmt = AV_PIX_FMT_BGR24;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (bLAVInfoValid &amp;amp;&amp;amp; codec != AV_CODEC_ID_FRAPS &amp;amp;&amp;amp; m_pAVCtx-&amp;gt;pix_fmt != AV_PIX_FMT_DXVA2_VLD)&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCtx-&amp;gt;pix_fmt = lavPinInfo.pix_fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;AVCodec init successfull. interlaced: %d&amp;quot;, m_iInterlaced));&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>解码器销毁函数：DestroyDecoder()&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13272409#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/13272409#">copy&lt;/a>&lt;/p>
&lt;p>//销毁解码器，各种Free&lt;/p>
&lt;p>STDMETHODIMP CDecAvcodec::DestroyDecoder()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>DbgLog((LOG_TRACE, 10, L&amp;quot;Shutting down ffmpeg...&amp;quot;));&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pAVCodec = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pParser) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_parser_close(m_pParser);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pParser = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pAVCtx) {&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(m_pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;m_pAVCtx-&amp;gt;extradata);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;m_pAVCtx);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_frame_free(&amp;amp;m_pFrame);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;m_pFFBuffer);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nFFBufferSize = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;m_pFFBuffer2);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nFFBufferSize2 = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (m_pSwsContext) {&lt;/p>
&lt;p>&lt;code> &lt;/code>sws_freeContext(m_pSwsContext);&lt;/p>
&lt;p>&lt;code> &lt;/code>m_pSwsContext = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>m_nCodecId = AV_CODEC_ID_NONE;&lt;/p>
&lt;p>&lt;code> &lt;/code>return S_OK;&lt;/p>
&lt;p>}&lt;/p>
&lt;h2 id="93-mplayer">&lt;strong>9.3 MPlayer&lt;/strong>&lt;/h2>
&lt;h3 id="931-mplayer支持的格式">&lt;strong>9.3.1 Mplayer支持的格式&lt;/strong>&lt;/h3>
&lt;p>MPlayer是一个LINUX下的视频播放器，它支持相当多的媒体格式，无论在音频播放还是在视频播放方面，可以说它支持的格式是相当全面的。&lt;/p>
&lt;p>视频格式支持：MPEG、AVI、ASF 与WMV、QuickTime 与 OGG/OGM、SDP、PVA、GIF。&lt;/p>
&lt;p>音频格式支持：MP3、WAV、OGG/OGM 文件(Vorbis)、WMA 与 ASF、MP4、CD音频、XMMS。&lt;/p>
&lt;h3 id="932-mplayer-中头文件的功能分析">&lt;strong>9.3.2 Mplayer 中头文件的功能分析&lt;/strong>&lt;/h3>
&lt;p>config.h // 各种本地配置宏定义头&lt;/p>
&lt;p>version.h // 版本定义头 #define VERSION &amp;quot;1.0pre7try2-3.4.2&amp;quot;&lt;/p>
&lt;p>mp_msg.h // 消息处理头&lt;/p>
&lt;p>help_mp.h // 根据配置自动生成的帮助头 #include &amp;quot;help/help_mpen.h&amp;quot;&lt;/p>
&lt;p>cfg-mplayer-def.h // Mplayer 运行时的选项缺省值头文件 char*&lt;/p>
&lt;p>default_config =&lt;/p>
&lt;p>sub_reader.h // 拥有格式自动发现功能的字幕(subtitle)阅读器&lt;/p>
&lt;p>libvo/video_out.h // 该文件包含 libvo 视频输出的公共函数、变量&lt;/p>
&lt;p>libvo/font_load.h // 有关字体装载的例程&lt;/p>
&lt;p>libao2/audio_out.h // 音频输出驱动程序相关结构定义和全局数据&lt;/p>
&lt;p>libmpcodecs/dec_audio.h // 音频解码&lt;/p>
&lt;p>libmpcodecs/dec_video.h // 视频解码&lt;/p>
&lt;p>libmpdemux/matroska.h // 多路解复用，媒体容器格式 matroska 处理头&lt;/p>
&lt;p>libmpdemux/stream.h // 流处理&lt;/p>
&lt;p>libmpdemux/demuxer.h // 多路解复用头文件&lt;/p>
&lt;p>libmpdemux/stheader.h // 媒体流头处理&lt;/p>
&lt;p>get_path.c // 路径获取头文件&lt;/p>
&lt;p>spudec.h // SPU 子画面单元头，DVD 字幕流&lt;/p>
&lt;p>edl.h // 剪辑控制清单&lt;/p>
&lt;p>m_option.h // 选项类型处理头&lt;/p>
&lt;p>m_config.h // 配置处理头文件&lt;/p>
&lt;h3 id="933-mplayermain-主流程简要说明">&lt;strong>9.3.3 MPlayer.main 主流程简要说明&lt;/strong>&lt;/h3>
&lt;p>int main() {&lt;/p>
&lt;p>\1) 变量声明，电影信息 movie info:&lt;/p>
&lt;p>\2) 初始化，消息系统……&lt;/p>
&lt;p>play_next_file:&lt;/p>
&lt;p>3)播放文件 filename 的循环 goto play_next_file 开始&lt;/p>
&lt;p>main:&lt;/p>
&lt;p>\4) 主处理 main&lt;/p>
&lt;p>\5) 播放真正主循环 2010 ~3541 while (!eof)&lt;/p>
&lt;p>while (!eof) {&lt;/p>
&lt;p>5.1) 播放音频 PLAY AUDIO 2017 ~ 2064 decode_audio(sh_audio, ...);&lt;/p>
&lt;p>5.2) 播放视频 PLAY VIDEO, 2068 ~ 2300 decode_video(sh_video, ...);&lt;/p>
&lt;p>5.3) 处理暂停 PAUSE&lt;/p>
&lt;p>5.4) 处理 EDL&lt;/p>
&lt;p>5.5) 键盘事件处理, 搜索2400~3216 while (!brk_cmd &amp;amp;&amp;amp;&lt;/p>
&lt;p>(cmd=mp_input_get_cmd(0,0,0))!=NULL)&lt;/p>
&lt;p>5.6) 时间寻道(秒) if (seek_to_sec)&lt;/p>
&lt;p>5.7) 寻道 3243 ~ 3306, if (rel_seek_secs || abs_seek_pos)&lt;/p>
&lt;p>5.8) 处理 GUI&lt;/p>
&lt;p>5.9) 变更 Update OSD&lt;/p>
&lt;p>5.10) 找到字幕 find sub&lt;/p>
&lt;p>5.11) 处理 X11 窗口&lt;/p>
&lt;p>5.12) DVD 字幕 sub:&lt;/p>
&lt;p>}&lt;/p>
&lt;p>goto_next_file:&lt;/p>
&lt;p>\6) 播放结束，转到下个文件 goto_next_file:&lt;/p>
&lt;p>}&lt;/p>
&lt;h3 id="934-mplayer源码分析">&lt;strong>9.3.4 Mplayer源码分析&lt;/strong>&lt;/h3>
&lt;p>从Mplayer.c的main开始处理参数&lt;/p>
&lt;p>mconfig = m_config_new();&lt;/p>
&lt;p>m_config_register_options(mconfig,mplayer_opts);&lt;/p>
&lt;p>// TODO : add something to let modules register their options&lt;/p>
&lt;p>mp_input_register_options(mconfig);&lt;/p>
&lt;p>parse_cfgfiles(mconfig);&lt;/p>
&lt;p>初始化mpctx结构体，mpctx应该是mplayer context的意思，顾名思义是一个统筹全局的变量。&lt;/p>
&lt;p>[cpp] &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/11885509#">view plain&lt;/a>&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/11885509#">copy&lt;/a>&lt;/p>
&lt;p>static MPContext *mpctx = &amp;amp;mpctx_s;&lt;/p>
&lt;p>// Not all functions in mplayer.c take the context as an argument yet&lt;/p>
&lt;p>static MPContext mpctx_s = {&lt;/p>
&lt;p>.osd_function = OSD_PLAY,&lt;/p>
&lt;p>.begin_skip = MP_NOPTS_VALUE,&lt;/p>
&lt;p>.play_tree_step = 1,&lt;/p>
&lt;p>.global_sub_pos = -1,&lt;/p>
&lt;p>.set_of_sub_pos = -1,&lt;/p>
&lt;p>.file_format = DEMUXER_TYPE_UNKNOWN,&lt;/p>
&lt;p>.loop_times = -1,&lt;/p>
&lt;p>#ifdef HAS_DVBIN_SUPPORT&lt;/p>
&lt;p>.last_dvb_step = 1,&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>};&lt;/p>
&lt;p>原型&lt;/p>
&lt;p>//真正统筹全局的结构&lt;/p>
&lt;p>typedef struct MPContext {&lt;/p>
&lt;p>&lt;code> &lt;/code>int osd_show_percentage;&lt;/p>
&lt;p>&lt;code> &lt;/code>int osd_function;&lt;/p>
&lt;p>&lt;code> &lt;/code>const ao_functions_t *audio_out;&lt;/p>
&lt;p>&lt;code> &lt;/code>play_tree_t *playtree;&lt;/p>
&lt;p>&lt;code> &lt;/code>play_tree_iter_t *playtree_iter;&lt;/p>
&lt;p>&lt;code> &lt;/code>int eof;&lt;/p>
&lt;p>&lt;code> &lt;/code>int play_tree_step;&lt;/p>
&lt;p>&lt;code> &lt;/code>int loop_times;&lt;/p>
&lt;p>&lt;code> &lt;/code>stream_t *stream;&lt;/p>
&lt;p>&lt;code> &lt;/code>demuxer_t *demuxer;&lt;/p>
&lt;p>&lt;code> &lt;/code>sh_audio_t *sh_audio;&lt;/p>
&lt;p>&lt;code> &lt;/code>sh_video_t *sh_video;&lt;/p>
&lt;p>&lt;code> &lt;/code>demux_stream_t *d_audio;&lt;/p>
&lt;p>&lt;code> &lt;/code>demux_stream_t *d_video;&lt;/p>
&lt;p>&lt;code> &lt;/code>demux_stream_t *d_sub;&lt;/p>
&lt;p>&lt;code> &lt;/code>mixer_t mixer;&lt;/p>
&lt;p>&lt;code> &lt;/code>const vo_functions_t *video_out;&lt;/p>
&lt;p>&lt;code> &lt;/code>// Frames buffered in the vo ready to flip. Currently always 0 or 1.&lt;/p>
&lt;p>&lt;code> &lt;/code>// This is really a vo variable but currently there's no suitable vo&lt;/p>
&lt;p>&lt;code> &lt;/code>// struct.&lt;/p>
&lt;p>&lt;code> &lt;/code>int num_buffered_frames;&lt;/p>
&lt;p>&lt;code> &lt;/code>// used to retry decoding after startup/seeking to compensate for codec delay&lt;/p>
&lt;p>&lt;code> &lt;/code>int startup_decode_retry;&lt;/p>
&lt;p>&lt;code> &lt;/code>// how long until we need to display the &amp;quot;current&amp;quot; frame&lt;/p>
&lt;p>&lt;code> &lt;/code>float time_frame;&lt;/p>
&lt;p>&lt;code> &lt;/code>// AV sync: the next frame should be shown when the audio out has this&lt;/p>
&lt;p>&lt;code> &lt;/code>// much (in seconds) buffered data left. Increased when more data is&lt;/p>
&lt;p>&lt;code> &lt;/code>// written to the ao, decreased when moving to the next frame.&lt;/p>
&lt;p>&lt;code> &lt;/code>// In the audio-only case used as a timer since the last seek&lt;/p>
&lt;p>&lt;code> &lt;/code>// by the audio CPU usage meter.&lt;/p>
&lt;p>&lt;code> &lt;/code>double delay;&lt;/p>
&lt;p>&lt;code> &lt;/code>float begin_skip; ///&amp;lt; start time of the current skip while on edlout mode&lt;/p>
&lt;p>&lt;code> &lt;/code>// audio is muted if either EDL or user activates mute&lt;/p>
&lt;p>&lt;code> &lt;/code>short edl_muted; ///&amp;lt; Stores whether EDL is currently in muted mode.&lt;/p>
&lt;p>&lt;code> &lt;/code>short user_muted; ///&amp;lt; Stores whether user wanted muted mode.&lt;/p>
&lt;p>&lt;code> &lt;/code>int global_sub_size; // this encompasses all subtitle sources&lt;/p>
&lt;p>&lt;code> &lt;/code>int global_sub_pos; // this encompasses all subtitle sources&lt;/p>
&lt;p>&lt;code> &lt;/code>int set_of_sub_pos;&lt;/p>
&lt;p>&lt;code> &lt;/code>int set_of_sub_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>int sub_counts[SUB_SOURCES];&lt;/p>
&lt;p>#ifdef CONFIG_ASS&lt;/p>
&lt;p>&lt;code> &lt;/code>// set_of_ass_tracks[i] contains subtitles from set_of_subtitles[i]&lt;/p>
&lt;p>&lt;code> &lt;/code>// parsed by libass or NULL if format unsupported&lt;/p>
&lt;p>&lt;code> &lt;/code>ASS_Track* set_of_ass_tracks[MAX_SUBTITLE_FILES];&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>sub_data* set_of_subtitles[MAX_SUBTITLE_FILES];&lt;/p>
&lt;p>&lt;code> &lt;/code>int file_format;&lt;/p>
&lt;p>#ifdef CONFIG_DVBIN&lt;/p>
&lt;p>&lt;code> &lt;/code>int last_dvb_step;&lt;/p>
&lt;p>&lt;code> &lt;/code>int dvbin_reopen;&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>&lt;code> &lt;/code>int was_paused;&lt;/p>
&lt;p>#ifdef CONFIG_DVDNAV&lt;/p>
&lt;p>&lt;code> &lt;/code>struct mp_image *nav_smpi; ///&amp;lt; last decoded dvdnav video image&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned char *nav_buffer; ///&amp;lt; last read dvdnav video frame&lt;/p>
&lt;p>&lt;code> &lt;/code>unsigned char *nav_start; ///&amp;lt; pointer to last read video buffer&lt;/p>
&lt;p>&lt;code> &lt;/code>int nav_in_size; ///&amp;lt; last read size&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>} MPContext;&lt;/p>
&lt;p>一些GUI相关的操作&lt;/p>
&lt;p>打开字幕流&lt;/p>
&lt;p>打开音视频流&lt;/p>
&lt;p>mpctx-&amp;gt;stream=open_stream(filename,0,&amp;amp;mpctx-&amp;gt;file_format);&lt;/p>
&lt;p>fileformat 文件还是TV 流DEMUXER_TYPE_PLAYLIST 或DEMUXER_TYPE_UNKNOWN&lt;/p>
&lt;p>DEMUXER_TYPE_TV&lt;/p>
&lt;p>current_module记录状态vobsub open_stream handle_playlist dumpstream&lt;/p>
&lt;p>stream_reset(mpctx-&amp;gt;stream);&lt;/p>
&lt;p>stream_seek(mpctx-&amp;gt;stream,mpctx-&amp;gt;stream-&amp;gt;start_pos);&lt;/p>
&lt;p>f=fopen(stream_dump_name,”wb”); dump文件流&lt;/p>
&lt;p>stream-&amp;gt;type==STREAMTYPE_DVD&lt;/p>
&lt;p>//============ Open DEMUXERS — DETECT file type ======================&lt;/p>
&lt;p>Demux。分离视频流和音频流&lt;/p>
&lt;p>mpctx-&amp;gt;demuxer=demux_open(mpctx-&amp;gt;stream,mpctx-&lt;/p>
&lt;p>&amp;gt;file_format,audio_id,video_id,dvdsub_id,filename);&lt;/p>
&lt;p>Demux过程&lt;/p>
&lt;p>demux_open&lt;/p>
&lt;p>get_demuxer_type_from_name&lt;/p>
&lt;p>……&lt;/p>
&lt;p>mpctx-&amp;gt;d_audio=mpctx-&amp;gt;demuxer-&amp;gt;audio;&lt;/p>
&lt;p>mpctx-&amp;gt;d_video=mpctx-&amp;gt;demuxer-&amp;gt;video;&lt;/p>
&lt;p>mpctx-&amp;gt;d_sub=mpctx-&amp;gt;demuxer-&amp;gt;sub;&lt;/p>
&lt;p>mpctx-&amp;gt;sh_audio=mpctx-&amp;gt;d_audio-&amp;gt;sh;&lt;/p>
&lt;p>mpctx-&amp;gt;sh_video=mpctx-&amp;gt;d_video-&amp;gt;sh;&lt;/p>
&lt;p>分离了之后就开始分别Play audio和video&lt;/p>
&lt;p>这里只关心play video&lt;/p>
&lt;p>/*======================== PLAY VIDEO ============================*/&lt;/p>
&lt;p>vo_pts=mpctx-&amp;gt;sh_video-&amp;gt;timer*90000.0;&lt;/p>
&lt;p>vo_fps=mpctx-&amp;gt;sh_video-&amp;gt;fps;&lt;/p>
&lt;p>if (!mpctx-&amp;gt;num_buffered_frames) {&lt;/p>
&lt;p>double frame_time = update_video(&amp;amp;blit_frame);&lt;/p>
&lt;p>mp_dbg(MSGT_AVSYNC,MSGL_DBG2,”*** ftime=%5.3f ***\n”,frame_time);&lt;/p>
&lt;p>if (mpctx-&amp;gt;sh_video-&amp;gt;vf_inited &amp;lt; 0) {&lt;/p>
&lt;p>mp_msg(MSGT_CPLAYER,MSGL_FATAL, MSGTR_NotInitializeVOPorVO);&lt;/p>
&lt;p>mpctx-&amp;gt;eof = 1; goto goto_next_file;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>if (frame_time &amp;lt; 0)&lt;/p>
&lt;p>mpctx-&amp;gt;eof = 1;&lt;/p>
&lt;p>else {&lt;/p>
&lt;p>// might return with !eof &amp;amp;&amp;amp; !blit_frame if !correct_pts&lt;/p>
&lt;p>mpctx-&amp;gt;num_buffered_frames += blit_frame;&lt;/p>
&lt;p>time_frame += frame_time / playback_speed; // for nosound&lt;/p>
&lt;p>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>关键的函数是update_video根据pts是否正确调整一下同步并在必要的时候丢帧处理。最终调用decode_video开始解码（包括generate_video_frame里）。mpi = mpvdec-&amp;gt;decode(sh_video, start, in_size, drop_frame);mpvdec是在main里通过reinit_video_chain的一系列调用动态选定的解码程序。其实就一结构体。它的原型是&lt;/p>
&lt;p>typedef struct vd_functions_s&lt;/p>
&lt;p>{&lt;/p>
&lt;p>vd_info_t *info;&lt;/p>
&lt;p>int (*init)(sh_video_t *sh);&lt;/p>
&lt;p>void (*uninit)(sh_video_t *sh);&lt;/p>
&lt;p>int (*control)(sh_video_t *sh,int cmd,void* arg, …);&lt;/p>
&lt;p>mp_image_t* (*decode)(sh_video_t *sh,void* data,int len,int flags);&lt;/p>
&lt;p>} vd_functions_t;&lt;/p>
&lt;p>这是所有解码器必须实现的接口。&lt;/p>
&lt;p>int (*init)(sh_video_t *sh);是一个名为init的指针，指向一个接受sh_video_t *类型参数，并返回int类型值的函数地址。那些vd_开头的文件都是解码相关的。随便打开一个vd文件以上几个函数和info变量肯定都包含了。mpi被mplayer用来存储解码后的图像。在mp_image.h里定义。&lt;/p>
&lt;p>typedef struct mp_image_s {&lt;/p>
&lt;p>unsigned short flags;&lt;/p>
&lt;p>unsigned char type;&lt;/p>
&lt;p>unsigned char bpp; // bits/pixel. NOT depth! for RGB it will be n*8&lt;/p>
&lt;p>unsigned int imgfmt;&lt;/p>
&lt;p>int width,height; // stored dimensions&lt;/p>
&lt;p>int x,y,w,h; // visible dimensions&lt;/p>
&lt;p>unsigned char* planes[MP_MAX_PLANES];&lt;/p>
&lt;p>int stride[MP_MAX_PLANES];&lt;/p>
&lt;p>char * qscale;&lt;/p>
&lt;p>int qstride;&lt;/p>
&lt;p>int pict_type; // 0-&amp;gt;unknown, 1-&amp;gt;I, 2-&amp;gt;P, 3-&amp;gt;B&lt;/p>
&lt;p>int fields;&lt;/p>
&lt;p>int qscale_type; // 0-&amp;gt;mpeg1/4/h263, 1-&amp;gt;mpeg2&lt;/p>
&lt;p>int num_planes;&lt;/p>
&lt;p>/* these are only used by planar formats Y,U(Cb),V(Cr) */&lt;/p>
&lt;p>int chroma_width;&lt;/p>
&lt;p>int chroma_height;&lt;/p>
&lt;p>int chroma_x_shift; // horizontal&lt;/p>
&lt;p>int chroma_y_shift; // vertical&lt;/p>
&lt;p>/* for private use by filter or vo driver (to store buffer id or dmpi) */&lt;/p>
&lt;p>void* priv;&lt;/p>
&lt;p>} mp_image_t;&lt;/p>
&lt;p>图像在解码以后会输出到显示器，mplayer本来就是一个视频播放器么。但也有可能作为输入提供给编码器进行二次编码，MP附带的mencoder.exe就是专门用来编码的。在这之前可以定义filter对图像进行处理，以实现各种效果。所有以vf_开头的文件，都是这样的filter。图像的显示是通过vo，即video out来实现的。解码器只负责把解码完成的帧传给vo，怎样显示就不用管了。这也是平台相关性最大的部分，单独分出来的好处是不言而喻的，像在Windows下有通过direcx实现的vo，Linux下有输出到X的vo。vo_*文件是各种不同的vo实现，只是他们不都是以显示为目的，像vo_md5sum.c只是计算一下图像的md5值。在解码完成以后，即得到mpi以后，filter_video被调用，其结果是整个filter链上的所有filter都被调用了一遍，包括最后的VO，在vo的put_image里把图像输出到显示器。这个时候需要考虑的是图像存储的方法即用哪种色彩空间。&lt;/p>
&lt;p>附上两张MPlayer结构图：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.162.jpeg" alt="">&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.163.jpeg" alt="">&lt;/p>
&lt;p>MPLayer源代码下载地址：&lt;a href="http://download.csdn.net/detail/leixiaohua1020/6374337">http://download.csdn.net/detail/leixiaohua1020/6374337&lt;/a>&lt;/p>
&lt;h1 id="第十章-开发实例">&lt;strong>第十章 开发实例&lt;/strong>&lt;/h1>
&lt;h1 id="第十一章-mp4文件封装协议分析">第十一章 mp4文件封装协议分析&lt;/h1>
&lt;h2 id="111--概述">&lt;strong>11.1 概述&lt;/strong>&lt;/h2>
&lt;p>MP4文件格式中，所有的内容存在一个称为movie的容器中。一个movie可以由多个trak组成。每个trak就是一个随时间变化的媒体序列，例如，视频帧序列。trak里的每个时间单位是一个sample，它可以是一帧视频，或者音频。sample按照时间顺序排列。注意，一帧音频可以分解成多个音频sample，所以音频一般用sample作为单位，而不用帧。MP4文件格式的定义里面，用sample这个单词表示一个时间帧或者数据单元。每个trak会有一个或者多个sample descriptions。track里面的每个sample通过引用关联到一个sample description。这个sample descriptions定义了怎样解码这个sample，例如使用的压缩算法。&lt;/p>
&lt;p>与其他的多媒体文件格式不同的是，MP4文件格式经常使用几个不同的概念，理解其不同是理解这个文件格式的关键。&lt;/p>
&lt;p>这个文件的物理格式没有限定媒体本身的格式。例如，许多文件格式将媒体数据分成帧，头部或者其他数据紧紧跟随每一帧视频。而MP4文件格式不是如此。&lt;/p>
&lt;p>文件的物理格式和媒体数据的排列都不受媒体的时间顺序的限制。视频帧不需要在文件按时间顺序排列。这就意味着如果文件中真的存在这样的一些帧，那么就有一些文件结构来描述媒体的排列和对应的时间信息。&lt;/p>
&lt;p>MP4文件中所有的数据都封装在一些box中（以前叫atom）。所有的metadata(媒体描述元数据)，包括定义媒体的排列和时间信息的数据都包含在这样的一些结构box中。MP4文件格式定义了这些这些box的格式。Metadata对媒体数据（例如，视频帧）引用说明。媒体数据可以包含在同一个的一个或多个box里，也可以在其他文件中，metadata允许使用URLs来引用其他的文件，而媒体数据在这些引用文件中的排列关系全部在第一个主文件中的metadata描述。其他的文件不一定是MP4文件格式，例如，可能就没有一个box。&lt;/p>
&lt;p>有很多种类的trak，其中有三个最重要，video track包含了视频sample；audio trak包含了audio sample；hint trak稍有不同，它描述了一个流媒体服务器如何把文件中的媒体数据组成符合流媒体协议的数据包。 如果文件只是本地播放，可以忽略hint track，他们只与流媒体有关系。&lt;/p>
&lt;h2 id="112--mp4的物理结构">&lt;strong>11.2 mp4的物理结构&lt;/strong>&lt;/h2>
&lt;p>Box定义了如何在sample table中找到媒体数据的排列。这包括data reference(数据引用), the sample size table, the sample to chunk table, and the chunk offset table. 这些表就可以找到trak中每个sample在文件中的位置和大小。 为了节约空间，这些表都很紧凑。另外，interleave不是sample by sample，而是把单个trak的几个samples组合到一起，然后另外几个sample又进行新的组合。一个trak的连续几个sample组成的单元就被称为chunk。每个chunk在文件中有一个偏移量，这个偏移量是从文件开头算起的，在这个chunk内，sample是连续存储的。&lt;/p>
&lt;p>这样，如果一个chunk包含两个sample，第二个sample的位置就是chunk的偏移量加上第一个sample的大小。chunk offset table说明了每个chunk的偏移量，sample to chunk table说明了sample序号和chunk序号的映射关系。&lt;/p>
&lt;p>注意chunk之间可能会有死区，没有任何媒体数据引用到这部分区域，但是chunk内部不会有这样的死区。&lt;/p>
&lt;h2 id="113--数据的组织结构">&lt;strong>11.3 数据的组织结构&lt;/strong>&lt;/h2>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.164.png" alt="">&lt;/p>
&lt;h2 id="114--mp4的时间结构">&lt;strong>11.4 mp4的时间结构&lt;/strong>&lt;/h2>
&lt;p>文件中的时间可以理解为一些结构。电影以及每个trak都有一个timescale。它定义了一个时间轴来说明每秒钟有多少个ticks。合理的选择这个数目，就可以实现准确的计时。一般来说，对于audio track，就是audio的sampling rate。对于video track，情况稍微复杂，需要合理选择。例如，如果一个media TimeScale是30000，media sample durations是1001，就准确的定义了NTSC video的时间格式（虽然不准确，但一般就是29.97）。&lt;/p>
&lt;p>每个trak的全部duration定义在文件头部，这就是对track的总结，每个sample有一个规定的duration。一个sample的准确描述时间，也就是他的时间戳(time-stamp)就是以前的sample的duration之和。&lt;/p>
&lt;p>关键词：&lt;/p>
&lt;p>\1. &lt;strong>trak&lt;/strong>  表示一些sample的集合，对于媒体数据来说，track表示一个视频或音频序列。&lt;/p>
&lt;p>\2. &lt;strong>sample&lt;/strong>  video sample即为一帧视频，或一组连续视频帧，audio sample即为一段连续的压缩音频，它们统称sample。&lt;/p>
&lt;p>\3. &lt;strong>chunk&lt;/strong> 一个trak的几个sample组成的单元。&lt;/p>
&lt;p>&lt;strong>4. box&lt;/strong> box由header和body组成，其中header统一指明box的大小和类型，body根据类型有不同的意义和格式。 标准的box开头的4个字节（32位）为box size，该大小包括box header和box body整个box的大小，这样我们就可以在文件中定位各个box。size后面紧跟的32位为box type，一般是4个字符，如“ftyp”、“moov”等，这些box type都是已经预定义好的，分别表示固定的意义。&lt;/p>
&lt;p>下图为一个典型的MP4文件的结构树：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.165.jpeg" alt="[转载]mp4文件格式解析（一）" title="[转载]mp4文件格式解析（一）">&lt;/p>
&lt;h2 id="115--文件结构分析">&lt;strong>11.5 文件结构分析&lt;/strong>&lt;/h2>
&lt;h3 id="1151--file-type-boxftyp">&lt;strong>11.5.1 File Type Box（ftyp）&lt;/strong>&lt;/h3>
&lt;p>&lt;code>    &lt;/code>该box有且只有1个，并且只能被包含在文件层，而不能被其他box包含。该box应该被放在文件的最开始，指示该MP4文件应用的相关信息。&lt;/p>
&lt;p>“ftyp” body依次包括1个32位的major brand（4个字符），1个32位的minor version（整数）和1个以32位（4个字符）为单位元素的数组compatible brands。这些都是用来指示文件应用级别的信息。&lt;/p>
&lt;p>该box的字节实例如下：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.166.jpeg" alt="[转载]mp4文件格式解析（一）" title="[转载]mp4文件格式解析（一）">&lt;/p>
&lt;h3 id="1152--movie-boxmoov">&lt;strong>11.5.2 Movie Box（moov）&lt;/strong>&lt;/h3>
&lt;p>该box包含了文件媒体的metadata信息，“moov”是一个container box，具体内容信息由子box诠释。同File Type Box一样，该box有且只有一个，且只被包含在文件层。一般情况下，“moov”会紧随“ftyp”出现。&lt;/p>
&lt;p>一般情况下，“moov”中会包含1个“mvhd”和若干个“trak”。其中“mvhd”为header box，一般作为“moov”的第一个子box出现。&lt;/p>
&lt;h4 id="11511--movie-header-boxmvhd">&lt;strong>11.5.1.1 Movie Header Box（mvhd）&lt;/strong>&lt;/h4>
&lt;p>mvhd定义了整个movie的特性，例如time scale和duration，它的atom类型是'mvhd'。具体字段的表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box size&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0。（以下字节数均按version=0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">creation time&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">创建时间（相对于UTC时间1904-01-01零点的秒数）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">modification time&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">修改时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">time scale&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">时间缩放因子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">duration&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">该视频的时长(整体标记)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">rate&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">推荐播放速率，高16位和低16位分别为小数点整数部分和小数部分，即[16.16] 格式，该值为1.0（0x00010000）表示正常前向播放&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">volume&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">与rate类似，[8.8] 格式，1.0（0x0100）表示最大音量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">10&lt;/td>
&lt;td style="text-align:center">保留位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">matrix&lt;/td>
&lt;td style="text-align:center">36&lt;/td>
&lt;td style="text-align:center">视频变换矩阵&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">pre-defined&lt;/td>
&lt;td style="text-align:center">24&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">next track id&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">下一个track使用的id号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>“mvhd”的字节实例如下图，各字段已经用颜色区分开：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.167.jpeg" alt="[转载]mp4文件格式解析（一）" title="[转载]mp4文件格式解析（一）">&lt;/p>
&lt;h4 id="11512--track-boxtrak">&lt;strong>11.5.1.2 Track Box（trak）&lt;/strong>&lt;/h4>
&lt;p>&lt;code> &lt;/code>主数据存储结构，一部movie可以包含一个或多个tracks，它们之间相互独立，各自有各自的时间和空间信息。每个track atom 都有与之关联的media atom。&lt;/p>
&lt;p>trak atoms 的atom类型是'trak'. trak atom要求必须有一个trak header atom ('tkhd') 和一个media atom ('mdia')。其他的track clipping atom ('clip')，track matte atom ('matt')，edit atom ('edts')，track reference atom ('tref')，track load settings atom ('load')，a track input map atom ('imap')以及user data atom ('udta')都是可选的。 具体表结构如下：&lt;/p>
&lt;p>&lt;strong>1. Track Header Box（tkhd）&lt;/strong>&lt;/p>
&lt;p>trak的头信息，具体表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>意义&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0。（以下字节数均按version=0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">&lt;p>按位或操作结果值，预定义如下：&lt;/p>&lt;p>0x000001 track_enabled，否则该track不被播放；&lt;/p>&lt;p>0x000002 track_in_movie，表示该track在播放中被引用；&lt;/p>&lt;p>0x000004 track_in_preview，表示该track在预览时被引用。&lt;/p>&lt;p>一般该值为7，如果一个媒体所有track均未设置track_in_movie和track_in_preview，将被理解为所有track均设置了这两项。&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">creation time&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>创建时间（相对于UTC时间1904-01-01零点的秒数）&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">modification time&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>修改时间&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">track id&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>id号，不能重复且不能为0&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>保留位&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">duration&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>trak的时间长度&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">8&lt;/td>
&lt;td style="text-align:center">&lt;p>保留位&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">layer&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">&lt;p>视频层，默认为0(跳过)&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">alternate group&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">&lt;p>trak分组信息，默认为0表示该trak未与其他trak有群组关系&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">volume&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">&lt;p>[8.8] 格式，如果为音频trak，1.0（0x0100）表示最大音量；否则为0&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">&lt;p>保留位&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">matrix&lt;/td>
&lt;td style="text-align:center">36&lt;/td>
&lt;td style="text-align:center">&lt;p>视频变换矩阵&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">width&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>宽&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">height&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>高&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">“tkhd”的字节实例如下图，各字段已经用颜色区分开：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.168.jpeg" alt="mp4文件格式解析（二）" title="mp4文件格式解析（二）">&lt;/p>
&lt;p>&lt;strong>2. Media Box（mdia）&lt;/strong>&lt;/p>
&lt;p>“mdia”也是个container box，其子box的结构和种类还是比较复杂的。树结构图如下：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.169.jpeg" alt="mp4文件格式解析（二）" title="mp4文件格式解析（二）">&lt;/p>
&lt;p>&lt;code>  &lt;/code>总体来说，“mdia”定义了trak媒体类型以及sample数据，描述sample信息。一般“mdia”包含一个“mdhd”，一个“hdlr”和一个“minf”，其中“mdhd”为media header box，“hdlr” 为handler reference box，“minf”为media information box。&lt;/p>
&lt;p>&lt;strong>1&lt;/strong>. &lt;strong>Media Header Box（mdhd）&lt;/strong>&lt;/p>
&lt;p>Media header atom 定义了媒体的特性，例如time scale和duration。它的类型是'mdhd'。&lt;/p>
&lt;p>具体表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>意义&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0。（以下字节数均按version=0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">creation time&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">创建时间（相对于UTC时间1904-01-01零点的秒数）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">modification time&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">修改时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">time scale&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">时间缩放因子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">duration&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">track的时间长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">language&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">媒体语言码。最高位为0，后面15位为3个字符（见ISO 639-2/T标准中定义）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">pre-defined&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>2. Handler Reference Box（hdlr）&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Handler reference atom 定义了描述此媒体数据的media handler component，类型是'hdlr'。在过去，handler reference atom也可以用来数据引用，现在废弃。一个media atom内的handler atom解释了媒体流的播放过程。例如，一个视频handler处理一个video track。 具体表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">hdlr&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Component type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>handler的类型。当前只有两种类型：&lt;/p>&lt;p>'mhlr'：media handlers&lt;/p>&lt;p>'dhlr'：data handlers**(废弃)**&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Component subtype&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>media handler or data handler的类型。&lt;/p>&lt;p>如果component type是mhlr，这个字段定义了数据的类型，可以用来判断该trak的类型，例如，'vide'是video数据，'soun'是sound数据&lt;/p>&lt;p>如果component type是dhlr，这个字段定义了数据引用的类型(&lt;strong>废弃&lt;/strong>)&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Component manufacturer&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>保留字段，缺省为0&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Component flags&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>保留字段，缺省为0&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Component flags mask&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>保留字段，缺省为0&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Component name&lt;/td>
&lt;td style="text-align:center">可变&lt;/td>
&lt;td style="text-align:center">&lt;p>这个component的名字，也就是生成此media的media handler。该字段的长度可以为0&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>3. Media Information Atoms - MINF&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>“minf”存储了解释trak媒体数据的handler-specific信息，media handler用这些信息将媒体时间映射到媒体数据并进行处理。“minf”中的信息格式和内容与媒体类型以及解释媒体数据的media handler密切相关，其他media handler不知道如何解释这些信息。“minf”是一个container box，其实际内容由子box说明。&lt;/p>
&lt;p>一般情况下，“minf”包含一个header box，一个“dinf”和一个“stbl”，其中，header box根据track type（即media handler type）分为“vmhd”、“smhd”，“dinf”为data information box，“stbl”为sample table box。&lt;/p>
&lt;p>&lt;strong>3.1 Media Information Header Box（vmhd、smhd）（拆包时可直接跳过）&lt;/strong>&lt;/p>
&lt;p>&lt;strong>Video Media Header Box（vmhd）&lt;/strong> &lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">graphics mode&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;strong>跳过&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">opcolor&lt;/td>
&lt;td style="text-align:center">2×3&lt;/td>
&lt;td style="text-align:center">｛red，green，blue｝&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>Sound Media Header Box（smhd）&lt;/strong> &lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0。（以下字节数均按version=0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">balance&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">立体声平衡(&lt;strong>跳过&lt;/strong>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>3.2 Data Information Box（dinf）&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>“dinf”解释如何定位媒体信息，是一个container box。“dinf”一般包含一个“dref”，即data reference box；“dref”下会包含若干个“url”或“urn”，这些box组成一个表，用来定位trak数据。简单的说，trak可以被分成若干段，每一段都可以根据“url”或“urn”指向的地址来获取数据，sample描述中会用这些片段的序号将这些片段组成一个完整的trak。一般情况下，当数据被完全包含在文件中时，“url”或“urn”中的定位字符串是空的。&lt;/p>
&lt;p>&lt;strong>“dref”的字节结构如下表：&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0。（以下字节数均按version=0）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">entry count&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">“url”或“urn”表的元素个数,每个data reference就像atom的格式一样，包含以下的数据成员&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">“url”或“urn”列表&lt;/td>
&lt;td style="text-align:center">不定&lt;/td>
&lt;td style="text-align:center">“url”或“urn”列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>entry的结构如下表：&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">box size&lt;/th>
&lt;th style="text-align:left">4&lt;/th>
&lt;th style="text-align:left">box大小&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">box type&lt;/td>
&lt;td style="text-align:left">4&lt;/td>
&lt;td style="text-align:left">见下表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">version&lt;/td>
&lt;td style="text-align:left">1&lt;/td>
&lt;td style="text-align:left">这个data reference的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">flags&lt;/td>
&lt;td style="text-align:left">3&lt;/td>
&lt;td style="text-align:left">&lt;p>目前只有一个标志：&lt;/p>&lt;p>Self reference&lt;/p>&lt;p>This flag indicates that the media’s data is in the same file as the movie atom. On the Macintosh, and other file systems with multifork files, set this flag to 1 even if the data resides in a different fork from the movie atom. This flag’s value is 0x0001.&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">数据&lt;/td>
&lt;td style="text-align:left">可变&lt;/td>
&lt;td style="text-align:left">&lt;p>data reference信息&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>data reference具体结构如下：&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>类型&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">alis&lt;/td>
&lt;td style="text-align:center">Data reference是一个Macintosh alias。一个alias包含文件信息，例如全路径名。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">rsrc&lt;/td>
&lt;td style="text-align:center">Data reference是一个Macintosh alias。Alias末尾是文件使用的资源类型（32bit整数）和ID（16bit带符号的整数）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">url&lt;/td>
&lt;td style="text-align:center">一个C类型的字符串，表示一个URL。字符串后可以有其他的数据。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>3.3 Sample Table Box（stbl）（重要）&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>“stbl”包含了关于trak中sample所有时间和位置的信息，以及sample的编解码等信息。利用这个表，可以解释sample的时序、类型、大小以及在各自存储容器中的位置。“stbl”是一个container box，其子box包括：sample description box（stsd）、time to sample box（stts）、sample size box（stsz或stz2）、sample to chunk box（stsc）、chunk offset box（stco或co64）、composition time to sample box（ctts）、sync sample box（stss）等。&lt;/p>
&lt;p>&lt;strong>3.3.1 Sample Description Atoms - STSD&lt;/strong>&lt;/p>
&lt;p>“stsd”必不可少，且至少包含一个条目，该box包含了data reference box进行sample数据检索的信息。没有“stsd”就无法计算media sample的存储位置。“stsd”包含了编码的信息，其存储的信息随媒体类型不同而不同。&lt;/p>
&lt;p>在认识stsd之前我们首先需要了解一个数据结构SampleEntry和它的子类AudioSampleEntry,VisualSampleEntry,HintSampleEntry(不作分析)，具体关系如下：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.170.png" alt="sample\_e" title="sampleentry">&lt;/p>
&lt;p>SampleEntry 是一个继成box的抽象的数据结构模型，具体如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box类型(根据该值查找视频格式id表获得编码器类型，如&amp;quot;avc1&amp;quot;通过查表标记为H264_ID类型)(重要)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">resved&lt;/td>
&lt;td style="text-align:center">6&lt;/td>
&lt;td style="text-align:center">保留字段,(跳过)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">drefid&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">无用(跳过)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">VisualSampleEntry(类型为&amp;quot;avc1&amp;quot;)继承于SampleEntry ，具体结构如下表：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">SampleEntry&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">SampleEntry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">resved&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">保留字段(&lt;strong>跳过&lt;/strong>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">width&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">宽度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">height&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">高度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">hrsl&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">水平分辨率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">vtsl&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">垂直分辨率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">一直为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">frame_count&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">每个采样里面的贞数,一般是1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">compressorname&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">字符串，对齐到32位，(无用跳过)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">depth&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">视频的色深 0x18 表示24位色&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>AudioSampleEntry(类型为&amp;quot;mp4a&amp;quot;)继承于SampleEntry ,具体结构如下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">SampleEntry&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">SampleEntry&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">resved&lt;/td>
&lt;td style="text-align:center">16&lt;/td>
&lt;td style="text-align:center">保留字段(&lt;strong>跳过&lt;/strong>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">channelcount&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">声道数1或者2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">samplesize&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">采样位宽 一般为8bit 或16bit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">reserved&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">保留字段(跳过)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">samplerate&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">采样率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">esds扩展(重要)&lt;/td>
&lt;td style="text-align:center">&lt;/td>
&lt;td style="text-align:center">如果audio type为AAC,需要读取esds扩展，否则音频无法解码。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version + flags&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">version + flags&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">tag&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">决定的后续的解析&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">descr length&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;strong>跳过&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Id+priority&lt;/td>
&lt;td style="text-align:center">2或2+1&lt;/td>
&lt;td style="text-align:center">&lt;p>如果tag='0x03'为2个字节(&lt;strong>跳过&lt;/strong>)&lt;/p>&lt;p>其他值为2+1个字节(&lt;strong>跳过&lt;/strong>)&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">tag&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">&lt;p>决定的后续的解析，如果解析正确该值为&amp;quot;0x04&amp;quot;&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">descr length&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>&lt;strong>跳过&lt;/strong>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">audio type id&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">&lt;p>如果解析正确为'0x40',为CODEC_ID_AAC类型&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">resved&lt;/td>
&lt;td style="text-align:center">1+3+4+4&lt;/td>
&lt;td style="text-align:center">&lt;p>&lt;strong>跳过&lt;/strong>&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">tag&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">&lt;p>如果解析正确为'0x05'&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">descr length&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>Descr data的长度&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Descr data&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">&lt;p>0-3位为采样率查表index&lt;/p>&lt;p>4-7位为声道的数目&lt;/p>&lt;p>具体其他信息关系到sbr的一些参数，具体请参看官方文档&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其他的实体格式如AMRSampleEntry AMRWPSampleEntry H263SampleEntry等分析同上。&lt;/p>
&lt;p>对于&amp;quot;stsd&amp;quot;的表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">box size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">box大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">box type&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">该类型为&amp;quot;stsd&amp;quot;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">version&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">box版本，0或1，一般为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">flags&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">entry count&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">entry的个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">entry&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">具体参考上表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>3.3.2 Time-to-Sample Atoms - STTS&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Time-to-sample atoms存储了media sample的duration 信息，提供了时间对具体data sample的映射方法，通过这个atom，你可以找到任何时间的sample，类型是'stts'。&lt;/p>
&lt;p>这个atom可以包含一个压缩的表来映射时间和sample序号，用其他的表来提供每个sample的长度和指针。表中每个条目提供了在同一个时间偏移量里面连续的sample序号， 以及samples的偏移量。递增这些偏移量，就可以建立一个完整的time-to-sample表，计算公式如下&lt;/p>
&lt;p>DT(n+1) = DT(n) + STTS(n)&lt;/p>
&lt;p>其中STTS(n)是没有压缩的STTS第n项信息，DT是第n个sample的显示时间。Sample的排列是按照时间戳的顺序，这样偏移量永远是非负的。DT一般以0开始，如果不为0，edit list atom 设定初始的DT值。DT计算公式如下&lt;/p>
&lt;p>DT(i) = SUM (for j=0 to i-1 of delta(j))&lt;/p>
&lt;p>所有偏移量的和就是trak中media的时间的长度。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.171.png" alt="">&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;code> &lt;/code>&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">stts&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>条目数目&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">time-to-sample的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>time-to-sample&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;td style="text-align:center">Media中每个sample的duration。包含如下结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sample count&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">有相同duration的连续sample的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Sample duration&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">每个sample的duration&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>如果多个sample有相同的duration，可以只用一项描述所有这些samples，数量字段说明sample的个数。例如，如果一个视频媒体的帧率保持不变，整个表可以只有一项，数量就是全部的帧数。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>3.3.3 Sync Sample Atoms - STSS&lt;/strong>&lt;/p>
&lt;p>sync sample atom确定media中的关键帧。对于压缩的媒体，关键帧是一系列压缩序列的开始帧，它的解压缩是不依赖于以前的帧。后续帧的解压缩依赖于这个关键帧。&lt;/p>
&lt;p>sync sample atom可以非常紧凑的标记媒体内的随机存取点。它包含一个sample序号表，表内的每一项严格按照sample的序号排列，说明了媒体中的哪一个sample是关键帧。如果此表不存在，说明每一个sample都是一个关键帧，是一个随机存取点。&lt;/p>
&lt;p>Sync sample atoms 的类型是'stss'。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.172.png" alt="">&lt;/p>
&lt;p>具体表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">stss&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">条目数目&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">sync sample的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sync sample&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;td style="text-align:center">sync sample表的结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Sample序号&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">是关键帧的sample序号&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>3.3.4 Sample-to-Chunk Atoms - STSC&lt;/strong>&lt;/p>
&lt;p>当添加samples到media时，用chunks组织这些sample，这样可以方便优化数据获取。一个trunk包含一个或多个sample，chunk的长度可以不同，chunk内的sample的长度也可以不同。sample-to-chunk atom存储sample与chunk的映射关系。&lt;/p>
&lt;p>Sample-to-chunk atoms的类型是'stsc'。它也有一个表来映射sample和trunk之间的关系，查看这张表，就可以找到包含指定sample的trunk，从而找到这个sample。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.173.png" alt="">&lt;/p>
&lt;p>具体表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">stsc&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">条目数目&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">sample-to-chunk的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sample-to-chunk&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;td style="text-align:center">sample-to-chunk表的结构&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">First chunk&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个table使用的第一个chunk序号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Samples per chunk&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">当前trunk内的sample数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Sample description ID&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">与这些sample关联的sample description的序号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>3.3.5 Sample Size Atoms - STSZ&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>sample size atoms定义了每个sample的大小，它的类型是'stsz'，包含了媒体中全部sample的数目和一张给出每个sample大小的表。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.174.png" alt="">&lt;/p>
&lt;p>具体的表的结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">stsz&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Sample size&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">全部sample的数目。如果所有的sample有相同的长度，这个字段就是这个值。否则，这个字段的值就是0。那些长度存在sample size表中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">条目数目&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">sample size的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sample size&lt;/td>
&lt;td style="text-align:center">&lt;code> &lt;/code>4&lt;/td>
&lt;td style="text-align:center">sample size表的结构。这个表根据sample number索引，第一项就是第一个sample，第二项就是第二个sample&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>3.3.5 Chunk Offset Atoms - STCO&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Chunk offset atoms 定义了每个trunk在媒体流中的位置，它的类型是'stco'。位置有两种可能，32位的和64位的，后者对非常大的电影很有用。在一个表中只会有一种可能，这个位置是在整个文件中的，而不是在任何atom中的，这样做就可以直接在文件中找到媒体数据，而不用解释atom。需要注意的是一旦前面的atom有了任何改变，这张表都要重新建立，因为位置信息已经改变了。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.175.png" alt="">&lt;/p>
&lt;p>具体表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&amp;quot;stco&amp;quot;或&amp;quot;co64&amp;quot;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">条目数目&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">chunk offset的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">chunk offset&lt;/td>
&lt;td style="text-align:center"> &lt;/td>
&lt;td style="text-align:center">字节偏移量从文件开始到当前chunk。这个表根据chunk number索引，第一项就是第一个chunk，第二项就是第二个chunk&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">大小&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">&lt;p>每个sample的大小,如果类型=&amp;quot;scto&amp;quot; 大小为4个字节，如果类型=&amp;quot;co64&amp;quot;，大小为8个字节&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>3.3.6 Composition Time to Sample Box- CTTS&lt;/strong>&lt;/p>
&lt;p>Composition Time to Sample Box 提供了在dts(解码时间戳)与pts(显示时间戳)的时间的偏移量，它的类型是'ctts'。因为需要纠正时间的帧的pts一定比dts要大，所以每一个项的值一定是正值。具体可以通过pts(n)=dts(n)+ctts(n)进行简单计算。&lt;/p>
&lt;p>具体的表结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位：byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">尺寸&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">这个atom的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">类型&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&amp;quot;ctts&amp;quot;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">这个atom的版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">标志&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">这里为0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">条目数目&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">ctts的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Sample count&lt;/td>
&lt;td style="text-align:center">4 &lt;/td>
&lt;td style="text-align:center">有相同的Sample_offset的连续sample的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Sample_offset&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">dts与pts的时间的残差&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="第十二章-flv-文件格式分析">&lt;strong>第十二章&lt;/strong> flv 文件格式分析&lt;/h1>
&lt;h2 id="121--概述">&lt;strong>12.1 概述&lt;/strong>&lt;/h2>
&lt;p>&lt;code> &lt;/code>FLV视频格式是Adobe公司设计开发的一种流媒体的封装格式，总体上看，FLV包括文件头（Flv Header）和文件体（Flv Body）两部分，其中文件体由一系列的Tag及Tag Size对组成。Tag又可以分成三类:audio,video,script，分别代表音频流，视频流，脚本流（关键字或者文件信息之类）。&lt;/p>
&lt;h2 id="122--文件总体结构">&lt;strong>12.2 文件总体结构&lt;/strong>&lt;/h2>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.176.jpeg" alt="">&lt;/p>
&lt;p>其中，Previous Tag Size紧跟在每个Tag之后，占4个字节表示一个UI32类型的数值，表示前面一个Tag的大小。需要注意的是，Previous Tag Size #0的值总是为0。Tag类型包括视频、音频和Script，且每个Tag只能包含一种类型的数据。&lt;/p>
&lt;p>具体的工具分析如下：&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/ffmpeg/Aspose.Words.a0ce5ffc-99a8-4e85-b952-e75d3ea7f9c4.177.jpeg" alt="" title="0{YA]KF}OB]KP08[@_9G78Q">&lt;/p>
&lt;h2 id="123--文件结构分析">&lt;strong>12.3 文件结构分析&lt;/strong>&lt;/h2>
&lt;h3 id="1231--flv文件头的结构">&lt;strong>12.3.1 flv文件头的结构&lt;/strong>&lt;/h3>
&lt;p>&lt;code> &lt;/code>在ffmpeg进行格式识别的时候，是以头部的前3个字节进行探测，识别到'F' 'L' 'V'即可认定该格式为flv格式。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>FLV 头部&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度(byte)&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">文件类型&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">'F' (0x46) 'L' (0x4C) 'V' (0x56)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">版本&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">版本，目前为1（0x01）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">流信息&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">&lt;p>1. UB[7]~UB[3]，前5位保留，必须为0。&lt;/p>&lt;p>2. UB[2] 表示是否存在音频Tag。&lt;/p>&lt;p>3. UB[1] 该位保留，必须为0。&lt;/p>&lt;p>4. UB[0] 表示是否存在视频。&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">header长度&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>整个文件头的长度，一般是9（3+1+1+4）。个人感觉该字段多余，可以去掉。&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">由于第一个标识长度的4字节签名无tag，但为了格式上的统一，所以可以划为头部。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="1232--body主体结构">&lt;strong>12.3.2 body主体结构&lt;/strong>&lt;/h3>
&lt;p>&lt;code> &lt;/code>Tag包括Tag Header和Tag Data两部分。不同类型的Tag的Header结构是相同的，但是Data结构各不相同。&lt;/p>
&lt;p>当前版本的Tag Header结构占用11个字节。&lt;/p>
&lt;p>12.3.2.1 Tag Header结构&lt;/p>
&lt;p>&lt;code> &lt;/code>基于现在版本的Tag Header结构固定占用11个字节，具体描述见下表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（byte）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">tag type&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">Tag的类型，值：audio=（0x08）、video=（0x09）和script data=（0x12），其他类型值被保留,一般可以直接忽略掉。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">data size&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">表示该Tag 真实Data部分的大小。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">timestamp&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">表示该Tag的时间戳（单位为ms），第一个Tag的时间戳总是0。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">timestampExtended&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">当时间戳24位数值不够时，该字节作为最高位将时间戳扩展为32位值。左移24位与Timestamp值进行或操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">streamID&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">表示stream id，总是0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">12.3.2.2 Tag Data结构&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code> &lt;/code>音视频Tag用开始的第1个字节包含视频数据的参数信息，根据Tag Header中的Tag Type类型值为8(音频),值为9(视频),该头部表示的意义会不同，具体结构如下：&lt;/p>
&lt;p>1 &lt;strong>音频类型结构如下&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度(单位:bit)&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">audio format&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>0 -- 未压缩　　&lt;/p>&lt;p>1 -- ADPCM 　　&lt;/p>&lt;p>2 -- MP3 　　&lt;/p>&lt;p>5 -- Nellymoser 8kHz momo 　　&lt;/p>&lt;p>6 -- Nellymoser 　　&lt;/p>&lt;p>7 --G.711 A-law logarithmic PCM&lt;/p>&lt;p>8 --G.711 mu-law logarithmic PCM&lt;/p>&lt;p>9 -- reserved&lt;/p>&lt;p>10 --AAC(需要后面附加1个字节，具体见下文)&lt;/p>&lt;p>11 --Speex&lt;/p>&lt;p>14--MP3 8-kHz&lt;/p>&lt;p>15 --Device -specific sound&lt;/p>&lt;p>Formats 7, 8, 14, and 15 为保留字段，ffmpeg拆包直接跳过&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">samplerate&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">&lt;p>0 -- 5.5kHz 　　&lt;/p>&lt;p>1 -- 11kHz 　　&lt;/p>&lt;p>2 -- 22kHz 　　&lt;/p>&lt;p>3 -- 44kHz 　&lt;/p>&lt;p>没有8kHz的采样率，音频8KHz，一般为人声通话的amr格式所采用，所以该字段和Audio format字段都没有提及。&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">sample length&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">&lt;p>即每一帧所占用的位宽。&lt;/p>&lt;p>0 -- 8Bit 　　&lt;/p>&lt;p>1 -- 16Bit &lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">channel type&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">&lt;p>0 --Momo(单声道) 　　&lt;/p>&lt;p>1 -- Stereo(立体声)&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">AAC需要注意：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>如果SoundFormat是10 (AAC)，TagDataHeader后紧随着一个1个字节的数据AACPacketType，这个字段来表示AACAUDIODATA的类型：0 = AAC sequence header，1 = AAC raw。在flv中一般情况下，带有该AACPacketType 的Tag只会在第一个audio Tag中出现一次，因为aac格式的音频需要在每帧AAC ES流前边添加7个字节ADST头(相当于帧头)，就是AAC的纯ES流要打包成ADST格式的AAC文件，解码器才能正常播放.特别对于RTSP,RTP等实时传输流，ADST必须存在，否则传输过来的流不知道该怎么播放。&lt;/p>
&lt;p>1 &lt;strong>视频类型结构如下&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度（单位:bit）&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">video format&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>1 -- keyframe 　　&lt;/p>&lt;p>2 -- inner frame 　　&lt;/p>&lt;p>3 -- disposable inner frame (H.263 only) &lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;p>codec id&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">&lt;p>1 = JPEG（废弃）&lt;/p>&lt;p>2 -- Seronson H.263 　　&lt;/p>&lt;p>3 -- Screen video 　　&lt;/p>&lt;p>4 -- On2 VP6 　&lt;/p>&lt;p>5 -- On2 VP6 without channel 　　&lt;/p>&lt;p>6 -- Screen video version 2 　&lt;/p>&lt;p>7 -- AVC(h264)&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">大小为：Tag Header中的Data size - Tag Data Header,根据大小读取数据即可。&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>12.3.2.3 script Tag结构如下&lt;/p>
&lt;p>如果TAG包中的TagType==18时，就表示这个TAG是SCRIPT Tag。该类型Tag又通常被称为Metadata Tag，会放一些关于FLV视频和音频的参数信息，如duration、width、height等。通常该类型Tag会跟在File Header后面作为第一个Tag出现，而且只有一个。&lt;/p>
&lt;p>一般来说，该Tag Data结构包含两个AMF包。AMF（Action Message Format）是Adobe设计的一种通用数据封装格式，在Adobe的很多产品中应用，简单来说，AMF不区分根节点与子节点，将不同类型的数据用统一的格式来描述。第一个AMF包封装字符串类型数据，即：“02” type+string length+“onMetaData”。第二个AMF包封装一个数组类型，这个数组中包含了音视频信息项的名称和值。&lt;/p>
&lt;p>AMF具体表定义和结构如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度(单位:byte)&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">data type&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">数据的类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">data&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">&lt;p>If Type = 0, DOUBLE(8个字节)&lt;/p>&lt;p>If Type = 1, BOOL(1个字节)&lt;/p>&lt;p>If Type = 2, 后续:2字节(表征字符串长度)+字符串数据&lt;/p>&lt;p>If Type = 3, 遵从Object memeber表结构，可以看做array的一个数据项。&lt;/p>&lt;p>If Type = 8, 遵从MixedArray结构表。&lt;/p>&lt;p>If Type = 10,遵从normal array表。&lt;/p>&lt;p>If Type = 11,日期类型&lt;/p>&lt;p>&lt;/p>&lt;p>&lt;/p>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Type='0x08' MixedArray内部结构定义：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度(单位:byte)&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">object number&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">数组中包括的对象数目。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">object memeber&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">数据成员具体见下表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">end flag&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">数组的结束标志总为'0x09'。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">MixedArray Object memeber具体结构如下（采用key-value结构）：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度(单位:byte)&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">key length&lt;/td>
&lt;td style="text-align:center">2&lt;/td>
&lt;td style="text-align:center">对象的名称长度。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">stringData&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">对象名称，长度由StringLength指出。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">object type&lt;/td>
&lt;td style="text-align:center">1&lt;/td>
&lt;td style="text-align:center">遵从AMF定义，可以为数组。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">data&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">遵从AMF定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">Type='0x0a' normal array表结构：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>长度(单位:byte)&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">object number&lt;/td>
&lt;td style="text-align:center">4&lt;/td>
&lt;td style="text-align:center">数组中包括的对象数目。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">object member&lt;/td>
&lt;td style="text-align:center">n&lt;/td>
&lt;td style="text-align:center">遵从AMF表结构。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">end flag&lt;/td>
&lt;td style="text-align:center">3&lt;/td>
&lt;td style="text-align:center">数组的结束标志总为'0x09'。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">在script tag中常用的字段的键表如下：&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:center">&lt;strong>字段&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>类型&lt;/strong>&lt;/th>
&lt;th style="text-align:center">&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:center">hasKeyFrames&lt;/td>
&lt;td style="text-align:center">bool&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">hasVideo&lt;/td>
&lt;td style="text-align:center">bool&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">hasAudio&lt;/td>
&lt;td style="text-align:center">bool&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">hasMetaData&lt;/td>
&lt;td style="text-align:center">bool&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">canSeekToEnd&lt;/td>
&lt;td style="text-align:center">bool&lt;/td>
&lt;td style="text-align:center">无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">duration&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">单位为秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">datasize&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">实际的音视频数据的总的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">videosize&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">实际的视频数据的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">audiosize&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">实际的音频数据的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">width&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">视频的原始的宽度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">height&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">视频的原始的高度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">framerate&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">视频的帧率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">videodatarate&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">数值*1024为比特率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">audiosamplerate&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">音频采样率&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">audiosmplesize&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">音频每个sample的位宽&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">filesize&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">整体文件的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">lastkeyframestamp&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">最后关键帧的时间戳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">lastkeyframelocation&lt;/td>
&lt;td style="text-align:center">Number&lt;/td>
&lt;td style="text-align:center">最后关键帧的在文件中的偏移量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:center">&lt;strong>附加关键帧索引(Keyframes)&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code> &lt;/code>Adobe的官方文档中并没有keyframes头，但是由于flv的每一个tag没有同步头，所以在进行seek时只能不断的通过往下读取数据来进行判断，这在网络流媒体播放时是不能忍受的(优酷的flv都带有keyframes)所以在script tag中加入了该关键帧的索引表，以进行快速的seek等操作。包含着2个内容 'filepositions' and 'times'分别指的是关键帧的文件位置和关键帧的PTS.通过keyframes可以建立起自己的Index，然后再seek和快进快退的操作中，快速有效的跳转到你想要找的关键帧的位置进行处理。&lt;/p>
&lt;p>具体结构如下：&lt;/p>
&lt;p>keyframes&lt;/p>
&lt;p>&lt;code> &lt;/code>- filepositions(在文件中的offset) value(普通数组，遵从amf协议)&lt;/p>
&lt;p>&lt;code> &lt;/code>-times(关键帧的时间) value(普通数组，遵从amf协议)。&lt;/p>
&lt;h1 id="附录a常见问题">&lt;strong>附录A：常见问题&lt;/strong>&lt;/h1>
&lt;h2 id="1-ffmpeg-从内存中读取数据httpblogcsdnnetleixiaohua1020articledetails12980423">&lt;strong>1 &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/12980423">ffmpeg 从内存中读取数据**&lt;/a>&lt;/strong>&lt;/h2>
&lt;p>ffmpeg一般情况下支持打开一个本地文件，例如“C:\test.avi”&lt;/p>
&lt;p>或者是一个流媒体协议的URL，例如“rtmp://222.31.64.208/vod/test.flv”&lt;/p>
&lt;p>其打开文件的函数是avformat_open_input()，直接将文件路径或者流媒体URL的字符串传递给该函数就可以了。&lt;/p>
&lt;p>但其是否支持从内存中读取数据呢？这个问题困扰了我很长时间。当时在做项目的时候，通过Winpcap抓取网络上的RTP包，打算直接送给ffmpeg进行解码。一直没能找到合适的方法。因为抓取的数据包是存在内存中的，所以无法传递给avformat_open_input()函数其路径（根本没有路径= =）。当然也可以将抓取的数据报存成文件，然后用ffmpeg打开这个文件，但是这样的话，程序的就太难控制了。&lt;/p>
&lt;p>后来经过分析ffmpeg的源代码，发现其竟然是可以从内存中读取数据的，代码很简单，如下所示：&lt;/p>
&lt;p>AVFormatContext *ic = NULL;&lt;/p>
&lt;p>ic = avformat_alloc_context();&lt;/p>
&lt;p>unsigned char * iobuffer=(unsigned char *)av_malloc(32768);&lt;/p>
&lt;p>AVIOContext *avio =avio_alloc_context(iobuffer, 32768,0,buffer,fill_iobuffer,NULL,NULL);&lt;/p>
&lt;p>ic-&amp;gt;pb=avio;&lt;/p>
&lt;p>err = avformat_open_input(&amp;amp;ic, is-&amp;gt;filename, is-&amp;gt;iformat, &amp;amp;format_opts);&lt;/p>
&lt;p>关键要在avformat_open_input()之前初始化一个AVIOContext，而且将原本的AVFormatContext的指针pb（AVIOContext类型）指向这个自行初始化AVIOContext。当自行指定了AVIOContext之后，avformat_open_input()里面的URL参数就不起作用了。示例代码开辟了一块空间iobuffer作为AVIOContext的缓存。&lt;/p>
&lt;p>此外buffer就是期望读取数据的内存，fill_iobuffer则是读取buffer数据至iobuffer的回调函数。fill_iobuffer()形式（参数，返回值）是固定的，是一个回调函数，如下所示（只是个例子，具体怎么读取数据可以自行设计）。&lt;/p>
&lt;p>//把数据从buffer向iobuf传-------------------------&lt;/p>
&lt;p>//AVIOContext使用的回调函数！&lt;/p>
&lt;p>//注意：返回值是读取的字节数&lt;/p>
&lt;p>//手动初始化AVIOContext只需要两个东西：内容来源的buffer，和读取这个Buffer到FFmpeg中的函数&lt;/p>
&lt;p>int fill_iobuffer(void * buffer,uint8_t *iobuf, int bufsize){&lt;/p>
&lt;p>&lt;code> &lt;/code>int i;&lt;/p>
&lt;p>&lt;code> &lt;/code>for(i=0;i&amp;lt;bufsize;i++){&lt;/p>
&lt;p>&lt;code> &lt;/code>iobuf[i]=mediabuf_get();&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>return i;&lt;/p>
&lt;p>}&lt;/p>
&lt;h2 id="2-mfc中使用sdl播放音频没有声音的解决方法httpblogcsdnnetleixiaohua1020articledetails15029951">&lt;strong>2 &lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15029951">MFC中使用SDL播放音频没有声音的解决方法**&lt;/a>&lt;/strong>&lt;/h2>
&lt;p>此处所说的音频是指的纯音频，不包含视频的那种。&lt;/p>
&lt;p>在控制台中使用SDL播放音频，一般情况下不会有问题。&lt;/p>
&lt;p>但是在MFC中使用SDL播放音频的时候，会出现没有声音的情况。经过长时间探索，没有找到特别好的解决方案，但是有一种方式可以让声音播放出来：那就是让SDL显示图像（视频）时候的那个对话框弹出来，声音就会出现了。&lt;/p>
&lt;p>具体的方法可以加载一张图片（比如说BMP），下图所示代码片段为加载BMP图片的代码。&lt;/p>
&lt;p>SDL_Surface *screen = SDL_SetVideoMode(640, 480, 8, SDL_SWSURFACE);&lt;/p>
&lt;p>SDL_Surface *image;&lt;/p>
&lt;p>/* Load the BMP file into a surface */&lt;/p>
&lt;p>image = SDL_LoadBMP(&amp;quot;background.bmp&amp;quot;);&lt;/p>
&lt;p>if (image == NULL) {&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>* Palettized screen modes will have a default palette (a standard&lt;/p>
&lt;p>* 8*8*4 colour cube), but if the image is palettized as well we can&lt;/p>
&lt;p>* use that palette for a nicer colour matching&lt;/p>
&lt;p>*/&lt;/p>
&lt;p>if (image-&amp;gt;format-&amp;gt;palette &amp;amp;&amp;amp; screen-&amp;gt;format-&amp;gt;palette) {&lt;/p>
&lt;p>&lt;code> &lt;/code>SDL_SetColors(screen, image-&amp;gt;format-&amp;gt;palette-&amp;gt;colors, 0,&lt;/p>
&lt;p>&lt;code> &lt;/code>image-&amp;gt;format-&amp;gt;palette-&amp;gt;ncolors);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>/* Blit onto the screen surface */&lt;/p>
&lt;p>if(SDL_BlitSurface(image, NULL, screen, NULL) &amp;lt; 0)&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;BlitSurface error: %s\n&amp;quot;, SDL_GetError());&lt;/p>
&lt;p>SDL_UpdateRect(screen, 0, 0, image-&amp;gt;w, image-&amp;gt;h);&lt;/p>
&lt;p>不明白这是为什么，但是程序就可以出声了。&lt;/p>
&lt;h1 id="附录b经典代码示例">&lt;strong>附录B：经典代码示例&lt;/strong>&lt;/h1>
&lt;p>&lt;strong>output_example.c事例代码&lt;/strong>&lt;/p>
&lt;p>#include &amp;lt;stdlib.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;stdio.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;string.h&amp;gt;&lt;/p>
&lt;p>#include &amp;lt;math.h&amp;gt;&lt;/p>
&lt;p>#ifndef M_PI&lt;/p>
&lt;p>#define M_PI 3.14159265358979323846&lt;/p>
&lt;p>#endif&lt;/p>
&lt;p>#include &amp;quot;libavformat/avformat.h&amp;quot;&lt;/p>
&lt;p>#include &amp;quot;libswscale/swscale.h&amp;quot;&lt;/p>
&lt;p>#undef exit&lt;/p>
&lt;p>/* 5 seconds stream duration */&lt;/p>
&lt;p>#define STREAM_DURATION 5.0&lt;/p>
&lt;p>#define STREAM_FRAME_RATE 25 /* 25 images/s */&lt;/p>
&lt;p>#define STREAM_NB_FRAMES ((int)(STREAM_DURATION * STREAM_FRAME_RATE))&lt;/p>
&lt;p>#define STREAM_PIX_FMT PIX_FMT_YUV420P /* default pix_fmt */&lt;/p>
&lt;p>static int sws_flags = SWS_BICUBIC;&lt;/p>
&lt;p>/**************************************************************/&lt;/p>
&lt;p>/* audio output */&lt;/p>
&lt;p>float t, tincr, tincr2;&lt;/p>
&lt;p>int16_t *samples;&lt;/p>
&lt;p>uint8_t *audio_outbuf;&lt;/p>
&lt;p>int audio_outbuf_size;&lt;/p>
&lt;p>int audio_input_frame_size;&lt;/p>
&lt;p>/*&lt;/p>
&lt;p>&lt;code> &lt;/code>* add an audio output stream&lt;/p>
&lt;p>&lt;code> &lt;/code>*/&lt;/p>
&lt;p>static AVStream *add_audio_stream(AVFormatContext *oc, int codec_id)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *c;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVStream *st;&lt;/p>
&lt;p>&lt;code> &lt;/code>st = av_new_stream(oc, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!st) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Could not alloc stream\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>c = st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;codec_id = codec_id;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;codec_type = CODEC_TYPE_AUDIO;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* put sample parameters */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;bit_rate = 64000;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;sample_rate = 44100;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;channels = 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>return st;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static void open_audio(AVFormatContext *oc, AVStream *st)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *c;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>c = st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* find the audio encoder */&lt;/p>
&lt;p>&lt;code> &lt;/code>codec = avcodec_find_encoder(c-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;codec not found\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* open it */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (avcodec_open(c, codec) &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;could not open codec\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* init signal generator */&lt;/p>
&lt;p>&lt;code> &lt;/code>t = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>tincr = 2 * M_PI * 110.0 / c-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* increment frequency by 110 Hz per second */&lt;/p>
&lt;p>&lt;code> &lt;/code>tincr2 = 2 * M_PI * 110.0 / c-&amp;gt;sample_rate / c-&amp;gt;sample_rate;&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_outbuf_size = 10000;&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_outbuf = av_malloc(audio_outbuf_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* ugly hack for PCM codecs (will be removed ASAP with new PCM&lt;/p>
&lt;p>&lt;code> &lt;/code>support to compute the input frame size in samples */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;frame_size &amp;lt;= 1) {&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_input_frame_size = audio_outbuf_size / c-&amp;gt;channels;&lt;/p>
&lt;p>&lt;code> &lt;/code>switch(st-&amp;gt;codec-&amp;gt;codec_id) {&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_PCM_S16LE:&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_PCM_S16BE:&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_PCM_U16LE:&lt;/p>
&lt;p>&lt;code> &lt;/code>case CODEC_ID_PCM_U16BE:&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_input_frame_size &amp;gt;&amp;gt;= 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>default:&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_input_frame_size = c-&amp;gt;frame_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>samples = av_malloc(audio_input_frame_size * 2 * c-&amp;gt;channels);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>/* prepare a 16 bit dummy audio frame of 'frame_size' samples and&lt;/p>
&lt;p>&lt;code> &lt;/code>'nb_channels' channels */&lt;/p>
&lt;p>static void get_audio_frame(int16_t *samples, int frame_size, int nb_channels)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int j, i, v;&lt;/p>
&lt;p>&lt;code> &lt;/code>int16_t *q;&lt;/p>
&lt;p>&lt;code> &lt;/code>q = samples;&lt;/p>
&lt;p>&lt;code> &lt;/code>for(j=0;j&amp;lt;frame_size;j++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>v = (int)(sin(t) * 10000);&lt;/p>
&lt;p>&lt;code> &lt;/code>for(i = 0; i &amp;lt; nb_channels; i++)&lt;/p>
&lt;p>&lt;code> &lt;/code>*q++ = v;&lt;/p>
&lt;p>&lt;code> &lt;/code>t += tincr;&lt;/p>
&lt;p>&lt;code> &lt;/code>tincr += tincr2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static void write_audio_frame(AVFormatContext *oc, AVStream *st)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *c;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket pkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>c = st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>get_audio_frame(samples, audio_input_frame_size, c-&amp;gt;channels);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.size= avcodec_encode_audio(c, audio_outbuf, audio_outbuf_size, samples);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.pts= av_rescale_q(c-&amp;gt;coded_frame-&amp;gt;pts, c-&amp;gt;time_base, st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.stream_index= st-&amp;gt;index;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.data= audio_outbuf;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* write the compressed frame in the media file */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (av_write_frame(oc, &amp;amp;pkt) != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Error while writing audio frame\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static void close_audio(AVFormatContext *oc, AVStream *st)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(st-&amp;gt;codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(samples);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(audio_outbuf);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>/**************************************************************/&lt;/p>
&lt;p>/* video output */&lt;/p>
&lt;p>AVFrame *picture, *tmp_picture;&lt;/p>
&lt;p>uint8_t *video_outbuf;&lt;/p>
&lt;p>int frame_count, video_outbuf_size;&lt;/p>
&lt;p>/* add a video output stream */&lt;/p>
&lt;p>static AVStream *add_video_stream(AVFormatContext *oc, int codec_id)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *c;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVStream *st;&lt;/p>
&lt;p>&lt;code> &lt;/code>st = av_new_stream(oc, 0);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!st) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Could not alloc stream\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>c = st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;codec_id = codec_id;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;codec_type = CODEC_TYPE_VIDEO;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* put sample parameters */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;bit_rate = 400000;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* resolution must be a multiple of two */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;width = 352;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;height = 288;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* time base: this is the fundamental unit of time (in seconds) in terms&lt;/p>
&lt;p>&lt;code> &lt;/code>of which frame timestamps are represented. for fixed-fps content,&lt;/p>
&lt;p>&lt;code> &lt;/code>timebase should be 1/framerate and timestamp increments should be&lt;/p>
&lt;p>&lt;code> &lt;/code>identically 1. */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;time_base.den = STREAM_FRAME_RATE;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;time_base.num = 1;&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;gop_size = 12; /* emit one intra frame every twelve frames at most */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;pix_fmt = STREAM_PIX_FMT;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;codec_id == CODEC_ID_MPEG2VIDEO) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* just for testing, we also add B frames */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;max_b_frames = 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;codec_id == CODEC_ID_MPEG1VIDEO){&lt;/p>
&lt;p>&lt;code> &lt;/code>/* Needed to avoid using macroblocks in which some coeffs overflow.&lt;/p>
&lt;p>&lt;code> &lt;/code>This does not happen with normal video, it just happens here as&lt;/p>
&lt;p>&lt;code> &lt;/code>the motion of the chroma plane does not match the luma plane. */&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;mb_decision=2;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>// some formats want stream headers to be separate&lt;/p>
&lt;p>&lt;code> &lt;/code>if(!strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;mp4&amp;quot;) || !strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;mov&amp;quot;) || !strcmp(oc-&amp;gt;oformat-&amp;gt;name, &amp;quot;3gp&amp;quot;))&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;flags |= CODEC_FLAG_GLOBAL_HEADER;&lt;/p>
&lt;p>&lt;code> &lt;/code>return st;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static AVFrame *alloc_picture(int pix_fmt, int width, int height)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFrame *picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>uint8_t *picture_buf;&lt;/p>
&lt;p>&lt;code> &lt;/code>int size;&lt;/p>
&lt;p>&lt;code> &lt;/code>picture = avcodec_alloc_frame();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!picture)&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>size = avpicture_get_size(pix_fmt, width, height);&lt;/p>
&lt;p>&lt;code> &lt;/code>picture_buf = av_malloc(size);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!picture_buf) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>return NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>avpicture_fill((AVPicture *)picture, picture_buf,&lt;/p>
&lt;p>&lt;code> &lt;/code>pix_fmt, width, height);&lt;/p>
&lt;p>&lt;code> &lt;/code>return picture;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static void open_video(AVFormatContext *oc, AVStream *st)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodec *codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *c;&lt;/p>
&lt;p>&lt;code> &lt;/code>c = st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* find the video encoder */&lt;/p>
&lt;p>&lt;code> &lt;/code>codec = avcodec_find_encoder(c-&amp;gt;codec_id);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!codec) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;codec not found\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* open the codec */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (avcodec_open(c, codec) &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;could not open codec\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>video_outbuf = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_RAWPICTURE)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* allocate output buffer */&lt;/p>
&lt;p>&lt;code> &lt;/code>/* XXX: API change will be done */&lt;/p>
&lt;p>&lt;code> &lt;/code>/* buffers passed into lav* can be allocated any way you prefer,&lt;/p>
&lt;p>&lt;code> &lt;/code>as long as they're aligned enough for the architecture, and&lt;/p>
&lt;p>&lt;code> &lt;/code>they're freed appropriately (such as using av_free for buffers&lt;/p>
&lt;p>&lt;code> &lt;/code>allocated with av_malloc) */&lt;/p>
&lt;p>&lt;code> &lt;/code>video_outbuf_size = 200000;&lt;/p>
&lt;p>&lt;code> &lt;/code>video_outbuf = av_malloc(video_outbuf_size);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* allocate the encoded raw picture */&lt;/p>
&lt;p>&lt;code> &lt;/code>picture = alloc_picture(c-&amp;gt;pix_fmt, c-&amp;gt;width, c-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!picture) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Could not allocate picture\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* if the output format is not YUV420P, then a temporary YUV420P&lt;/p>
&lt;p>&lt;code> &lt;/code>picture is needed too. It is then converted to the required&lt;/p>
&lt;p>&lt;code> &lt;/code>output format */&lt;/p>
&lt;p>&lt;code> &lt;/code>tmp_picture = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;pix_fmt != PIX_FMT_YUV420P) {&lt;/p>
&lt;p>&lt;code> &lt;/code>tmp_picture = alloc_picture(PIX_FMT_YUV420P, c-&amp;gt;width, c-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!tmp_picture) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Could not allocate temporary picture\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>/* prepare a dummy image */&lt;/p>
&lt;p>static void fill_yuv_image(AVFrame *pict, int frame_index, int width, int height)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int x, y, i;&lt;/p>
&lt;p>&lt;code> &lt;/code>i = frame_index;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* Y */&lt;/p>
&lt;p>&lt;code> &lt;/code>for(y=0;y&amp;lt;height;y++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>for(x=0;x&amp;lt;width;x++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>pict-&amp;gt;data[0][y * pict-&amp;gt;linesize[0] + x] = x + y + i * 3;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* Cb and Cr */&lt;/p>
&lt;p>&lt;code> &lt;/code>for(y=0;y&amp;lt;height/2;y++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>for(x=0;x&amp;lt;width/2;x++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>pict-&amp;gt;data[1][y * pict-&amp;gt;linesize[1] + x] = 128 + y + i * 2;&lt;/p>
&lt;p>&lt;code> &lt;/code>pict-&amp;gt;data[2][y * pict-&amp;gt;linesize[2] + x] = 64 + x + i * 5;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static void write_video_frame(AVFormatContext *oc, AVStream *st)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>int out_size, ret;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVCodecContext *c;&lt;/p>
&lt;p>&lt;code> &lt;/code>static struct SwsContext *img_convert_ctx;&lt;/p>
&lt;p>&lt;code> &lt;/code>c = st-&amp;gt;codec;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (frame_count &amp;gt;= STREAM_NB_FRAMES) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* no more frame to compress. The codec has a latency of a few&lt;/p>
&lt;p>&lt;code> &lt;/code>frames if using B frames, so we get the last frames by&lt;/p>
&lt;p>&lt;code> &lt;/code>passing the same picture again */&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (c-&amp;gt;pix_fmt != PIX_FMT_YUV420P) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* as we only generate a YUV420P picture, we must convert it&lt;/p>
&lt;p>&lt;code> &lt;/code>to the codec pixel format if needed */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (img_convert_ctx == NULL) {&lt;/p>
&lt;p>&lt;code> &lt;/code>img_convert_ctx = sws_getContext(c-&amp;gt;width, c-&amp;gt;height,&lt;/p>
&lt;p>&lt;code> &lt;/code>PIX_FMT_YUV420P,&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;width, c-&amp;gt;height,&lt;/p>
&lt;p>&lt;code> &lt;/code>c-&amp;gt;pix_fmt,&lt;/p>
&lt;p>&lt;code> &lt;/code>sws_flags, NULL, NULL, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (img_convert_ctx == NULL) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Cannot initialize the conversion context\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>fill_yuv_image(tmp_picture, frame_count, c-&amp;gt;width, c-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>sws_scale(img_convert_ctx, tmp_picture-&amp;gt;data, tmp_picture-&amp;gt;linesize,&lt;/p>
&lt;p>&lt;code> &lt;/code>0, c-&amp;gt;height, picture-&amp;gt;data, picture-&amp;gt;linesize);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>fill_yuv_image(picture, frame_count, c-&amp;gt;width, c-&amp;gt;height);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (oc-&amp;gt;oformat-&amp;gt;flags &amp;amp; AVFMT_RAWPICTURE) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* raw video case. The API will change slightly in the near&lt;/p>
&lt;p>&lt;code> &lt;/code>futur for that */&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket pkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.stream_index= st-&amp;gt;index;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.data= (uint8_t *)picture;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.size= sizeof(AVPicture);&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = av_write_frame(oc, &amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* encode the image */&lt;/p>
&lt;p>&lt;code> &lt;/code>out_size = avcodec_encode_video(c, video_outbuf, video_outbuf_size, picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* if zero size, it means the image was buffered */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (out_size &amp;gt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>AVPacket pkt;&lt;/p>
&lt;p>&lt;code> &lt;/code>av_init_packet(&amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.pts= av_rescale_q(c-&amp;gt;coded_frame-&amp;gt;pts, c-&amp;gt;time_base, st-&amp;gt;time_base);&lt;/p>
&lt;p>&lt;code> &lt;/code>if(c-&amp;gt;coded_frame-&amp;gt;key_frame)&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.flags |= PKT_FLAG_KEY;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.stream_index= st-&amp;gt;index;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.data= video_outbuf;&lt;/p>
&lt;p>&lt;code> &lt;/code>pkt.size= out_size;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* write the compressed frame in the media file */&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = av_write_frame(oc, &amp;amp;pkt);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>ret = 0;&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (ret != 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Error while writing video frame\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>frame_count++;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>static void close_video(AVFormatContext *oc, AVStream *st)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>avcodec_close(st-&amp;gt;codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(picture-&amp;gt;data[0]);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (tmp_picture) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(tmp_picture-&amp;gt;data[0]);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(tmp_picture);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(video_outbuf);&lt;/p>
&lt;p>}&lt;/p>
&lt;p>/**************************************************************/&lt;/p>
&lt;p>/* media file output */&lt;/p>
&lt;p>int main(int argc, char **argv)&lt;/p>
&lt;p>{&lt;/p>
&lt;p>&lt;code> &lt;/code>const char *filename;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVOutputFormat *fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVFormatContext *oc;&lt;/p>
&lt;p>&lt;code> &lt;/code>AVStream *audio_st, *video_st;&lt;/p>
&lt;p>&lt;code> &lt;/code>double audio_pts, video_pts;&lt;/p>
&lt;p>&lt;code> &lt;/code>int i;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* initialize libavcodec, and register all codecs and formats */&lt;/p>
&lt;p>&lt;code> &lt;/code>av_register_all();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (argc != 2) {&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;usage: %s output_file\n&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;API example program to output a media file with libavformat.\n&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;The output format is automatically guessed according to the file extension.\n&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;Raw images can also be output by using '%%d' in the filename\n&amp;quot;&lt;/p>
&lt;p>&lt;code> &lt;/code>&amp;quot;\n&amp;quot;, argv[0]);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>filename = argv[1];&lt;/p>
&lt;p>&lt;code> &lt;/code>/* auto detect the output format from the name. default is&lt;/p>
&lt;p>&lt;code> &lt;/code>mpeg. */&lt;/p>
&lt;p>&lt;code> &lt;/code>fmt = guess_format(NULL, filename, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!fmt) {&lt;/p>
&lt;p>&lt;code> &lt;/code>printf(&amp;quot;Could not deduce output format from file extension: using MPEG.\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>fmt = guess_format(&amp;quot;mpeg&amp;quot;, NULL, NULL);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!fmt) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Could not find suitable output format\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* allocate the output media context */&lt;/p>
&lt;p>&lt;code> &lt;/code>oc = av_alloc_format_context();&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!oc) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Memory error\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>oc-&amp;gt;oformat = fmt;&lt;/p>
&lt;p>&lt;code> &lt;/code>snprintf(oc-&amp;gt;filename, sizeof(oc-&amp;gt;filename), &amp;quot;%s&amp;quot;, filename);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* add the audio and video streams using the default format codecs&lt;/p>
&lt;p>&lt;code> &lt;/code>and initialize the codecs */&lt;/p>
&lt;p>&lt;code> &lt;/code>video_st = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_st = NULL;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fmt-&amp;gt;video_codec != CODEC_ID_NONE) {&lt;/p>
&lt;p>&lt;code> &lt;/code>video_st = add_video_stream(oc, fmt-&amp;gt;video_codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (fmt-&amp;gt;audio_codec != CODEC_ID_NONE) {&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_st = add_audio_stream(oc, fmt-&amp;gt;audio_codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* set the output parameters (must be done even if no&lt;/p>
&lt;p>&lt;code> &lt;/code>parameters). */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (av_set_parameters(oc, NULL) &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Invalid output format parameters\n&amp;quot;);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>dump_format(oc, 0, filename, 1);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* now that all the parameters are set, we can open the audio and&lt;/p>
&lt;p>&lt;code> &lt;/code>video codecs and allocate the necessary encode buffers */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (video_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>open_video(oc, video_st);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (audio_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>open_audio(oc, audio_st);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* open the output file, if needed */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(fmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>if (url_fopen(&amp;amp;oc-&amp;gt;pb, filename, URL_WRONLY) &amp;lt; 0) {&lt;/p>
&lt;p>&lt;code> &lt;/code>fprintf(stderr, &amp;quot;Could not open '%s'\n&amp;quot;, filename);&lt;/p>
&lt;p>&lt;code> &lt;/code>exit(1);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* write the stream header, if any */&lt;/p>
&lt;p>&lt;code> &lt;/code>av_write_header(oc);&lt;/p>
&lt;p>&lt;code> &lt;/code>for(;;) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* compute current audio and video time */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (audio_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_pts = (double)audio_st-&amp;gt;pts.val * audio_st-&amp;gt;time_base.num / audio_st-&amp;gt;time_base.den;&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>audio_pts = 0.0;&lt;/p>
&lt;p>&lt;code> &lt;/code>if (video_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>video_pts = (double)video_st-&amp;gt;pts.val * video_st-&amp;gt;time_base.num / video_st-&amp;gt;time_base.den;&lt;/p>
&lt;p>&lt;code> &lt;/code>else&lt;/p>
&lt;p>&lt;code> &lt;/code>video_pts = 0.0;&lt;/p>
&lt;p>&lt;code> &lt;/code>if ((!audio_st || audio_pts &amp;gt;= STREAM_DURATION) &amp;amp;&amp;amp;&lt;/p>
&lt;p>&lt;code> &lt;/code>(!video_st || video_pts &amp;gt;= STREAM_DURATION))&lt;/p>
&lt;p>&lt;code> &lt;/code>break;&lt;/p>
&lt;p>&lt;code> &lt;/code>/* write interleaved audio and video frames */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!video_st || (video_st &amp;amp;&amp;amp; audio_st &amp;amp;&amp;amp; audio_pts &amp;lt; video_pts)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>write_audio_frame(oc, audio_st);&lt;/p>
&lt;p>&lt;code> &lt;/code>} else {&lt;/p>
&lt;p>&lt;code> &lt;/code>write_video_frame(oc, video_st);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* close each codec */&lt;/p>
&lt;p>&lt;code> &lt;/code>if (video_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>close_video(oc, video_st);&lt;/p>
&lt;p>&lt;code> &lt;/code>if (audio_st)&lt;/p>
&lt;p>&lt;code> &lt;/code>close_audio(oc, audio_st);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* write the trailer, if any */&lt;/p>
&lt;p>&lt;code> &lt;/code>av_write_trailer(oc);&lt;/p>
&lt;p>&lt;code> &lt;/code>/* free the streams */&lt;/p>
&lt;p>&lt;code> &lt;/code>for(i = 0; i &amp;lt; oc-&amp;gt;nb_streams; i++) {&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;oc-&amp;gt;streams[i]-&amp;gt;codec);&lt;/p>
&lt;p>&lt;code> &lt;/code>av_freep(&amp;amp;oc-&amp;gt;streams[i]);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>if (!(fmt-&amp;gt;flags &amp;amp; AVFMT_NOFILE)) {&lt;/p>
&lt;p>&lt;code> &lt;/code>/* close the output file */&lt;/p>
&lt;p>&lt;code> &lt;/code>url_fclose(&amp;amp;oc-&amp;gt;pb);&lt;/p>
&lt;p>&lt;code> &lt;/code>}&lt;/p>
&lt;p>&lt;code> &lt;/code>/* free the stream */&lt;/p>
&lt;p>&lt;code> &lt;/code>av_free(oc);&lt;/p>
&lt;p>&lt;code> &lt;/code>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;h1 id="附录cffmpeg参数中文详细解释">&lt;strong>附录c：ffmpeg参数中文详细解释&lt;/strong>&lt;/h1>
&lt;p>&lt;strong>a) 通用选项&lt;/strong>&lt;/p>
&lt;p>-L license&lt;/p>
&lt;p>-h 帮助&lt;/p>
&lt;p>-fromats 显示可用的格式，编解码的，协议的...&lt;/p>
&lt;p>-f fmt 强迫采用格式fmt&lt;/p>
&lt;p>-I filename 输入文件&lt;/p>
&lt;p>-y 覆盖输出文件&lt;/p>
&lt;p>-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持&lt;/p>
&lt;p>-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持&lt;/p>
&lt;p>-title string 设置标题&lt;/p>
&lt;p>-author string 设置作者&lt;/p>
&lt;p>-copyright string 设置版权&lt;/p>
&lt;p>-comment string 设置评论&lt;/p>
&lt;p>-target type 设置目标文件类型(vcd,svcd,dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置，只需要输入如下的就可以了：ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg&lt;/p>
&lt;p>-hq 激活高质量设置&lt;/p>
&lt;p>-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持&lt;/p>
&lt;p>&lt;strong>b) 视频选项&lt;/strong>&lt;/p>
&lt;p>-b bitrate 设置比特率，缺省200kb/s&lt;/p>
&lt;p>-r fps 设置帧频 缺省25&lt;/p>
&lt;p>-s size 设置帧大小 格式为WXH 缺省160X128.下面的简写也可以直接使用：&lt;/p>
&lt;p>Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576&lt;/p>
&lt;p>-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777&lt;/p>
&lt;p>-croptop size 设置顶部切除带大小 像素单位&lt;/p>
&lt;p>-cropbottom size –cropleft size –cropright size&lt;/p>
&lt;p>-padtop size 设置顶部补齐的大小 像素单位&lt;/p>
&lt;p>-padbottom size –padleft size –padright size –padcolor color 设置补齐条颜色(hex,6个16进制的数，红:绿:兰排列，比如 000000代表黑色)&lt;/p>
&lt;p>-vn 不做视频记录&lt;/p>
&lt;p>-bt tolerance 设置视频码率容忍度kbit/s&lt;/p>
&lt;p>-maxrate bitrate设置最大视频码率容忍度&lt;/p>
&lt;p>-minrate bitreate 设置最小视频码率容忍度&lt;/p>
&lt;p>-bufsize size 设置码率控制缓冲区大小&lt;/p>
&lt;p>-vcodec codec 强制使用codec编解码方式。如果用copy表示原始编解码数据必须被拷贝。&lt;/p>
&lt;p>-sameq 使用同样视频质量作为源（VBR）&lt;/p>
&lt;p>-pass n 选择处理遍数（1或者2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率&lt;/p>
&lt;p>-passlogfile file 选择两遍的纪录文件名为file&lt;/p>
&lt;p>&lt;strong>c)高级视频选项&lt;/strong>&lt;/p>
&lt;p>-g gop_size 设置图像组大小&lt;/p>
&lt;p>-intra 仅适用帧内编码&lt;/p>
&lt;p>-qscale q 使用固定的视频量化标度(VBR)&lt;/p>
&lt;p>-qmin q 最小视频量化标度(VBR)&lt;/p>
&lt;p>-qmax q 最大视频量化标度(VBR)&lt;/p>
&lt;p>-qdiff q 量化标度间最大偏差 (VBR)&lt;/p>
&lt;p>-qblur blur 视频量化标度柔化(VBR)&lt;/p>
&lt;p>-qcomp compression 视频量化标度压缩(VBR)&lt;/p>
&lt;p>-rc_init_cplx complexity 一遍编码的初始复杂度&lt;/p>
&lt;p>-b_qfactor factor 在p和b帧间的qp因子&lt;/p>
&lt;p>-i_qfactor factor 在p和i帧间的qp因子&lt;/p>
&lt;p>-b_qoffset offset 在p和b帧间的qp偏差&lt;/p>
&lt;p>-i_qoffset offset 在p和i帧间的qp偏差&lt;/p>
&lt;p>-rc_eq equation 设置码率控制方程 默认tex^qComp&lt;/p>
&lt;p>-rc_override override 特定间隔下的速率控制重载&lt;/p>
&lt;p>-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full&lt;/p>
&lt;p>-dct_algo algo 设置dct的算法 可用的有 0 FF_DCT_AUTO 缺省的DCT 1 FF_DCT_FASTINT 2 FF_DCT_INT 3 FF_DCT_MMX 4 FF_DCT_MLIB 5 FF_DCT_ALTIVEC&lt;/p>
&lt;p>-idct_algo algo 设置idct算法。可用的有 0 FF_IDCT_AUTO 缺省的IDCT 1 FF_IDCT_INT 2 FF_IDCT_SIMPLE 3 FF_IDCT_SIMPLEMMX 4 FF_IDCT_LIBMPEG2MMX 5 FF_IDCT_PS2 6 FF_IDCT_MLIB 7 FF_IDCT_ARM 8 FF_IDCT_ALTIVEC 9 FF_IDCT_SH4 10 FF_IDCT_SIMPLEARM&lt;/p>
&lt;p>-er n 设置错误残留为n 1 FF_ER_CAREFULL 缺省 2 FF_ER_COMPLIANT 3 FF_ER_AGGRESSIVE 4 FF_ER_VERY_AGGRESSIVE&lt;/p>
&lt;p>-ec bit_mask 设置错误掩蔽为bit_mask,该值为如下值的位掩码 1 FF_EC_GUESS_MVS (default=enabled) 2 FF_EC_DEBLOCK (default=enabled)&lt;/p>
&lt;p>-bf frames 使用frames B 帧，支持mpeg1,mpeg2,mpeg4&lt;/p>
&lt;p>-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使用mb_cmp 1 FF_MB_DECISION_BITS 2 FF_MB_DECISION_RD&lt;/p>
&lt;p>-4mv 使用4个运动矢量 仅用于mpeg4&lt;/p>
&lt;p>-part 使用数据划分 仅用于mpeg4&lt;/p>
&lt;p>-bug param 绕过没有被自动监测到编码器的问题&lt;/p>
&lt;p>-strict strictness 跟标准的严格性&lt;/p>
&lt;p>-aic 使能高级帧内编码 h263+&lt;/p>
&lt;p>-umv 使能无限运动矢量 h263+&lt;/p>
&lt;p>-deinterlace 不采用交织方法&lt;/p>
&lt;p>-interlace 强迫交织法编码仅对mpeg2和mpeg4有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大&lt;/p>
&lt;p>-psnr 计算压缩帧的psnr&lt;/p>
&lt;p>-vstats 输出视频编码统计到vstats_hhmmss.log&lt;/p>
&lt;p>-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开&lt;/p>
&lt;p>&lt;strong>D)音频选项&lt;/strong>&lt;/p>
&lt;p>-ab bitrate 设置音频码率&lt;/p>
&lt;p>-ar freq 设置音频采样率&lt;/p>
&lt;p>-ac channels 设置通道 缺省为1&lt;/p>
&lt;p>-an 不使能音频纪录&lt;/p>
&lt;p>-acodec codec 使用codec编解码&lt;/p>
&lt;p>&lt;strong>E)音频/视频捕获选项&lt;/strong>&lt;/p>
&lt;p>-vd device 设置视频捕获设备。比如/dev/video0&lt;/p>
&lt;p>-vc channel 设置视频捕获通道 DV1394专用&lt;/p>
&lt;p>-tvstd standard 设置电视标准 NTSC PAL(SECAM)&lt;/p>
&lt;p>-dv1394 设置DV1394捕获&lt;/p>
&lt;p>-av device 设置音频设备 比如/dev/dsp&lt;/p>
&lt;p>&lt;strong>F)高级选项&lt;/strong>&lt;/p>
&lt;p>-map file:stream 设置输入流映射&lt;/p>
&lt;p>-debug 打印特定调试信息&lt;/p>
&lt;p>-benchmark 为基准测试加入时间&lt;/p>
&lt;p>-hex 倾倒每一个输入包&lt;/p>
&lt;p>-bitexact 仅使用位精确算法 用于编解码测试&lt;/p>
&lt;p>-ps size 设置包大小，以bits为单位&lt;/p>
&lt;p>-re 以本地帧频读数据，主要用于模拟捕获设备&lt;/p>
&lt;p>-loop 循环输入流（只工作于图像流，用于ffserver测试）&lt;/p>
&lt;h1 id="附录dffplay的快捷键以及选项httpblogcsdnnetleixiaohua1020articledetails15186441">&lt;strong>附录D：&lt;a href="http://blog.csdn.net/leixiaohua1020/article/details/15186441">ffplay的快捷键以及选项**&lt;/a>&lt;/strong>&lt;/h1>
&lt;p>ffplay是ffmpeg工程中提供的播放器，功能相当的强大，凡是ffmpeg支持的视音频格式它基本上都支持。甚至连VLC不支持的一些流媒体都可以播放（比如说RTMP），但是它的缺点是其不是图形化界面的，必须通过键盘来操作。因此本文介绍一下它的快捷键以及选项。&lt;/p>
&lt;p>快捷键&lt;/p>
&lt;p>&lt;code> &lt;/code>播放视音频文件的时候，可以通过下列按键控制视音频的播放&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>按键&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>q, ESC&lt;/td>
&lt;td>退出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F&lt;/td>
&lt;td>全屏&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p,空格&lt;/td>
&lt;td>暂停&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>w&lt;/td>
&lt;td>显示音频波形&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>s&lt;/td>
&lt;td>逐帧显示&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>左/右方向键&lt;/td>
&lt;td>向后/前10s&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>上/下方向键&lt;/td>
&lt;td>向后/前1min&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>page down/page up&lt;/td>
&lt;td>向后/前10min&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>鼠标点击屏幕&lt;/td>
&lt;td>跳转到指定位置（根据鼠标位置相对屏幕的宽度计算）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>选项&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在播放视频前，可以预设一些参数。&lt;/p>
&lt;p>一般播放视频的时候，使用命令：&lt;/p>
&lt;p>#ffplay &amp;quot;abc.flv&amp;quot;&lt;/p>
&lt;p>如果我们希望能在播放完成后自动退出，则可以使用命令：&lt;/p>
&lt;p>ffplay -autoexit &amp;quot;abc.flv&amp;quot;;&lt;/p>
&lt;p>所有的命令如下列表所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名称&lt;/th>
&lt;th>有参数&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>x&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>强制屏幕宽度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>y&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>强制屏幕高度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>s&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>强制屏幕大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fs&lt;/td>
&lt;td>N&lt;/td>
&lt;td>全屏&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>an&lt;/td>
&lt;td>N&lt;/td>
&lt;td>关闭音频&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vn&lt;/td>
&lt;td>N&lt;/td>
&lt;td>关闭视频&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ast&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>设置想播放的音频流（需要指定流ID）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vst&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>设置想播放的视频流（需要指定流ID）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sst&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>设置想播放的字幕流（需要指定流ID）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ss&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>从指定位置开始播放，单位是秒&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>t&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>播放指定时长的视频&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nodisp&lt;/td>
&lt;td>N&lt;/td>
&lt;td>无显示屏幕&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>f&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>强制封装格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pix_fmt&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>指定像素格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stats&lt;/td>
&lt;td>N&lt;/td>
&lt;td>显示统计信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>idct&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>IDCT算法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ec&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>错误隐藏方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sync&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>视音频同步方式（type=audio/video/ext）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>autoexit&lt;/td>
&lt;td>N&lt;/td>
&lt;td>播放完成自动退出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exitonkeydown&lt;/td>
&lt;td>N&lt;/td>
&lt;td>按下按键退出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>exitonmousedown&lt;/td>
&lt;td>N&lt;/td>
&lt;td>按下鼠标退出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>loop&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>指定循环次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>framedrop&lt;/td>
&lt;td>N&lt;/td>
&lt;td>CPU不够的时候丢帧&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>window_title&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>显示窗口的标题&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rdftspeed&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>Rdft速度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>showmode&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>显示方式(0 = video, 1 = waves, 2 = RDFT)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>codec&lt;/td>
&lt;td>Y&lt;/td>
&lt;td>强制解码器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="附录e-ffmpeg处理rtmp流媒体">&lt;strong>附录E： ffmpeg处理rtmp流媒体&lt;/strong>&lt;/h1>
&lt;p>1、将文件当做直播送至live&lt;/p>
&lt;p>ffmpeg -re -i localFile.mp4 -c copy -f flv rtmp://server/live/streamName&lt;/p>
&lt;p>2、将直播媒体保存至本地文件&lt;/p>
&lt;p>ffmpeg -i rtmp://server/live/streamName -c copy dump.flv&lt;/p>
&lt;p>3、将其中一个直播流，视频改用h264压缩，音频不变，送至另外一个直播服务流&lt;/p>
&lt;p>ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v libx264 -vpre slow -f flv rtmp://server/live/h264Stream&lt;/p>
&lt;p>4、将其中一个直播流，视频改用h264压缩，音频改用faac压缩，送至另外一个直播服务流&lt;/p>
&lt;p>ffmpeg -i rtmp://server/live/originalStream -c:a libfaac -ar 44100 -ab 48k -c:v libx264 -vpre slow -vpre baseline -f flv rtmp://server/live/h264Stream&lt;/p>
&lt;p>5、将其中一个直播流，视频不变，音频改用faac压缩，送至另外一个直播服务流&lt;/p>
&lt;p>ffmpeg -i rtmp://server/live/originalStream -acodec libfaac -ar 44100 -ab 48k -vcodec copy -f flv rtmp://server/live/h264_AAC_Stream&lt;/p>
&lt;p>6、将一个高清流，复制为几个不同视频清晰度的流重新发布，其中音频不变&lt;/p>
&lt;p>ffmpeg -re -i rtmp://server/live/high_FMLE_stream -acodec copy -vcodec x264lib -s 640×360 -b 500k -vpre medium -vpre baseline rtmp://server/live/baseline_500k -acodec copy -vcodec x264lib -s 480×272 -b 300k -vpre medium -vpre baseline rtmp://server/live/baseline_300k -acodec copy -vcodec x264lib -s 320×200 -b 150k -vpre medium -vpre baseline rtmp://server/live/baseline_150k -acodec libfaac -vn -ab 48k rtmp://server/live/audio_only_AAC_48k&lt;/p>
&lt;p>7、功能一样，只是采用-x264opts选项&lt;/p>
&lt;p>ffmpeg -re -i rtmp://server/live/high_FMLE_stream -c:a copy -c:v x264lib -s 640×360 -x264opts bitrate=500:profile=baseline:preset=slow rtmp://server/live/baseline_500k -c:a copy -c:v x264lib -s 480×272 -x264opts bitrate=300:profile=baseline:preset=slow rtmp://server/live/baseline_300k -c:a copy -c:v x264lib -s 320×200 -x264opts bitrate=150:profile=baseline:preset=slow rtmp://server/live/baseline_150k -c:a libfaac -vn -b:a 48k rtmp://server/live/audio_only_AAC_48k&lt;/p>
&lt;p>8、将当前摄像头及音频通过DSSHOW采集，视频h264、音频faac压缩后发布&lt;/p>
&lt;p>ffmpeg -r 25 -f dshow -s 640×480 -i video=”video source name”:audio=”audio source name” -vcodec libx264 -b 600k -vpre slow -acodec libfaac -ab 128k rtmp://server/application/stream_name&lt;/p>
&lt;p>9、将一个JPG图片经过h264压缩循环输出为mp4视频&lt;/p>
&lt;p>ffmpeg.exe -i INPUT.jpg -an -vcodec libx264 -coder 1 -flags +loop -cmp +chroma -subq 10 -qcomp 0.6 -qmin 10 -qmax 51 -qdiff 4 -flags2 +dct8x8 -trellis 2 -partitions +parti8x8+parti4x4 -crf 24 -threads 0 -r 25 -g 25 -y OUTPUT.mp4&lt;/p>
&lt;p>10、将普通流视频改用h264压缩，音频不变，送至高清流服务(新版本FMS live=1)&lt;/p>
&lt;p>ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v libx264 -vpre slow -f flv “rtmp://server/live/h264Stream live=1″&lt;/p></description></item><item><title>Cas接入</title><link>https://b9aobj.github.io/post/zh-cn/2020/cas%E6%8E%A5%E5%85%A5/</link><pubDate>Tue, 11 May 2021 16:34:30 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2020/cas%E6%8E%A5%E5%85%A5/</guid><description>
&lt;h3 id="sso介绍">SSO介绍&lt;/h3>
&lt;h4 id="背景">背景&lt;/h4>
&lt;p>在企业发展初期，企业使用的系统很少，通常一个或者两个，每个系统都有自己的登录模块，运营人员每天用自己的账号登录，很方便。
但随着企业的发展，用到的系统随之增多，运营人员在操作不同的系统时，需要多次登录，而且每个系统的账号都不一样，这对于运营人员来说，很不方便。于是，就想到是不是可以在一个系统登录，其他系统就不用登录了呢？这就是单点登录要解决的问题。&lt;/p>
&lt;h4 id="定义">定义&lt;/h4>
&lt;p>&lt;code>单点登录&lt;/code>英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统.&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/cas01.png" alt="01">
如图所示，图中有4个系统，分别是Application1、Application2、Application3、和SSO。Application1、Application2、Application3没有登录模块,只负责业务模块，而SSO只有登录模块，没有其他的业务模块，当Application1、Application2、Application3需要登录时，将跳到SSO系统，SSO系统完成登录，其他的应用系统也就随之登录了。这完全符合我们对单点登录（SSO）的定义。&lt;/p>
&lt;p>同域下的单点登录是运用了Cookie同域共享的特性,&lt;code>但这不是真正的单点登录&lt;/code>。
因为如果是不同域呢？不同域之间Cookie是不共享的，怎么办？
这里我们就要说一说CAS了，CAS流程才是单点登录&lt;code>正宗的解决方案&lt;/code>。&lt;/p>
&lt;h4 id="cas介绍">CAS介绍&lt;/h4>
&lt;p>&lt;code>CAS&lt;/code> （ Central Authentication Service ） 是 Yale 大学发起的一个企业级的、开源的项目，旨在为 Web 应用系统提供一种可靠的单点登录解决方法（属于 Web SSO ）。&lt;/p>
&lt;p>从结构上看，CAS系统包含两个部分：CAS Server 和CAS Client
&lt;code>CAS Server&lt;/code> 负责对用户的认证工作；需要独立部署,有官方的详细教程.
&lt;code>CAS Client&lt;/code> 负责处理对客户端受保护资源的访问请求; 与受保护的客户端应用部署在一起，以Filter方式保护 Web 应用的受保护资源，过滤从客户端过来的每一个 Web请求.&lt;/p>
&lt;p>CAS Client 没有官方的Node版本,需要自己实现.
&lt;code>所以今天我就来谈谈Node与 CAS Client集成的实现&lt;/code>.&lt;/p>
&lt;h4 id="cas理论">CAS理论&lt;/h4>
&lt;p>CAS 协议定义了一组术语，一组票据，一组接口。&lt;/p>
&lt;h5 id="术语">术语：&lt;/h5>
&lt;ul>
&lt;li>&lt;code>Service&lt;/code>: 需要使用单点登录的各个服务。&lt;/li>
&lt;li>&lt;code>CAS Server&lt;/code>: 中心服务器，也是SSO中负责单点登录的服务器。&lt;/li>
&lt;li>&lt;code>CAS Client&lt;/code>: 各个service的后台。&lt;/li>
&lt;/ul>
&lt;h5 id="接口">接口：&lt;/h5>
&lt;ul>
&lt;li>/login：登录接口，用于登录到中心服务器。&lt;/li>
&lt;li>/logout：登出接口，用于从中心服务器登出。&lt;/li>
&lt;li>/validate：用于验证用户是否登录中心服务器。&lt;/li>
&lt;li>/serviceValidate：用于让各个 service 验证是否登录中心服务器。&lt;/li>
&lt;/ul>
&lt;h5 id="票据">票据：&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>TGT：Ticket Grangting Ticket
TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以正名用户在CAS成功登录过。TGT封装了Cookie值对应的用户信息。当HTTP请求到来时，CAS以此Cookie值（TGC)为key查询缓存中有无TGT，如果有的话，则相信用户已登录过。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TGC： Ticket Granting Cookie
CAS Server生成TGT放入自己的Session中，而TGC就是这个Session的唯一标识（SessionId），以Cookie形式放到浏览器端，是CAS Server用来明确用户身份的凭证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ST： Service Ticket
ST是CAS用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取S。用户想CAS发出获取ST的请求，CAS发现用户有TGT，则签发一个ST，返回给用户。用户拿着ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cas流程">CAS流程&lt;/h3>
&lt;h4 id="官方流程图">官方流程图&lt;/h4>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/cas02.png" alt="02">
官方文档:https://apereo.github.io/cas/6.0.x/protocol/CAS-Protocol.html&lt;/p>
&lt;h4 id="流程图">流程图&lt;/h4>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/cas03.png" alt="03">&lt;/p>
&lt;h4 id="流程图解析">流程图解析&lt;/h4>
&lt;p>1、 用户访问产品a，域名是www.a.cn.
2. 由于用户没有携带在 a 服务器上登录的 a cookie，所以 a 服务器返回 http 重定向，重定向的 url 是 SSO 服务器的地址，同时 url 的 query 中通过参数指明登录成功后，回跳到 a 页面。重定向的url 形如 sso.dxy.cn/login?service=https%3A%2F%2Fwww.a.cn。
3. 由于用户没有携带在 SSO 服务器上登录的 TGC（看上面，票据之一），所以 SSO 服务器判断用户未登录，给用户显示统一登录界面。用户在 SSO 的页面上进行登录操作。
4. 登录成功后，SSO 服务器构建用户在 SSO 登录的 TGT（又一个票据），同时返回一个 http 重定向。这里注意：重定向地址为之前写在 query 里的 a 页面。重定向地址的 query 中包含 sso 服务器派发的 ST。重定向的 http response 中包含写 cookie 的 header。这个 cookie 代表用户在 SSO 中的登录状态，它的值就是 TGC。
5. 浏览器重定向到产品 a。此时重定向的 url 中携带着 SSO 服务器生成的 ST。
6. 根据 ST，a 服务器向 SSO 服务器发送请求，SSO 服务器验证票据的有效性。验证成功后，a 服务器知道用户已经在 sso 登录了，于是 a 服务器构建用户登录 session，记为 a session。并将 cookie 写入浏览器。注意，此处的 cookie 和 session 保存的是用户在 a 服务器的登录状态，和 CAS 无关。
7. 之后用户访问产品 b，域名是 &lt;a href="https://www.b.cn">www.b.cn&lt;/a>。
8. 由于用户没有携带在 b 服务器上登录的 b cookie，所以 b 服务器返回 http 重定向，重定向的 url 是 SSO 服务器的地址，去询问用户在 SSO 中的登录状态。
9. 浏览器重定向到 SSO。注意，第 4 步中已经向浏览器写入了携带 TGC 的cookie，所以此时 SSO 服务器可以拿到，根据 TGC 去查找 TGT，如果找到，就判断用户已经在 sso 登录过了。
10. SSO 服务器返回一个重定向，重定向携带 ST。注意，这里的 ST 和第4步中的 ST 是不一样的，事实上，每次生成的 ST 都是不一样的。
11. 浏览器带 ST 重定向到 b 服务器，和第 5 步一样。
12. b 服务器根据票据向 SSO 服务器发送请求，票据验证通过后，b 服务器知道用户已经在 sso 登录了，于是生成 b session，向浏览器写入 b cookie。&lt;/p>
&lt;h3 id="实践演示">实践演示&lt;/h3>
&lt;p>发车了......&lt;/p>
&lt;h4 id="cas-域名配置">CAS 域名配置&lt;/h4>
&lt;ul>
&lt;li>cas server 域名 &lt;a href="https://cas.ucloudadmin.com">https://cas.ucloudadmin.com&lt;/a>&lt;/li>
&lt;li>cas client 域名 &lt;a href="https://www.clienta.com">www.clienta.com&lt;/a> www.clientb.com&lt;/li>
&lt;/ul>
&lt;h4 id="host-配置">host 配置&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">#CAS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">127.0.0.1 clienta.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">127.0.0.1 clientb.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="nginx-配置">nginx 配置&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">listen 80;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">server_name clienta.com;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">location / {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">proxy_set_header Host $host;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">proxy_set_header X-Real-IP $remote_addr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">proxy_pass http://127.0.0.1:1024;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">12&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">13&lt;/span>&lt;span class="cl">server {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">14&lt;/span>&lt;span class="cl">listen 80;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">15&lt;/span>&lt;span class="cl">server_name clientb.com;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">16&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">17&lt;/span>&lt;span class="cl">location / {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">18&lt;/span>&lt;span class="cl">proxy_set_header Host $host;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">19&lt;/span>&lt;span class="cl">proxy_set_header X-Real-IP $remote_addr;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">20&lt;/span>&lt;span class="cl">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">21&lt;/span>&lt;span class="cl">proxy_pass http://127.0.0.1:1025;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">22&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">23&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用">使用&lt;/h4>
&lt;h5 id="启动-cas-client-服务">启动 cas client 服务&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">cd clienta
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">npm start // or node app.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">cd clientb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">npm start // or node app.js
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="clienta-代码">clienta 代码&lt;/h5>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">// app.js
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">const express = require(&amp;#39;express&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">const app = express()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl">const session = require(&amp;#39;express-session&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl">const cas = require(&amp;#39;connect-cas&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">const URL = require(&amp;#39;url&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">const querystring = require(&amp;#34;querystring&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">const casServer = &amp;#39;cas.ucloudadmin.com&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 10&lt;/span>&lt;span class="cl">const casClient = &amp;#39;clienta.com&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 11&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 12&lt;/span>&lt;span class="cl">// var _defaults = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 13&lt;/span>&lt;span class="cl">// protocol: &amp;#39;https&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 14&lt;/span>&lt;span class="cl">// host: undefined,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 15&lt;/span>&lt;span class="cl">// hostname: undefined, // ex. google
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 16&lt;/span>&lt;span class="cl">// port: 443,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 17&lt;/span>&lt;span class="cl">// gateway: false, // set to true only if you wish to do authentication instead of authorization
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 18&lt;/span>&lt;span class="cl">// paths: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 19&lt;/span>&lt;span class="cl">// validate: &amp;#39;/cas/validate&amp;#39;, // not implemented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 20&lt;/span>&lt;span class="cl">// serviceValidate: &amp;#39;/cas/serviceValidate&amp;#39;, // CAS 2.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 21&lt;/span>&lt;span class="cl">// proxyValidate: &amp;#39;/cas/proxyValidate&amp;#39;, // not implemented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 22&lt;/span>&lt;span class="cl">// proxy: &amp;#39;/cas/proxy&amp;#39;, // not implemented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 23&lt;/span>&lt;span class="cl">// login: &amp;#39;/cas/login&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 24&lt;/span>&lt;span class="cl">// logout: &amp;#39;/cas/logout&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 25&lt;/span>&lt;span class="cl">// }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 26&lt;/span>&lt;span class="cl">// }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 27&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 28&lt;/span>&lt;span class="cl">/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 29&lt;/span>&lt;span class="cl">var myOptions = {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 30&lt;/span>&lt;span class="cl"> protocol: &amp;#39;https&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 31&lt;/span>&lt;span class="cl"> host: &amp;#39;cas.ucloudadmin.com&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 32&lt;/span>&lt;span class="cl"> hostname: &amp;#39;ucloud&amp;#39;, // ex. google
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 33&lt;/span>&lt;span class="cl"> port: 443,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 34&lt;/span>&lt;span class="cl"> gateway: false, // set to true only if you wish to do authentication instead of authorization
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 35&lt;/span>&lt;span class="cl"> paths: {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 36&lt;/span>&lt;span class="cl"> validate: &amp;#39;/cas/validate&amp;#39;, // not implemented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 37&lt;/span>&lt;span class="cl"> serviceValidate: &amp;#39;/cas/serviceValidate&amp;#39;, // CAS 2.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 38&lt;/span>&lt;span class="cl"> proxyValidate: &amp;#39;/cas/proxyValidate&amp;#39;, // not implemented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 39&lt;/span>&lt;span class="cl"> proxy: &amp;#39;/cas/proxy&amp;#39;, // not implemented
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 40&lt;/span>&lt;span class="cl"> login: &amp;#39;/cas/login&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 41&lt;/span>&lt;span class="cl"> logout: &amp;#39;/cas/logout&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 42&lt;/span>&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 43&lt;/span>&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 44&lt;/span>&lt;span class="cl">cas.configure(myOptions);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 45&lt;/span>&lt;span class="cl">*/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 46&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 47&lt;/span>&lt;span class="cl">// Your CAS server&amp;#39;s hostname
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 48&lt;/span>&lt;span class="cl">cas.configure({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 49&lt;/span>&lt;span class="cl"> protocol: &amp;#39;https&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 50&lt;/span>&lt;span class="cl"> host: casServer,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 51&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 52&lt;/span>&lt;span class="cl">console.log(cas.configure());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 53&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 54&lt;/span>&lt;span class="cl">app.use(express.json());
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 55&lt;/span>&lt;span class="cl">app.use(express.urlencoded({ extended: true }))
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 56&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 57&lt;/span>&lt;span class="cl">app.use(
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 58&lt;/span>&lt;span class="cl"> session({
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 59&lt;/span>&lt;span class="cl"> secret: &amp;#39;clienta&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 60&lt;/span>&lt;span class="cl"> name: &amp;#39;SESSIONID&amp;#39;,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 61&lt;/span>&lt;span class="cl"> resave: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 62&lt;/span>&lt;span class="cl"> saveUninitialized: true,
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 63&lt;/span>&lt;span class="cl"> cookie: { maxAge: 24 * 60 * 60 * 1000, httpOnly: true }, //过期时间 24 小时
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 64&lt;/span>&lt;span class="cl"> }),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 65&lt;/span>&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 66&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 67&lt;/span>&lt;span class="cl">// 用户验证
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 68&lt;/span>&lt;span class="cl">app.use(function (req, res, next) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 69&lt;/span>&lt;span class="cl"> console.log(&amp;#39;req.url&amp;#39;, req.url);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 70&lt;/span>&lt;span class="cl"> let path = req.url.split(&amp;#39;?&amp;#39;)[0]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 71&lt;/span>&lt;span class="cl"> // 跳过登录请求
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 72&lt;/span>&lt;span class="cl"> if (path === &amp;#39;/login&amp;#39;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 73&lt;/span>&lt;span class="cl"> next()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 74&lt;/span>&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 75&lt;/span>&lt;span class="cl"> if (req.session.cas &amp;amp;&amp;amp; req.session.cas.user) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 76&lt;/span>&lt;span class="cl"> next()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 77&lt;/span>&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 78&lt;/span>&lt;span class="cl"> return res.send(`&amp;lt;h2&amp;gt;this is clientA&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;You are not logged in. &amp;lt;a href=https://b9aobj.github.io/login?service=http://${casClient}${req.url}&amp;gt;Log in now.&amp;lt;/a&amp;gt;&amp;lt;p&amp;gt;`);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 79&lt;/span>&lt;span class="cl"> // 自动跳转登录
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 80&lt;/span>&lt;span class="cl"> // return res.redirect(`/login?service=http://${casClient}${req.url}`);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 81&lt;/span>&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 82&lt;/span>&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 83&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 84&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 85&lt;/span>&lt;span class="cl">app.get(&amp;#39;/&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 86&lt;/span>&lt;span class="cl"> console.log(&amp;#39;get /&amp;#39;, req.url)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 87&lt;/span>&lt;span class="cl"> return res.send(&amp;#39;&amp;lt;h2&amp;gt;this is clienta&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;You are logged in. Your username is &amp;#39; + req.session.cas.user + &amp;#39;. &amp;lt;a href=&amp;#34;/logout&amp;#34;&amp;gt;Log Out&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 88&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 89&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 90&lt;/span>&lt;span class="cl">app.get(&amp;#39;/login&amp;#39;, cas.serviceValidate(), cas.authenticate(), function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 91&lt;/span>&lt;span class="cl"> console.log(&amp;#39;/login&amp;#39;, req.url)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 92&lt;/span>&lt;span class="cl"> let arg = URL.parse(req.url).query;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 93&lt;/span>&lt;span class="cl"> let params = querystring.parse(arg);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 94&lt;/span>&lt;span class="cl"> // console.log(&amp;#34;params-service &amp;#34; + params.service);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 95&lt;/span>&lt;span class="cl"> // 重定向到初始请求地址
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 96&lt;/span>&lt;span class="cl"> return res.redirect(params.service || &amp;#39;/&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 97&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 98&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 99&lt;/span>&lt;span class="cl">app.get(&amp;#39;/logout&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">100&lt;/span>&lt;span class="cl"> if (!req.session) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">101&lt;/span>&lt;span class="cl"> return res.redirect(&amp;#39;/&amp;#39;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">102&lt;/span>&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">103&lt;/span>&lt;span class="cl"> // Forget our own login session
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">104&lt;/span>&lt;span class="cl"> if (req.session.destroy) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">105&lt;/span>&lt;span class="cl"> req.session.destroy();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">106&lt;/span>&lt;span class="cl"> } else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">107&lt;/span>&lt;span class="cl"> // Cookie-based sessions have no destroy()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">108&lt;/span>&lt;span class="cl"> req.session = null;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">109&lt;/span>&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">110&lt;/span>&lt;span class="cl"> // Send the user to the official campus-wide logout URL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">111&lt;/span>&lt;span class="cl"> var options = cas.configure();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">112&lt;/span>&lt;span class="cl"> options.pathname = options.paths.logout;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">113&lt;/span>&lt;span class="cl"> return res.redirect(URL.format(options));
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">114&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">115&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">116&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">117&lt;/span>&lt;span class="cl">// 业务接口路由
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">118&lt;/span>&lt;span class="cl">app.get(&amp;#39;/api&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">119&lt;/span>&lt;span class="cl"> return res.send(&amp;#39;&amp;lt;h2&amp;gt;this is clientA API Page&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;You are logged in. Your username is &amp;#39; + req.session.cas.user);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">120&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">121&lt;/span>&lt;span class="cl">app.get(&amp;#39;/api/userInfo&amp;#39;, function (req, res) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">122&lt;/span>&lt;span class="cl"> res.json({ retCode: &amp;#39;1&amp;#39;, data: req.session.cas });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">123&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">124&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">125&lt;/span>&lt;span class="cl">// ......
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">126&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">127&lt;/span>&lt;span class="cl">app.listen(1024, () =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">128&lt;/span>&lt;span class="cl"> console.log(&amp;#39;示例程序正在监听 1024 端口！&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">129&lt;/span>&lt;span class="cl">});
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="登录-cas-client-前台">登录 cas client 前台&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>浏览器打开 clientA clientB&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跳转 cas server 验证 / 登录&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Chrome的console调试</title><link>https://b9aobj.github.io/post/zh-cn/2021/chrome%E7%9A%84console%E8%B0%83%E8%AF%95/</link><pubDate>Mon, 10 May 2021 18:07:16 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/chrome%E7%9A%84console%E8%B0%83%E8%AF%95/</guid><description>
&lt;p>1、$_&lt;/p>
&lt;p>&lt;code>$_&lt;/code>上次结果的引用&lt;/p>
&lt;p>2、$i&lt;/p>
&lt;p>需要Chrome插件:(Console Importer)[https://chrome.google.com/webstore/detail/console-importer/hgajpakhafplebkdljleajgbpdmplhie/related]，可以快速的在console中引入&lt;code>npm&lt;/code>库。&lt;br>
例如： &lt;code>$i('lodash')&lt;/code>或者&lt;code>$i('moment')&lt;/code>,就可以使用lodash或者moment库了。&lt;/p>
&lt;p>3、copy(...)&lt;/p>
&lt;p>&lt;code>copy&lt;/code>任何资源，如&lt;code>copy($0)&lt;/code>或&lt;code>copy($_)&lt;/code>&lt;/p>
&lt;p>4、学会使用console.table来显示数组或者对象&lt;/p>
&lt;p>5、&lt;/p></description></item><item><title>改变自己的生活系列之习惯篇</title><link>https://b9aobj.github.io/post/zh-cn/2021/%E6%94%B9%E5%8F%98%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%9F%E6%B4%BB%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%A0%E6%83%AF%E7%AF%87/</link><pubDate>Sat, 08 May 2021 13:38:57 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/%E6%94%B9%E5%8F%98%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%9F%E6%B4%BB%E7%B3%BB%E5%88%97%E4%B9%8B%E4%B9%A0%E6%83%AF%E7%AF%87/</guid><description>
&lt;h4 id="1保持早睡只少能修复30的颜值">1、保持早睡，只少能修复30%的颜值&lt;/h4>
&lt;h4 id="2看片不挑国家">2、看片，不挑国家&lt;/h4>
&lt;p>奥斯卡、纪录片、TED、科普片&lt;/p>
&lt;h4 id="3不刷朋友圈抖音">3、不刷朋友圈、抖音&lt;/h4>
&lt;h4 id="4吃饭时不看任何电子屏幕">4、吃饭时，不看任何电子屏幕&lt;/h4>
&lt;h4 id="5嘴巴闭合时舌尖要亲抵在上颚">5、嘴巴闭合时，舌尖要亲抵在上颚&lt;/h4>
&lt;h4 id="6说话柔软内心坚硬做事果断">6、说话柔软，内心坚硬，做事果断&lt;/h4>
&lt;h4 id="7多向大佬学习">7、多向大佬学习&lt;/h4>
&lt;p>结识良师益友，是成长进步的最快方式。&lt;/p>
&lt;h4 id="8提高睡眠质量才能高效休息提高做事效率">8、提高睡眠质量，才能高效休息，提高做事效率！&lt;/h4>
&lt;ul>
&lt;li>睡前不进食不喝水&lt;/li>
&lt;li>睡觉三件套：泡脚、冥想、听书&lt;/li>
&lt;li>裸睡&lt;/li>
&lt;/ul>
&lt;h4 id="9永远保持对新知识新技能的汲取">9、永远保持对新知识、新技能的汲取&lt;/h4>
&lt;p>不论是生活还是工作上的技能，每天花30分钟专注去学习，会让你避免原地踏步的同时，有机会抓住更多机遇和意外惊喜。&lt;/p>
&lt;h4 id="10定期运动">10、定期运动&lt;/h4>
&lt;h4 id="11灵活运动番茄工作法">11、灵活运动‘番茄工作法’&lt;/h4>
&lt;p>工作学习25min，用5min来休息。&lt;/p>
&lt;h4 id="12拜访亲友带点水果酒水过去">12、拜访亲友，带点水果、酒水过去&lt;/h4>
&lt;h4 id="13早起时不要老想着起床的痛苦要想想一些让人幸福的事刺激一下你的大脑皮层提高大脑的兴奋度">13、早起时，不要老想着起床的痛苦，要想想一些让人幸福的事，刺激一下你的大脑皮层，提高大脑的兴奋度&lt;/h4>
&lt;h4 id="14出门前无论多急都花5秒照下镜子">14、出门前，无论多急，都花5秒照下镜子&lt;/h4>
&lt;h4 id="15日常分类记账并坚持理财比如伙食交通服饰生活用品等等让自己知道赚的钱大头都花哪了避免浪费">15、日常分类记账，并坚持理财。比如伙食、交通、服饰、生活用品等等，让自己知道赚的钱大头都花哪了，避免浪费。&lt;/h4>
&lt;p>接着学会理财，这是提高经济力的最核心关键。操作得当，会使你的收入实现指数级增长。&lt;/p></description></item><item><title>部分专业英文术语</title><link>https://b9aobj.github.io/post/zh-cn/2021/%E9%83%A8%E5%88%86%E4%B8%93%E4%B8%9A%E8%8B%B1%E6%96%87%E6%9C%AF%E8%AF%AD/</link><pubDate>Fri, 07 May 2021 19:35:24 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/%E9%83%A8%E5%88%86%E4%B8%93%E4%B8%9A%E8%8B%B1%E6%96%87%E6%9C%AF%E8%AF%AD/</guid><description>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>术语&lt;/th>
&lt;th>翻译&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>property wrapper&lt;/td>
&lt;td>属性包装器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>projected value&lt;/td>
&lt;td>被呈现值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wrapped value&lt;/td>
&lt;td>被包装值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>argument&lt;/td>
&lt;td>实参&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parameter&lt;/td>
&lt;td>形参&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>variadic parameters&lt;/td>
&lt;td>可变参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>associated type&lt;/td>
&lt;td>关联类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range&lt;/td>
&lt;td>区间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type property&lt;/td>
&lt;td>类型属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unary operator&lt;/td>
&lt;td>一元运算符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>binary operator&lt;/td>
&lt;td>二元运算符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ternary operator&lt;/td>
&lt;td>三元运算符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>labeled statement&lt;/td>
&lt;td>具名词句&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>conform protocol&lt;/td>
&lt;td>遵循协议&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>availability-condition&lt;/td>
&lt;td>可用性条件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fallthrough&lt;/td>
&lt;td>贯穿&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>branch statement&lt;/td>
&lt;td>分支语句&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>control transfer statement&lt;/td>
&lt;td>控制传递语句&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type annotation&lt;/td>
&lt;td>类型注解&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type identifier&lt;/td>
&lt;td>类型标识符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>metatype type&lt;/td>
&lt;td>元类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>protocol composition type&lt;/td>
&lt;td>符合协议类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>associated value&lt;/td>
&lt;td>关联值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>raw value&lt;/td>
&lt;td>原始值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>computed property&lt;/td>
&lt;td>计算属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stored property&lt;/td>
&lt;td>存储属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>operator&lt;/td>
&lt;td>运算符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array&lt;/td>
&lt;td>数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dictionary&lt;/td>
&lt;td>字典&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>list&lt;/td>
&lt;td>列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>statement&lt;/td>
&lt;td>语句&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>expression&lt;/td>
&lt;td>表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>optional&lt;/td>
&lt;td>可选&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implicitly unwrapped optional&lt;/td>
&lt;td>隐式解包可选值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>optional binding&lt;/td>
&lt;td>可选绑定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>optional chaining&lt;/td>
&lt;td>可选链&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>collection&lt;/td>
&lt;td>集合&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>convention&lt;/td>
&lt;td>约定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>iterate&lt;/td>
&lt;td>迭代&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nest&lt;/td>
&lt;td>嵌套&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>inheritance&lt;/td>
&lt;td>继承&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>override&lt;/td>
&lt;td>重写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>base class&lt;/td>
&lt;td>基类&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>designated initializer&lt;/td>
&lt;td>指定构造器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>convenience initializer&lt;/td>
&lt;td>便利构造器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>automatic reference counting&lt;/td>
&lt;td>自动引用计数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type inference&lt;/td>
&lt;td>类型推断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>type casting&lt;/td>
&lt;td>类型转换&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unwrapped&lt;/td>
&lt;td>解包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>wrapped&lt;/td>
&lt;td>包装&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>note&lt;/td>
&lt;td>注意&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>closure&lt;/td>
&lt;td>闭包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tuple&lt;/td>
&lt;td>元组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>first-class&lt;/td>
&lt;td>一等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deinitializer&lt;/td>
&lt;td>析构器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>initializer&lt;/td>
&lt;td>构造器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>initialization&lt;/td>
&lt;td>构造过程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>deinitialization&lt;/td>
&lt;td>析构过程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>subscript&lt;/td>
&lt;td>下标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>property&lt;/td>
&lt;td>属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attribute&lt;/td>
&lt;td>特性或者属性，根据上下文&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>method&lt;/td>
&lt;td>方法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>enumeration&lt;/td>
&lt;td>枚举&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strcture&lt;/td>
&lt;td>结构体&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>protocol&lt;/td>
&lt;td>协议&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extension&lt;/td>
&lt;td>扩展&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>generic&lt;/td>
&lt;td>泛型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>literal value&lt;/td>
&lt;td>字面量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>alias&lt;/td>
&lt;td>别名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>assertion&lt;/td>
&lt;td>断言&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>conditional compilation&lt;/td>
&lt;td>条件编译&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>opaque type&lt;/td>
&lt;td>不透明类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>function&lt;/td>
&lt;td>函数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>runtime&lt;/td>
&lt;td>运行时&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>中文匹配</title><link>https://b9aobj.github.io/post/zh-cn/2021/zhongwenzhengze/</link><pubDate>Fri, 30 Apr 2021 14:55:12 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/zhongwenzhengze/</guid><description>
&lt;p>\w匹配的仅仅是中文，数字，字母，对于国人来讲，仅匹配中文时常会用到，见下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">匹配中文字符的正则表达式： [\u4e00-\u9fa5]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>或许你也需要匹配双字节字符，中文也是双字节的字符&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">匹配双字节字符(包括汉字在内)：[^\x00-\xff]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）
更多常用正则表达式匹配规则：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">英文字母:[a-zA-Z]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">数字:[0-9]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>匹配中文，英文字母和数字及_:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">^[\u4e00-\u9fa5_a-zA-Z0-9]+$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时判断输入长度：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">[\u4e00-\u9fa5_a-zA-Z0-9_]{4,10}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">^[\w\u4E00-\u9FA5\uF900-\uFA2D]*$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>1、一个正则表达式，只含有汉字、数字、字母、下划线不能以下划线开头和结尾：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中：&lt;/p>
&lt;p>^ 与字符串开始的地方匹配&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">(?!_)　　不能以_开头
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">(?!.*?_$)　　不能以_结尾
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">4&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">5&lt;/span>&lt;span class="cl">[a-zA-Z0-9_\u4e00-\u9fa5]+　　至少一个汉字、数字、字母、下划线
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>$　　与字符串结束的地方匹配&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">放在程序里前面加@，否则需要\\进行转义 @&amp;#34;^(?!_)(?!.*?_$)[a-zA-Z0-9_\u4e00-\u9fa5]+$&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">（或者：@&amp;#34;^(?!_)\w*(?&amp;lt;!_)$&amp;#34; 或者 @&amp;#34; ^[\u4E00-\u9FA50-9a-zA-Z_]+$ &amp;#34; )
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>2、只含有汉字、数字、字母、下划线，下划线位置不限：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">^[a-zA-Z0-9_\u4e00-\u9fa5]+$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>3、由数字、26个英文字母或者下划线组成的字符串&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">^\w+$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>4、2~4个汉字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">@&amp;#34;^[\u4E00-\u9FA5]{2,4}$&amp;#34;;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>5、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>用：(Abc)+ 来分析： XYZAbcAbcAbcXYZAbcAb&lt;/p></description></item><item><title>利用live555在Mac端搭建rtsp推流</title><link>https://b9aobj.github.io/post/zh-cn/2017/2017-10-20-li-yong-live555zai-macduan-da-jian-rtsptui-liu/</link><pubDate>Fri, 20 Oct 2017 10:44:12 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2017/2017-10-20-li-yong-live555zai-macduan-da-jian-rtsptui-liu/</guid><description>
&lt;p>利用live555在自己的Mac电脑上搭建一个rtsp推流；&lt;/p>
&lt;p>最近需要探查SDK是否支持RTP协议，需要一个rtsp流地址播放，但是网络上给的测试地址只有一个大白熊的流可以用，但是这个流非常卡，SDK播放非常有问题，说明了SDK对于rtsp支持是有问题的，但是不清楚是否是因为这个流也有问题呢。所以就自己就想办法自己推流试试是否可以播放。后续再进行做相关的SDK优化。&lt;/p>
&lt;p>老规矩，google.com，找到live555.com。自己下载源码编译，http://www.live555.com/liveMedia/#config-unix在此处找到Mac编译。&lt;/p>
&lt;ol>
&lt;li>下载tar.gz包，解压并cd live&lt;/li>
&lt;li>终端至live文件夹，运行&lt;code>./genMakefiles &amp;lt;os-platform&amp;gt;&lt;/code>，注意：这里的os-platform是mac平台，至于其他平台可以查看live文件夹下的config.&lt;os-platform>文件，Mac对应macosx。所以是&lt;code>./genMakefiles macosx&lt;/code>&lt;/li>
&lt;li>然后运行&lt;code>make&lt;/code>。如果你想打包live555库，可以运行&lt;code>make install&lt;/code>。解决端口占用，最好运行这个命令&lt;code>make CPPFLAGS=-DALLOW_RTSP_SERVER_PORT_REUSE=1 install&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>编译完成之后就会生成mediaServer文件夹，会有一个live555MediaServer可执行文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">cd mediaServer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">./live555MediaServer
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样就启动了一个 rtsp server，根据提示当前只支持部分视频格式，并不支持.mp4后缀的文件。&lt;/p>
&lt;p>可以看到支持格式有：h264、h265、.aac、.ac3、.amr、.dv、.m4e、.mkv、.mp3、.mpg、.ogg、.ts、.vod、.wav、.webm&lt;/p>
&lt;p>推流步骤：&lt;br>
将NARUTO.mkv文件复制到和上面live555MediaServer可执行文件的同一个目录，
可用vlc在打开网络中输入地址 rtsp://your_ip:port/file.mkv 观看视频了。
还可以生成 m3u8文件在手机上访问，http://your_ip:8000/file.mkv。&lt;/p>
&lt;p>手机端观看：同一个网络环境下，输入上面vlc地址既可以播放&lt;br>
rtsp://192.168.1.106:8554/NARUTO.mkv&lt;/p></description></item><item><title>早安2017</title><link>https://b9aobj.github.io/post/zh-cn/2017/2017-01-01-zao-an-2017/</link><pubDate>Sun, 01 Jan 2017 09:09:05 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2017/2017-01-01-zao-an-2017/</guid><description>
&lt;p>晃眼之间已到2017，这一年很忙，很忙，真的好忙。&lt;/p>
&lt;p>回望2016，在这一年经历了公司倒闭后的找工作经历，真的挺难的，一堆人出来社会碰机会，面试官见你爽就还好，不爽就明显知道已没机会！
主要过完年从老家一回来整个人就不好了，一直病了一个多月才开始找工作，而且家住郊区，去市区非常远，每天来回耗时非常长，外加搬家搬了我一个礼拜左右，所以一直到4月中旬才找到工作，很不错，公司很nice，现在继续任职，继续努力💪！！！&lt;br>
2016是一个直播的年代，什么都搞直播，从之前对ijkplayer的兴趣对其稍有了解，没对直播这块做过研究，一开始拿到直播／点播SDK的时候脑子一阵头大。只能自己一步一步进行了解与尝试，公司的产品刚起步，还有比较多问题与难关的，自己也是在模仿着别家竟品的优点来进行加工与改进，到如今基本对这方面稍有研究，以前主要还是采用世面上所使用的RTMP直播，到后面我们将自研出私有协议连麦，近期我们的连麦新产品也即将上线的了，自己测试还是挺不错的，可以跟国内的声网的方案做下对比；当然，声网的产品已经相当完善，暂时还不能够与之抗衡，但我们的方向跟他们是一样的，可以说，我们做这个方案都是同时起步，但是，由于我个人能力不足，人家已经在几个月前已经做出来并且商业化了，而我们的到现在才初具雏形，这是相当伤的，原理都是一样，并且他们已经有两套方案，我的能力不足由此可见啊。&lt;br>
在点播方面，主要是基于ijkplayer进行的二次开发，在ijkplayer层面主要采用c开发，对于早已传送回给大一的李金洋老师的C基础的我，难度还是可预见的，早期由于音视频同事离职，需要我对其进行维护（产品已经开发好，留下维护工作），对于一个小问题还是被我搞了相当长时间啊，所以可以知道自己对于ijk方面的研究还是不够的。&lt;br>
2017，一个充满挑战的时间，我可以遇见到我这一年的工作安排了，排期还是相当的满的，可能主要要开始研究网络更低层更深奥的难点与协议相互了，直播这块将继续扩展与维护，可能会慢慢从大众直播转向视频会议形式吧。主要还是要看公司部门的发展方向。点播已经开始更新大版本，不期将会跟上GitHub上ijk的脚本，有时间的时候我也将会自己写出个app来练练手，毕竟太久没写app了，有点生手，大苹果是不会留下固定的程序员的，一直在更新换代，不断挖掘新鲜血液；苹果对于https的强制，预示着今年将会在协议上进行探讨，我们也会对于底层模块做下研究，目测是低层加速器这类SDK，听起来挺厉害的，5行代码接入，实现质感飞跃，嗯，一听就知道很难的，代码越少，我们就要做的越多。&lt;br>
2017将会是幸福的一年，因为我的宝宝要出世了，辛苦宝宝他妈了，起个名字很关键；孩子的出生也将会给我带来很多需要考虑的问题：房子，车子，户口，学位，奶粉，营养，环境。。。各种吧，深圳的房子大家都知道，一线城市嘛，活得辛苦，我每天130多公里来回的车程，坐到自己腰都痛，一个字，累！！！车一开始真的没那么大需求，只有到了深圳才深深感觉到没车步步难行啊，2／3公里看起来很近，可以走进来很久啊，打个车基本都是起步价以上了，所以每个月交通费还是相当高的，这样子还不如自己搞辆车来代代步，确实会生活成本提高，但是没车真的很不方便啊，在这里时间就是金钱／生命，不可随意浪费。户口这问题更麻烦了，附近都是紧张的要死要活，还是看其他吧，不想了，还是继续撸码去吧，2017要继续💪&lt;/p></description></item><item><title>Xcode8 beta1新特性</title><link>https://b9aobj.github.io/post/zh-cn/2016/2016-06-21-xcode8-beta1xin-te-xing/</link><pubDate>Tue, 21 Jun 2016 10:01:36 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2016/2016-06-21-xcode8-beta1xin-te-xing/</guid><description>
&lt;p>WWDC 2016已经结束，伴随着iOS10的发布，新的Xcode8beta1也出来了，虽然是beta，以前也被beta版本各种蹂躏，但还是需要亲自下载来体验一波的。&lt;/p>
&lt;p>###Swift 3&lt;br>
Swift 3 是第一个主要的release版本。这个release版本统一核心API命名规则,,旨在增强代码的一致性和清晰。流行的系统API，如Core Graphics和 Grand Central Dispatch 与Swfit有着更丰富的表现力和协调力。
###Interface Builder
Interface Builder 设计画布已经彻底再造工程，让你更快地工作并且提供更大的控制。在任何充满活力的苹果设备上看到一个完全实时的应用程序预览。你可以在不同的设备之间快速切换，看到不同设备中的界面显示效果。平移和缩放非常快，甚至你可以缩小故事板鸟瞰图时编辑你的界面。总体来说，Xcode8的interface builder胜过之前任何的版本，遥想当年使用sb，整台macBook卡死在那里的日子😂😂😂😂&lt;br>
&lt;img src="https://b9aobj.github.io/img/2016/06/interfacebuilder.png" alt="">
###运行时问题 Runtime Issues&lt;/p>
&lt;p>这Xcode新特性,自动识别跟踪找到漏洞并且报告问题, 有些很难跟踪的bug，直到您的应用程序到了用户手中,也可能没有被发现。&lt;/p>
&lt;p>######Thread Sanitizer spots:新的线程污点清理器，解决多线程情况下的资源竞争条件,数据的变化和其它相关线程的bug&lt;br>
######View Debugger:使用更新的带有更大的保真度和视觉精度检查UI约束问题的视图调试器&lt;br>
######Memory Debugger:可以用新的内存调试跟踪器跟踪发出的内存泄漏警报&lt;br>
&lt;img src="https://b9aobj.github.io/img/2016/06/viewmemory.png" alt="">
###签名变的简单而强大 Signing Made Easy and Powerful&lt;br>
设备设置和代码签名有了极大的简化，新的自动化代码管理系统可以帮开发者自动签署他们需要的资源，从而让代码在你苹果设备的应用程序中正确地签名、调用和执行。开发者也可以选择手动配置文件，并且设置每个构建配置的签名程序，如果遇到任何问题，报告导航器会用需要改进的错误消息和日志提醒你。当你有个多个Mac的时候,Xcode会在每个Mac中自动生成对应的开发者证书。&lt;/p>
&lt;p>在你的苹果设备上开发和运行您的应用程序和进入Xcode的偏好设置输入Apple ID一样容易。苹果开发者账号不是必需的。&lt;/p>
&lt;p>Provisioning Profile 文件选取，已经从Buiid Settings移动到了General中,Buiid Settings中已经标识了 Deprecated。
&lt;img src="https://b9aobj.github.io/img/2016/06/sign.png" alt="">&lt;/p></description></item><item><title>2016找工作实录</title><link>https://b9aobj.github.io/post/zh-cn/2016/2016-04-25-2016zhao-gong-zuo-shi-lu/</link><pubDate>Mon, 25 Apr 2016 13:15:23 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2016/2016-04-25-2016zhao-gong-zuo-shi-lu/</guid><description>
&lt;p>找工作时一件很辛苦的事，好好珍惜自己的公司，资本寒冬已到来&lt;/p></description></item><item><title>Git操作大全简洁版</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-11-11-gitcao-zuo-da-quan-jian-ji-ban/</link><pubDate>Wed, 11 Nov 2015 11:45:49 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-11-11-gitcao-zuo-da-quan-jian-ji-ban/</guid><description>
&lt;p>&lt;b> &lt;em>HEAD&lt;/em> 表示当前分支&lt;/p>
&lt;p>&lt;em>master&lt;/em>表示只想提交&lt;br>
&lt;em>Origin&lt;/em> 表示远程库 &lt;/b>&lt;/p>
&lt;h5 id="1git-init">1、&lt;code>git init&lt;/code>&lt;/h5>
&lt;p>创建git仓库&lt;/p>
&lt;h5 id="2git-add-xxxx">2、&lt;code>git add xxx.x&lt;/code>&lt;/h5>
&lt;p>把文件添加到仓库&lt;/p>
&lt;h5 id="3git-commit--m-">3、&lt;code>git commit -m “…”&lt;/code>&lt;/h5>
&lt;p>把文件提交到仓库&lt;/p>
&lt;h5 id="4git-status">4、&lt;code>git status&lt;/code>&lt;/h5>
&lt;p>查看仓库当前的状态&lt;/p>
&lt;h5 id="5git-diff">5、&lt;code>git diff&lt;/code>&lt;/h5>
&lt;p>查看difference&lt;/p>
&lt;h5 id="6git-log">6、&lt;code>git log&lt;/code>&lt;/h5>
&lt;p>显示从最近到最远的提交日志‘&lt;br>
&lt;code>git log —pretty=oneline&lt;/code>&lt;br>
省略显示&lt;/p>
&lt;h5 id="7git-reset---hard-head">7、&lt;code>git reset --hard HEAD^&lt;/code>&lt;/h5>
&lt;p>会退到上一个版本&lt;/p>
&lt;h5 id="8git-reflog">8、&lt;code>git reflog&lt;/code>&lt;/h5>
&lt;p>查看你的命令&lt;/p>
&lt;h5 id="9git的版本库里存了很多东西其中最重要的就是称为stage或者叫index的暂存区还有git为我们自动创建的第一个分支master以及指向master的一个指针叫head">9、Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。&lt;/h5>
&lt;p>&lt;img src="https://b9aobj.github.io/img/2015/10/gitTree.jpeg" alt="">&lt;br>
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：&lt;br>
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；&lt;br>
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。&lt;br>
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。&lt;/p>
&lt;h5 id="10modified-被修改">10、modified 被修改；&lt;/h5>
&lt;p>untracked：没添加过；&lt;/p>
&lt;h5 id="11第一次修改---git-add---第二次修改---git-commit">11、第一次修改 -&amp;gt; &lt;code>git add&lt;/code> -&amp;gt; 第二次修改 -&amp;gt; &lt;code>git commit&lt;/code>&lt;/h5>
&lt;p>你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。 &lt;br>
提交后，用&lt;code>git diff HEAD -- readme.txt&lt;/code>命令可以查看工作区和版本库里面最新版本的区别：&lt;br>
最终：第一次修改 -&amp;gt; &lt;code>git add&lt;/code> -&amp;gt; 第二次修改 -&amp;gt; &lt;code>git add&lt;/code> -&amp;gt; &lt;code>git commit&lt;/code>&lt;/p>
&lt;h5 id="12git-checkout----file">12、&lt;code>git checkout -- file&lt;/code>&lt;/h5>
&lt;p>撤销文件在工作区的修改，有两种情况：&lt;br>
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；&lt;br>
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。&lt;br>
总之，就是让这个文件回到最近一次git commit或git add时的状态。&lt;/p>
&lt;h5 id="13git-add到暂存区还没commit要撤销">13、&lt;code>git add&lt;/code>到暂存区还没commit,要撤销：&lt;/h5>
&lt;h5 id="14-git-reset命令既可以回退版本也可以把暂存区的修改回退到工作区暂存区干净了">14、 git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。暂存区干净了；&lt;/h5>
&lt;p>丢弃工作区的修改：&lt;code>git checkout -- xxx.x&lt;/code>&lt;br>
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。&lt;br>
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。&lt;br>
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。&lt;/p>
&lt;h5 id="15git-rm-file">15、&lt;code>git rm file&lt;/code>&lt;/h5>
&lt;p>删除文件&lt;/p>
&lt;h5 id="16git-push">16、&lt;code>git push&lt;/code>&lt;/h5>
&lt;p>把本地库的内容推送到远程&lt;br>
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。&lt;/p>
&lt;h6 id="小结">&lt;em>小结&lt;/em>&lt;/h6>
&lt;p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；&lt;br>
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；&lt;br>
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；&lt;br>
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！&lt;/p>
&lt;h5 id="17git-clone">17、&lt;code>git clone&lt;/code>&lt;/h5>
&lt;p>克隆一个本地库&lt;/p>
&lt;h5 id="18创建分支然后切换到分区">18、创建分支，然后切换到分区&lt;/h5>
&lt;p>~$ git checkout -b dev
~Switched to a new branch 'dev'&lt;/p>
&lt;p>&lt;code>git checkout&lt;/code>命令加上&lt;code>-b&lt;/code>参数表示创建并切换，相当于以下两条命令：&lt;br>
~$ git branch dev&lt;br>
~$ git checkout dev&lt;br>
~Swtiched to a new branch 'dev'&lt;/p>
&lt;h5 id="19git-branch">19、&lt;code>git branch&lt;/code>&lt;/h5>
&lt;p>查看当前分支，列出所有分支，当前分支前面带&lt;code>*&lt;/code>号&lt;/p>
&lt;h5 id="20合并分支">20、{合并}分支&lt;/h5>
&lt;p>切换回主线master&lt;br>
~$ git checkout master&lt;br>
~Switched to branch 'master'&lt;br>
合并分支&lt;br>
~$ git merge dev&lt;br>
~Updating xxxxxxxx&lt;br>
~Fast-forward&lt;br>
~ .....&lt;br>
~ 1 file changed, 1 insertion(+)&lt;br>
合并完成后，可以删除dev分支&lt;br>
~$ git branch -d dev&lt;/p>
&lt;h6 id="小结-1">&lt;em>小结&lt;/em>&lt;/h6>
&lt;p>Git鼓励大量使用分支：&lt;br>
查看分支：&lt;code>git branch&lt;/code>&lt;br>
创建分支：&lt;code>git branch &amp;lt;name&amp;gt;&lt;/code>&lt;br>
切换分支：&lt;code>git checkout &amp;lt;name&amp;gt;&lt;/code>&lt;br>
创建+切换分支：&lt;code>git checkout -b &amp;lt;name&amp;gt;&lt;/code>&lt;br>
合并某分支到当前分支：&lt;code>git merge &amp;lt;name&amp;gt;&lt;/code>&lt;br>
删除分支：&lt;code>git branch -d &amp;lt;name&amp;gt;&lt;/code>&lt;/p>
&lt;h5 id="21解决冲突">21、&lt;strong>解决冲突&lt;/strong>&lt;/h5>
&lt;p>&lt;code>git status&lt;/code>可以告诉我们冲突的文件&lt;br>
Git用*&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&lt;em>，&lt;/em>=======&lt;em>，&lt;/em>&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;*标记出不同分支的内容&lt;br>
先手动修改冲突，再提交合并。&lt;/p>
&lt;p>用带参数的&lt;strong>git log&lt;/strong>看到分支的合并情况&lt;br>
&lt;code>git log --graph --pretty=oneline --abbrev-commit&lt;/code>&lt;/p>
&lt;h5 id="22git-merge---no-ff--m-merge-with-no-ff-dev">22、&lt;code>git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; dev&lt;/code>&lt;/h5>
&lt;p>不使用&lt;strong>fast forward&lt;/strong>模式分支合并，合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。&lt;/p>
&lt;h5 id="23分支策略">23、&lt;strong>分支策略&lt;/strong>&lt;/h5>
&lt;p>在实际开发中，我们应该按照几个基本原则进行分支管理：&lt;br>
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；&lt;br>
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；&lt;br>
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。&lt;br>
所以，团队合作的分支看起来就像这样：&lt;br>
&lt;img src="https://b9aobj.github.io/img/2015/10/gitBranch.png" alt="">&lt;/p>
&lt;h5 id="24bug分支">24、Bug分支&lt;/h5>
&lt;p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。&lt;/p>
&lt;p>修复bug时，需创建分支来修复它，但现在手上的工作还没做完不可提交的状态，可以用&lt;strong>stash&lt;/strong>功能，把工作现场“储藏”起来，等以后回复现场后继续工作；&lt;br>
~$ git stash&lt;br>
~Saved working directory and index state WIP on dev: 6224937 add merge&lt;br>
~HEAD is now at 6224937 add merge&lt;/p>
&lt;p>现在切换值需要修复的分支上创建临时分支：&lt;br>
~$ git check master&lt;br>
~$ git checkout -b issue-101&lt;br>
修复提交&lt;br>
~$ git add xxx.x&lt;br>
~$ git commit -m &amp;quot;fix bug 101&amp;quot;&lt;br>
修复完成后，切换到master分支，完成合并，删除bug分支：&lt;br>
~$ git checkout master&lt;br>
~$ git merge --no-ff -m &amp;quot;merged bug fix 101&amp;quot; issue-101&lt;br>
~$ git branch -d issue-101&lt;/p>
&lt;p>返回原工作区&lt;br>
~$ git checkout dev&lt;br>
~$ git status&lt;br>
此时工作区是干净的，需要我们找回工作现场：&lt;br>
~$ git stash list&lt;br>
需要恢复一下，有两个办法：&lt;br>
一是用&lt;strong>git stash apply&lt;/strong>恢复，但是恢复后，stash内容并不删除，你需要用&lt;strong>git stash drop&lt;/strong>来删除；&lt;br>
另一种方式是用&lt;strong>git stash pop&lt;/strong>，恢复的同时把stash内容也删了;&lt;br>
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：&lt;br>
~$ git stash apply stash@{0}&lt;/p>
&lt;h5 id="25feature分支">25、Feature分支&lt;/h5>
&lt;p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。&lt;br>
开发一个新feature，最好新建一个分支；&lt;br>
如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name>强行删除。&lt;/p>
&lt;h5 id="26多人协作">26、&lt;strong>多人协作&lt;/strong>&lt;/h5>
&lt;p>要查看远程库的信息，用&lt;code>git remote&lt;/code>&lt;br>
或者用&lt;code>git remote -v&lt;/code>显示更详细的信息&lt;br>
哪些分支需要推送，哪些不需要呢？&lt;/p>
&lt;pre>&lt;code>• master分支是主分支，因此要时刻与远程同步；
• dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
• bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
• feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
&lt;/code>&lt;/pre>
&lt;p>抓取分支。&lt;/p>
&lt;p>&lt;strong>多人协作&lt;/strong>的工作模式通常是这样：&lt;/p>
&lt;pre>&lt;code>1. 首先，可以试图用git push origin branch-name推送自己的修改；
2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3. 如果合并有冲突，则解决冲突，并在本地提交；
4. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
&lt;/code>&lt;/pre>
&lt;p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。&lt;/p>
&lt;p>&lt;strong>小结&lt;/strong>&lt;br>
• 查看远程库信息，使用git remote -v；&lt;/p>
&lt;pre>&lt;code>• 本地新建的分支如果不推送到远程，对其他人就是不可见的；
• 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
• 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
• 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
• 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
&lt;/code>&lt;/pre>
&lt;h5 id="27创建标签">27、&lt;em>创建标签&lt;/em>&lt;/h5>
&lt;p>&lt;code>git tag &amp;lt;name&amp;gt;&lt;/code>&lt;br>
如果忘了打标签，可以查历史提交的commit id，&lt;br>
&lt;code>git tag &amp;lt;name&amp;gt; commit_id&lt;/code>&lt;br>
查看标签信息：&lt;br>
&lt;code>git show &amp;lt;tagName&amp;gt;&lt;/code>&lt;br>
创建带有说明的标签，用&lt;code>-a&lt;/code>指定标签名，&lt;code>-m&lt;/code>指定说明文字：&lt;br>
&lt;code>git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; 3628164&lt;/code>&lt;br>
删除标签：&lt;br>
&lt;code>git tag -d v0.1&lt;/code>&lt;br>
推送某个标签到远程，用命令&lt;code>git push origin &amp;lt;tagname&amp;gt;&lt;/code>:&lt;br>
或者一次性推送全部尚未推送的标签：&lt;code>git push origin --tags&lt;/code>&lt;/p>
&lt;p>删除远程标签：&lt;br>
先从本地删除：&lt;code>git tag -d v0.9&lt;/code>&lt;br>
再远程删除：&lt;code>git push origin :refs/tags/v0.9&lt;/code>&lt;/p>
&lt;p>&lt;strong>小结&lt;/strong>&lt;br>
• 命令git push origin &lt;tagname>可以推送一个本地标签；&lt;/p>
&lt;pre>&lt;code>• 命令git push origin --tags可以推送全部未推送过的本地标签；
• 命令git tag -d &amp;lt;tagname&amp;gt;可以删除一个本地标签；
• 命令git push origin :refs/tags/&amp;lt;tagname&amp;gt;可以删除一个远程标签。
&lt;/code>&lt;/pre></description></item><item><title>Xcode常用插件大法</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-10-30-xcodechang-yong-cha-jian-da-fa/</link><pubDate>Fri, 30 Oct 2015 10:03:35 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-10-30-xcodechang-yong-cha-jian-da-fa/</guid><description>
&lt;p>正所谓--工欲善其事，必先利其器&lt;/p>
&lt;p>目前版主使用的是Xcode7.1，基本上以下插件都安装使用过，实用性还是非常强的，这些插件可以用插件管理器&lt;strong>alcatraz&lt;/strong>来进行管理；当使用插件的时候部分没法使用的插件可以会导致整个插件库都无法使用，所以有些插件不可使用的话最好不要安装，如第一个codeSnippet插件，在版主安装之后导致全部插件无法使用，包括&lt;strong>alcatraz&lt;/strong>，具体可以检查&lt;strong>alatraz&lt;/strong>是否存在于menu-&amp;gt;Window-&amp;gt;Packge Manager这个包管理选项，如存在说明未失效，插件可用；如果消失，说明有插件无法使用导致整个插件库不可使用，需要一一排除。&lt;/p>
&lt;p>###ACCodeSnippetRepositoryPlugin
ACCodeSnippetRepositoryPlugin is a Xcode plugin for seemless synchronization of snippets with a git repository.&lt;/p>
&lt;p>The snippets are synchronized as human-readable text (and not an obscure .codesnippet plist).&lt;/p>
&lt;p>Build Status&lt;/p>
&lt;p>If you want to know more about snippets in Xcode, I recommend reading &lt;a href="http://nshipster.com/xcode-snippets/">Xcode Snippets on NSHipster&lt;/a>.&lt;/p>
&lt;p>Want to try the plugin with an existing public repository? Try &lt;a href="https://github.com/acoomans/xcode-snippets">acoomans&lt;/a> or &lt;a href="https://github.com/mattt/Xcode-Snippets.git">mattt's&lt;/a> snippets.&lt;/p>
&lt;p>注：目前作者并未做对于Xcode6.2的支持&lt;/p>
&lt;p>###AdjustFontSize
A simple plugin for Xcode to adjust font size without going into Settings → Fonts &amp;amp; Colors and changing each source type.&lt;/p>
&lt;p>Simply hit ⌘ + or ⌘ - and all fonts will be adjusted. Plugin respects different font sizes per each syntax type.&lt;/p>
&lt;p>NOTE keep in mind that it modifies the current theme file.&lt;/p>
&lt;p>###AllTargets
AllTargets is a plugin for Xcode. The plugin intends to auto select all targets when you add files to the project.&lt;/p>
&lt;p>###Auto Importer for Xcode(Xcode6.2不可使用)
Quickly import your headers on the fly without having to manually go to the top of your file and type the import statement.&lt;/p>
&lt;p>####Usage&lt;/p>
&lt;p>⌘ + ctrl + H after selecting some text (or you can have no selection at all)
If the selected text matches the name of a class/protocol or category method, it will import the header and you're done, otherwise it will show a list of filtered identifiers and headers...
start typing the keyword of your import
use ↑ or ↓ keys to navigate
press ↵ or double click to add an import
NOTE: on the list, classes are shown as [C], protocols as [P] and category methods as [ClassExtended()]&lt;/p>
&lt;p>###BBUDebuggerTuckAway
Xcode plugin for auto-hiding the debugger once you start typing in the source code editor.&lt;/p>
&lt;p>###BBUUtilitiesTuckAway
Xcode plugin for auto-hiding the utilities area once you start typing in the source code editor.&lt;/p>
&lt;p>###BlockJump&lt;br>
在方法之间跳转&lt;br>
Default Key Combination:&lt;/p>
&lt;p>CTRL + [ : jump up&lt;br>
CTRL + ] : jump down&lt;/p>
&lt;p>CocoaControlsPlugin&lt;br>
OS X native application with Xcode plugin for browsing, searching, integrating, cloning controls in &lt;a href="http://cocoacontrols.com/">http://cocoacontrols.com/&lt;/a>.&lt;/p>
&lt;p>All the commands are laid at the bottom of the menu View.&lt;/p>
&lt;p>Use the menu Cocoa Controls to open CocoaControls.app immediately.&lt;br>
Click on the left image view to open the image in a new window.&lt;br>
Click on the pod button to integrate pod.&lt;br>
Click on the computer button to clone the source.&lt;br>
Double click on the cell view to open the control in browser.&lt;/p>
&lt;p>DXXcodeConsoleUnicodePlugin&lt;br>
转换 Xcode 控制台中一些不可阅读的字符。&lt;br>
######使用方法：
两种：&lt;/p>
&lt;p>1.快捷键 option+c 会转换当前 剪贴板 中的内容并用一个对话框把转换后的内容显示出来。&lt;/p>
&lt;p>2.在 Xcode 的 Edit 菜单中勾选 ConvertUnicodeInConsole(Beta)，然后 console 中再出现 \u4e0e 时，就会自动转换成 与 显示。&lt;/p>
&lt;p>IntelliPaste-for-XCode&lt;br>
在.m文件中选中方法函数后cmd+c，在头文件使用shift+cmd+v将只复制出方法名；&lt;/p>
&lt;p>###CATweaker
A helper tool for creating beautiful CAMediaTimingFunction curve.&lt;/p>
&lt;h3 id="linkedlog-xcode-plugin">LinkedLog Xcode Plugin&lt;/h3>
&lt;p>LinkedLog is a Xcode plugin that includes a Xcode PCH file template that adds the macros LLog and LLogF. The LLog macro will work like NSLog but additionally prints the file name and line number of the call.&lt;/p>
&lt;p>LinkedLog then parses the logs and adds links to the corresponding file and line.
可直接在console上直接定位log位置，并可以直接跳转到该行代码文件；&lt;/p>
&lt;h3 id="omcolorsense">OMColorSense&lt;/h3>
&lt;p>ColorSense is an Xcode plugin that makes working with UIColor (and NSColor) more visual.
在输入颜色代码时显示具体颜色;&lt;/p>
&lt;h3 id="vvdocumenter-xcode">VVDocumenter-Xcode&lt;/h3>
&lt;p>大神的需要，///就可以给出注释格式&lt;/p>
&lt;h3 id="xbookmark">XBookmark&lt;/h3>
&lt;p>书签管理器，定位器除了断点外的好使用&lt;/p>
&lt;h3 id="xcode-delete-line">Xcode Delete Line&lt;/h3>
&lt;p>command+D 删除行，增加代码键盘手的操作性&lt;/p>
&lt;h3 id="htycopyissue">HTYCopyIssue&lt;/h3>
&lt;p>Makes Copy Xcode Issue Description Easy, Support Finding Answers in Google or StackOverflow Directly；&lt;br>
如果有些错误和waring想复制去谷歌的时候会连位置和问题都复制，操作麻烦，这个插件就可以直接复制出问题来；&lt;/p>
&lt;h3 id="fuzzyautocomplete">FuzzyAutocomplete&lt;/h3>
&lt;p>补全代码功能，例:dictionaryWithContentsOfFile:方法直接输入dictWFile即可找到&lt;/p>
&lt;h3 id="dxxcodeconsoleunicodeplugin">DXXcodeConsoleUnicodePlugin&lt;/h3>
&lt;p>将终端输出的Unicode编码转换成中文，这个很实用
统一删除插件方法&lt;/p>
&lt;pre>&lt;code> rm -r ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/AutoImporter.xcplugin/
&lt;/code>&lt;/pre>
&lt;p>以上就是我用的比较常的插件，记住，插件有时候还会导致Xcode出现卡顿或者闪退的现象，所以插件这东西有好有坏，大家慎重考虑，不强求；一下是本人使用的插件图：&lt;br>
&lt;img src="https://b9aobj.github.io/img/2015/10/XcodePlugin.png" alt="">&lt;/p></description></item><item><title>xib中的scrollview使用autolayout</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-10-27-xibzhong-de-scrollviewshi-yong-autolayout/</link><pubDate>Tue, 27 Oct 2015 13:53:52 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-10-27-xibzhong-de-scrollviewshi-yong-autolayout/</guid><description>
&lt;p>更新之后要学会autolayout。 111&lt;/p>
&lt;div data-caption="string">
&lt;div class="dropdown">
&lt;a class="dropdown-toggle" id="dLabel" role="button" data-toggle="dropdown" data-target="#" href="https://b9aobj.github.io/page.html">
Dropdown
&lt;b class="caret">&lt;/b>
&lt;/a>
&lt;ul class="dropdown-menu" role="menu" aria-labelledby="dLabel">
...
&lt;/ul>
&lt;/div></description></item><item><title>将docset转换为epub或者mobi给kindle使用</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-10-27-jiang-docsetzhuan-huan-wei-epubhuo-zhe-mobigei-kindleshi-yong/</link><pubDate>Tue, 27 Oct 2015 13:52:53 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-10-27-jiang-docsetzhuan-huan-wei-epubhuo-zhe-mobigei-kindleshi-yong/</guid><description>
&lt;p>手机看书逼格不够的，还是拿本kindle耍耍吧&lt;/p>
&lt;p>偶然间在github大洋中遨游的时候发现了有人将iOS.docset文档转换成一个个mobi文件可以供kindle使用。自己兴趣一下子提升了起来，由于该脚本原作者已将源码删除，因此找了将近一天时间终于在另一位github贡献者那里找到一份&lt;a href="https://github.com/darvin/docset2ebook">源码&lt;/a>,二话不说先&lt;a href="https://github.com/langyapojun/docset2ebook">fork&lt;/a>过来先.&lt;br>
　　
##使用方法
使用方法已经在里面有了，这里粗略讲解一下:&lt;/p>
&lt;ol>
&lt;li>先去下载&lt;strong>kindlegen&lt;/strong>;&lt;/li>
&lt;li>将&lt;strong>kindlegen&lt;/strong>的脚本路径放入$PATH中，这里我将其加入/Users/用户名/.bash_profile(注意，这是一个隐藏文件，请显示隐藏文件)中,&lt;br>
　　&lt;pre>&lt;code>export PATH=$PATH:/Users/用户名/Desktop/KindleGen_Mac_i386_v2_9&lt;/code> &lt;/pre>&lt;/li>
&lt;li>下载docset2ebook的源码，解压出来后打开fetch_and_convert.sh,可以看到：
&lt;pre>&lt;code>##!/bin/sh
&lt;/li>
&lt;/ol>
&lt;p>FORMAT=epub
OUTPUT_DIR=~/Documents/ADCBooks
COMMAND=&amp;quot;python docset2kindle.py&amp;quot;
mkdir $OUTPUT_DIR&lt;/p>
&lt;p>$COMMAND /Developer/Documentation/DocSets -o $OUTPUT_DIR/XCode -f $FORMAT
$COMMAND /Library/Developer/Shared/Documentation/DocSets/com.apple.adc.documentation.AppleSnowLeopard.CoreReference.docset -o $OUTPUT_DIR/OSX -f $FORMAT&lt;/p>
&lt;p>wget &lt;a href="http://devimages.apple.com/docsets/20110720/com.apple.adc.documentation.AppleiOS4_3.iOSLibrary.xar">http://devimages.apple.com/docsets/20110720/com.apple.adc.documentation.AppleiOS4_3.iOSLibrary.xar&lt;/a>
xar -xf com.apple.adc.documentation.AppleiOS4_3.iOSLibrary.xar
$COMMAND com.apple.adc.documentation.AppleiOS4_3.iOSLibrary.docset -o $OUTPUT_DIR/iOS -f $FORMAT&lt;/code>&lt;/pre>&lt;br>
这里可以看到这是转换epub格式的，如果你想换成mobi，只需修改&lt;strong>FORMAT=mobi&lt;/strong>,然后是找到iOS.docset的位置，在Mac OS 10.11当中，iOS.docset位置已不是这个位置，在这里我只需要iOS的文档，所以Mac OS的文档转换我全部注释了：&lt;br>
&lt;pre>&lt;code>##!/bin/sh
FORMAT=mobi
OUTPUT_DIR=~/Documents/ADCBooks
COMMAND=&amp;quot;python docset2kindle.py&amp;quot;
mkdir $OUTPUT_DIR&lt;/p>
&lt;p>$COMMAND /Users/Sidney/Library/Developer/Shared/Documentation/DocSets/ -o $OUTPUT_DIR/XCode -f $FORMAT&lt;/code>&lt;/pre>
4.打开终端，运行sh脚本,静待佳音。&lt;br>
&lt;img src="https://b9aobj.github.io/img/2015/10/terminal.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/img/2015/10/directory.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/img/2015/10/kindle.png" alt="">&lt;/p></description></item><item><title>Xcode Instruments测试部分错误指正</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-07-13-xcode-instrumentsce-shi-bu-fen-cuo-wu-zhi-zheng/</link><pubDate>Mon, 13 Jul 2015 09:42:46 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-07-13-xcode-instrumentsce-shi-bu-fen-cuo-wu-zhi-zheng/</guid><description>
&lt;p>###Automation Error： ScriptAgent signaled.
当自动script数值不能在真机跑并出现以上错误的时候，&lt;/p>
&lt;p>我们需要在真机&lt;code>设置&lt;/code>-&lt;code>开发者&lt;/code>-&lt;code>Enable UI Automation&lt;/code>打开即可。并且你还需要打开&lt;code>logging&lt;/code>-&lt;code>start recording&lt;/code>选项。&lt;/p>
&lt;p>###Script threw an uncaught JavaScript error: target.frontMostApp().alert().buttons()[&amp;quot;取消&amp;quot;] could not be tapped&lt;/p></description></item><item><title>Swift 2 Playground注释使用markdown</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-06-30-swift-2-playgroundzhu-shi-shi-yong-markdown/</link><pubDate>Tue, 30 Jun 2015 11:40:29 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-06-30-swift-2-playgroundzhu-shi-shi-yong-markdown/</guid><description>
&lt;p>　　在Xcode 7和Swift 2 playground当中引用了markdown语法来写注释。&lt;/p>
&lt;p>标准代码注释可以是单行注释、多行注释：&lt;br>
&lt;code>//A Single line comment&lt;/code>&lt;br>
&lt;code>/*&lt;/code>&lt;br>
&lt;code>A block comment&lt;/code>&lt;br>
&lt;code>over two lines&lt;/code>&lt;br>
&lt;code>*/&lt;/code>&lt;/p>
&lt;p>　　而现在Xcode 7我们可以丰富我们的注释文本了，只需在后面添加一个&lt;code>:&lt;/code>即可：&lt;br>
&lt;code>//: _Rich text_ single line *comment* thanks to __markdown__&lt;/code>&lt;br>
&lt;img src="https://b9aobj.github.io/img/2015/06/playground/playground1.png" alt="">&lt;br>
　　可能你加上去之后没有系那是出效果，如果要看文本效果的话，可以在菜单中选择&lt;code>Editor&lt;/code>--&lt;code>Show Rendered Markup&lt;/code>，然后就可以看到效果了。&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/img/2015/06/playground/playground2.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/img/2015/06/playground/playground3.png" alt="">&lt;/p></description></item><item><title>Xcode_7_beta模拟器iOS9无法连接网络</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-06-25-guan-yu-xcode-7-betazhong-iphonemo-ni-qi-ios9wu-fa-lian-jie-wang-luo-de-wen-ti-jie-jue-fang-fa/</link><pubDate>Thu, 25 Jun 2015 10:38:33 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-06-25-guan-yu-xcode-7-betazhong-iphonemo-ni-qi-ios9wu-fa-lian-jie-wang-luo-de-wen-ti-jie-jue-fang-fa/</guid><description>
&lt;p>he resource could not be loaded because the App Transport Security policy requires the use of a secure connection.&lt;/p>
&lt;p>  在iOS9的iPhone模拟器中来调试的时候出现“&lt;code>The resource could not be loaded because the App Transport Security policy requires the use of a secure connection.&lt;/code>”
  一开始以为是Xcode的beta版本的问题，后来发现不对，肯定是自己配置的问题，goggle一番后在github找到一篇番文，从而尝试之，奇效显著。&lt;a href="https://github.com/meteor/meteor/issues/4560">原文&lt;/a>&lt;br>
  解决方法：在App中的&lt;code>info.plist&lt;/code>中添加&lt;code>NSAppTransportSecurity&lt;/code>(Dictionary)，在其中添加一个key,&lt;code>NSAllowsArbitraryLoads&lt;/code>(Boolean)并设置为&lt;code>YES&lt;/code>.&lt;br>
希望可以帮助到大家。&lt;/p></description></item><item><title>octopress使用技巧</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-06-15-octopressshi-yong-ji-qiao/</link><pubDate>Mon, 15 Jun 2015 16:18:57 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-06-15-octopressshi-yong-ji-qiao/</guid><description>
&lt;p>为自己的博客网站添加想要的功能和样式&lt;/p>
&lt;p>&lt;a href="http://youess.github.io/blog/octopress-blog-records.html">http://youess.github.io/blog/octopress-blog-records.html&lt;/a>
##octopress基本操作&lt;/p>
&lt;ul>
&lt;li>新建博客文章，&lt;code>rake new_post['blog_name']&lt;/code>&lt;/li>
&lt;li>产生HTML文件， &lt;code>rake generate&lt;/code>&lt;/li>
&lt;li>预览博客效果， &lt;code>rake preview&lt;/code>&lt;/li>
&lt;li>推送内容到github， &lt;code>rake deploy&lt;/code> 或者 &lt;code>rake gen_deploy&lt;/code>&lt;/li>
&lt;li>保存到github项目中&lt;br>
&lt;code>git add .&lt;/code>&lt;br>
&lt;code>git commit -m &amp;quot;modified note&amp;quot;&lt;/code>&lt;br>
&lt;code>git push [for first time](origin source)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>##一些配置
###更换主题
git clone &lt;a href="https://github.com/jeremyrea/slimpress">https://github.com/jeremyrea/slimpress&lt;/a> .theme/slimpress&lt;br>
rake install['slimpress']&lt;/p>
&lt;p>###修改&lt;code>_config.yml&lt;/code>
*日期格式： &lt;code>date-formate: %Y年-%m月-%d日&lt;/code>&lt;br>
*分类前缀显示为中文：&lt;code>category_title_prefix: &amp;quot;分类&amp;quot;&lt;/code>
*继续阅读/阅读全文：&lt;code>excerpt_link: &amp;quot;阅读全文 &amp;amp;arr;&amp;quot;&lt;/code>&lt;/p></description></item><item><title>使用MWPhotoBrowser时出现的一些坑</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-03-17-shi-yong-mwphotobrowsershi-chu-xian-de--xie-keng/</link><pubDate>Tue, 17 Mar 2015 09:40:11 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-03-17-shi-yong-mwphotobrowsershi-chu-xian-de--xie-keng/</guid><description>
&lt;p>在使用MWPhotoBrowser时，公司项目需求要将这类型的图片浏览由横向拖动改为竖向拖动，我了个去，被玩坏了。。。。&lt;/p>
&lt;p>先说些错误吧，其实都是自己的问题，在没有搞清楚该项目架构的时候就在那里胡乱修改，导致后面直接重置后再修改，那工作量，不说了，都是自己惹的&lt;/p>
&lt;p>###改动1
   因为由横向改为竖向，即可以在MWPhotoBrowser.m文件中进行修改即可（至于这个开源代码怎么使用，就请自行查看作者的描述吧），主要是Frame Calculations这个代码块当中，具体的话是修改:&lt;/p></description></item><item><title>iOS面试题目</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-02-04-da-jian-ge-zi-ji-de-octopress/</link><pubDate>Tue, 03 Mar 2015 22:35:24 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-02-04-da-jian-ge-zi-ji-de-octopress/</guid><description>
&lt;p>面试的一些经典问题，基础内容，看自己学了多少忘记了多少&lt;/p>
&lt;p>###1.#import和#include的区别，@class的作用是什么？&lt;br>
#import与#include在引用一个类的时候会包含这个类的所有信息包括变量方法等，但是这样做会对编译效率造成影响。比如由100个类都#import了ClassA，那么在编译的时候这100个类都会对ClassA处理，又比如A被B引用，B被C引用，C被D引用...此时如果A被修改，那么后面的B，C，D。。。都需要重新进行编译。还有一个用法会引起编译错误的就是在ClassA中#import ClassB在ClassB中#import ClassA那么在编译的时候也会出现未知错误。 &lt;br>
所以一般来说，在interface中引用一个类，就用@class，它会把这个类作为一个类型来使用，而在实现这个interface的文件中，如果需要引用这个类的实体变量或者方法之类的，还是需要import这个在@class中声明的类。
#import比起#include的好处就是不会引起重复包含。
###2.方法前加号和减号的区别&lt;br>
加号：类方法&lt;br>
减号：实例方法&lt;/p>
&lt;p>###3.MVC是什么？有什么特性？ 
MVC是一种设计模式，由模型、视图、控制器3部分组成。&lt;br>
模型：保存应用程序数据的类，处理业务逻辑的类&lt;br>
视图：窗口，控件和其他用户能看到的并且能交互的元素&lt;br>
控制器：将模型和试图绑定在一起，确定如何处理用户输入的类&lt;/p>
&lt;p>###4.obj-c有多重继承么?不是的话有什么替代方法?
oc不支持多重继承，用protocol委托代理来替代&lt;/p>
&lt;p>###5.NSNotification和KVO的区别和用法是什么？什么时候应该使用通知，什么时候应该使用KVO，它们的实现上有什么区别吗？如果用protocol和delegate（或者delegate的Array）来实现类似的功能可能吗？如果可能，会有什么潜在的问题？如果不能，为什么？&lt;/p>
&lt;pre>&lt;code>KVO只能监测属性的变化，通过NSString类型的属性名来实现。但是实现了自动监测，当属性值变化时，会自动通知观察者，不用再添加代码了。 NSNotification比较灵活，可以监测的内容较多，但是需要被观察者手动发送通知，观察者才能响频。 protocol通过添加一个NSArray也能实现类似的功能，但是实现上需要自己处理delegate的添加与删除，自己在属性变化时手动通知，较繁琐，易出错。
&lt;/code>&lt;/pre>
&lt;p>###6.您是否做过异步的网络处理和通讯方面的工作？如果有，能具体介绍一些实现策略么？&lt;/p>
&lt;pre>&lt;code>做过。 通过注册代码或者block的方式，实现回调。在网络处理方面，统一处理出错的情况，没出错的情况下，将数据分别发送给接收者。
&lt;/code>&lt;/pre>
&lt;p>###7.你实现过一个框架或者库以供别人使用么？如果有，请谈一谈构建框架或者库时候的经验；如果没有，请设想和设计框架的public的API，并指出大概需要如何做、需要注意一些什么方面，来使别人容易地使用你的框架。&lt;/p>
&lt;pre>&lt;code>曾经移植过一个框架，把C++的一套类库移植到OC上面，主要工作就是做一个oc++的接口层。做的过程中，遇到的问题就是在原来框架中，很多头文件中用结构体或者类的地方，没有用指针，导致不能用声明的方式来使用类和结构体，必须在头文件中把其它头文件导入，这样导致整个接口需要提供的头文件太多了。 还封装过供他人调用的接口。建议就是调用方法尽可能简单，做好传入参数的安全检查及错误提醒。因为你无法确定你的调用者给你传什么样的数据进来。如果实现方法中耗时较长，需要用异步的方式进行结果返回，可以选用delegate或者block的方式。
参见唐巧的[http://blog.devtang.com/blog/2015/01/31/write-sdk-tips/](博客)
&lt;/code>&lt;/pre>
&lt;p>###8.NSOperation vs Grand Central Dispatch
GCD is a low-level C-based API that enables very simple use of a task-based concurrency model. NSOperation and NSOperationQueue are Objective-C classes that do a similar thing. NSOperation was introduced first, but as of 10.6 and iOS 4, NSOperationQueue and friends are internally implemented using GCD.&lt;/p>
&lt;pre>&lt;code> In general, you should use the highest level of abstraction that suits your needs. This means that you should usually use NSOperationQueue instead of GCD, unless you need to do something that NSOperationQueue doesn't support.
Note that NSOperationQueue isn't a &amp;quot;dumbed-down&amp;quot; version of GCD; in fact, there are many things that you can do very simply with NSOperationQueue that take a lot of work with pure GCD. (Examples: bandwidth-constrained queues that only run N operations at a time; establishing dependencies between operations. Both very simple with NSOperation, very difficult with GCD.) Apple's done the hard work of leveraging GCD to create a very nice object-friendly API with NSOperation. Take advantage of their work unless you have a reason not to.
Caveat: On the other hand, if you really just need to send off a block, and don't need any of the additional functionality that NSOperationQueue provides, there's nothing wrong with using GCD. Just be sure it's the right tool for the job.
&lt;/code>&lt;/pre>
&lt;p>###9.static的作用&lt;br>
作用范围为该函数体，不同于auto变量。
1）该变量的内存只被分配一次，因此其值在下次调用时扔维持上次的值；
2）在模块内的static全局变量尅被模块内所用函数访问，但不能被模块外其他函数访问；
3）在模块内的static函数只可被这一模块内的其他函数调用，这个函数的使用范围被限制在它的模块内；
4）在类中的static成员变量属于整个类所拥有，对类的所有对象只有一份拷贝；
5）在类中的static成员函数属于整个类所拥有，这个函数不接收this指针，因而只能访问类的static成员变量。&lt;/p>
&lt;p>###10.const的作用
const意味着“只读”，例子：
const int a;
int const a;
const int *a;
int * const a;
int const *a const;
前两个作用一样，a是一个长整数型，第三个意味着a是一个指向常整数型的指针；第四个a是一个指向整数型的常指针；第五个a是一个指向常整数型的常指针；
欲阻止一个变量被改变，可以使用 const 关键字。
（1）在定义该 const 变量时，通常需要对它进行初始化，因为以后就没有机会再去改变它了；
（2）对指针来说，可以指定指针本身为 const，也可以指定指针所指的数据为 const，或二者同时指
定为 const；
（3）在一个函数声明中，const 可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值；
（4）对于类的成员函数，若指定其为 const 类型，则表明其是一个常函数，不能修改类的成员变量；
（5）对于类的成员函数，有时候必须指定其返回值为 const 类型，以使得其返回值不为“左值”。&lt;/p></description></item><item><title>用UIWebView来load图片很慢的方法</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-01-20-yong-uiwebviewlai-loadtu-pian-hen-man-de-fang-fa/</link><pubDate>Tue, 20 Jan 2015 00:48:29 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-01-20-yong-uiwebviewlai-loadtu-pian-hen-man-de-fang-fa/</guid><description>
&lt;p>load的慢不是错，不去解决才是错&lt;/p>
&lt;p>&lt;a href="http://stackoverflow.com/questions/13564908/why-uiwebview-work-so-slowly-when-loadhtmlstring-with-uiwebview">&lt;a href="http://stackoverflow.com/questions/13564908/why-uiwebview-work-so-slowly-when-loadhtmlstring-with-uiwebview">http://stackoverflow.com/questions/13564908/why-uiwebview-work-so-slowly-when-loadhtmlstring-with-uiwebview&lt;/a>&lt;/a>&lt;br>&lt;/p></description></item><item><title>给自己的2015来份计划表</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-01-06-gei-zi-ji-de-2015lai-fen-ji-hua-biao/</link><pubDate>Tue, 06 Jan 2015 09:11:21 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-01-06-gei-zi-ji-de-2015lai-fen-ji-hua-biao/</guid><description>
&lt;p>制定新年计划是我们程序猿必须get的技能之一，我们总是会在年底的时候对新的一年有一个很好的计划，但后来就把它们都抛到脑后了，直到最后全部忘记。&lt;/p>
&lt;p>也许，我们的计划总是过于宏伟，很多事情都是做不到的，甚至显得遥不可及。但是，每年都有所不同，所以计划还是要做的。到了年尾就可以进行对比看自己是否努力去实现了。&lt;/p>
&lt;ol>
&lt;li>学习一门新的不同风格的编程语言&lt;/li>
&lt;/ol>
&lt;p>这是很需要的一件事，因为如果我们只了解一种语言，它就会局限你解决问题的能力和你的职业发展。所以在新的一年，你应该花些时间学习一门新的语言，体验不同的编程风格，并学以致用。所以，要学会一门脚本语言PHP或者Python吧。&lt;/p>
&lt;ol start="2">
&lt;li>提高你的已有技能&lt;/li>
&lt;/ol>
&lt;p>跟随各大神的脚步，多去github，code4app,cocoacontrol,cocoaChina等开源社区逛逛，要深入了解那些优秀源代码，去读去理解，不要只知道拿来项目引用，强化自己的技术，加深对知识的理解。如果可以的话，可以到当地的大学听课学习。&lt;/p>
&lt;ol start="3">
&lt;li>活动你的手指，但不是在键盘上&lt;/li>
&lt;/ol>
&lt;p>从你的书架上拿起“刺客信条”或其它游戏，用手柄和方向盘操纵游戏，活动你的关节和手指，当然还可以减压。哟哟，还有就是运动了，不要忘记自己要多运动，时间是抽出来的，没事多出去骑骑车，打打球，不要老宅在家了。&lt;/p>
&lt;ol start="4">
&lt;li>按时交付每一个项目&lt;/li>
&lt;/ol>
&lt;p>当然，这一点你不能完全控制，但是你要确保你的文档按时交付，不拖累整个项目的进展。保证项目进度，不能干事的员工只会慢慢疏远公司体制和亲和力。&lt;/p>
&lt;ol start="5">
&lt;li>更多的时间远离计算机&lt;/li>
&lt;/ol>
&lt;p>让自己有更多的时间在做饭、骑车、旅行或者学习艺术，总之多做一些不需要总盯着电脑屏幕的事情，到户外闻一闻花香，感受一下自然气息。&lt;/p>
&lt;ol start="6">
&lt;li>关注更多信息&lt;/li>
&lt;/ol>
&lt;p>多参加各种技术沙龙，与其他人多交流交流经验，因为这会让我自己会去学习哪方面的知识，因为不懂交流不了啊，哈哈。然后多去走走那些博览会，活动场之类的，多看看时间的乐趣与趣味以及发展。&lt;/p></description></item><item><title>解决Octopress访问慢和一些设置问题</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-01-04-jie-jue-octopressfang-wen-man-he--xie-she-zhi-wen-ti/</link><pubDate>Sun, 04 Jan 2015 13:55:57 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-01-04-jie-jue-octopressfang-wen-man-he--xie-she-zhi-wen-ti/</guid><description>
&lt;p>When我刚搭建好Octopress的时候，O(∩_∩)O~心情挺好的，感觉棒棒哒。&lt;/p>
&lt;p>And我点击Command+R刷新页面的时候，尼玛我脸都绿了。。。。由于GFW的原因，造成页面load很慢,从Console窗口可以看出主要就是Google的各种服务被墙了。。。&lt;p>&lt;/p>
&lt;p>&lt;b1>What the hell!&lt;/b1>&lt;/p>
&lt;p>====================================================================
好吧，结素，开始正题！&lt;/p>
内容来自各大大的blog，由&lt;a href="http://beyondvincent.com/blog/2013/07/27/107-hello-page-of-github/">&lt;code>破船之家&lt;/code>&lt;/a>，&lt;a href="http://droidyue.com/blog/2014/06/22/fix-octopress-slow-loading-speed-issue-in-china-mainland/">&lt;code>技术小黑屋&lt;/code>&lt;/a>&lt;/p>&lt;/p>
&lt;h2>1、初级问题&lt;/h2>
首先打开：&lt;code>_config.yml&lt;/code>&lt;/p>
我一狠心将Github，Twitter,Google +1, Google Plus, Pinboard, Delicious, Disqus, Google analytics, Facebook一律封杀了......艾玛，好残忍⇀ ⇀ &lt;/p>
全部前面加#注释了&lt;/p>
&lt;h2>2、关键问题&lt;/h2>
Octopress很多依赖于Google的库和资源，So,google拜拜~~~~(>_&lt;)~~~~ &lt;/p>
&lt;p>对于使用Google Analytics来说，加在ga.js这个文件简直是要命的慢，这里我使用自己存放在七牛CDN上的js.&lt;a href="http://droidyue-tools.qiniudn.com/ga.js">&lt;a href="http://droidyue-tools.qiniudn.com/ga.js">http://droidyue-tools.qiniudn.com/ga.js&lt;/a>&lt;/a> 已验证，完全可以正常收集数据。
参考如下，修改&lt;code>source/_includes/google_analytics.html&lt;/code>&lt;/p>&lt;/p>
&lt;figure class='code'>&lt;figcaption>&lt;span>&lt;/span>&lt;/figcaption>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;span class='line-number'>6&lt;/span>
&lt;span class='line-number'>7&lt;/span>
&lt;span class='line-number'>8&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class='html'>&lt;span class='line'> __gaq.push([&amp;#39;_trackPageview&amp;#39;]);
&lt;/span>&lt;span class='line'>
&lt;/span>&lt;span class='line'> (function() {
&lt;/span>&lt;span class='line'> var ga = document.createElement(&amp;#39;script&amp;#39;); ga.type = &amp;#39;text/javascript&amp;#39;; ga.async = true;
&lt;/span>&lt;span class='line'> ga.src=&amp;#39;http://droidyue-tools.qiniudn.com/ga.js&amp;#39;;
&lt;/span>&lt;span class='line'> var s = document.getElementsByTagName(&amp;#39;script&amp;#39;)[0]; s.parentNode.insertBefore(ga, s);
&lt;/span>&lt;span class='line'> })();
&lt;/span>&lt;span class='line'> &lt;span class="nt">&amp;lt;/script&amp;gt;&lt;/span>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;h3>解决fonts.googleapis.com蜗牛慢&lt;/h3>
&lt;p>这里我们使用数字公司提供的Google Fonts大陆解决方案，使用&lt;code>fonts.useso.com&lt;/code>替换&lt;code>fonts.googleapis.com&lt;/code>。&lt;br/>
修改文件&lt;code>/source/_includes/custom/head.html&lt;/code>&lt;/p>
&lt;figure class='code'>&lt;figcaption>&lt;span>&lt;/span>&lt;/figcaption>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class='html'>&lt;span class='line'> &lt;span class="c">&amp;lt;!--Fonts from Google&amp;quot;s Web font directory at http://google.com/webfonts --&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'>&lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">href=&lt;/span>&lt;span class="s">&amp;quot;http://fonts.useso.com/css?family=PT+Serif:regular,italic,bold,bolditalic&amp;quot;&lt;/span> &lt;span class="na">rel=&lt;/span>&lt;span class="s">&amp;quot;stylesheet&amp;quot;&lt;/span> &lt;span class="na">type=&lt;/span>&lt;span class="s">&amp;quot;text/css&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'>&lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">href=&lt;/span>&lt;span class="s">&amp;quot;http://fonts.useso.com/css?family=PT+Sans:regular,italic,bold,bolditalic&amp;quot;&lt;/span> &lt;span class="na">rel=&lt;/span>&lt;span class="s">&amp;quot;stylesheet&amp;quot;&lt;/span> &lt;span class="na">type=&lt;/span>&lt;span class="s">&amp;quot;text/css&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;h3>解决ajax.googleapis.com慢的问题&lt;/h3>
&lt;p>修改&lt;code>source/_includes/head.html&lt;/code>&lt;/p>
&lt;figure class='code'>&lt;figcaption>&lt;span>&lt;/span>&lt;/figcaption>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;span class='line-number'>6&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class='html'>&lt;span class='line'> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">href=&lt;/span>&lt;span class="s">&amp;quot;/stylesheets/screen.css&amp;quot;&lt;/span> &lt;span class="na">media=&lt;/span>&lt;span class="s">&amp;quot;screen, projection&amp;quot;&lt;/span> &lt;span class="na">rel=&lt;/span>&lt;span class="s">&amp;quot;stylesheet&amp;quot;&lt;/span> &lt;span class="na">type=&lt;/span>&lt;span class="s">&amp;quot;text/css&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'> &lt;span class="nt">&amp;lt;link&lt;/span> &lt;span class="na">href=&lt;/span>&lt;span class="s">&amp;quot;/atom.xml&amp;quot;&lt;/span> &lt;span class="na">rel=&lt;/span>&lt;span class="s">&amp;quot;alternate&amp;quot;&lt;/span> &lt;span class="na">title=&lt;/span>&lt;span class="s">&amp;quot;技术小黑屋&amp;quot;&lt;/span> &lt;span class="na">type=&lt;/span>&lt;span class="s">&amp;quot;application/atom+xml&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'> &lt;span class="nt">&amp;lt;script &lt;/span>&lt;span class="na">src=&lt;/span>&lt;span class="s">&amp;quot;/javascripts/modernizr-2.0.js&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/script&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'> &lt;span class="nt">&amp;lt;script &lt;/span>&lt;span class="na">src=&lt;/span>&lt;span class="s">&amp;quot;//ajax.useso.com/ajax/libs/jquery/1.9.1/jquery.min.js&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/script&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'> &lt;span class="nt">&amp;lt;script&amp;gt;&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">jQuery&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">write&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">unescape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;%3Cscript src=&amp;quot;./javascripts/lib/jquery.min.js&amp;quot;%3E%3C/script%3E&amp;#39;&lt;/span>&lt;span class="p">))&lt;/span>&lt;span class="nt">&amp;lt;/script&amp;gt;&lt;/span>
&lt;/span>&lt;span class='line'> &lt;span class="nt">&amp;lt;script &lt;/span>&lt;span class="na">src=&lt;/span>&lt;span class="s">&amp;quot;/javascripts/octopress.js&amp;quot;&lt;/span> &lt;span class="na">type=&lt;/span>&lt;span class="s">&amp;quot;text/javascript&amp;quot;&lt;/span>&lt;span class="nt">&amp;gt;&amp;lt;/script&amp;gt;&lt;/span>
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;/p>
&lt;p>好了，到此的话就可以了，基本上访问慢得问题解决了，现在我们来添加评论功能，评论我们用&amp;lt; a href=&amp;quot;http://duoshuo.com/&amp;quot;&amp;gt;&lt;code>多说&lt;/code>&lt;/a>&lt;/p>&lt;/p>
&lt;h2>添加评论&lt;/h2>
&lt;h4>进入多说官网，注册账号&lt;/h4>
&lt;h4>在_config.yml文件添加&lt;/h4>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'># duoshuo comments
&lt;/span>&lt;span class='line'>duoshuo_comments: true
&lt;/span>&lt;span class='line'>duoshuo_short_name: yourname&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;h4>在&lt;code>source/_layouts/post.html&lt;/code>中添加多说评论模块&lt;/h4>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;span class='line-number'>6&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>｛% if site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %｝
&lt;/span>&lt;span class='line'> &amp;lt;section&amp;gt;
&lt;/span>&lt;span class='line'> &amp;lt;h1&amp;gt;Comments&amp;lt;/h1&amp;gt;
&lt;/span>&lt;span class='line'> &amp;lt;div id="comments" aria-live="polite"&amp;gt;｛% include post/duoshuo1.html %｝&amp;lt;/div&amp;gt;
&lt;/span>&lt;span class='line'> &amp;lt;/section&amp;gt;
&lt;/span>&lt;span class='line'>｛% endif %｝&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;h4>创建&lt;code>source/_includes/post/duoshuo.html&lt;/code>，并填入如下内容&lt;/h4>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">
&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;span class='line-number'>6&lt;/span>
&lt;span class='line-number'>7&lt;/span>
&lt;span class='line-number'>8&lt;/span>
&lt;span class='line-number'>9&lt;/span>
&lt;span class='line-number'>10&lt;/span>
&lt;span class='line-number'>11&lt;/span>
&lt;span class='line-number'>12&lt;/span>
&lt;span class='line-number'>13&lt;/span>
&lt;span class='line-number'>14&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>
&lt;span class='line'>&amp;lt;!-- Duoshuo Comment BEGIN --&amp;gt;
&lt;/span>&lt;span class='line'>&amp;lt;div class="ds-thread"&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span>&lt;span class='line'>&amp;lt;script type="text/javascript"&amp;gt;
&lt;/span>&lt;span class='line'> var duoshuoQuery = {short_name:"beyondvincent"};
&lt;/span>&lt;span class='line'> (function() {
&lt;/span>&lt;span class='line'> var ds = document.createElement('script');
&lt;/span>&lt;span class='line'> ds.type = 'text/javascript';ds.async = true;
&lt;/span>&lt;span class='line'> ds.src = 'http://static.duoshuo.com/embed.js';
&lt;/span>&lt;span class='line'> ds.charset = 'UTF-8';
&lt;/span>&lt;span class='line'> (document.getElementsByTagName('head')[0]
&lt;/span>&lt;span class='line'> || document.getElementsByTagName('body')[0]).appendChild(ds);
&lt;/span>&lt;span class='line'> })();
&lt;/span>&lt;span class='line'>&amp;lt;/script&amp;gt;
&lt;/span>&lt;span class='line'>&amp;lt;!-- Duoshuo Comment END --&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;h4>发布到站点&lt;/h4>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">
&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>
&lt;span class='line'>$ rake generate
&lt;/span>&lt;span class='line'>$ git add .
&lt;/span>&lt;span class='line'>$ git commit -am "添加多说评论"
&lt;/span>&lt;span class='line'>$ git push origin source
&lt;/span>&lt;span class='line'>$ rake deploy&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;h3>百度统计&lt;/h3>
从百度统计获取脚本，然后添加到文件source/_includes/after_footer.html文件</description></item><item><title>使用octopress搭建github博客</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-01-04-shi-yong-octopressda-jian-githubbo-ke/</link><pubDate>Sun, 04 Jan 2015 11:05:25 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-01-04-shi-yong-octopressda-jian-githubbo-ke/</guid><description>
&lt;p>&lt;a href="http://octopress.org/">&lt;code>Octopress&lt;/code>&lt;/a>是利用&lt;a href="http://github.com/mojombo/jekyll">&lt;code>Jekyll&lt;/code>&lt;/a>博客引擎开发的一个博客系统，生成的静态页面能够很好的在github page上展现。
&lt;p>号称是hacker专属的一个博客系统(&lt;code>A blogging framework for hackers.&lt;/code>)&lt;/p>&lt;/p>
&lt;p>本文只讲自己在苹果电脑(OS X 10.10)利用Octopress搭建一个Github博客,内容参照&lt;code>&lt;a href ="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船之家&lt;/a>，&lt;a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">唐巧_boy&lt;/a>&lt;/code>&lt;/p>
&lt;h3>目录&lt;/h3>
&lt;ul>
&lt;li>1、安装Ruby&lt;/li>
&lt;li>2、安装Octopress&lt;/li>
&lt;li>3、配置Octopress&lt;/li>
&lt;li>4、将博客部署到GitHub上&lt;/li>
&lt;li>5、开始写博客&lt;/li>
&lt;li>6、更多操作&lt;/li>
&lt;li>7、小结&lt;/li>
&lt;/ul>
&lt;h3>1、安装Ruby&lt;/h3>
&lt;p>Octopress需要Ruby环境，RVM(Ruby Version Manager)负责安装和管理Ruby的环境。所以我们先在终端输入如下命令，来安装RVM：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>curl -L https://get.rvm.io | bash -s stable --ruby&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>接着是安装Ruby 1.9.3，在终端依次运行如下命令：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>rvm install 1.9.3
&lt;/span>&lt;span class='line'>rvm use 1.9.3
&lt;/span>&lt;span class='line'>rvm rubygems latest&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>完成上面的操作之后，运行&lt;code>ruby --version&lt;/code>应该可以看到ruby 1.9.3环境已经安装好了。🐷：波煮在这里说句，这个ruby version着实让我心塞，搞了好久好久，以至于后来放弃搭建，到现在闲暇之余才努力研究将其解决，具体问题具体谷歌( ⊙ o ⊙ )啊！&lt;/p>
&lt;p>参考：&lt;a href="http://octopress.org/docs/setup/rvm/">Installing Ruby With RVM&lt;/a>&lt;/p>
&lt;h3>2、安装Octopress&lt;/h3>
&lt;p>在安装Octopress之前，请确保你的电脑上已经安装有git了，在终端输入&lt;code>git --version&lt;/code>.
&lt;p>git安装之后，利用git命令将octopress从github上clone到本机，如下命令：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>git clone git://github.com/imathis/octopress.git octopress
&lt;/span>&lt;span class='line'>cd octopress # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
&lt;/span>&lt;span class='line'>ruby --version # Should report Ruby 1.9.3&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>接着安装相关依赖项：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>gem install bundler
&lt;/span>&lt;span class='line'>rbenv rehash # If you use rbenv, rehash to be able to run the bundle command
&lt;/span>&lt;span class='line'>bundle install&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>最后安装默认的Octopress 主题。&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>rake install&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>参考： &lt;a href="http://octopress.org/docs/setup/">Octopress Setup&lt;/a>&lt;/p>
&lt;h3>3、配置Octopress&lt;/h3>
&lt;p>配置&lt;code>_config.yml&lt;/code>和&lt;code>Rakefile&lt;/code>文件。&lt;/p>
其中Rakefile是跟博客部署相关，一般情况下并不需要修改这个文件，除非使用了rsync。&lt;/p>
&lt;p>&lt;em>config.yml是博客重要的一个配置文件，在&lt;/em>config.yml文件中有三大配置项：&lt;code>Main Configs&lt;/code>、&lt;code>Jekyll &amp;amp; Plugins&lt;/code>和&lt;code>3rd Party Settings&lt;/code>。&lt;/p>
&lt;p>一般，该文件中其中&lt;code>url&lt;/code>是必须要填写的，这里的url是在github上创建的一个仓库地址，具体请看第四步中创建的地址。另外再修改一下&lt;code>title&lt;/code>、&lt;code>subtitle&lt;/code>和&lt;code>author&lt;/code>，根据需求，在开启一些第三方组件服务。&lt;/p>
&lt;p>&lt;b>&lt;code>再注：&lt;/code>波煮将在下篇文章中说明一些搭建之后在拥有全球超级局域网的天朝的一些令人心塞令人烦闷的墙内话&lt;/b>&lt;/p>&lt;/p>
&lt;p>关于_config.yml文件中的更多内容，请看这里的内容：&lt;a href="http://octopress.org/docs/configuring/">Configuring Octopress&lt;/a>&lt;/p>
&lt;h3>4、将博客部署到GitHub上&lt;/h3>
&lt;p>Github的&lt;a href="http://pages.github.com/">&lt;code>Page service&lt;/code>&lt;/a>可以免费托管博客，并且还可以自定义域名。&lt;/p>
&lt;p>首先需要在GitHub上&lt;a href="https://github.com/new">&lt;code>创建一个仓库&lt;/code>&lt;/a>，并将仓库名称按照这样的方式进行命名：&lt;code>username.github.com&lt;/code>或&lt;code>organization.github.com&lt;/code>。等后面配置完毕之后，我们就可以在浏览器中使用页面地址&lt;code>http://username.github.com&lt;/code>来访问我们的博客。一般来说，我们希望在将博客的源码放到source分支下，并把生成的内容提交到master分支。&lt;/p>
&lt;p>创建好仓库之后，我们需要利用octopress的一个&lt;code>配置rake任务&lt;/code>来自动配置上面创建的仓库：可以让我们方便的部署GitHub page。在终端输入如下命令：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>$ rake setup_github_pages&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>上面的命令会做一些事情(详细介绍看下面给出的参考链接)。其中最主要的就是创建一个&lt;code>_deploy&lt;/code>目录，目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。&lt;/p>
&lt;p>完成上面的命令之后，我们就可以生成博客并真正的部署到仓库中了。执行如下命令：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>rake generate
&lt;/span>&lt;span class='line'>rake deploy&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>上面的命令首先生成博客文件，并将生成的博客文件拷贝到&lt;code>_deploy/&lt;/code>目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支。&lt;/p>
&lt;p>现在可以访问&lt;code>http://username.github.com&lt;/code>了。注意：有时候可能会有延时，要等几分钟才能打开。&lt;/p>
&lt;p>至此，我们的博客已经完成基本的部署，不过博客的source需要单独提交，执行如下命令就可以将source提交到仓库的source分支下。&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>$ git add .
&lt;/span>&lt;span class='line'>$ git commit -m 'Initial source commit'
&lt;/span>&lt;span class='line'>$ git push origin source&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入&lt;code>rake preview&lt;/code>命令，然后就能在浏览器中进行本地预览访问了：&lt;code>http://127.0.0.1:4000/&lt;/code>或&lt;code>http://localhost:4000/&lt;/code>，效果跟仓库中的一样。&lt;/p>
&lt;p>参考：&lt;a href="http://octopress.org/docs/deploying/">Deploying to Github Pages&lt;/a>&lt;/p>
&lt;h3>5、开始写博客&lt;/h3>
&lt;p>Octopress为我们提供了一些task来创建博文和页面。博文必须存储在&lt;code>source/_posts&lt;/code>目录下，并且需要按照Jekyll的命名规范对文章进行命名：&lt;code>YYYY-MM-DD-post-title.markdown&lt;/code>。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。&lt;/p>
&lt;p>通过Octopress提供的task可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。只需要在终端输入如下命令：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>rake new_post["title"]&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>其中title为博文的文件名，创建出来的文件默认是markdown格式。上面的命令会创建出这样一个文件：&lt;code>source/_posts/2013-08-03-title.markdown&lt;/code>。打开这个文件，可以看到里面有如下一些内容了(告诉Jekyll博客引擎如何处理博文和页面)：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;span class='line-number'>6&lt;/span>
&lt;span class='line-number'>7&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>---
&lt;/span>&lt;span class='line'>layout: post
&lt;/span>&lt;span class='line'>title: "title"
&lt;/span>&lt;span class='line'>date: 2013-08-03 16:36
&lt;/span>&lt;span class='line'>comments: true
&lt;/span>&lt;span class='line'>categories:
&lt;/span>&lt;span class='line'>---&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>接着我们就可以在这个文件中写我们的博文啦。完成之后，我们可以预览和部署博文。下面是创建并部署博文的一个完整过程：&lt;/p>
&lt;figure class='code'>&lt;div class="highlight">&lt;table>&lt;tr>&lt;td class="gutter">&lt;pre class="line-numbers">&lt;span class='line-number'>1&lt;/span>
&lt;span class='line-number'>2&lt;/span>
&lt;span class='line-number'>3&lt;/span>
&lt;span class='line-number'>4&lt;/span>
&lt;span class='line-number'>5&lt;/span>
&lt;span class='line-number'>6&lt;/span>
&lt;/pre>&lt;/td>&lt;td class='code'>&lt;pre>&lt;code class=''>&lt;span class='line'>$ rake new_post["New Post"]
&lt;/span>&lt;span class='line'>$ rake generate
&lt;/span>&lt;span class='line'>$ git add .
&lt;/span>&lt;span class='line'>$ git commit -am "Some comment here."
&lt;/span>&lt;span class='line'>$ git push origin source
&lt;/span>&lt;span class='line'>$ rake deploy&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/div>&lt;/figure>
&lt;p>参考：&lt;a href="http://octopress.org/docs/blogging/">Blogging Basics&lt;/a>&lt;/p>
&lt;h3>6、后续&lt;/h3>
&lt;p>在搭建博客后，你会发现打开很慢很慢，所以我们需要对其做一个优化，这些内容写在另外一篇文章中，&lt;a href="http://langyapojun.github.io/blog/2015/01/04/jie-jue-octopressfang-wen-man-he-%5B%3F%5D-xie-she-zhi-wen-ti/">&lt;code>跳吧，年轻人&lt;/code>&lt;/a>。&lt;/p></description></item><item><title>Markdown Syntax Guide</title><link>https://b9aobj.github.io/post/markdown-syntax/</link><pubDate>Tue, 11 Mar 2014 00:00:00 +0000</pubDate><guid>https://b9aobj.github.io/post/markdown-syntax/</guid><description>
&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1&lt;/h1>
&lt;h2 id="h2">H2&lt;/h2>
&lt;h3 id="h3">H3&lt;/h3>
&lt;h4 id="h4">H4&lt;/h4>
&lt;h5 id="h5">H5&lt;/h5>
&lt;h6 id="h6">H6&lt;/h6>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h4 id="blockquote-without-attribution">Blockquote without attribution&lt;/h4>
&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h4 id="blockquote-with-attribution">Blockquote with attribution&lt;/h4>
&lt;blockquote>
&lt;p>Don't communicate by sharing memory, share memory by communicating.&lt;br>
— &lt;cite>Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren't part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="inline-markdown-within-tables">Inline Markdown within tables&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks&lt;/h2>
&lt;h4 id="code-block-with-backticks">Code block with backticks&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="c">&amp;lt;!-- this line is extraneous 2Error from server (Forbidden): deployments.apps is forbidden: User &amp;#34;chiptest&amp;#34; cannot create resource &amp;#34;deployments&amp;#34; in API group &amp;#34;apps&amp;#34; in the namespace &amp;#34;default&amp;#34; --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">11&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="code-block-indented-with-four-spaces">Code block indented with four spaces&lt;/h4>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h4 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo's internal highlight shortcode&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="ln"> 1&lt;/span>&lt;span class="cl">&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 2&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 3&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 4&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 5&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 6&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 7&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 8&lt;/span>&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln"> 9&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">10&lt;/span>&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h4 id="ordered-list">Ordered List&lt;/h4>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h4 id="unordered-list">Unordered List&lt;/h4>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h4 id="nested-list">Nested list&lt;/h4>
&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark&lt;/h2>
&lt;p>&lt;abbr title="Graphics Interchange Format">GIF&lt;/abbr> is a bitmap image format.&lt;/p>
&lt;p>H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>Press &lt;kbd>&lt;kbd>CTRL&lt;/kbd>+&lt;kbd>ALT&lt;/kbd>+&lt;kbd>Delete&lt;/kbd>&lt;/kbd> to end the session.&lt;/p>
&lt;p>Most &lt;mark>salamanders&lt;/mark> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The above quote is excerpted from Rob Pike's &lt;a href="https://www.youtube.com/watch?v=PAAkCSZUG1c">talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Rich Content</title><link>https://b9aobj.github.io/post/rich-content/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://b9aobj.github.io/post/rich-content/</guid><description>
&lt;p>Hugo ships with several &lt;a href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes">Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a href="https://gohugo.io/about/hugo-and-gdpr/">Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;hr>
&lt;h2 id="instagram-simple-shortcode">Instagram Simple Shortcode&lt;/h2>
&lt;br>
&lt;hr>
&lt;h2 id="youtube-privacy-enhanced-shortcode">YouTube Privacy Enhanced Shortcode&lt;/h2>
&lt;br>
&lt;hr>
&lt;h2 id="vimeo-simple-shortcode">Vimeo Simple Shortcode&lt;/h2>
&lt;br></description></item><item><title>Placeholder Text</title><link>https://b9aobj.github.io/post/placeholder-text/</link><pubDate>Sun, 09 Mar 2014 00:00:00 +0000</pubDate><guid>https://b9aobj.github.io/post/placeholder-text/</guid><description>
&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p>
&lt;p>Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p>
&lt;ol>
&lt;li>Exierant elisi ambit vivere dedere&lt;/li>
&lt;li>Duce pollice&lt;/li>
&lt;li>Eris modo&lt;/li>
&lt;li>Spargitque ferrea quos palude&lt;/li>
&lt;/ol>
&lt;p>Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p>
&lt;ol>
&lt;li>Comas hunc haec pietate fetum procerum dixit&lt;/li>
&lt;li>Post torum vates letum Tiresia&lt;/li>
&lt;li>Flumen querellas&lt;/li>
&lt;li>Arcanaque montibus omnes&lt;/li>
&lt;li>Quidem et&lt;/li>
&lt;/ol>
&lt;h1 id="vagus-elidunt">Vagus elidunt&lt;/h1>
&lt;p>&lt;svg class="canon" xmlns="http://www.w3.org/2000/svg" overflow="visible" viewBox="0 0 496 373" height="373" width="496">&lt;g fill="none">&lt;path stroke="#000" stroke-width=".75" d="M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515">&lt;/path>&lt;path stroke="#ED1C24" stroke-width=".75" d="M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z">&lt;/path>&lt;path stroke="#000" stroke-width=".75" d="M.479.375h495v372h-495zM247.979.875v372">&lt;/path>&lt;ellipse cx="498.729" cy="177.625" rx=".75" ry="1.25">&lt;/ellipse>&lt;ellipse cx="247.229" cy="377.375" rx=".75" ry="1.25">&lt;/ellipse>&lt;/g>&lt;/svg>&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon">The Van de Graaf Canon&lt;/a>&lt;/p>
&lt;h2 id="mane-refeci-capiebant-unda-mulcebat">Mane refeci capiebant unda mulcebat&lt;/h2>
&lt;p>Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong>Faces illo pepulere&lt;/strong> tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p>
&lt;p>Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p>
&lt;p>Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong>mitis temploque&lt;/strong> vocatus, inque alis, &lt;em>oculos nomen&lt;/em> non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong>parte&lt;/strong>.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://b9aobj.github.io/post/math-typesetting/</link><pubDate>Sat, 08 Mar 2014 00:00:00 +0000</pubDate><guid>https://b9aobj.github.io/post/math-typesetting/</guid><description>
&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p>
&lt;p>In this example we will be using &lt;a href="https://katex.org/">KaTeX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a partial under &lt;code>/layouts/partials/math.html&lt;/code>&lt;/li>
&lt;li>Within this partial reference the &lt;a href="https://katex.org/docs/autorender.html">Auto-render Extension&lt;/a> or host these scripts locally.&lt;/li>
&lt;li>Include the partial in your templates like so:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">&lt;span class="o">{{&lt;/span> &lt;span class="k">if&lt;/span> or .Params.math .Site.Params.math &lt;span class="o">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl">&lt;span class="o">{{&lt;/span> partial &lt;span class="s2">&amp;#34;math.html&amp;#34;&lt;/span> . &lt;span class="o">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">&lt;span class="o">{{&lt;/span> end &lt;span class="o">}}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>To enable KaTex globally set the parameter &lt;code>math&lt;/code> to &lt;code>true&lt;/code> in a project's configuration&lt;/li>
&lt;li>To enable KaTex on a per page basis include the parameter &lt;code>math: true&lt;/code> in content files&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Use the online reference of &lt;a href="https://katex.org/docs/supported.html">Supported TeX Functions&lt;/a>&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p></description></item><item><title>Emoji Support</title><link>https://b9aobj.github.io/post/emoji-support/</link><pubDate>Wed, 05 Mar 2014 00:00:00 +0000</pubDate><guid>https://b9aobj.github.io/post/emoji-support/</guid><description>
&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>The &lt;a href="https://gohugo.io/functions/emojify/">&lt;code>emojify&lt;/code>&lt;/a> function can be called directly in templates or &lt;a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes&lt;/a>.&lt;/p>
&lt;p>To enable emoji globally, set &lt;code>enableEmoji&lt;/code> to &lt;code>true&lt;/code> in your site's &lt;a href="https://gohugo.io/getting-started/configuration/">configuration&lt;/a> and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p>
&lt;p>&lt;span class="nowrap">&lt;span class="emojify">🙈&lt;/span> &lt;code>:see_no_evil:&lt;/code>&lt;/span> &lt;span class="nowrap">&lt;span class="emojify">🙉&lt;/span> &lt;code>:hear_no_evil:&lt;/code>&lt;/span> &lt;span class="nowrap">&lt;span class="emojify">🙊&lt;/span> &lt;code>:speak_no_evil:&lt;/code>&lt;/span>&lt;/p>
&lt;br>
&lt;p>The &lt;a href="http://www.emoji-cheat-sheet.com/">Emoji cheat sheet&lt;/a> is a useful reference for emoji shorthand codes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>N.B.&lt;/strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="ln">1&lt;/span>&lt;span class="cl">.emoji {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">2&lt;/span>&lt;span class="cl"> font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="ln">3&lt;/span>&lt;span class="cl">}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>
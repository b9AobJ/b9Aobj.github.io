<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CAS on X•O专业去码</title><link>https://b9aobj.github.io/categories/cas/</link><description>Recent content in CAS on X•O专业去码</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 11 May 2021 16:34:30 +0800</lastBuildDate><atom:link href="https://b9aobj.github.io/categories/cas/index.xml" rel="self" type="application/rss+xml"/><item><title>Cas接入</title><link>https://b9aobj.github.io/post/zh-cn/2020/cas%E6%8E%A5%E5%85%A5/</link><pubDate>Tue, 11 May 2021 16:34:30 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2020/cas%E6%8E%A5%E5%85%A5/</guid><description>
&lt;h3 id="sso介绍">SSO介绍&lt;/h3>
&lt;h4 id="背景">背景&lt;/h4>
&lt;p>在企业发展初期，企业使用的系统很少，通常一个或者两个，每个系统都有自己的登录模块，运营人员每天用自己的账号登录，很方便。
但随着企业的发展，用到的系统随之增多，运营人员在操作不同的系统时，需要多次登录，而且每个系统的账号都不一样，这对于运营人员来说，很不方便。于是，就想到是不是可以在一个系统登录，其他系统就不用登录了呢？这就是单点登录要解决的问题。&lt;/p>
&lt;h4 id="定义">定义&lt;/h4>
&lt;p>&lt;code>单点登录&lt;/code>英文全称Single Sign On，简称就是SSO。它的解释是：在多个应用系统中，只需要登录一次，就可以访问其他相互信任的应用系统.&lt;/p>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/cas01.png" alt="01">
如图所示，图中有4个系统，分别是Application1、Application2、Application3、和SSO。Application1、Application2、Application3没有登录模块,只负责业务模块，而SSO只有登录模块，没有其他的业务模块，当Application1、Application2、Application3需要登录时，将跳到SSO系统，SSO系统完成登录，其他的应用系统也就随之登录了。这完全符合我们对单点登录（SSO）的定义。&lt;/p>
&lt;p>同域下的单点登录是运用了Cookie同域共享的特性,&lt;code>但这不是真正的单点登录&lt;/code>。
因为如果是不同域呢？不同域之间Cookie是不共享的，怎么办？
这里我们就要说一说CAS了，CAS流程才是单点登录&lt;code>正宗的解决方案&lt;/code>。&lt;/p>
&lt;h4 id="cas介绍">CAS介绍&lt;/h4>
&lt;p>&lt;code>CAS&lt;/code> （ Central Authentication Service ） 是 Yale 大学发起的一个企业级的、开源的项目，旨在为 Web 应用系统提供一种可靠的单点登录解决方法（属于 Web SSO ）。&lt;/p>
&lt;p>从结构上看，CAS系统包含两个部分：CAS Server 和CAS Client
&lt;code>CAS Server&lt;/code> 负责对用户的认证工作；需要独立部署,有官方的详细教程.
&lt;code>CAS Client&lt;/code> 负责处理对客户端受保护资源的访问请求; 与受保护的客户端应用部署在一起，以Filter方式保护 Web 应用的受保护资源，过滤从客户端过来的每一个 Web请求.&lt;/p>
&lt;p>CAS Client 没有官方的Node版本,需要自己实现.
&lt;code>所以今天我就来谈谈Node与 CAS Client集成的实现&lt;/code>.&lt;/p>
&lt;h4 id="cas理论">CAS理论&lt;/h4>
&lt;p>CAS 协议定义了一组术语，一组票据，一组接口。&lt;/p>
&lt;h5 id="术语">术语：&lt;/h5>
&lt;ul>
&lt;li>&lt;code>Service&lt;/code>: 需要使用单点登录的各个服务。&lt;/li>
&lt;li>&lt;code>CAS Server&lt;/code>: 中心服务器，也是SSO中负责单点登录的服务器。&lt;/li>
&lt;li>&lt;code>CAS Client&lt;/code>: 各个service的后台。&lt;/li>
&lt;/ul>
&lt;h5 id="接口">接口：&lt;/h5>
&lt;ul>
&lt;li>/login：登录接口，用于登录到中心服务器。&lt;/li>
&lt;li>/logout：登出接口，用于从中心服务器登出。&lt;/li>
&lt;li>/validate：用于验证用户是否登录中心服务器。&lt;/li>
&lt;li>/serviceValidate：用于让各个 service 验证是否登录中心服务器。&lt;/li>
&lt;/ul>
&lt;h5 id="票据">票据：&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>TGT：Ticket Grangting Ticket
TGT是CAS为用户签发的登录票据，拥有了TGT，用户就可以正名用户在CAS成功登录过。TGT封装了Cookie值对应的用户信息。当HTTP请求到来时，CAS以此Cookie值（TGC)为key查询缓存中有无TGT，如果有的话，则相信用户已登录过。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>TGC： Ticket Granting Cookie
CAS Server生成TGT放入自己的Session中，而TGC就是这个Session的唯一标识（SessionId），以Cookie形式放到浏览器端，是CAS Server用来明确用户身份的凭证。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ST： Service Ticket
ST是CAS用户签发的访问某一service的票据。用户访问service时，service发现用户没有ST，则要求用户去CAS获取S。用户想CAS发出获取ST的请求，CAS发现用户有TGT，则签发一个ST，返回给用户。用户拿着ST去访问service，service拿ST去CAS验证，验证通过后，允许用户访问资源。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="cas流程">CAS流程&lt;/h3>
&lt;h4 id="官方流程图">官方流程图&lt;/h4>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/cas02.png" alt="02">
官方文档:https://apereo.github.io/cas/6.0.x/protocol/CAS-Protocol.html&lt;/p>
&lt;h4 id="流程图">流程图&lt;/h4>
&lt;p>&lt;img src="https://b9aobj.github.io/images/2020/cas03.png" alt="03">&lt;/p>
&lt;h4 id="流程图解析">流程图解析&lt;/h4>
&lt;p>1、 用户访问产品a，域名是www.a.cn.
2. 由于用户没有携带在 a 服务器上登录的 a cookie，所以 a 服务器返回 http 重定向，重定向的 url 是 SSO 服务器的地址，同时 url 的 query 中通过参数指明登录成功后，回跳到 a 页面。重定向的url 形如 sso.dxy.cn/login?service=https%3A%2F%2Fwww.a.cn。
3. 由于用户没有携带在 SSO 服务器上登录的 TGC（看上面，票据之一），所以 SSO 服务器判断用户未登录，给用户显示统一登录界面。用户在 SSO 的页面上进行登录操作。
4. 登录成功后，SSO 服务器构建用户在 SSO 登录的 TGT（又一个票据），同时返回一个 http 重定向。这里注意：重定向地址为之前写在 query 里的 a 页面。重定向地址的 query 中包含 sso 服务器派发的 ST。重定向的 http response 中包含写 cookie 的 header。这个 cookie 代表用户在 SSO 中的登录状态，它的值就是 TGC。
5. 浏览器重定向到产品 a。此时重定向的 url 中携带着 SSO 服务器生成的 ST。
6. 根据 ST，a 服务器向 SSO 服务器发送请求，SSO 服务器验证票据的有效性。验证成功后，a 服务器知道用户已经在 sso 登录了，于是 a 服务器构建用户登录 session，记为 a session。并将 cookie 写入浏览器。注意，此处的 cookie 和 session 保存的是用户在 a 服务器的登录状态，和 CAS 无关。
7. 之后用户访问产品 b，域名是 &lt;a href="http://www.b.cn">www.b.cn&lt;/a>。
8. 由于用户没有携带在 b 服务器上登录的 b cookie，所以 b 服务器返回 http 重定向，重定向的 url 是 SSO 服务器的地址，去询问用户在 SSO 中的登录状态。
9. 浏览器重定向到 SSO。注意，第 4 步中已经向浏览器写入了携带 TGC 的cookie，所以此时 SSO 服务器可以拿到，根据 TGC 去查找 TGT，如果找到，就判断用户已经在 sso 登录过了。
10. SSO 服务器返回一个重定向，重定向携带 ST。注意，这里的 ST 和第4步中的 ST 是不一样的，事实上，每次生成的 ST 都是不一样的。
11. 浏览器带 ST 重定向到 b 服务器，和第 5 步一样。
12. b 服务器根据票据向 SSO 服务器发送请求，票据验证通过后，b 服务器知道用户已经在 sso 登录了，于是生成 b session，向浏览器写入 b cookie。&lt;/p>
&lt;h3 id="实践演示">实践演示&lt;/h3>
&lt;p>发车了......&lt;/p>
&lt;h4 id="cas-域名配置">CAS 域名配置&lt;/h4>
&lt;ul>
&lt;li>cas server 域名 &lt;a href="https://cas.ucloudadmin.com">https://cas.ucloudadmin.com&lt;/a>&lt;/li>
&lt;li>cas client 域名 &lt;a href="http://www.clienta.com">www.clienta.com&lt;/a> www.clientb.com&lt;/li>
&lt;/ul>
&lt;h4 id="host-配置">host 配置&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>#CAS
&lt;span class="ln">2&lt;/span>127.0.0.1 clienta.com
&lt;span class="ln">3&lt;/span>127.0.0.1 clientb.com
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="nginx-配置">nginx 配置&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>server {
&lt;span class="ln"> 2&lt;/span>listen 80;
&lt;span class="ln"> 3&lt;/span>server_name clienta.com;
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>location / {
&lt;span class="ln"> 6&lt;/span>proxy_set_header Host $host;
&lt;span class="ln"> 7&lt;/span>proxy_set_header X-Real-IP $remote_addr;
&lt;span class="ln"> 8&lt;/span>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;span class="ln"> 9&lt;/span>proxy_pass http://127.0.0.1:1024;
&lt;span class="ln">10&lt;/span>}
&lt;span class="ln">11&lt;/span>}
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>server {
&lt;span class="ln">14&lt;/span>listen 80;
&lt;span class="ln">15&lt;/span>server_name clientb.com;
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>location / {
&lt;span class="ln">18&lt;/span>proxy_set_header Host $host;
&lt;span class="ln">19&lt;/span>proxy_set_header X-Real-IP $remote_addr;
&lt;span class="ln">20&lt;/span>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
&lt;span class="ln">21&lt;/span>proxy_pass http://127.0.0.1:1025;
&lt;span class="ln">22&lt;/span>}
&lt;span class="ln">23&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用">使用&lt;/h4>
&lt;h5 id="启动-cas-client-服务">启动 cas client 服务&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>cd clienta
&lt;span class="ln">2&lt;/span>npm start // or node app.js
&lt;span class="ln">3&lt;/span>cd clientb
&lt;span class="ln">4&lt;/span>npm start // or node app.js
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="clienta-代码">clienta 代码&lt;/h5>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>// app.js
&lt;span class="ln"> 2&lt;/span>const express = require(&amp;#39;express&amp;#39;)
&lt;span class="ln"> 3&lt;/span>const app = express()
&lt;span class="ln"> 4&lt;/span>const session = require(&amp;#39;express-session&amp;#39;);
&lt;span class="ln"> 5&lt;/span>const cas = require(&amp;#39;connect-cas&amp;#39;);
&lt;span class="ln"> 6&lt;/span>const URL = require(&amp;#39;url&amp;#39;);
&lt;span class="ln"> 7&lt;/span>const querystring = require(&amp;#34;querystring&amp;#34;);
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>const casServer = &amp;#39;cas.ucloudadmin.com&amp;#39;
&lt;span class="ln"> 10&lt;/span>const casClient = &amp;#39;clienta.com&amp;#39;
&lt;span class="ln"> 11&lt;/span>
&lt;span class="ln"> 12&lt;/span>// var _defaults = {
&lt;span class="ln"> 13&lt;/span>// protocol: &amp;#39;https&amp;#39;,
&lt;span class="ln"> 14&lt;/span>// host: undefined,
&lt;span class="ln"> 15&lt;/span>// hostname: undefined, // ex. google
&lt;span class="ln"> 16&lt;/span>// port: 443,
&lt;span class="ln"> 17&lt;/span>// gateway: false, // set to true only if you wish to do authentication instead of authorization
&lt;span class="ln"> 18&lt;/span>// paths: {
&lt;span class="ln"> 19&lt;/span>// validate: &amp;#39;/cas/validate&amp;#39;, // not implemented
&lt;span class="ln"> 20&lt;/span>// serviceValidate: &amp;#39;/cas/serviceValidate&amp;#39;, // CAS 2.0
&lt;span class="ln"> 21&lt;/span>// proxyValidate: &amp;#39;/cas/proxyValidate&amp;#39;, // not implemented
&lt;span class="ln"> 22&lt;/span>// proxy: &amp;#39;/cas/proxy&amp;#39;, // not implemented
&lt;span class="ln"> 23&lt;/span>// login: &amp;#39;/cas/login&amp;#39;,
&lt;span class="ln"> 24&lt;/span>// logout: &amp;#39;/cas/logout&amp;#39;
&lt;span class="ln"> 25&lt;/span>// }
&lt;span class="ln"> 26&lt;/span>// }
&lt;span class="ln"> 27&lt;/span>
&lt;span class="ln"> 28&lt;/span>/*
&lt;span class="ln"> 29&lt;/span>var myOptions = {
&lt;span class="ln"> 30&lt;/span> protocol: &amp;#39;https&amp;#39;,
&lt;span class="ln"> 31&lt;/span> host: &amp;#39;cas.ucloudadmin.com&amp;#39;,
&lt;span class="ln"> 32&lt;/span> hostname: &amp;#39;ucloud&amp;#39;, // ex. google
&lt;span class="ln"> 33&lt;/span> port: 443,
&lt;span class="ln"> 34&lt;/span> gateway: false, // set to true only if you wish to do authentication instead of authorization
&lt;span class="ln"> 35&lt;/span> paths: {
&lt;span class="ln"> 36&lt;/span> validate: &amp;#39;/cas/validate&amp;#39;, // not implemented
&lt;span class="ln"> 37&lt;/span> serviceValidate: &amp;#39;/cas/serviceValidate&amp;#39;, // CAS 2.0
&lt;span class="ln"> 38&lt;/span> proxyValidate: &amp;#39;/cas/proxyValidate&amp;#39;, // not implemented
&lt;span class="ln"> 39&lt;/span> proxy: &amp;#39;/cas/proxy&amp;#39;, // not implemented
&lt;span class="ln"> 40&lt;/span> login: &amp;#39;/cas/login&amp;#39;,
&lt;span class="ln"> 41&lt;/span> logout: &amp;#39;/cas/logout&amp;#39;
&lt;span class="ln"> 42&lt;/span> }
&lt;span class="ln"> 43&lt;/span>}
&lt;span class="ln"> 44&lt;/span>cas.configure(myOptions);
&lt;span class="ln"> 45&lt;/span>*/
&lt;span class="ln"> 46&lt;/span>
&lt;span class="ln"> 47&lt;/span>// Your CAS server&amp;#39;s hostname
&lt;span class="ln"> 48&lt;/span>cas.configure({
&lt;span class="ln"> 49&lt;/span> protocol: &amp;#39;https&amp;#39;,
&lt;span class="ln"> 50&lt;/span> host: casServer,
&lt;span class="ln"> 51&lt;/span>});
&lt;span class="ln"> 52&lt;/span>console.log(cas.configure());
&lt;span class="ln"> 53&lt;/span>
&lt;span class="ln"> 54&lt;/span>app.use(express.json());
&lt;span class="ln"> 55&lt;/span>app.use(express.urlencoded({ extended: true }))
&lt;span class="ln"> 56&lt;/span>
&lt;span class="ln"> 57&lt;/span>app.use(
&lt;span class="ln"> 58&lt;/span> session({
&lt;span class="ln"> 59&lt;/span> secret: &amp;#39;clienta&amp;#39;,
&lt;span class="ln"> 60&lt;/span> name: &amp;#39;SESSIONID&amp;#39;,
&lt;span class="ln"> 61&lt;/span> resave: true,
&lt;span class="ln"> 62&lt;/span> saveUninitialized: true,
&lt;span class="ln"> 63&lt;/span> cookie: { maxAge: 24 * 60 * 60 * 1000, httpOnly: true }, //过期时间 24 小时
&lt;span class="ln"> 64&lt;/span> }),
&lt;span class="ln"> 65&lt;/span>);
&lt;span class="ln"> 66&lt;/span>
&lt;span class="ln"> 67&lt;/span>// 用户验证
&lt;span class="ln"> 68&lt;/span>app.use(function (req, res, next) {
&lt;span class="ln"> 69&lt;/span> console.log(&amp;#39;req.url&amp;#39;, req.url);
&lt;span class="ln"> 70&lt;/span> let path = req.url.split(&amp;#39;?&amp;#39;)[0]
&lt;span class="ln"> 71&lt;/span> // 跳过登录请求
&lt;span class="ln"> 72&lt;/span> if (path === &amp;#39;/login&amp;#39;) {
&lt;span class="ln"> 73&lt;/span> next()
&lt;span class="ln"> 74&lt;/span> } else {
&lt;span class="ln"> 75&lt;/span> if (req.session.cas &amp;amp;&amp;amp; req.session.cas.user) {
&lt;span class="ln"> 76&lt;/span> next()
&lt;span class="ln"> 77&lt;/span> } else {
&lt;span class="ln"> 78&lt;/span> return res.send(`&amp;lt;h2&amp;gt;this is clientA&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;You are not logged in. &amp;lt;a href=https://b9aobj.github.io/login?service=http://${casClient}${req.url}&amp;gt;Log in now.&amp;lt;/a&amp;gt;&amp;lt;p&amp;gt;`);
&lt;span class="ln"> 79&lt;/span> // 自动跳转登录
&lt;span class="ln"> 80&lt;/span> // return res.redirect(`/login?service=http://${casClient}${req.url}`);
&lt;span class="ln"> 81&lt;/span> }
&lt;span class="ln"> 82&lt;/span> }
&lt;span class="ln"> 83&lt;/span>});
&lt;span class="ln"> 84&lt;/span>
&lt;span class="ln"> 85&lt;/span>app.get(&amp;#39;/&amp;#39;, function (req, res) {
&lt;span class="ln"> 86&lt;/span> console.log(&amp;#39;get /&amp;#39;, req.url)
&lt;span class="ln"> 87&lt;/span> return res.send(&amp;#39;&amp;lt;h2&amp;gt;this is clienta&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;You are logged in. Your username is &amp;#39; + req.session.cas.user + &amp;#39;. &amp;lt;a href=&amp;#34;/logout&amp;#34;&amp;gt;Log Out&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;#39;);
&lt;span class="ln"> 88&lt;/span>});
&lt;span class="ln"> 89&lt;/span>
&lt;span class="ln"> 90&lt;/span>app.get(&amp;#39;/login&amp;#39;, cas.serviceValidate(), cas.authenticate(), function (req, res) {
&lt;span class="ln"> 91&lt;/span> console.log(&amp;#39;/login&amp;#39;, req.url)
&lt;span class="ln"> 92&lt;/span> let arg = URL.parse(req.url).query;
&lt;span class="ln"> 93&lt;/span> let params = querystring.parse(arg);
&lt;span class="ln"> 94&lt;/span> // console.log(&amp;#34;params-service &amp;#34; + params.service);
&lt;span class="ln"> 95&lt;/span> // 重定向到初始请求地址
&lt;span class="ln"> 96&lt;/span> return res.redirect(params.service || &amp;#39;/&amp;#39;);
&lt;span class="ln"> 97&lt;/span>});
&lt;span class="ln"> 98&lt;/span>
&lt;span class="ln"> 99&lt;/span>app.get(&amp;#39;/logout&amp;#39;, function (req, res) {
&lt;span class="ln">100&lt;/span> if (!req.session) {
&lt;span class="ln">101&lt;/span> return res.redirect(&amp;#39;/&amp;#39;);
&lt;span class="ln">102&lt;/span> }
&lt;span class="ln">103&lt;/span> // Forget our own login session
&lt;span class="ln">104&lt;/span> if (req.session.destroy) {
&lt;span class="ln">105&lt;/span> req.session.destroy();
&lt;span class="ln">106&lt;/span> } else {
&lt;span class="ln">107&lt;/span> // Cookie-based sessions have no destroy()
&lt;span class="ln">108&lt;/span> req.session = null;
&lt;span class="ln">109&lt;/span> }
&lt;span class="ln">110&lt;/span> // Send the user to the official campus-wide logout URL
&lt;span class="ln">111&lt;/span> var options = cas.configure();
&lt;span class="ln">112&lt;/span> options.pathname = options.paths.logout;
&lt;span class="ln">113&lt;/span> return res.redirect(URL.format(options));
&lt;span class="ln">114&lt;/span>});
&lt;span class="ln">115&lt;/span>
&lt;span class="ln">116&lt;/span>
&lt;span class="ln">117&lt;/span>// 业务接口路由
&lt;span class="ln">118&lt;/span>app.get(&amp;#39;/api&amp;#39;, function (req, res) {
&lt;span class="ln">119&lt;/span> return res.send(&amp;#39;&amp;lt;h2&amp;gt;this is clientA API Page&amp;lt;/h2&amp;gt;&amp;lt;p&amp;gt;You are logged in. Your username is &amp;#39; + req.session.cas.user);
&lt;span class="ln">120&lt;/span>});
&lt;span class="ln">121&lt;/span>app.get(&amp;#39;/api/userInfo&amp;#39;, function (req, res) {
&lt;span class="ln">122&lt;/span> res.json({ retCode: &amp;#39;1&amp;#39;, data: req.session.cas });
&lt;span class="ln">123&lt;/span>});
&lt;span class="ln">124&lt;/span>
&lt;span class="ln">125&lt;/span>// ......
&lt;span class="ln">126&lt;/span>
&lt;span class="ln">127&lt;/span>app.listen(1024, () =&amp;gt; {
&lt;span class="ln">128&lt;/span> console.log(&amp;#39;示例程序正在监听 1024 端口！&amp;#39;)
&lt;span class="ln">129&lt;/span>});
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="登录-cas-client-前台">登录 cas client 前台&lt;/h5>
&lt;ul>
&lt;li>
&lt;p>浏览器打开 clientA clientB&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跳转 cas server 验证 / 登录&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>
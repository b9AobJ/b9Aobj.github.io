<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on X•O专业去码</title><link>https://b9aobj.github.io/categories/git/</link><description>Recent content in git on X•O专业去码</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 13 May 2021 17:23:19 +0800</lastBuildDate><atom:link href="https://b9aobj.github.io/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>我想在gitlab用CICD部署</title><link>https://b9aobj.github.io/post/zh-cn/2021/%E6%88%91%E6%83%B3%E5%9C%A8gitlabe%E7%94%A8cicd%E9%83%A8%E7%BD%B2/</link><pubDate>Thu, 13 May 2021 17:23:19 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2021/%E6%88%91%E6%83%B3%E5%9C%A8gitlabe%E7%94%A8cicd%E9%83%A8%E7%BD%B2/</guid><description>
&lt;h3 id="持续集成">持续集成&lt;/h3>
&lt;p>持续整合（英语：Continuous integration，缩写CI），又译为持续集成，是一种软件工程流程，是将所有软件工程师对于软件的工作副本持续集成到共享主线（mainline）的一种举措。该名称最早由[1]葛来迪·布区（Grady Booch）在他的布区方法[2]中提出，在测试驱动开发（TDD）的作法中，通常还会搭配自动单元测试。持续集成的提出主要是为解决软件进行系统集成时面临的各项问题，极限编程称这些问题为集成地狱（integration hell）。&lt;/p>
&lt;h3 id="持续交付">持续交付&lt;/h3>
&lt;p>持续交付（英语：Continuous delivery，缩写为 CD），是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以释出的状况。它的目标在于让软件的建置、测试与释出变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。&lt;/p>
&lt;h3 id="持续部署">持续部署&lt;/h3>
&lt;p>持续部署（英语：Continuous deployment，缩写为CD），是一种软件工程方法，意指在软件开发流程中，以自动化方式，频繁而且持续性的，将软件部署到生产环境（production environment）中，使软件产品能够快速的发展[1][2][3]。&lt;/p>
&lt;p>持续部署可以整合到持续整合与持续交付（Continuous delivery）的流程之中。&lt;/p>
&lt;h3 id="cicd">CICD&lt;/h3>
&lt;p>在软件工程中，CI/CD或CICD通常指的是持续集成和持续交付或持续部署的组合实践。CI/CD通过在应用程序的构建、测试和部署中实施自动化，在开发和运营团队之间架起了桥梁。&lt;/p>
&lt;p>现代DevOps实践涉及软件应用程序在整个开发生命周期内的持续开发、持续测试、持续集成、持续部署和持续监控。CI/CD实践或CI/CD管道（CI/CD pipeline）构成了现代DevOps业务的主干。&lt;/p>
&lt;h3 id="缘由">缘由&lt;/h3>
&lt;p>公司运维系统每次发布系统都需要经过一轮打包——编译——发至跳板机（期间需要输入动态码）——然后登陆跳板机（需要输入动态码））——从跳板机将压缩包发至web主机——再登陆web主机再解压缩新包并重启。
一轮下来，费时费力不说，命令行忘记，手打输入错误等情况，还是会经常出现的。可能大家会觉得这么简单的事还说难，但是，事情有时候不是说只做这一件，事情也不是天天都做，还有就是，同事的加入或离开，都需要重新弄这一套流程。跳板机需要配置申请，各方面需要重新指导，其实很费时间。&lt;/p>
&lt;p>本次的接入，也是由控制台那块流程已经接入至cicd，所以也就是有前车了，不怕，有问题问大佬，这么说都写了一套了。&lt;/p>
&lt;h3 id="过程">过程&lt;/h3>
&lt;p>目前只做一个管道（pipeline）操作，里面主要实现的工作就是上面我们手动要做的那些事。我们把整个空间就是个docker空间
所以第一件事就是，先安装依赖再进行编译。没啥问题！&lt;/p>
&lt;p>.gitlab-ci.yml&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>image: node:13.11.0
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>stages:
&lt;span class="ln"> 4&lt;/span> - build
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span># 构建
&lt;span class="ln"> 7&lt;/span>deploy:
&lt;span class="ln"> 8&lt;/span> stage: build
&lt;span class="ln"> 9&lt;/span> script:
&lt;span class="ln">10&lt;/span> - echo &amp;#39;---------- build ------------&amp;#39;
&lt;span class="ln">11&lt;/span> - npm install
&lt;span class="ln">12&lt;/span> - npm run build
&lt;span class="ln">13&lt;/span> tags:
&lt;span class="ln">14&lt;/span> - 此处填入自己的tags
&lt;span class="ln">15&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译完之后就是打包发至服务器了，此处直接去跳板机处生成自己的ssh private key并保存只仓库中的CI/CD的变量&lt;code>SSH_PRIVATE_KEY_133&lt;/code>当中，
并将web主机加入known_hosts里面。
&lt;img src="https://b9aobj.github.io/images/2021/WechatIMG4.png" alt="01">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>before_script:
&lt;span class="ln"> 2&lt;/span> #- apt-get -y install openssh-client
&lt;span class="ln"> 3&lt;/span> - &amp;#39;which ssh-agent || ( apt-get update -y &amp;amp;&amp;amp; apt-get install openssh-client -y )&amp;#39;
&lt;span class="ln"> 4&lt;/span> - eval $(ssh-agent -s)
&lt;span class="ln"> 5&lt;/span> - echo &amp;#34;$SSH_PRIVATE_KEY_133&amp;#34; | tr -d &amp;#39;\r&amp;#39; | ssh-add - &amp;gt; /dev/null
&lt;span class="ln"> 6&lt;/span> - mkdir -p ~/.ssh
&lt;span class="ln"> 7&lt;/span> - chmod 700 ~/.ssh
&lt;span class="ln"> 8&lt;/span> - echo &amp;#34;$SSH_KNOWN_HOSTS&amp;#34; &amp;gt; ~/.ssh/known_hosts
&lt;span class="ln"> 9&lt;/span> - &amp;#39;[[ -f /.dockerenv ]] &amp;amp;&amp;amp; echo -e &amp;#34;Host *\n\tStrictHostKeyChecking no\n\n&amp;#34; &amp;gt; ~/.ssh/config&amp;#39;
&lt;span class="ln">10&lt;/span> - chmod 644 ~/.ssh/known_hosts
&lt;span class="ln">11&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>将key加入至此后，尝试发至web主机。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>
&lt;span class="ln">2&lt;/span> - TZ=&amp;#39;Asia/Shanghai&amp;#39;; export TZ; export VERSION=`date +%Y%m%d%H%M%S`
&lt;span class="ln">3&lt;/span> - export Y_VERSION=`date +%Y`
&lt;span class="ln">4&lt;/span> - echo $VERSION
&lt;span class="ln">5&lt;/span> - tar zcvf dist-$VERSION.tar.gz dist
&lt;span class="ln">6&lt;/span> - scp dist-$VERSION.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH-pre/tars/$Y_VERSION
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如图可见，是发送成功了
&lt;img src="https://b9aobj.github.io/images/2021/WX20210521-152830@2x.png" alt="02">&lt;/p>
&lt;p>那现在就简单了，ssh登陆。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>- ssh $DEPLOY_USER@$DEPLOY_HOST &amp;#34;cd &amp;#39;$DEPLOY_PATH&amp;#39;-pre &amp;amp;&amp;amp; tar -zxvf tars/&amp;#39;$Y_VERSION&amp;#39;/dist-&amp;#39;$VERSION&amp;#39;.tar.gz &amp;amp;&amp;amp; pm2 restart 14&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="后续">后续&lt;/h3>
&lt;p>目前这个已经可运行并且开始使用。效果大概是5分钟左右可以发布完所有流程，本来是希望通过引入cache机制去跳过npm install的步骤，但目前公司提供的机器无法提供cache缓存。而且加入cache配置后，管道运行时间竟然超过12分钟。。。
&lt;img src="https://b9aobj.github.io/images/2021/1.png" alt="03">
&lt;img src="https://b9aobj.github.io/images/2021/2.png" alt="04">&lt;/p>
&lt;h3 id="下个版本">下个版本&lt;/h3>
&lt;p>这个只是一个管道，没有全部分离出来。以后可以进行分解加强。
1）加eslint校验
2）css校验
3）编译独立
4）发布流程独立并且正式环境需手动发布&lt;/p>
&lt;p>目前主要源码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span># This file is a template, and might need editing before it works on your project.
&lt;span class="ln"> 2&lt;/span># Official framework image. Look for the different tagged releases at:
&lt;span class="ln"> 3&lt;/span># https://hub.docker.com/r/library/node/tags/
&lt;span class="ln"> 4&lt;/span>image: node:13.11.0
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>before_script:
&lt;span class="ln"> 7&lt;/span> #- apt-get -y install openssh-client
&lt;span class="ln"> 8&lt;/span> - &amp;#39;which ssh-agent || ( apt-get update -y &amp;amp;&amp;amp; apt-get install openssh-client -y )&amp;#39;
&lt;span class="ln"> 9&lt;/span> - eval $(ssh-agent -s)
&lt;span class="ln">10&lt;/span> - echo &amp;#34;$SSH_PRIVATE_KEY_133&amp;#34; | tr -d &amp;#39;\r&amp;#39; | ssh-add - &amp;gt; /dev/null
&lt;span class="ln">11&lt;/span> - mkdir -p ~/.ssh
&lt;span class="ln">12&lt;/span> - chmod 700 ~/.ssh
&lt;span class="ln">13&lt;/span> - echo &amp;#34;$SSH_KNOWN_HOSTS&amp;#34; &amp;gt; ~/.ssh/known_hosts
&lt;span class="ln">14&lt;/span> - &amp;#39;[[ -f /.dockerenv ]] &amp;amp;&amp;amp; echo -e &amp;#34;Host *\n\tStrictHostKeyChecking no\n\n&amp;#34; &amp;gt; ~/.ssh/config&amp;#39;
&lt;span class="ln">15&lt;/span> - chmod 644 ~/.ssh/known_hosts
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span>stages:
&lt;span class="ln">18&lt;/span> - build
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span># 构建
&lt;span class="ln">21&lt;/span>pre-auto-deploy:
&lt;span class="ln">22&lt;/span> stage: build
&lt;span class="ln">23&lt;/span> only:
&lt;span class="ln">24&lt;/span> refs:
&lt;span class="ln">25&lt;/span> - pre-release
&lt;span class="ln">26&lt;/span> - feature/test_CI
&lt;span class="ln">27&lt;/span> script:
&lt;span class="ln">28&lt;/span> - cd $CI_PROJECT_DIR &amp;amp;&amp;amp; pwd
&lt;span class="ln">29&lt;/span> - &amp;gt;
&lt;span class="ln">30&lt;/span> if [ ! -d &amp;#34;./node_modules&amp;#34; ] || [ ! &amp;#34;$(ls -A &amp;#39;./node_modules&amp;#39;)&amp;#34; ]; then
&lt;span class="ln">31&lt;/span> echo &amp;#39;---------- install ------------&amp;#39;
&lt;span class="ln">32&lt;/span> npm install
&lt;span class="ln">33&lt;/span> if [ $? -ne 0 ]; then
&lt;span class="ln">34&lt;/span> echo &amp;#34;npm_install error&amp;#34;
&lt;span class="ln">35&lt;/span> exit 1
&lt;span class="ln">36&lt;/span> fi
&lt;span class="ln">37&lt;/span> fi
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span> - echo &amp;#39;---------- build ------------&amp;#39;
&lt;span class="ln">40&lt;/span> - npm run build
&lt;span class="ln">41&lt;/span> - TZ=&amp;#39;Asia/Shanghai&amp;#39;; export TZ; export VERSION=`date +%Y%m%d%H%M%S`
&lt;span class="ln">42&lt;/span> - export Y_VERSION=`date +%Y`
&lt;span class="ln">43&lt;/span> - echo $VERSION
&lt;span class="ln">44&lt;/span> - tar zcvf dist-$VERSION.tar.gz dist
&lt;span class="ln">45&lt;/span> - scp dist-$VERSION.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH-pre/tars/$Y_VERSION
&lt;span class="ln">46&lt;/span> - ssh $DEPLOY_USER@$DEPLOY_HOST &amp;#34;cd &amp;#39;$DEPLOY_PATH&amp;#39;-pre &amp;amp;&amp;amp; tar -zxvf tars/&amp;#39;$Y_VERSION&amp;#39;/dist-&amp;#39;$VERSION&amp;#39;.tar.gz &amp;amp;&amp;amp; pm2 restart 14&amp;#34;
&lt;span class="ln">47&lt;/span> #cache:
&lt;span class="ln">48&lt;/span> # key: ${CI_COMMIT_REF_SLUG}
&lt;span class="ln">49&lt;/span> # paths:
&lt;span class="ln">50&lt;/span> # - node_modules/
&lt;span class="ln">51&lt;/span> tags:
&lt;span class="ln">52&lt;/span> - 一个tags
&lt;span class="ln">53&lt;/span>
&lt;span class="ln">54&lt;/span>prod-auto-deploy:
&lt;span class="ln">55&lt;/span> stage: build
&lt;span class="ln">56&lt;/span> only:
&lt;span class="ln">57&lt;/span> refs:
&lt;span class="ln">58&lt;/span> - develop
&lt;span class="ln">59&lt;/span> - feature/test_CI_D
&lt;span class="ln">60&lt;/span> script:
&lt;span class="ln">61&lt;/span> - cd $CI_PROJECT_DIR &amp;amp;&amp;amp; pwd
&lt;span class="ln">62&lt;/span> - &amp;gt;
&lt;span class="ln">63&lt;/span> if [ ! -d &amp;#34;./node_modules&amp;#34; ] || [ ! &amp;#34;$(ls -A &amp;#39;./node_modules&amp;#39;)&amp;#34; ]; then
&lt;span class="ln">64&lt;/span> echo &amp;#39;---------- install ------------&amp;#39;
&lt;span class="ln">65&lt;/span> npm install
&lt;span class="ln">66&lt;/span> if [ $? -ne 0 ]; then
&lt;span class="ln">67&lt;/span> echo &amp;#34;npm_install error&amp;#34;
&lt;span class="ln">68&lt;/span> exit 1
&lt;span class="ln">69&lt;/span> fi
&lt;span class="ln">70&lt;/span> fi
&lt;span class="ln">71&lt;/span>
&lt;span class="ln">72&lt;/span> - echo &amp;#39;---------- build ------------&amp;#39;
&lt;span class="ln">73&lt;/span> - npm run build
&lt;span class="ln">74&lt;/span> - TZ=&amp;#39;Asia/Shanghai&amp;#39;; export TZ; export VERSION=`date +%Y%m%d%H%M%S`
&lt;span class="ln">75&lt;/span> - export Y_VERSION=`date +%Y`
&lt;span class="ln">76&lt;/span> - echo $VERSION
&lt;span class="ln">77&lt;/span> - tar zcvf dist-$VERSION.tar.gz dist
&lt;span class="ln">78&lt;/span> - scp dist-$VERSION.tar.gz $DEPLOY_USER@$DEPLOY_HOST:$DEPLOY_PATH/tars/$Y_VERSION
&lt;span class="ln">79&lt;/span> - ssh $DEPLOY_USER@$DEPLOY_HOST &amp;#34;cd &amp;#39;$DEPLOY_PATH&amp;#39; &amp;amp;&amp;amp; tar -zxvf tars/&amp;#39;$Y_VERSION&amp;#39;/dist-&amp;#39;$VERSION&amp;#39;.tar.gz &amp;amp;&amp;amp; pm2 restart 8&amp;#34;
&lt;span class="ln">80&lt;/span> #cache:
&lt;span class="ln">81&lt;/span> # key:
&lt;span class="ln">82&lt;/span> # files:
&lt;span class="ln">83&lt;/span> # - package-lock.json
&lt;span class="ln">84&lt;/span> # - package.json
&lt;span class="ln">85&lt;/span> # prefix: $CI_PROJECT_NAME-$CI_JOB_NAME
&lt;span class="ln">86&lt;/span> # paths:
&lt;span class="ln">87&lt;/span> # - node_modules/
&lt;span class="ln">88&lt;/span> tags:
&lt;span class="ln">89&lt;/span> - 一个tags
&lt;/code>&lt;/pre>&lt;/div>&lt;p>CI的编写可以再gitlab页面上进行CI lint检查
&lt;img src="https://b9aobj.github.io/images/2021/3.png" alt="04">&lt;/p>
&lt;h2 id="ref">REF&lt;/h2>
&lt;p>&lt;a href="https://docs.gitlab.com/ee/ci/">https://docs.gitlab.com/ee/ci/&lt;/a>&lt;br>
&lt;a href="https://twblog.hongjianching.com/2020/05/09/GitLab-CI-CD-use-cache-and-artifacts/">https://twblog.hongjianching.com/2020/05/09/GitLab-CI-CD-use-cache-and-artifacts/&lt;/a>&lt;br>
&lt;a href="https://www.jianshu.com/p/b835a4d5bb4e">https://www.jianshu.com/p/b835a4d5bb4e&lt;/a>&lt;br>
&lt;a href="https://docs.gitlab.com/ee/ci/caching/">https://docs.gitlab.com/ee/ci/caching/&lt;/a>&lt;br>
&lt;a href="https://docs.gitlab.com/ee/ci/variables/README.html">https://docs.gitlab.com/ee/ci/variables/README.html&lt;/a>&lt;/p></description></item><item><title>Git操作大全简洁版</title><link>https://b9aobj.github.io/post/zh-cn/2015/2015-11-11-gitcao-zuo-da-quan-jian-ji-ban/</link><pubDate>Wed, 11 Nov 2015 11:45:49 +0800</pubDate><guid>https://b9aobj.github.io/post/zh-cn/2015/2015-11-11-gitcao-zuo-da-quan-jian-ji-ban/</guid><description>
&lt;p>&lt;b> &lt;em>HEAD&lt;/em> 表示当前分支&lt;/p>
&lt;p>&lt;em>master&lt;/em>表示只想提交&lt;br>
&lt;em>Origin&lt;/em> 表示远程库 &lt;/b>&lt;/p>
&lt;h5 id="1git-init">1、&lt;code>git init&lt;/code>&lt;/h5>
&lt;p>创建git仓库&lt;/p>
&lt;h5 id="2git-add-xxxx">2、&lt;code>git add xxx.x&lt;/code>&lt;/h5>
&lt;p>把文件添加到仓库&lt;/p>
&lt;h5 id="3git-commit--m-">3、&lt;code>git commit -m “…”&lt;/code>&lt;/h5>
&lt;p>把文件提交到仓库&lt;/p>
&lt;h5 id="4git-status">4、&lt;code>git status&lt;/code>&lt;/h5>
&lt;p>查看仓库当前的状态&lt;/p>
&lt;h5 id="5git-diff">5、&lt;code>git diff&lt;/code>&lt;/h5>
&lt;p>查看difference&lt;/p>
&lt;h5 id="6git-log">6、&lt;code>git log&lt;/code>&lt;/h5>
&lt;p>显示从最近到最远的提交日志‘&lt;br>
&lt;code>git log —pretty=oneline&lt;/code>&lt;br>
省略显示&lt;/p>
&lt;h5 id="7git-reset---hard-head">7、&lt;code>git reset --hard HEAD^&lt;/code>&lt;/h5>
&lt;p>会退到上一个版本&lt;/p>
&lt;h5 id="8git-reflog">8、&lt;code>git reflog&lt;/code>&lt;/h5>
&lt;p>查看你的命令&lt;/p>
&lt;h5 id="9git的版本库里存了很多东西其中最重要的就是称为stage或者叫index的暂存区还有git为我们自动创建的第一个分支master以及指向master的一个指针叫head">9、Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。&lt;/h5>
&lt;p>&lt;img src="https://b9aobj.github.io/img/2015/10/gitTree.jpeg" alt="">&lt;br>
前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：&lt;br>
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；&lt;br>
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。&lt;br>
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。&lt;/p>
&lt;h5 id="10modified-被修改">10、modified 被修改；&lt;/h5>
&lt;p>untracked：没添加过；&lt;/p>
&lt;h5 id="11第一次修改---git-add---第二次修改---git-commit">11、第一次修改 -&amp;gt; &lt;code>git add&lt;/code> -&amp;gt; 第二次修改 -&amp;gt; &lt;code>git commit&lt;/code>&lt;/h5>
&lt;p>你看，我们前面讲了，Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。 &lt;br>
提交后，用&lt;code>git diff HEAD -- readme.txt&lt;/code>命令可以查看工作区和版本库里面最新版本的区别：&lt;br>
最终：第一次修改 -&amp;gt; &lt;code>git add&lt;/code> -&amp;gt; 第二次修改 -&amp;gt; &lt;code>git add&lt;/code> -&amp;gt; &lt;code>git commit&lt;/code>&lt;/p>
&lt;h5 id="12git-checkout----file">12、&lt;code>git checkout -- file&lt;/code>&lt;/h5>
&lt;p>撤销文件在工作区的修改，有两种情况：&lt;br>
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；&lt;br>
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。&lt;br>
总之，就是让这个文件回到最近一次git commit或git add时的状态。&lt;/p>
&lt;h5 id="13git-add到暂存区还没commit要撤销">13、&lt;code>git add&lt;/code>到暂存区还没commit,要撤销：&lt;/h5>
&lt;h5 id="14-git-reset命令既可以回退版本也可以把暂存区的修改回退到工作区暂存区干净了">14、 git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。暂存区干净了；&lt;/h5>
&lt;p>丢弃工作区的修改：&lt;code>git checkout -- xxx.x&lt;/code>&lt;br>
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。&lt;br>
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。&lt;br>
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。&lt;/p>
&lt;h5 id="15git-rm-file">15、&lt;code>git rm file&lt;/code>&lt;/h5>
&lt;p>删除文件&lt;/p>
&lt;h5 id="16git-push">16、&lt;code>git push&lt;/code>&lt;/h5>
&lt;p>把本地库的内容推送到远程&lt;br>
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。&lt;/p>
&lt;h6 id="小结">&lt;em>小结&lt;/em>&lt;/h6>
&lt;p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；&lt;br>
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；&lt;br>
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；&lt;br>
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！&lt;/p>
&lt;h5 id="17git-clone">17、&lt;code>git clone&lt;/code>&lt;/h5>
&lt;p>克隆一个本地库&lt;/p>
&lt;h5 id="18创建分支然后切换到分区">18、创建分支，然后切换到分区&lt;/h5>
&lt;p>~$ git checkout -b dev
~Switched to a new branch 'dev'&lt;/p>
&lt;p>&lt;code>git checkout&lt;/code>命令加上&lt;code>-b&lt;/code>参数表示创建并切换，相当于以下两条命令：&lt;br>
~$ git branch dev&lt;br>
~$ git checkout dev&lt;br>
~Swtiched to a new branch 'dev'&lt;/p>
&lt;h5 id="19git-branch">19、&lt;code>git branch&lt;/code>&lt;/h5>
&lt;p>查看当前分支，列出所有分支，当前分支前面带&lt;code>*&lt;/code>号&lt;/p>
&lt;h5 id="20合并分支">20、{合并}分支&lt;/h5>
&lt;p>切换回主线master&lt;br>
~$ git checkout master&lt;br>
~Switched to branch 'master'&lt;br>
合并分支&lt;br>
~$ git merge dev&lt;br>
~Updating xxxxxxxx&lt;br>
~Fast-forward&lt;br>
~ .....&lt;br>
~ 1 file changed, 1 insertion(+)&lt;br>
合并完成后，可以删除dev分支&lt;br>
~$ git branch -d dev&lt;/p>
&lt;h6 id="小结-1">&lt;em>小结&lt;/em>&lt;/h6>
&lt;p>Git鼓励大量使用分支：&lt;br>
查看分支：&lt;code>git branch&lt;/code>&lt;br>
创建分支：&lt;code>git branch &amp;lt;name&amp;gt;&lt;/code>&lt;br>
切换分支：&lt;code>git checkout &amp;lt;name&amp;gt;&lt;/code>&lt;br>
创建+切换分支：&lt;code>git checkout -b &amp;lt;name&amp;gt;&lt;/code>&lt;br>
合并某分支到当前分支：&lt;code>git merge &amp;lt;name&amp;gt;&lt;/code>&lt;br>
删除分支：&lt;code>git branch -d &amp;lt;name&amp;gt;&lt;/code>&lt;/p>
&lt;h5 id="21解决冲突">21、&lt;strong>解决冲突&lt;/strong>&lt;/h5>
&lt;p>&lt;code>git status&lt;/code>可以告诉我们冲突的文件&lt;br>
Git用*&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;*，*=======*，*&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;*标记出不同分支的内容&lt;br>
先手动修改冲突，再提交合并。&lt;/p>
&lt;p>用带参数的&lt;strong>git log&lt;/strong>看到分支的合并情况&lt;br>
&lt;code>git log --graph --pretty=oneline --abbrev-commit&lt;/code>&lt;/p>
&lt;h5 id="22git-merge---no-ff--m-merge-with-no-ff-dev">22、&lt;code>git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; dev&lt;/code>&lt;/h5>
&lt;p>不使用&lt;strong>fast forward&lt;/strong>模式分支合并，合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。&lt;/p>
&lt;h5 id="23分支策略">23、&lt;strong>分支策略&lt;/strong>&lt;/h5>
&lt;p>在实际开发中，我们应该按照几个基本原则进行分支管理：&lt;br>
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；&lt;br>
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；&lt;br>
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。&lt;br>
所以，团队合作的分支看起来就像这样：&lt;br>
&lt;img src="https://b9aobj.github.io/img/2015/10/gitBranch.png" alt="">&lt;/p>
&lt;h5 id="24bug分支">24、Bug分支&lt;/h5>
&lt;p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。&lt;/p>
&lt;p>修复bug时，需创建分支来修复它，但现在手上的工作还没做完不可提交的状态，可以用&lt;strong>stash&lt;/strong>功能，把工作现场“储藏”起来，等以后回复现场后继续工作；&lt;br>
~$ git stash&lt;br>
~Saved working directory and index state WIP on dev: 6224937 add merge&lt;br>
~HEAD is now at 6224937 add merge&lt;/p>
&lt;p>现在切换值需要修复的分支上创建临时分支：&lt;br>
~$ git check master&lt;br>
~$ git checkout -b issue-101&lt;br>
修复提交&lt;br>
~$ git add xxx.x&lt;br>
~$ git commit -m &amp;quot;fix bug 101&amp;quot;&lt;br>
修复完成后，切换到master分支，完成合并，删除bug分支：&lt;br>
~$ git checkout master&lt;br>
~$ git merge --no-ff -m &amp;quot;merged bug fix 101&amp;quot; issue-101&lt;br>
~$ git branch -d issue-101&lt;/p>
&lt;p>返回原工作区&lt;br>
~$ git checkout dev&lt;br>
~$ git status&lt;br>
此时工作区是干净的，需要我们找回工作现场：&lt;br>
~$ git stash list&lt;br>
需要恢复一下，有两个办法：&lt;br>
一是用&lt;strong>git stash apply&lt;/strong>恢复，但是恢复后，stash内容并不删除，你需要用&lt;strong>git stash drop&lt;/strong>来删除；&lt;br>
另一种方式是用&lt;strong>git stash pop&lt;/strong>，恢复的同时把stash内容也删了;&lt;br>
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：&lt;br>
~$ git stash apply stash@{0}&lt;/p>
&lt;h5 id="25feature分支">25、Feature分支&lt;/h5>
&lt;p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。&lt;br>
开发一个新feature，最好新建一个分支；&lt;br>
如果要丢弃一个没有被合并过的分支，可以通过git branch -D &lt;name>强行删除。&lt;/p>
&lt;h5 id="26多人协作">26、&lt;strong>多人协作&lt;/strong>&lt;/h5>
&lt;p>要查看远程库的信息，用&lt;code>git remote&lt;/code>&lt;br>
或者用&lt;code>git remote -v&lt;/code>显示更详细的信息&lt;br>
哪些分支需要推送，哪些不需要呢？&lt;/p>
&lt;pre>&lt;code>• master分支是主分支，因此要时刻与远程同步；
• dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
• bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
• feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
&lt;/code>&lt;/pre>
&lt;p>抓取分支。&lt;/p>
&lt;p>&lt;strong>多人协作&lt;/strong>的工作模式通常是这样：&lt;/p>
&lt;pre>&lt;code>1. 首先，可以试图用git push origin branch-name推送自己的修改；
2. 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
3. 如果合并有冲突，则解决冲突，并在本地提交；
4. 没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
&lt;/code>&lt;/pre>
&lt;p>如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。&lt;/p>
&lt;p>&lt;strong>小结&lt;/strong>&lt;br>
• 查看远程库信息，使用git remote -v；&lt;/p>
&lt;pre>&lt;code>• 本地新建的分支如果不推送到远程，对其他人就是不可见的；
• 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
• 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
• 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
• 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
&lt;/code>&lt;/pre>
&lt;h5 id="27创建标签">27、&lt;em>创建标签&lt;/em>&lt;/h5>
&lt;p>&lt;code>git tag &amp;lt;name&amp;gt;&lt;/code>&lt;br>
如果忘了打标签，可以查历史提交的commit id，&lt;br>
&lt;code>git tag &amp;lt;name&amp;gt; commit_id&lt;/code>&lt;br>
查看标签信息：&lt;br>
&lt;code>git show &amp;lt;tagName&amp;gt;&lt;/code>&lt;br>
创建带有说明的标签，用&lt;code>-a&lt;/code>指定标签名，&lt;code>-m&lt;/code>指定说明文字：&lt;br>
&lt;code>git tag -a v0.1 -m &amp;quot;version 0.1 released&amp;quot; 3628164&lt;/code>&lt;br>
删除标签：&lt;br>
&lt;code>git tag -d v0.1&lt;/code>&lt;br>
推送某个标签到远程，用命令&lt;code>git push origin &amp;lt;tagname&amp;gt;&lt;/code>:&lt;br>
或者一次性推送全部尚未推送的标签：&lt;code>git push origin --tags&lt;/code>&lt;/p>
&lt;p>删除远程标签：&lt;br>
先从本地删除：&lt;code>git tag -d v0.9&lt;/code>&lt;br>
再远程删除：&lt;code>git push origin :refs/tags/v0.9&lt;/code>&lt;/p>
&lt;p>&lt;strong>小结&lt;/strong>&lt;br>
• 命令git push origin &lt;tagname>可以推送一个本地标签；&lt;/p>
&lt;pre>&lt;code>• 命令git push origin --tags可以推送全部未推送过的本地标签；
• 命令git tag -d &amp;lt;tagname&amp;gt;可以删除一个本地标签；
• 命令git push origin :refs/tags/&amp;lt;tagname&amp;gt;可以删除一个远程标签。
&lt;/code>&lt;/pre></description></item></channel></rss>